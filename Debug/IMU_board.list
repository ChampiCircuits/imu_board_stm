
IMU_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800a2ac  0800a2ac  0000b2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a880  0800a880  0000c0f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a880  0800a880  0000b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a888  0800a888  0000c0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a888  0800a888  0000b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a88c  0800a88c  0000b88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  0800a890  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200000f8  0800a988  0000c0f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800a988  0000c520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027900  00000000  00000000  0000c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000371e  00000000  00000000  00033a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  00037148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001869  00000000  00000000  000390f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e9e  00000000  00000000  0003a961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d337  00000000  00000000  0005b7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb60f  00000000  00000000  00078b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144145  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090bc  00000000  00000000  00144188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0014d244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f8 	.word	0x200000f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a294 	.word	0x0800a294

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000fc 	.word	0x200000fc
 800021c:	0800a294 	.word	0x0800a294

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_write>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *ptr, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e00b      	b.n	80005da <_write+0x2a>
//        ITM_SendChar(*ptr++);
   	HAL_UART_Transmit(&huart2, ptr++, 1, HAL_MAX_DELAY);
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	1c4b      	adds	r3, r1, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005cc:	2201      	movs	r2, #1
 80005ce:	4807      	ldr	r0, [pc, #28]	@ (80005ec <_write+0x3c>)
 80005d0:	f007 f962 	bl	8007898 <HAL_UART_Transmit>
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	3301      	adds	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	429a      	cmp	r2, r3
 80005e0:	dbef      	blt.n	80005c2 <_write+0x12>
   return len;
 80005e2:	687b      	ldr	r3, [r7, #4]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200001e4 	.word	0x200001e4

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f004 fb5e 	bl	8004cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f80e 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f89e 	bl	800073c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000600:	f000 f856 	bl	80006b0 <MX_FDCAN1_Init>
  MX_MEMS_Init();
 8000604:	f007 ffc4 	bl	8008590 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello!\n");
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <main+0x24>)
 800060a:	f008 fdf5 	bl	80091f8 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 800060e:	f007 ffc5 	bl	800859c <MX_MEMS_Process>
 8000612:	e7fc      	b.n	800060e <main+0x1e>
 8000614:	0800a2ac 	.word	0x0800a2ac

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2238      	movs	r2, #56	@ 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f008 fefa 	bl	8009420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800063a:	2000      	movs	r0, #0
 800063c:	f005 f980 	bl	8005940 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2340      	movs	r3, #64	@ 0x40
 800064c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800065a:	2355      	movs	r3, #85	@ 0x55
 800065c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	4618      	mov	r0, r3
 8000670:	f005 fa1a 	bl	8005aa8 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800067a:	f000 f8bb 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f005 fd18 	bl	80060cc <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a2:	f000 f8a7 	bl	80007f4 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006b6:	4a20      	ldr	r2, [pc, #128]	@ (8000738 <MX_FDCAN1_Init+0x88>)
 80006b8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006da:	2200      	movs	r2, #0
 80006dc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006e0:	2210      	movs	r2, #16
 80006e2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006f0:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 80006fe:	2201      	movs	r2, #1
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 8000704:	2201      	movs	r2, #1
 8000706:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 800070a:	2201      	movs	r2, #1
 800070c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 8000710:	2200      	movs	r2, #0
 8000712:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 8000716:	2200      	movs	r2, #0
 8000718:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 800071c:	2200      	movs	r2, #0
 800071e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_FDCAN1_Init+0x84>)
 8000722:	f004 fcc9 	bl	80050b8 <HAL_FDCAN_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800072c:	f000 f862 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000114 	.word	0x20000114
 8000738:	40006400 	.word	0x40006400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <MX_GPIO_Init+0xb4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a26      	ldr	r2, [pc, #152]	@ (80007f0 <MX_GPIO_Init+0xb4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <MX_GPIO_Init+0xb4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_GPIO_Init+0xb4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a20      	ldr	r2, [pc, #128]	@ (80007f0 <MX_GPIO_Init+0xb4>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <MX_GPIO_Init+0xb4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078a:	f005 f8c1 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800078e:	2301      	movs	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000792:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a6:	f004 fe37 	bl	8005418 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c4:	f004 fe28 	bl	8005418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	2006      	movs	r0, #6
 80007ce:	f004 fbde 	bl	8004f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007d2:	2006      	movs	r0, #6
 80007d4:	f004 fbf5 	bl	8004fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	2017      	movs	r0, #23
 80007de:	f004 fbd6 	bl	8004f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007e2:	2017      	movs	r0, #23
 80007e4:	f004 fbed 	bl	8004fc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40021000 	.word	0x40021000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_MspInit+0x44>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080a:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6613      	str	r3, [r2, #96]	@ 0x60
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x44>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000828:	6593      	str	r3, [r2, #88]	@ 0x58
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000836:	f005 f927 	bl	8005a88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09a      	sub	sp, #104	@ 0x68
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	2244      	movs	r2, #68	@ 0x44
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f008 fdd9 	bl	8009420 <memset>
  if(hfdcan->Instance==FDCAN1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a20      	ldr	r2, [pc, #128]	@ (80008f4 <HAL_FDCAN_MspInit+0xac>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d139      	bne.n	80008ec <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800087c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800087e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000882:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4618      	mov	r0, r3
 800088a:	f005 fe3b 	bl	8006504 <HAL_RCCEx_PeriphCLKConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000894:	f7ff ffae 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <HAL_FDCAN_MspInit+0xb0>)
 800089a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089c:	4a16      	ldr	r2, [pc, #88]	@ (80008f8 <HAL_FDCAN_MspInit+0xb0>)
 800089e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <HAL_FDCAN_MspInit+0xb0>)
 80008a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_FDCAN_MspInit+0xb0>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b4:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <HAL_FDCAN_MspInit+0xb0>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_FDCAN_MspInit+0xb0>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008c8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008cc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008da:	2309      	movs	r3, #9
 80008dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e8:	f004 fd96 	bl	8005418 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	3768      	adds	r7, #104	@ 0x68
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40006400 	.word	0x40006400
 80008f8:	40021000 	.word	0x40021000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <NMI_Handler+0x4>

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <MemManage_Handler+0x4>

08000914 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <UsageFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f004 fa01 	bl	8004d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <EXTI0_IRQHandler+0x10>)
 8000962:	f004 fb79 	bl	8005058 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000074 	.word	0x20000074

08000970 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_7);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <EXTI9_5_IRQHandler+0x10>)
 8000976:	f004 fb6f 	bl	8005058 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000060 	.word	0x20000060

08000984 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <BSP_SPI1_Init+0x54>)
 8000990:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <BSP_SPI1_Init+0x58>)
 8000992:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <BSP_SPI1_Init+0x5c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	4911      	ldr	r1, [pc, #68]	@ (80009e0 <BSP_SPI1_Init+0x5c>)
 800099c:	600a      	str	r2, [r1, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d114      	bne.n	80009cc <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <BSP_SPI1_Init+0x54>)
 80009a4:	f006 fd53 	bl	800744e <HAL_SPI_GetState>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10e      	bne.n	80009cc <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80009ae:	480a      	ldr	r0, [pc, #40]	@ (80009d8 <BSP_SPI1_Init+0x54>)
 80009b0:	f000 f8c2 	bl	8000b38 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d108      	bne.n	80009cc <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80009ba:	4807      	ldr	r0, [pc, #28]	@ (80009d8 <BSP_SPI1_Init+0x54>)
 80009bc:	f000 f87a 	bl	8000ab4 <MX_SPI1_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80009c6:	f06f 0307 	mvn.w	r3, #7
 80009ca:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000178 	.word	0x20000178
 80009dc:	40013000 	.word	0x40013000
 80009e0:	200001dc 	.word	0x200001dc

080009e4 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80009ea:	f06f 0307 	mvn.w	r3, #7
 80009ee:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <BSP_SPI1_DeInit+0x48>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d013      	beq.n	8000a20 <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <BSP_SPI1_DeInit+0x48>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	4a0b      	ldr	r2, [pc, #44]	@ (8000a2c <BSP_SPI1_DeInit+0x48>)
 8000a00:	6013      	str	r3, [r2, #0]
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <BSP_SPI1_DeInit+0x48>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10a      	bne.n	8000a20 <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <BSP_SPI1_DeInit+0x4c>)
 8000a0c:	f000 f8e8 	bl	8000be0 <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <BSP_SPI1_DeInit+0x4c>)
 8000a12:	f006 f812 	bl	8006a3a <HAL_SPI_DeInit>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d101      	bne.n	8000a20 <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001dc 	.word	0x200001dc
 8000a30:	20000178 	.word	0x20000178

08000a34 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a44:	887a      	ldrh	r2, [r7, #2]
 8000a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <BSP_SPI1_Send+0x34>)
 8000a4e:	f006 f830 	bl	8006ab2 <HAL_SPI_Transmit>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000a58:	f06f 0305 	mvn.w	r3, #5
 8000a5c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000178 	.word	0x20000178

08000a6c <BSP_SPI1_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a7c:	887a      	ldrh	r2, [r7, #2]
 8000a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <BSP_SPI1_Recv+0x34>)
 8000a86:	f006 f989 	bl	8006d9c <HAL_SPI_Receive>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d002      	beq.n	8000a96 <BSP_SPI1_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000a90:	f06f 0305 	mvn.w	r3, #5
 8000a94:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000178 	.word	0x20000178

08000aa4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000aa8:	f004 f968 	bl	8004d7c <HAL_GetTick>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <MX_SPI1_Init+0x80>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ada:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2202      	movs	r2, #2
 8000ae0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aee:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2230      	movs	r2, #48	@ 0x30
 8000af4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2207      	movs	r2, #7
 8000b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f005 fee2 	bl	80068e4 <HAL_SPI_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40013000 	.word	0x40013000

08000b38 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b40:	4b25      	ldr	r3, [pc, #148]	@ (8000bd8 <SPI1_MspInit+0xa0>)
 8000b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b44:	4a24      	ldr	r2, [pc, #144]	@ (8000bd8 <SPI1_MspInit+0xa0>)
 8000b46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <SPI1_MspInit+0xa0>)
 8000b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <SPI1_MspInit+0xa0>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd8 <SPI1_MspInit+0xa0>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b64:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <SPI1_MspInit+0xa0>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000b70:	2308      	movs	r3, #8
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000b80:	2305      	movs	r3, #5
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <SPI1_MspInit+0xa4>)
 8000b8c:	f004 fc44 	bl	8005418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000b90:	2310      	movs	r3, #16
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <SPI1_MspInit+0xa4>)
 8000bac:	f004 fc34 	bl	8005418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <SPI1_MspInit+0xa4>)
 8000bcc:	f004 fc24 	bl	8005418 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	@ 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000400 	.word	0x48000400

08000be0 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <SPI1_MspDeInit+0x34>)
 8000bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bec:	4a09      	ldr	r2, [pc, #36]	@ (8000c14 <SPI1_MspDeInit+0x34>)
 8000bee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bf2:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <SPI1_MspDeInit+0x38>)
 8000bf8:	f004 fd90 	bl	800571c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <SPI1_MspDeInit+0x38>)
 8000c00:	f004 fd8c 	bl	800571c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8000c04:	2120      	movs	r1, #32
 8000c06:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <SPI1_MspDeInit+0x38>)
 8000c08:	f004 fd88 	bl	800571c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000400 	.word	0x48000400

08000c1c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e00a      	b.n	8000c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c2e:	f3af 8000 	nop.w
 8000c32:	4601      	mov	r1, r0
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	b2ca      	uxtb	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dbf0      	blt.n	8000c2e <_read+0x12>
  }

  return len;
 8000c4c:	687b      	ldr	r3, [r7, #4]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_isatty>:

int _isatty(int file)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc8:	4a14      	ldr	r2, [pc, #80]	@ (8000d1c <_sbrk+0x5c>)
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <_sbrk+0x60>)
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <_sbrk+0x64>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <_sbrk+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d207      	bcs.n	8000d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf0:	f008 fbe4 	bl	80094bc <__errno>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cfe:	e009      	b.n	8000d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d06:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <_sbrk+0x64>)
 8000d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d12:	68fb      	ldr	r3, [r7, #12]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20008000 	.word	0x20008000
 8000d20:	00000400 	.word	0x00000400
 8000d24:	200001e0 	.word	0x200001e0
 8000d28:	20000520 	.word	0x20000520

08000d2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <SystemInit+0x20>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d36:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <SystemInit+0x20>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d50:	480d      	ldr	r0, [pc, #52]	@ (8000d88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d54:	f7ff ffea 	bl	8000d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	@ (8000d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d94 <LoopForever+0xe>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	@ (8000d9c <LoopForever+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f008 fba3 	bl	80094c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d82:	f7ff fc35 	bl	80005f0 <main>

08000d86 <LoopForever>:

LoopForever:
    b LoopForever
 8000d86:	e7fe      	b.n	8000d86 <LoopForever>
  ldr   r0, =_estack
 8000d88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8000d94:	0800a890 	.word	0x0800a890
  ldr r2, =_sbss
 8000d98:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8000d9c:	20000520 	.word	0x20000520

08000da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_2_IRQHandler>
	...

08000da4 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d103      	bne.n	8000dc0 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	e051      	b.n	8000e64 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	7b1a      	ldrb	r2, [r3, #12]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	695a      	ldr	r2, [r3, #20]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	699a      	ldr	r2, [r3, #24]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8000e70 <LSM6DSO_RegisterBusIO+0xcc>)
 8000dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <LSM6DSO_RegisterBusIO+0xd0>)
 8000e02:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e020      	b.n	8000e64 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4798      	blx	r3
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e016      	b.n	8000e64 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d112      	bne.n	8000e64 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10d      	bne.n	8000e64 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8000e4c:	7afb      	ldrb	r3, [r7, #11]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2112      	movs	r1, #18
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 ff5d 	bl	8001d12 <LSM6DSO_Write_Reg>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e62:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000e64:	68fb      	ldr	r3, [r7, #12]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	080026c9 	.word	0x080026c9
 8000e74:	080026ff 	.word	0x080026ff

08000e78 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d00b      	beq.n	8000ea0 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3320      	adds	r3, #32
 8000e8c:	2180      	movs	r1, #128	@ 0x80
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 f90e 	bl	80030b0 <lsm6dso_i3c_disable_set>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e9e:	e060      	b.n	8000f62 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3320      	adds	r3, #32
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 f8dc 	bl	8003064 <lsm6dso_auto_increment_set>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eb6:	e054      	b.n	8000f62 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3320      	adds	r3, #32
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 ffec 	bl	8002e9c <lsm6dso_block_data_update_set>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ece:	e048      	b.n	8000f62 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3320      	adds	r3, #32
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 f958 	bl	800318c <lsm6dso_fifo_mode_set>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee6:	e03c      	b.n	8000f62 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2204      	movs	r2, #4
 8000eec:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3320      	adds	r3, #32
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fcaa 	bl	8002850 <lsm6dso_xl_data_rate_set>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f06:	e02c      	b.n	8000f62 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3320      	adds	r3, #32
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fc40 	bl	8002794 <lsm6dso_xl_full_scale_set>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d002      	beq.n	8000f20 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1e:	e020      	b.n	8000f62 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2204      	movs	r2, #4
 8000f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3320      	adds	r3, #32
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fe58 	bl	8002be4 <lsm6dso_gy_data_rate_set>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f3e:	e010      	b.n	8000f62 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3320      	adds	r3, #32
 8000f44:	2106      	movs	r1, #6
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fde4 	bl	8002b14 <lsm6dso_gy_full_scale_set>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f56:	e004      	b.n	8000f62 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f888 	bl	8001088 <LSM6DSO_ACC_Disable>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f82:	e015      	b.n	8000fb0 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 fc2e 	bl	80017e6 <LSM6DSO_GYRO_Disable>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f94:	e00c      	b.n	8000fb0 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3320      	adds	r3, #32
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 f83a 	bl	8003042 <lsm6dso_device_id_get>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd8:	e000      	b.n	8000fdc <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800100c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2210      	movs	r2, #16
 8001012:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	@ (800103c <LSM6DSO_GetCapabilities+0x58>)
 800101e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	4a06      	ldr	r2, [pc, #24]	@ (800103c <LSM6DSO_GetCapabilities+0x58>)
 8001024:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	45d02000 	.word	0x45d02000

08001040 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e014      	b.n	8001080 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f103 0220 	add.w	r2, r3, #32
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001062:	4619      	mov	r1, r3
 8001064:	4610      	mov	r0, r2
 8001066:	f001 fbf3 	bl	8002850 <lsm6dso_xl_data_rate_set>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001074:	e004      	b.n	8001080 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e01f      	b.n	80010de <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f103 0220 	add.w	r2, r3, #32
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3333      	adds	r3, #51	@ 0x33
 80010a8:	4619      	mov	r1, r3
 80010aa:	4610      	mov	r0, r2
 80010ac:	f001 fcca 	bl	8002a44 <lsm6dso_xl_data_rate_get>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ba:	e010      	b.n	80010de <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3320      	adds	r3, #32
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 fbc4 	bl	8002850 <lsm6dso_xl_data_rate_set>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d2:	e004      	b.n	80010de <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3320      	adds	r3, #32
 80010fa:	f107 020b 	add.w	r2, r7, #11
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fb6d 	bl	80027e0 <lsm6dso_xl_full_scale_get>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001110:	e023      	b.n	800115a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d81b      	bhi.n	8001150 <LSM6DSO_ACC_GetSensitivity+0x68>
 8001118:	a201      	add	r2, pc, #4	@ (adr r2, 8001120 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800111a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111e:	bf00      	nop
 8001120:	08001131 	.word	0x08001131
 8001124:	08001149 	.word	0x08001149
 8001128:	08001139 	.word	0x08001139
 800112c:	08001141 	.word	0x08001141
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	4a0c      	ldr	r2, [pc, #48]	@ (8001164 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8001134:	601a      	str	r2, [r3, #0]
      break;
 8001136:	e00f      	b.n	8001158 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <LSM6DSO_ACC_GetSensitivity+0x80>)
 800113c:	601a      	str	r2, [r3, #0]
      break;
 800113e:	e00b      	b.n	8001158 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <LSM6DSO_ACC_GetSensitivity+0x84>)
 8001144:	601a      	str	r2, [r3, #0]
      break;
 8001146:	e007      	b.n	8001158 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <LSM6DSO_ACC_GetSensitivity+0x88>)
 800114c:	601a      	str	r2, [r3, #0]
      break;
 800114e:	e003      	b.n	8001158 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001154:	60fb      	str	r3, [r7, #12]
      break;
 8001156:	bf00      	nop
  }

  return ret;
 8001158:	68fb      	ldr	r3, [r7, #12]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	3d79db23 	.word	0x3d79db23
 8001168:	3df9db23 	.word	0x3df9db23
 800116c:	3e79db23 	.word	0x3e79db23
 8001170:	3ef9db23 	.word	0x3ef9db23

08001174 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3320      	adds	r3, #32
 8001186:	f107 020b 	add.w	r2, r7, #11
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fc59 	bl	8002a44 <lsm6dso_xl_data_rate_get>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800119c:	e054      	b.n	8001248 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	2b0b      	cmp	r3, #11
 80011a2:	d84c      	bhi.n	800123e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80011a4:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	080011dd 	.word	0x080011dd
 80011b0:	080011ef 	.word	0x080011ef
 80011b4:	080011f7 	.word	0x080011f7
 80011b8:	080011ff 	.word	0x080011ff
 80011bc:	08001207 	.word	0x08001207
 80011c0:	0800120f 	.word	0x0800120f
 80011c4:	08001217 	.word	0x08001217
 80011c8:	0800121f 	.word	0x0800121f
 80011cc:	08001227 	.word	0x08001227
 80011d0:	0800122f 	.word	0x0800122f
 80011d4:	08001237 	.word	0x08001237
 80011d8:	080011e7 	.word	0x080011e7
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
      break;
 80011e4:	e02f      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	4a19      	ldr	r2, [pc, #100]	@ (8001250 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80011ea:	601a      	str	r2, [r3, #0]
      break;
 80011ec:	e02b      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	4a18      	ldr	r2, [pc, #96]	@ (8001254 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80011f2:	601a      	str	r2, [r3, #0]
      break;
 80011f4:	e027      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80011fa:	601a      	str	r2, [r3, #0]
      break;
 80011fc:	e023      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	4a16      	ldr	r2, [pc, #88]	@ (800125c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8001202:	601a      	str	r2, [r3, #0]
      break;
 8001204:	e01f      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	4a15      	ldr	r2, [pc, #84]	@ (8001260 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800120a:	601a      	str	r2, [r3, #0]
      break;
 800120c:	e01b      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	4a14      	ldr	r2, [pc, #80]	@ (8001264 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8001212:	601a      	str	r2, [r3, #0]
      break;
 8001214:	e017      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800121a:	601a      	str	r2, [r3, #0]
      break;
 800121c:	e013      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8001222:	601a      	str	r2, [r3, #0]
      break;
 8001224:	e00f      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	4a11      	ldr	r2, [pc, #68]	@ (8001270 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800122a:	601a      	str	r2, [r3, #0]
      break;
 800122c:	e00b      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	4a10      	ldr	r2, [pc, #64]	@ (8001274 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8001232:	601a      	str	r2, [r3, #0]
      break;
 8001234:	e007      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	4a0f      	ldr	r2, [pc, #60]	@ (8001278 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 800123a:	601a      	str	r2, [r3, #0]
      break;
 800123c:	e003      	b.n	8001246 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001242:	60fb      	str	r3, [r7, #12]
      break;
 8001244:	bf00      	nop
  }

  return ret;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	3fcccccd 	.word	0x3fcccccd
 8001254:	41480000 	.word	0x41480000
 8001258:	41d00000 	.word	0x41d00000
 800125c:	42500000 	.word	0x42500000
 8001260:	42d00000 	.word	0x42d00000
 8001264:	43500000 	.word	0x43500000
 8001268:	43d08000 	.word	0x43d08000
 800126c:	44504000 	.word	0x44504000
 8001270:	44d06000 	.word	0x44d06000
 8001274:	45505000 	.word	0x45505000
 8001278:	45d05800 	.word	0x45d05800

0800127c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8001288:	2100      	movs	r1, #0
 800128a:	ed97 0a00 	vldr	s0, [r7]
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f806 	bl	80012a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	@ 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012ac:	460b      	mov	r3, r1
 80012ae:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	f000 80ea 	beq.w	8001494 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	f300 8163 	bgt.w	800158c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d074      	beq.n	80013b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80012ce:	e15d      	b.n	800158c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f103 0020 	add.w	r0, r3, #32
 80012d6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80012da:	2301      	movs	r3, #1
 80012dc:	2114      	movs	r1, #20
 80012de:	f001 fa29 	bl	8002734 <lsm6dso_read_reg>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ec:	e16c      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80012ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d025      	beq.n	8001348 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3320      	adds	r3, #32
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fa9f 	bl	8002850 <lsm6dso_xl_data_rate_set>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8001318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800131c:	e154      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800131e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001322:	f36f 13c7 	bfc	r3, #7, #1
 8001326:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f103 0020 	add.w	r0, r3, #32
 8001330:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001334:	2301      	movs	r3, #1
 8001336:	2114      	movs	r1, #20
 8001338:	f001 fa14 	bl	8002764 <lsm6dso_write_reg>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001346:	e13f      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f103 0020 	add.w	r0, r3, #32
 800134e:	f107 0220 	add.w	r2, r7, #32
 8001352:	2301      	movs	r3, #1
 8001354:	2115      	movs	r1, #21
 8001356:	f001 f9ed 	bl	8002734 <lsm6dso_read_reg>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001364:	e130      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8001366:	f897 3020 	ldrb.w	r3, [r7, #32]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d014      	beq.n	800139e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8001374:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001378:	f36f 1304 	bfc	r3, #4, #1
 800137c:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f103 0020 	add.w	r0, r3, #32
 8001386:	f107 0220 	add.w	r2, r7, #32
 800138a:	2301      	movs	r3, #1
 800138c:	2115      	movs	r1, #21
 800138e:	f001 f9e9 	bl	8002764 <lsm6dso_write_reg>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8001398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800139c:	e114      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800139e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013a2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80013a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	d400      	bmi.n	80013b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80013b0:	e0f0      	b.n	8001594 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80013b2:	4b87      	ldr	r3, [pc, #540]	@ (80015d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013b6:	e0ed      	b.n	8001594 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f103 0020 	add.w	r0, r3, #32
 80013be:	f107 021c 	add.w	r2, r7, #28
 80013c2:	2301      	movs	r3, #1
 80013c4:	2114      	movs	r1, #20
 80013c6:	f001 f9b5 	bl	8002734 <lsm6dso_read_reg>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013d4:	e0f8      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80013d6:	7f3b      	ldrb	r3, [r7, #28]
 80013d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d023      	beq.n	800142a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10b      	bne.n	8001404 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3320      	adds	r3, #32
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fa2c 	bl	8002850 <lsm6dso_xl_data_rate_set>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001402:	e0e1      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8001404:	7f3b      	ldrb	r3, [r7, #28]
 8001406:	f36f 13c7 	bfc	r3, #7, #1
 800140a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f103 0020 	add.w	r0, r3, #32
 8001412:	f107 021c 	add.w	r2, r7, #28
 8001416:	2301      	movs	r3, #1
 8001418:	2114      	movs	r1, #20
 800141a:	f001 f9a3 	bl	8002764 <lsm6dso_write_reg>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8001424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001428:	e0ce      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f103 0020 	add.w	r0, r3, #32
 8001430:	f107 0218 	add.w	r2, r7, #24
 8001434:	2301      	movs	r3, #1
 8001436:	2115      	movs	r1, #21
 8001438:	f001 f97c 	bl	8002734 <lsm6dso_read_reg>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001446:	e0bf      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8001448:	7e3b      	ldrb	r3, [r7, #24]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d112      	bne.n	800147a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8001454:	7e3b      	ldrb	r3, [r7, #24]
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f103 0020 	add.w	r0, r3, #32
 8001462:	f107 0218 	add.w	r2, r7, #24
 8001466:	2301      	movs	r3, #1
 8001468:	2115      	movs	r1, #21
 800146a:	f001 f97b 	bl	8002764 <lsm6dso_write_reg>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001478:	e0a6      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800147a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800147e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80015d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8001482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148a:	dc00      	bgt.n	800148e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 800148c:	e082      	b.n	8001594 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800148e:	4b52      	ldr	r3, [pc, #328]	@ (80015d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001492:	e07f      	b.n	8001594 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f103 0020 	add.w	r0, r3, #32
 800149a:	f107 0210 	add.w	r2, r7, #16
 800149e:	2301      	movs	r3, #1
 80014a0:	2115      	movs	r1, #21
 80014a2:	f001 f947 	bl	8002734 <lsm6dso_read_reg>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014b0:	e08a      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80014b2:	7c3b      	ldrb	r3, [r7, #16]
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d012      	beq.n	80014e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 80014be:	7c3b      	ldrb	r3, [r7, #16]
 80014c0:	f36f 1304 	bfc	r3, #4, #1
 80014c4:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f103 0020 	add.w	r0, r3, #32
 80014cc:	f107 0210 	add.w	r2, r7, #16
 80014d0:	2301      	movs	r3, #1
 80014d2:	2115      	movs	r1, #21
 80014d4:	f001 f946 	bl	8002764 <lsm6dso_write_reg>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e2:	e071      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f979 	bl	80017e6 <LSM6DSO_GYRO_Disable>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014fe:	e063      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f103 0020 	add.w	r0, r3, #32
 8001506:	f107 0214 	add.w	r2, r7, #20
 800150a:	2301      	movs	r3, #1
 800150c:	2114      	movs	r1, #20
 800150e:	f001 f911 	bl	8002734 <lsm6dso_read_reg>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800151c:	e054      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800151e:	7d3b      	ldrb	r3, [r7, #20]
 8001520:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d123      	bne.n	8001572 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001530:	2b01      	cmp	r3, #1
 8001532:	d10b      	bne.n	800154c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3320      	adds	r3, #32
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f001 f988 	bl	8002850 <lsm6dso_xl_data_rate_set>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800154a:	e03d      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 800154c:	7d3b      	ldrb	r3, [r7, #20]
 800154e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001552:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f103 0020 	add.w	r0, r3, #32
 800155a:	f107 0214 	add.w	r2, r7, #20
 800155e:	2301      	movs	r3, #1
 8001560:	2114      	movs	r1, #20
 8001562:	f001 f8ff 	bl	8002764 <lsm6dso_write_reg>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 800156c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001570:	e02a      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8001572:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001576:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80015d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800157a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	dc00      	bgt.n	8001586 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8001584:	e006      	b.n	8001594 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800158a:	e003      	b.n	8001594 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8001592:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8001594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001596:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800159a:	d102      	bne.n	80015a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 800159c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015a0:	e012      	b.n	80015c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80015ac:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fe53 	bl	800225c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80015b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015b8:	e005      	b.n	80015c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80015ba:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 fee4 	bl	800238c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80015c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 80015c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3730      	adds	r7, #48	@ 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	41480000 	.word	0x41480000
 80015d4:	43500000 	.word	0x43500000
 80015d8:	43500000 	.word	0x43500000

080015dc <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3320      	adds	r3, #32
 80015ee:	f107 020b 	add.w	r2, r7, #11
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 f8f3 	bl	80027e0 <lsm6dso_xl_full_scale_get>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001604:	e023      	b.n	800164e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d81b      	bhi.n	8001644 <LSM6DSO_ACC_GetFullScale+0x68>
 800160c:	a201      	add	r2, pc, #4	@ (adr r2, 8001614 <LSM6DSO_ACC_GetFullScale+0x38>)
 800160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001612:	bf00      	nop
 8001614:	08001625 	.word	0x08001625
 8001618:	0800163d 	.word	0x0800163d
 800161c:	0800162d 	.word	0x0800162d
 8001620:	08001635 	.word	0x08001635
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2202      	movs	r2, #2
 8001628:	601a      	str	r2, [r3, #0]
      break;
 800162a:	e00f      	b.n	800164c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2204      	movs	r2, #4
 8001630:	601a      	str	r2, [r3, #0]
      break;
 8001632:	e00b      	b.n	800164c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2208      	movs	r2, #8
 8001638:	601a      	str	r2, [r3, #0]
      break;
 800163a:	e007      	b.n	800164c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2210      	movs	r2, #16
 8001640:	601a      	str	r2, [r3, #0]
      break;
 8001642:	e003      	b.n	800164c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001648:	60fb      	str	r3, [r7, #12]
      break;
 800164a:	bf00      	nop
  }

  return ret;
 800164c:	68fb      	ldr	r3, [r7, #12]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop

08001658 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2b02      	cmp	r3, #2
 8001666:	dd0b      	ble.n	8001680 <LSM6DSO_ACC_SetFullScale+0x28>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2b04      	cmp	r3, #4
 800166c:	dd06      	ble.n	800167c <LSM6DSO_ACC_SetFullScale+0x24>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b08      	cmp	r3, #8
 8001672:	dc01      	bgt.n	8001678 <LSM6DSO_ACC_SetFullScale+0x20>
 8001674:	2303      	movs	r3, #3
 8001676:	e004      	b.n	8001682 <LSM6DSO_ACC_SetFullScale+0x2a>
 8001678:	2301      	movs	r3, #1
 800167a:	e002      	b.n	8001682 <LSM6DSO_ACC_SetFullScale+0x2a>
 800167c:	2302      	movs	r3, #2
 800167e:	e000      	b.n	8001682 <LSM6DSO_ACC_SetFullScale+0x2a>
 8001680:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8001682:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3320      	adds	r3, #32
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f001 f881 	bl	8002794 <lsm6dso_xl_full_scale_set>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800169c:	e000      	b.n	80016a0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3320      	adds	r3, #32
 80016b6:	f107 0208 	add.w	r2, r7, #8
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 fc5b 	bl	8002f78 <lsm6dso_acceleration_raw_get>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016cc:	e00c      	b.n	80016e8 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80016ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80016d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80016de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3320      	adds	r3, #32
 8001704:	f107 0210 	add.w	r2, r7, #16
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fc34 	bl	8002f78 <lsm6dso_acceleration_raw_get>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800171a:	e03c      	b.n	8001796 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fce0 	bl	80010e8 <LSM6DSO_ACC_GetSensitivity>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001732:	e030      	b.n	8001796 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001734:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001740:	edd7 7a03 	vldr	s15, [r7, #12]
 8001744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174c:	ee17 2a90 	vmov	r2, s15
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001754:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001760:	edd7 7a03 	vldr	s15, [r7, #12]
 8001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176c:	ee17 2a90 	vmov	r2, s15
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001774:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001780:	edd7 7a03 	vldr	s15, [r7, #12]
 8001784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800178c:	ee17 2a90 	vmov	r2, s15
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e014      	b.n	80017de <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f103 0220 	add.w	r2, r3, #32
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f001 fa0e 	bl	8002be4 <lsm6dso_gy_data_rate_set>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017d2:	e004      	b.n	80017de <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e01f      	b.n	800183c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f103 0220 	add.w	r2, r3, #32
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3334      	adds	r3, #52	@ 0x34
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f001 fae5 	bl	8002dd8 <lsm6dso_gy_data_rate_get>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001818:	e010      	b.n	800183c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3320      	adds	r3, #32
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f001 f9df 	bl	8002be4 <lsm6dso_gy_data_rate_set>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001830:	e004      	b.n	800183c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3320      	adds	r3, #32
 8001856:	f107 020b 	add.w	r2, r7, #11
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f001 f97f 	bl	8002b60 <lsm6dso_gy_full_scale_get>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800186c:	e02d      	b.n	80018ca <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	2b06      	cmp	r3, #6
 8001872:	d825      	bhi.n	80018c0 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8001874:	a201      	add	r2, pc, #4	@ (adr r2, 800187c <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8001876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187a:	bf00      	nop
 800187c:	080018a1 	.word	0x080018a1
 8001880:	08001899 	.word	0x08001899
 8001884:	080018a9 	.word	0x080018a9
 8001888:	080018c1 	.word	0x080018c1
 800188c:	080018b1 	.word	0x080018b1
 8001890:	080018c1 	.word	0x080018c1
 8001894:	080018b9 	.word	0x080018b9
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 800189c:	601a      	str	r2, [r3, #0]
      break;
 800189e:	e013      	b.n	80018c8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80018a4:	601a      	str	r2, [r3, #0]
      break;
 80018a6:	e00f      	b.n	80018c8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80018ac:	601a      	str	r2, [r3, #0]
      break;
 80018ae:	e00b      	b.n	80018c8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80018b4:	601a      	str	r2, [r3, #0]
      break;
 80018b6:	e007      	b.n	80018c8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80018bc:	601a      	str	r2, [r3, #0]
      break;
 80018be:	e003      	b.n	80018c8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018c4:	60fb      	str	r3, [r7, #12]
      break;
 80018c6:	bf00      	nop
  }

  return ret;
 80018c8:	68fb      	ldr	r3, [r7, #12]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	408c0000 	.word	0x408c0000
 80018d8:	410c0000 	.word	0x410c0000
 80018dc:	418c0000 	.word	0x418c0000
 80018e0:	420c0000 	.word	0x420c0000
 80018e4:	428c0000 	.word	0x428c0000

080018e8 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3320      	adds	r3, #32
 80018fa:	f107 020b 	add.w	r2, r7, #11
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f001 fa69 	bl	8002dd8 <lsm6dso_gy_data_rate_get>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001910:	e04e      	b.n	80019b0 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8001912:	7afb      	ldrb	r3, [r7, #11]
 8001914:	2b0a      	cmp	r3, #10
 8001916:	d846      	bhi.n	80019a6 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8001918:	a201      	add	r2, pc, #4	@ (adr r2, 8001920 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	0800194d 	.word	0x0800194d
 8001924:	08001957 	.word	0x08001957
 8001928:	0800195f 	.word	0x0800195f
 800192c:	08001967 	.word	0x08001967
 8001930:	0800196f 	.word	0x0800196f
 8001934:	08001977 	.word	0x08001977
 8001938:	0800197f 	.word	0x0800197f
 800193c:	08001987 	.word	0x08001987
 8001940:	0800198f 	.word	0x0800198f
 8001944:	08001997 	.word	0x08001997
 8001948:	0800199f 	.word	0x0800199f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
      break;
 8001954:	e02b      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	4a17      	ldr	r2, [pc, #92]	@ (80019b8 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800195a:	601a      	str	r2, [r3, #0]
      break;
 800195c:	e027      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4a16      	ldr	r2, [pc, #88]	@ (80019bc <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8001962:	601a      	str	r2, [r3, #0]
      break;
 8001964:	e023      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4a15      	ldr	r2, [pc, #84]	@ (80019c0 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800196a:	601a      	str	r2, [r3, #0]
      break;
 800196c:	e01f      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8001972:	601a      	str	r2, [r3, #0]
      break;
 8001974:	e01b      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	4a13      	ldr	r2, [pc, #76]	@ (80019c8 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800197a:	601a      	str	r2, [r3, #0]
      break;
 800197c:	e017      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8001982:	601a      	str	r2, [r3, #0]
      break;
 8001984:	e013      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800198a:	601a      	str	r2, [r3, #0]
      break;
 800198c:	e00f      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8001992:	601a      	str	r2, [r3, #0]
      break;
 8001994:	e00b      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800199a:	601a      	str	r2, [r3, #0]
      break;
 800199c:	e007      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	4a0e      	ldr	r2, [pc, #56]	@ (80019dc <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80019a2:	601a      	str	r2, [r3, #0]
      break;
 80019a4:	e003      	b.n	80019ae <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019aa:	60fb      	str	r3, [r7, #12]
      break;
 80019ac:	bf00      	nop
  }

  return ret;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	41480000 	.word	0x41480000
 80019bc:	41d00000 	.word	0x41d00000
 80019c0:	42500000 	.word	0x42500000
 80019c4:	42d00000 	.word	0x42d00000
 80019c8:	43500000 	.word	0x43500000
 80019cc:	43d08000 	.word	0x43d08000
 80019d0:	44504000 	.word	0x44504000
 80019d4:	44d06000 	.word	0x44d06000
 80019d8:	45505000 	.word	0x45505000
 80019dc:	45d05800 	.word	0x45d05800

080019e0 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80019ec:	2100      	movs	r1, #0
 80019ee:	ed97 0a00 	vldr	s0, [r7]
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f806 	bl	8001a04 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a10:	460b      	mov	r3, r1
 8001a12:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d028      	beq.n	8001a78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8001a26:	e05c      	b.n	8001ae2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f103 0020 	add.w	r0, r3, #32
 8001a2e:	f107 0214 	add.w	r2, r7, #20
 8001a32:	2301      	movs	r3, #1
 8001a34:	2116      	movs	r1, #22
 8001a36:	f000 fe7d 	bl	8002734 <lsm6dso_read_reg>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a44:	e06c      	b.n	8001b20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8001a46:	7d3b      	ldrb	r3, [r7, #20]
 8001a48:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d04b      	beq.n	8001aea <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8001a52:	7d3b      	ldrb	r3, [r7, #20]
 8001a54:	f36f 13c7 	bfc	r3, #7, #1
 8001a58:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f103 0020 	add.w	r0, r3, #32
 8001a60:	f107 0214 	add.w	r2, r7, #20
 8001a64:	2301      	movs	r3, #1
 8001a66:	2116      	movs	r1, #22
 8001a68:	f000 fe7c 	bl	8002764 <lsm6dso_write_reg>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d03b      	beq.n	8001aea <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a76:	e053      	b.n	8001b20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f103 0020 	add.w	r0, r3, #32
 8001a7e:	f107 0210 	add.w	r2, r7, #16
 8001a82:	2301      	movs	r3, #1
 8001a84:	2116      	movs	r1, #22
 8001a86:	f000 fe55 	bl	8002734 <lsm6dso_read_reg>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a94:	e044      	b.n	8001b20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8001a96:	7c3b      	ldrb	r3, [r7, #16]
 8001a98:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d112      	bne.n	8001ac8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8001aa2:	7c3b      	ldrb	r3, [r7, #16]
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aa8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f103 0020 	add.w	r0, r3, #32
 8001ab0:	f107 0210 	add.w	r2, r7, #16
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2116      	movs	r1, #22
 8001ab8:	f000 fe54 	bl	8002764 <lsm6dso_write_reg>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac6:	e02b      	b.n	8001b20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8001ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001acc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001b28 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8001ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	dc00      	bgt.n	8001adc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8001ada:	e007      	b.n	8001aec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	e004      	b.n	8001aec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae6:	61fb      	str	r3, [r7, #28]
      break;
 8001ae8:	e000      	b.n	8001aec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8001aea:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001af2:	d102      	bne.n	8001afa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af8:	e012      	b.n	8001b20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8001b04:	ed97 0a06 	vldr	s0, [r7, #24]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 fccf 	bl	80024ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8001b0e:	61f8      	str	r0, [r7, #28]
 8001b10:	e005      	b.n	8001b1e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8001b12:	ed97 0a06 	vldr	s0, [r7, #24]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fd54 	bl	80025c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8001b1c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	43500000 	.word	0x43500000
 8001b2c:	43500000 	.word	0x43500000

08001b30 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3320      	adds	r3, #32
 8001b42:	f107 020b 	add.w	r2, r7, #11
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 f809 	bl	8002b60 <lsm6dso_gy_full_scale_get>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b58:	e030      	b.n	8001bbc <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d828      	bhi.n	8001bb2 <LSM6DSO_GYRO_GetFullScale+0x82>
 8001b60:	a201      	add	r2, pc, #4	@ (adr r2, 8001b68 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b8d 	.word	0x08001b8d
 8001b6c:	08001b85 	.word	0x08001b85
 8001b70:	08001b95 	.word	0x08001b95
 8001b74:	08001bb3 	.word	0x08001bb3
 8001b78:	08001b9f 	.word	0x08001b9f
 8001b7c:	08001bb3 	.word	0x08001bb3
 8001b80:	08001ba9 	.word	0x08001ba9
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	227d      	movs	r2, #125	@ 0x7d
 8001b88:	601a      	str	r2, [r3, #0]
      break;
 8001b8a:	e016      	b.n	8001bba <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	22fa      	movs	r2, #250	@ 0xfa
 8001b90:	601a      	str	r2, [r3, #0]
      break;
 8001b92:	e012      	b.n	8001bba <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b9a:	601a      	str	r2, [r3, #0]
      break;
 8001b9c:	e00d      	b.n	8001bba <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ba4:	601a      	str	r2, [r3, #0]
      break;
 8001ba6:	e008      	b.n	8001bba <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001bae:	601a      	str	r2, [r3, #0]
      break;
 8001bb0:	e003      	b.n	8001bba <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb6:	60fb      	str	r3, [r7, #12]
      break;
 8001bb8:	bf00      	nop
  }

  return ret;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b7d      	cmp	r3, #125	@ 0x7d
 8001bd2:	dd12      	ble.n	8001bfa <LSM6DSO_GYRO_SetFullScale+0x36>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2bfa      	cmp	r3, #250	@ 0xfa
 8001bd8:	dd0d      	ble.n	8001bf6 <LSM6DSO_GYRO_SetFullScale+0x32>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001be0:	dd07      	ble.n	8001bf2 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be8:	dc01      	bgt.n	8001bee <LSM6DSO_GYRO_SetFullScale+0x2a>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <LSM6DSO_GYRO_SetFullScale+0x38>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e004      	b.n	8001bfc <LSM6DSO_GYRO_SetFullScale+0x38>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <LSM6DSO_GYRO_SetFullScale+0x38>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <LSM6DSO_GYRO_SetFullScale+0x38>
 8001bfa:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8001bfc:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3320      	adds	r3, #32
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 ff84 	bl	8002b14 <lsm6dso_gy_full_scale_set>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c16:	e000      	b.n	8001c1a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3320      	adds	r3, #32
 8001c30:	f107 0208 	add.w	r2, r7, #8
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 f956 	bl	8002ee8 <lsm6dso_angular_rate_raw_get>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c46:	e00c      	b.n	8001c62 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8001c48:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8001c50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8001c58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3320      	adds	r3, #32
 8001c78:	f107 0210 	add.w	r2, r7, #16
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 f932 	bl	8002ee8 <lsm6dso_angular_rate_raw_get>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c8e:	e03c      	b.n	8001d0a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fdd4 	bl	8001844 <LSM6DSO_GYRO_GetSensitivity>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ca6:	e030      	b.n	8001d0a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001ca8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc0:	ee17 2a90 	vmov	r2, s15
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001cc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce0:	ee17 2a90 	vmov	r2, s15
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001ce8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d00:	ee17 2a90 	vmov	r2, s15
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70fb      	strb	r3, [r7, #3]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f103 0020 	add.w	r0, r3, #32
 8001d28:	1cba      	adds	r2, r7, #2
 8001d2a:	78f9      	ldrb	r1, [r7, #3]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f000 fd19 	bl	8002764 <lsm6dso_write_reg>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d3c:	e000      	b.n	8001d40 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <LSM6DSO_ACC_Enable_6D_Orientation>:
  * @param  pObj the device pObj
  * @param  IntPin interrupt pin line to be used
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable_6D_Orientation(LSM6DSO_Object_t *pObj, LSM6DSO_SensorIntPin_t IntPin)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  lsm6dso_pin_int1_route_t val1;
  lsm6dso_pin_int2_route_t val2;

  /* Output Data Rate selection */
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSO_OK)
 8001d58:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8001e44 <LSM6DSO_ACC_Enable_6D_Orientation+0xfc>
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fa8d 	bl	800127c <LSM6DSO_ACC_SetOutputDataRate>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <LSM6DSO_ACC_Enable_6D_Orientation+0x26>
  {
    return LSM6DSO_ERROR;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d6c:	e065      	b.n	8001e3a <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
  }

  /* Full scale selection */
  if (LSM6DSO_ACC_SetFullScale(pObj, 2) != LSM6DSO_OK)
 8001d6e:	2102      	movs	r1, #2
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fc71 	bl	8001658 <LSM6DSO_ACC_SetFullScale>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <LSM6DSO_ACC_Enable_6D_Orientation+0x3a>
  {
    return LSM6DSO_ERROR;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d80:	e05b      	b.n	8001e3a <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
  }

  /* 6D orientation enabled. */
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_60) != LSM6DSO_OK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3320      	adds	r3, #32
 8001d86:	2102      	movs	r1, #2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 f9d9 	bl	8003140 <lsm6dso_6d_threshold_set>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <LSM6DSO_ACC_Enable_6D_Orientation+0x52>
  {
    return LSM6DSO_ERROR;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d98:	e04f      	b.n	8001e3a <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
  }

  /* Enable 6D orientation event on either INT1 or INT2 pin */
  switch (IntPin)
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <LSM6DSO_ACC_Enable_6D_Orientation+0x5e>
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d021      	beq.n	8001de8 <LSM6DSO_ACC_Enable_6D_Orientation+0xa0>
 8001da4:	e041      	b.n	8001e2a <LSM6DSO_ACC_Enable_6D_Orientation+0xe2>
  {
    case LSM6DSO_INT1_PIN:
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3320      	adds	r3, #32
 8001daa:	f107 0214 	add.w	r2, r7, #20
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 fe51 	bl	8003a58 <lsm6dso_pin_int1_route_get>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <LSM6DSO_ACC_Enable_6D_Orientation+0x7a>
      {
        return LSM6DSO_ERROR;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dc0:	e03b      	b.n	8001e3a <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }

      val1.six_d = PROPERTY_ENABLE;
 8001dc2:	7d7b      	ldrb	r3, [r7, #21]
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	757b      	strb	r3, [r7, #21]

      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f103 0020 	add.w	r0, r3, #32
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001dd8:	f001 fa98 	bl	800330c <lsm6dso_pin_int1_route_set>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d027      	beq.n	8001e32 <LSM6DSO_ACC_Enable_6D_Orientation+0xea>
      {
        return LSM6DSO_ERROR;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de6:	e028      	b.n	8001e3a <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }
      break;

    case LSM6DSO_INT2_PIN:
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3320      	adds	r3, #32
 8001dec:	f107 020c 	add.w	r2, r7, #12
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fb92 	bl	800451c <lsm6dso_pin_int2_route_get>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <LSM6DSO_ACC_Enable_6D_Orientation+0xbc>
      {
        return LSM6DSO_ERROR;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e02:	e01a      	b.n	8001e3a <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }

      val2.six_d = PROPERTY_ENABLE;
 8001e04:	7b7b      	ldrb	r3, [r7, #13]
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	737b      	strb	r3, [r7, #13]

      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f103 0020 	add.w	r0, r3, #32
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	cb0c      	ldmia	r3, {r2, r3}
 8001e18:	2100      	movs	r1, #0
 8001e1a:	f002 f80d 	bl	8003e38 <lsm6dso_pin_int2_route_set>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <LSM6DSO_ACC_Enable_6D_Orientation+0xee>
      {
        return LSM6DSO_ERROR;
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e28:	e007      	b.n	8001e3a <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }
      break;

    default:
      ret = LSM6DSO_ERROR;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e2e:	61fb      	str	r3, [r7, #28]
      break;
 8001e30:	e002      	b.n	8001e38 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      break;
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      break;
 8001e36:	bf00      	nop
  }

  return ret;
 8001e38:	69fb      	ldr	r3, [r7, #28]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	43d08000 	.word	0x43d08000

08001e48 <LSM6DSO_ACC_Get_6D_Orientation_XL>:
  * @param  pObj the device pObj
  * @param  XLow the status of XLow orientation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_6D_Orientation_XL(LSM6DSO_Object_t *pObj, uint8_t *XLow)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  lsm6dso_d6d_src_t data;

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f103 0020 	add.w	r0, r3, #32
 8001e58:	f107 020c 	add.w	r2, r7, #12
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	211d      	movs	r1, #29
 8001e60:	f000 fc68 	bl	8002734 <lsm6dso_read_reg>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <LSM6DSO_ACC_Get_6D_Orientation_XL+0x28>
  {
    return LSM6DSO_ERROR;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e6e:	e007      	b.n	8001e80 <LSM6DSO_ACC_Get_6D_Orientation_XL+0x38>
  }

  *XLow = data.xl;
 8001e70:	7b3b      	ldrb	r3, [r7, #12]
 8001e72:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	701a      	strb	r2, [r3, #0]

  return LSM6DSO_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <LSM6DSO_ACC_Get_6D_Orientation_XH>:
  * @param  pObj the device pObj
  * @param  XHigh the status of XHigh orientation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_6D_Orientation_XH(LSM6DSO_Object_t *pObj, uint8_t *XHigh)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  lsm6dso_d6d_src_t data;

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f103 0020 	add.w	r0, r3, #32
 8001e98:	f107 020c 	add.w	r2, r7, #12
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	211d      	movs	r1, #29
 8001ea0:	f000 fc48 	bl	8002734 <lsm6dso_read_reg>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <LSM6DSO_ACC_Get_6D_Orientation_XH+0x28>
  {
    return LSM6DSO_ERROR;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eae:	e007      	b.n	8001ec0 <LSM6DSO_ACC_Get_6D_Orientation_XH+0x38>
  }

  *XHigh = data.xh;
 8001eb0:	7b3b      	ldrb	r3, [r7, #12]
 8001eb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	701a      	strb	r2, [r3, #0]

  return LSM6DSO_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <LSM6DSO_ACC_Get_6D_Orientation_YL>:
  * @param  pObj the device pObj
  * @param  YLow the status of YLow orientation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_6D_Orientation_YL(LSM6DSO_Object_t *pObj, uint8_t *YLow)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  lsm6dso_d6d_src_t data;

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f103 0020 	add.w	r0, r3, #32
 8001ed8:	f107 020c 	add.w	r2, r7, #12
 8001edc:	2301      	movs	r3, #1
 8001ede:	211d      	movs	r1, #29
 8001ee0:	f000 fc28 	bl	8002734 <lsm6dso_read_reg>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <LSM6DSO_ACC_Get_6D_Orientation_YL+0x28>
  {
    return LSM6DSO_ERROR;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eee:	e007      	b.n	8001f00 <LSM6DSO_ACC_Get_6D_Orientation_YL+0x38>
  }

  *YLow = data.yl;
 8001ef0:	7b3b      	ldrb	r3, [r7, #12]
 8001ef2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	701a      	strb	r2, [r3, #0]

  return LSM6DSO_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <LSM6DSO_ACC_Get_6D_Orientation_YH>:
  * @param  pObj the device pObj
  * @param  YHigh the status of YHigh orientation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_6D_Orientation_YH(LSM6DSO_Object_t *pObj, uint8_t *YHigh)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  lsm6dso_d6d_src_t data;

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f103 0020 	add.w	r0, r3, #32
 8001f18:	f107 020c 	add.w	r2, r7, #12
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	211d      	movs	r1, #29
 8001f20:	f000 fc08 	bl	8002734 <lsm6dso_read_reg>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <LSM6DSO_ACC_Get_6D_Orientation_YH+0x28>
  {
    return LSM6DSO_ERROR;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f2e:	e007      	b.n	8001f40 <LSM6DSO_ACC_Get_6D_Orientation_YH+0x38>
  }

  *YHigh = data.yh;
 8001f30:	7b3b      	ldrb	r3, [r7, #12]
 8001f32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	701a      	strb	r2, [r3, #0]

  return LSM6DSO_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <LSM6DSO_ACC_Get_6D_Orientation_ZL>:
  * @param  pObj the device pObj
  * @param  ZLow the status of ZLow orientation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_6D_Orientation_ZL(LSM6DSO_Object_t *pObj, uint8_t *ZLow)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  lsm6dso_d6d_src_t data;

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f103 0020 	add.w	r0, r3, #32
 8001f58:	f107 020c 	add.w	r2, r7, #12
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	211d      	movs	r1, #29
 8001f60:	f000 fbe8 	bl	8002734 <lsm6dso_read_reg>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <LSM6DSO_ACC_Get_6D_Orientation_ZL+0x28>
  {
    return LSM6DSO_ERROR;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f6e:	e007      	b.n	8001f80 <LSM6DSO_ACC_Get_6D_Orientation_ZL+0x38>
  }

  *ZLow = data.zl;
 8001f70:	7b3b      	ldrb	r3, [r7, #12]
 8001f72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	701a      	strb	r2, [r3, #0]

  return LSM6DSO_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <LSM6DSO_ACC_Get_6D_Orientation_ZH>:
  * @param  pObj the device pObj
  * @param  ZHigh the status of ZHigh orientation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_6D_Orientation_ZH(LSM6DSO_Object_t *pObj, uint8_t *ZHigh)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  lsm6dso_d6d_src_t data;

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f103 0020 	add.w	r0, r3, #32
 8001f98:	f107 020c 	add.w	r2, r7, #12
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	211d      	movs	r1, #29
 8001fa0:	f000 fbc8 	bl	8002734 <lsm6dso_read_reg>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <LSM6DSO_ACC_Get_6D_Orientation_ZH+0x28>
  {
    return LSM6DSO_ERROR;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fae:	e007      	b.n	8001fc0 <LSM6DSO_ACC_Get_6D_Orientation_ZH+0x38>
  }

  *ZHigh = data.zh;
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	701a      	strb	r2, [r3, #0]

  return LSM6DSO_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <LSM6DSO_ACC_Get_Event_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of all hardware events
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_Event_Status(LSM6DSO_Object_t *pObj, LSM6DSO_Event_Status_t *Status)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  lsm6dso_md1_cfg_t md1_cfg;
  lsm6dso_md2_cfg_t md2_cfg;
  lsm6dso_emb_func_int1_t int1_ctrl;
  lsm6dso_emb_func_int2_t int2_ctrl;

  (void)memset((void *)Status, 0x0, sizeof(LSM6DSO_Event_Status_t));
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	6838      	ldr	r0, [r7, #0]
 8001fd8:	f007 fa22 	bl	8009420 <memset>

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != LSM6DSO_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f103 0020 	add.w	r0, r3, #32
 8001fe2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	211b      	movs	r1, #27
 8001fea:	f000 fba3 	bl	8002734 <lsm6dso_read_reg>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <LSM6DSO_ACC_Get_Event_Status+0x32>
  {
    return LSM6DSO_ERROR;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ff8:	e12c      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_TAP_SRC, (uint8_t *)&tap_src, 1) != LSM6DSO_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f103 0020 	add.w	r0, r3, #32
 8002000:	f107 0220 	add.w	r2, r7, #32
 8002004:	2301      	movs	r3, #1
 8002006:	211c      	movs	r1, #28
 8002008:	f000 fb94 	bl	8002734 <lsm6dso_read_reg>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <LSM6DSO_ACC_Get_Event_Status+0x50>
  {
    return LSM6DSO_ERROR;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002016:	e11d      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&d6d_src, 1) != LSM6DSO_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f103 0020 	add.w	r0, r3, #32
 800201e:	f107 021c 	add.w	r2, r7, #28
 8002022:	2301      	movs	r3, #1
 8002024:	211d      	movs	r1, #29
 8002026:	f000 fb85 	bl	8002734 <lsm6dso_read_reg>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <LSM6DSO_ACC_Get_Event_Status+0x6e>
  {
    return LSM6DSO_ERROR;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002034:	e10e      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_EMBEDDED_FUNC_BANK) != LSM6DSO_OK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3320      	adds	r3, #32
 800203a:	2102      	movs	r1, #2
 800203c:	4618      	mov	r0, r3
 800203e:	f000 ffe3 	bl	8003008 <lsm6dso_mem_bank_set>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <LSM6DSO_ACC_Get_Event_Status+0x86>
  {
    return LSM6DSO_ERROR;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800204c:	e102      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_SRC, (uint8_t *)&func_src, 1) != LSM6DSO_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 0020 	add.w	r0, r3, #32
 8002054:	f107 0218 	add.w	r2, r7, #24
 8002058:	2301      	movs	r3, #1
 800205a:	2164      	movs	r1, #100	@ 0x64
 800205c:	f000 fb6a 	bl	8002734 <lsm6dso_read_reg>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <LSM6DSO_ACC_Get_Event_Status+0xa4>
  {
    return LSM6DSO_ERROR;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800206a:	e0f3      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&int1_ctrl, 1) != LSM6DSO_OK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f103 0020 	add.w	r0, r3, #32
 8002072:	f107 020c 	add.w	r2, r7, #12
 8002076:	2301      	movs	r3, #1
 8002078:	210a      	movs	r1, #10
 800207a:	f000 fb5b 	bl	8002734 <lsm6dso_read_reg>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <LSM6DSO_ACC_Get_Event_Status+0xc2>
  {
    return LSM6DSO_ERROR;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002088:	e0e4      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&int2_ctrl, 1) != LSM6DSO_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 0020 	add.w	r0, r3, #32
 8002090:	f107 0208 	add.w	r2, r7, #8
 8002094:	2301      	movs	r3, #1
 8002096:	210e      	movs	r1, #14
 8002098:	f000 fb4c 	bl	8002734 <lsm6dso_read_reg>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <LSM6DSO_ACC_Get_Event_Status+0xe0>
  {
    return LSM6DSO_ERROR;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020a6:	e0d5      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_USER_BANK) != 0)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3320      	adds	r3, #32
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 ffaa 	bl	8003008 <lsm6dso_mem_bank_set>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <LSM6DSO_ACC_Get_Event_Status+0xf8>
  {
    return LSM6DSO_ERROR;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020be:	e0c9      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1) != LSM6DSO_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f103 0020 	add.w	r0, r3, #32
 80020c6:	f107 0214 	add.w	r2, r7, #20
 80020ca:	2301      	movs	r3, #1
 80020cc:	215e      	movs	r1, #94	@ 0x5e
 80020ce:	f000 fb31 	bl	8002734 <lsm6dso_read_reg>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <LSM6DSO_ACC_Get_Event_Status+0x116>
  {
    return LSM6DSO_ERROR;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020dc:	e0ba      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1) != LSM6DSO_OK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f103 0020 	add.w	r0, r3, #32
 80020e4:	f107 0210 	add.w	r2, r7, #16
 80020e8:	2301      	movs	r3, #1
 80020ea:	215f      	movs	r1, #95	@ 0x5f
 80020ec:	f000 fb22 	bl	8002734 <lsm6dso_read_reg>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <LSM6DSO_ACC_Get_Event_Status+0x134>
  {
    return LSM6DSO_ERROR;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020fa:	e0ab      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_tilt_flag_data_ready_get(&(pObj->Ctx), &tilt_ia) != LSM6DSO_OK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3320      	adds	r3, #32
 8002100:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f001 f866 	bl	80031d8 <lsm6dso_tilt_flag_data_ready_get>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <LSM6DSO_ACC_Get_Event_Status+0x150>
  {
    return LSM6DSO_ERROR;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002116:	e09d      	b.n	8002254 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if ((md1_cfg.int1_ff == 1U) || (md2_cfg.int2_ff == 1U))
 8002118:	7d3b      	ldrb	r3, [r7, #20]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <LSM6DSO_ACC_Get_Event_Status+0x168>
 8002124:	7c3b      	ldrb	r3, [r7, #16]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <LSM6DSO_ACC_Get_Event_Status+0x180>
  {
    if (wake_up_src.ff_ia == 1U)
 8002130:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <LSM6DSO_ACC_Get_Event_Status+0x180>
    {
      Status->FreeFallStatus = 1;
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	7813      	ldrb	r3, [r2, #0]
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_wu == 1U) || (md2_cfg.int2_wu == 1U))
 8002148:	7d3b      	ldrb	r3, [r7, #20]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <LSM6DSO_ACC_Get_Event_Status+0x198>
 8002154:	7c3b      	ldrb	r3, [r7, #16]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00b      	beq.n	8002178 <LSM6DSO_ACC_Get_Event_Status+0x1b0>
  {
    if (wake_up_src.wu_ia == 1U)
 8002160:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <LSM6DSO_ACC_Get_Event_Status+0x1b0>
    {
      Status->WakeUpStatus = 1;
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	7813      	ldrb	r3, [r2, #0]
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_single_tap == 1U) || (md2_cfg.int2_single_tap == 1U))
 8002178:	7d3b      	ldrb	r3, [r7, #20]
 800217a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <LSM6DSO_ACC_Get_Event_Status+0x1c8>
 8002184:	7c3b      	ldrb	r3, [r7, #16]
 8002186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <LSM6DSO_ACC_Get_Event_Status+0x1e0>
  {
    if (tap_src.single_tap == 1U)
 8002190:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <LSM6DSO_ACC_Get_Event_Status+0x1e0>
    {
      Status->TapStatus = 1;
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	7813      	ldrb	r3, [r2, #0]
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_double_tap == 1U) || (md2_cfg.int2_double_tap == 1U))
 80021a8:	7d3b      	ldrb	r3, [r7, #20]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <LSM6DSO_ACC_Get_Event_Status+0x1f8>
 80021b4:	7c3b      	ldrb	r3, [r7, #16]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00b      	beq.n	80021d8 <LSM6DSO_ACC_Get_Event_Status+0x210>
  {
    if (tap_src.double_tap == 1U)
 80021c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <LSM6DSO_ACC_Get_Event_Status+0x210>
    {
      Status->DoubleTapStatus = 1;
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	7813      	ldrb	r3, [r2, #0]
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_6d == 1U) || (md2_cfg.int2_6d == 1U))
 80021d8:	7d3b      	ldrb	r3, [r7, #20]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <LSM6DSO_ACC_Get_Event_Status+0x228>
 80021e4:	7c3b      	ldrb	r3, [r7, #16]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <LSM6DSO_ACC_Get_Event_Status+0x23e>
  {
    if (d6d_src.d6d_ia == 1U)
 80021f0:	7f3b      	ldrb	r3, [r7, #28]
 80021f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <LSM6DSO_ACC_Get_Event_Status+0x23e>
    {
      Status->D6DOrientationStatus = 1;
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	7813      	ldrb	r3, [r2, #0]
 8002200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002204:	7013      	strb	r3, [r2, #0]
    }
  }

  if (int1_ctrl.int1_step_detector == 1U)
 8002206:	7b3b      	ldrb	r3, [r7, #12]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <LSM6DSO_ACC_Get_Event_Status+0x260>
  {
    if (func_src.step_detected == 1U)
 8002212:	7e3b      	ldrb	r3, [r7, #24]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <LSM6DSO_ACC_Get_Event_Status+0x260>
    {
      Status->StepStatus = 1;
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	7813      	ldrb	r3, [r2, #0]
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((int1_ctrl.int1_tilt == 1U) || (int2_ctrl.int2_tilt == 1U))
 8002228:	7b3b      	ldrb	r3, [r7, #12]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <LSM6DSO_ACC_Get_Event_Status+0x278>
 8002234:	7a3b      	ldrb	r3, [r7, #8]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <LSM6DSO_ACC_Get_Event_Status+0x28a>
  {
    if (tilt_ia == 1U)
 8002240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002244:	2b01      	cmp	r3, #1
 8002246:	d104      	bne.n	8002252 <LSM6DSO_ACC_Get_Event_Status+0x28a>
    {
      Status->TiltStatus = 1;
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	7813      	ldrb	r3, [r2, #0]
 800224c:	f043 0320 	orr.w	r3, r3, #32
 8002250:	7013      	strb	r3, [r2, #0]
    }
  }

  return LSM6DSO_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3728      	adds	r7, #40	@ 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8002268:	edd7 7a00 	vldr	s15, [r7]
 800226c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800236c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8002270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	d801      	bhi.n	800227e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800227a:	230b      	movs	r3, #11
 800227c:	e063      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800227e:	edd7 7a00 	vldr	s15, [r7]
 8002282:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	d801      	bhi.n	8002294 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002290:	2301      	movs	r3, #1
 8002292:	e058      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002294:	edd7 7a00 	vldr	s15, [r7]
 8002298:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800229c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a4:	d801      	bhi.n	80022aa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e04d      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80022aa:	edd7 7a00 	vldr	s15, [r7]
 80022ae:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002370 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80022b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ba:	d801      	bhi.n	80022c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80022bc:	2303      	movs	r3, #3
 80022be:	e042      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80022c0:	edd7 7a00 	vldr	s15, [r7]
 80022c4:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002374 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80022c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d801      	bhi.n	80022d6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e037      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80022d6:	edd7 7a00 	vldr	s15, [r7]
 80022da:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002378 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80022de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	d801      	bhi.n	80022ec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80022e8:	2305      	movs	r3, #5
 80022ea:	e02c      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80022ec:	edd7 7a00 	vldr	s15, [r7]
 80022f0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800237c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80022f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	d801      	bhi.n	8002302 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80022fe:	2306      	movs	r3, #6
 8002300:	e021      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002302:	edd7 7a00 	vldr	s15, [r7]
 8002306:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002380 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 800230a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	d801      	bhi.n	8002318 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002314:	2307      	movs	r3, #7
 8002316:	e016      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002318:	edd7 7a00 	vldr	s15, [r7]
 800231c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002384 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8002320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002328:	d801      	bhi.n	800232e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800232a:	2308      	movs	r3, #8
 800232c:	e00b      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800232e:	edd7 7a00 	vldr	s15, [r7]
 8002332:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002388 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8002336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d801      	bhi.n	8002344 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8002340:	2309      	movs	r3, #9
 8002342:	e000      	b.n	8002346 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002344:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8002346:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3320      	adds	r3, #32
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fa7d 	bl	8002850 <lsm6dso_xl_data_rate_set>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002360:	e000      	b.n	8002364 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	3fcccccd 	.word	0x3fcccccd
 8002370:	42500000 	.word	0x42500000
 8002374:	42d00000 	.word	0x42d00000
 8002378:	43500000 	.word	0x43500000
 800237c:	43d08000 	.word	0x43d08000
 8002380:	44504000 	.word	0x44504000
 8002384:	44d06000 	.word	0x44d06000
 8002388:	45505000 	.word	0x45505000

0800238c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8002398:	edd7 7a00 	vldr	s15, [r7]
 800239c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800248c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80023a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	d801      	bhi.n	80023ae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80023aa:	230b      	movs	r3, #11
 80023ac:	e063      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80023ae:	edd7 7a00 	vldr	s15, [r7]
 80023b2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80023b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023be:	d801      	bhi.n	80023c4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e058      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80023c4:	edd7 7a00 	vldr	s15, [r7]
 80023c8:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80023cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d801      	bhi.n	80023da <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e04d      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80023da:	edd7 7a00 	vldr	s15, [r7]
 80023de:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002490 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80023e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	d801      	bhi.n	80023f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80023ec:	2303      	movs	r3, #3
 80023ee:	e042      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80023f0:	edd7 7a00 	vldr	s15, [r7]
 80023f4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002494 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80023f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	d801      	bhi.n	8002406 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002402:	2304      	movs	r3, #4
 8002404:	e037      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002406:	edd7 7a00 	vldr	s15, [r7]
 800240a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002498 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800240e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	d801      	bhi.n	800241c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002418:	2305      	movs	r3, #5
 800241a:	e02c      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800241c:	edd7 7a00 	vldr	s15, [r7]
 8002420:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800249c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	d801      	bhi.n	8002432 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800242e:	2306      	movs	r3, #6
 8002430:	e021      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002432:	edd7 7a00 	vldr	s15, [r7]
 8002436:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80024a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800243a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002442:	d801      	bhi.n	8002448 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8002444:	2307      	movs	r3, #7
 8002446:	e016      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002448:	edd7 7a00 	vldr	s15, [r7]
 800244c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80024a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d801      	bhi.n	800245e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800245a:	2308      	movs	r3, #8
 800245c:	e00b      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800245e:	edd7 7a00 	vldr	s15, [r7]
 8002462:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80024a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8002466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	d801      	bhi.n	8002474 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002470:	2309      	movs	r3, #9
 8002472:	e000      	b.n	8002476 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002474:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	3fcccccd 	.word	0x3fcccccd
 8002490:	42500000 	.word	0x42500000
 8002494:	42d00000 	.word	0x42d00000
 8002498:	43500000 	.word	0x43500000
 800249c:	43d08000 	.word	0x43d08000
 80024a0:	44504000 	.word	0x44504000
 80024a4:	44d06000 	.word	0x44d06000
 80024a8:	45505000 	.word	0x45505000

080024ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80024b8:	edd7 7a00 	vldr	s15, [r7]
 80024bc:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80024c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	d801      	bhi.n	80024ce <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e058      	b.n	8002580 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80024ce:	edd7 7a00 	vldr	s15, [r7]
 80024d2:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80024d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	d801      	bhi.n	80024e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e04d      	b.n	8002580 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80024e4:	edd7 7a00 	vldr	s15, [r7]
 80024e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80025a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80024ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	d801      	bhi.n	80024fa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e042      	b.n	8002580 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80024fa:	edd7 7a00 	vldr	s15, [r7]
 80024fe:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80025ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8002502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d801      	bhi.n	8002510 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800250c:	2304      	movs	r3, #4
 800250e:	e037      	b.n	8002580 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002510:	edd7 7a00 	vldr	s15, [r7]
 8002514:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80025b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8002518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	d801      	bhi.n	8002526 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8002522:	2305      	movs	r3, #5
 8002524:	e02c      	b.n	8002580 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002526:	edd7 7a00 	vldr	s15, [r7]
 800252a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80025b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800252e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	d801      	bhi.n	800253c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8002538:	2306      	movs	r3, #6
 800253a:	e021      	b.n	8002580 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800253c:	edd7 7a00 	vldr	s15, [r7]
 8002540:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80025b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8002544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	d801      	bhi.n	8002552 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800254e:	2307      	movs	r3, #7
 8002550:	e016      	b.n	8002580 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002552:	edd7 7a00 	vldr	s15, [r7]
 8002556:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80025bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800255a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	d801      	bhi.n	8002568 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8002564:	2308      	movs	r3, #8
 8002566:	e00b      	b.n	8002580 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002568:	edd7 7a00 	vldr	s15, [r7]
 800256c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80025c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8002570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	d801      	bhi.n	800257e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800257a:	2309      	movs	r3, #9
 800257c:	e000      	b.n	8002580 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800257e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8002580:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3320      	adds	r3, #32
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fb2a 	bl	8002be4 <lsm6dso_gy_data_rate_set>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800259a:	e000      	b.n	800259e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	42500000 	.word	0x42500000
 80025ac:	42d00000 	.word	0x42d00000
 80025b0:	43500000 	.word	0x43500000
 80025b4:	43d08000 	.word	0x43d08000
 80025b8:	44504000 	.word	0x44504000
 80025bc:	44d06000 	.word	0x44d06000
 80025c0:	45505000 	.word	0x45505000

080025c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80025d0:	edd7 7a00 	vldr	s15, [r7]
 80025d4:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80025d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e0:	d801      	bhi.n	80025e6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e058      	b.n	8002698 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80025e6:	edd7 7a00 	vldr	s15, [r7]
 80025ea:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80025ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	d801      	bhi.n	80025fc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e04d      	b.n	8002698 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80025fc:	edd7 7a00 	vldr	s15, [r7]
 8002600:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80026ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8002604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	d801      	bhi.n	8002612 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800260e:	2303      	movs	r3, #3
 8002610:	e042      	b.n	8002698 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002612:	edd7 7a00 	vldr	s15, [r7]
 8002616:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80026b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800261a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800261e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002622:	d801      	bhi.n	8002628 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8002624:	2304      	movs	r3, #4
 8002626:	e037      	b.n	8002698 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002628:	edd7 7a00 	vldr	s15, [r7]
 800262c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80026b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8002630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002638:	d801      	bhi.n	800263e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800263a:	2305      	movs	r3, #5
 800263c:	e02c      	b.n	8002698 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800263e:	edd7 7a00 	vldr	s15, [r7]
 8002642:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80026b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8002646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	d801      	bhi.n	8002654 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8002650:	2306      	movs	r3, #6
 8002652:	e021      	b.n	8002698 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002654:	edd7 7a00 	vldr	s15, [r7]
 8002658:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80026bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800265c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	d801      	bhi.n	800266a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8002666:	2307      	movs	r3, #7
 8002668:	e016      	b.n	8002698 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800266a:	edd7 7a00 	vldr	s15, [r7]
 800266e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80026c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8002672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	d801      	bhi.n	8002680 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800267c:	2308      	movs	r3, #8
 800267e:	e00b      	b.n	8002698 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002680:	edd7 7a00 	vldr	s15, [r7]
 8002684:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80026c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	d801      	bhi.n	8002696 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8002692:	2309      	movs	r3, #9
 8002694:	e000      	b.n	8002698 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002696:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	42500000 	.word	0x42500000
 80026b0:	42d00000 	.word	0x42d00000
 80026b4:	43500000 	.word	0x43500000
 80026b8:	43d08000 	.word	0x43d08000
 80026bc:	44504000 	.word	0x44504000
 80026c0:	44d06000 	.word	0x44d06000
 80026c4:	45505000 	.word	0x45505000

080026c8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	461a      	mov	r2, r3
 80026d4:	460b      	mov	r3, r1
 80026d6:	72fb      	strb	r3, [r7, #11]
 80026d8:	4613      	mov	r3, r2
 80026da:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	695c      	ldr	r4, [r3, #20]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	7b1b      	ldrb	r3, [r3, #12]
 80026e8:	4618      	mov	r0, r3
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	b299      	uxth	r1, r3
 80026ee:	893b      	ldrh	r3, [r7, #8]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	47a0      	blx	r4
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}

080026fe <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80026fe:	b590      	push	{r4, r7, lr}
 8002700:	b087      	sub	sp, #28
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	461a      	mov	r2, r3
 800270a:	460b      	mov	r3, r1
 800270c:	72fb      	strb	r3, [r7, #11]
 800270e:	4613      	mov	r3, r2
 8002710:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	691c      	ldr	r4, [r3, #16]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	7b1b      	ldrb	r3, [r3, #12]
 800271e:	4618      	mov	r0, r3
 8002720:	7afb      	ldrb	r3, [r7, #11]
 8002722:	b299      	uxth	r1, r3
 8002724:	893b      	ldrh	r3, [r7, #8]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	47a0      	blx	r4
 800272a:	4603      	mov	r3, r0
}
 800272c:	4618      	mov	r0, r3
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}

08002734 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	461a      	mov	r2, r3
 8002740:	460b      	mov	r3, r1
 8002742:	72fb      	strb	r3, [r7, #11]
 8002744:	4613      	mov	r3, r2
 8002746:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685c      	ldr	r4, [r3, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68d8      	ldr	r0, [r3, #12]
 8002750:	893b      	ldrh	r3, [r7, #8]
 8002752:	7af9      	ldrb	r1, [r7, #11]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	47a0      	blx	r4
 8002758:	6178      	str	r0, [r7, #20]

  return ret;
 800275a:	697b      	ldr	r3, [r7, #20]
}
 800275c:	4618      	mov	r0, r3
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}

08002764 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	461a      	mov	r2, r3
 8002770:	460b      	mov	r3, r1
 8002772:	72fb      	strb	r3, [r7, #11]
 8002774:	4613      	mov	r3, r2
 8002776:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681c      	ldr	r4, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68d8      	ldr	r0, [r3, #12]
 8002780:	893b      	ldrh	r3, [r7, #8]
 8002782:	7af9      	ldrb	r1, [r7, #11]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	47a0      	blx	r4
 8002788:	6178      	str	r0, [r7, #20]

  return ret;
 800278a:	697b      	ldr	r3, [r7, #20]
}
 800278c:	4618      	mov	r0, r3
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}

08002794 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80027a0:	f107 0208 	add.w	r2, r7, #8
 80027a4:	2301      	movs	r3, #1
 80027a6:	2110      	movs	r1, #16
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ffc3 	bl	8002734 <lsm6dso_read_reg>
 80027ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10f      	bne.n	80027d6 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	7a3b      	ldrb	r3, [r7, #8]
 80027c0:	f362 0383 	bfi	r3, r2, #2, #2
 80027c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80027c6:	f107 0208 	add.w	r2, r7, #8
 80027ca:	2301      	movs	r3, #1
 80027cc:	2110      	movs	r1, #16
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffc8 	bl	8002764 <lsm6dso_write_reg>
 80027d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80027ea:	f107 0208 	add.w	r2, r7, #8
 80027ee:	2301      	movs	r3, #1
 80027f0:	2110      	movs	r1, #16
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff9e 	bl	8002734 <lsm6dso_read_reg>
 80027f8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80027fa:	7a3b      	ldrb	r3, [r7, #8]
 80027fc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b03      	cmp	r3, #3
 8002804:	d81a      	bhi.n	800283c <lsm6dso_xl_full_scale_get+0x5c>
 8002806:	a201      	add	r2, pc, #4	@ (adr r2, 800280c <lsm6dso_xl_full_scale_get+0x2c>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002825 	.word	0x08002825
 8002814:	0800282d 	.word	0x0800282d
 8002818:	08002835 	.word	0x08002835
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
      break;
 8002822:	e00f      	b.n	8002844 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
      break;
 800282a:	e00b      	b.n	8002844 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2202      	movs	r2, #2
 8002830:	701a      	strb	r2, [r3, #0]
      break;
 8002832:	e007      	b.n	8002844 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2203      	movs	r2, #3
 8002838:	701a      	strb	r2, [r3, #0]
      break;
 800283a:	e003      	b.n	8002844 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
      break;
 8002842:	bf00      	nop
  }

  return ret;
 8002844:	68fb      	ldr	r3, [r7, #12]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop

08002850 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fce1 	bl	800322e <lsm6dso_fsm_enable_get>
 800286c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <lsm6dso_xl_data_rate_set+0x28>
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	e0e0      	b.n	8002a3a <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002878:	7b3b      	ldrb	r3, [r7, #12]
 800287a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800287e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002880:	7b3b      	ldrb	r3, [r7, #12]
 8002882:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002886:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002888:	4313      	orrs	r3, r2
 800288a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800288c:	7b3b      	ldrb	r3, [r7, #12]
 800288e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002892:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002894:	4313      	orrs	r3, r2
 8002896:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002898:	7b3b      	ldrb	r3, [r7, #12]
 800289a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800289e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80028a4:	7b3b      	ldrb	r3, [r7, #12]
 80028a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028aa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80028ac:	4313      	orrs	r3, r2
 80028ae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80028b0:	7b3b      	ldrb	r3, [r7, #12]
 80028b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80028b6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80028bc:	7b3b      	ldrb	r3, [r7, #12]
 80028be:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80028c2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80028c8:	7b3b      	ldrb	r3, [r7, #12]
 80028ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80028ce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80028d4:	7b7b      	ldrb	r3, [r7, #13]
 80028d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028da:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80028dc:	4313      	orrs	r3, r2
 80028de:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80028e0:	7b7b      	ldrb	r3, [r7, #13]
 80028e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028e6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80028e8:	4313      	orrs	r3, r2
 80028ea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80028ec:	7b7b      	ldrb	r3, [r7, #13]
 80028ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80028f2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80028f8:	7b7b      	ldrb	r3, [r7, #13]
 80028fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80028fe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002900:	4313      	orrs	r3, r2
 8002902:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002904:	7b7b      	ldrb	r3, [r7, #13]
 8002906:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800290a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800290c:	4313      	orrs	r3, r2
 800290e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002910:	7b7b      	ldrb	r3, [r7, #13]
 8002912:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002916:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002918:	4313      	orrs	r3, r2
 800291a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800291c:	7b7b      	ldrb	r3, [r7, #13]
 800291e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002922:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002924:	4313      	orrs	r3, r2
 8002926:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002928:	7b7b      	ldrb	r3, [r7, #13]
 800292a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800292e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002930:	4313      	orrs	r3, r2
 8002932:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002934:	2b01      	cmp	r3, #1
 8002936:	d164      	bne.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002938:	f107 030b 	add.w	r3, r7, #11
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fc96 	bl	8003270 <lsm6dso_fsm_data_rate_get>
 8002944:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <lsm6dso_xl_data_rate_set+0x100>
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	e074      	b.n	8002a3a <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8002950:	7afb      	ldrb	r3, [r7, #11]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d852      	bhi.n	80029fc <lsm6dso_xl_data_rate_set+0x1ac>
 8002956:	a201      	add	r2, pc, #4	@ (adr r2, 800295c <lsm6dso_xl_data_rate_set+0x10c>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	0800296d 	.word	0x0800296d
 8002960:	0800297f 	.word	0x0800297f
 8002964:	0800299d 	.word	0x0800299d
 8002968:	080029c7 	.word	0x080029c7
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002976:	e044      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	75fb      	strb	r3, [r7, #23]
        break;
 800297c:	e041      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002984:	2302      	movs	r3, #2
 8002986:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002988:	e03b      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002990:	2302      	movs	r3, #2
 8002992:	75fb      	strb	r3, [r7, #23]
        break;
 8002994:	e035      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	75fb      	strb	r3, [r7, #23]
        break;
 800299a:	e032      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80029a2:	2303      	movs	r3, #3
 80029a4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80029a6:	e02c      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80029ae:	2303      	movs	r3, #3
 80029b0:	75fb      	strb	r3, [r7, #23]
        break;
 80029b2:	e026      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d102      	bne.n	80029c0 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80029ba:	2303      	movs	r3, #3
 80029bc:	75fb      	strb	r3, [r7, #23]
        break;
 80029be:	e020      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	75fb      	strb	r3, [r7, #23]
        break;
 80029c4:	e01d      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80029cc:	2304      	movs	r3, #4
 80029ce:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80029d0:	e017      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d102      	bne.n	80029de <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80029d8:	2304      	movs	r3, #4
 80029da:	75fb      	strb	r3, [r7, #23]
        break;
 80029dc:	e011      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d102      	bne.n	80029ea <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80029e4:	2304      	movs	r3, #4
 80029e6:	75fb      	strb	r3, [r7, #23]
        break;
 80029e8:	e00b      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d102      	bne.n	80029f6 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80029f0:	2304      	movs	r3, #4
 80029f2:	75fb      	strb	r3, [r7, #23]
        break;
 80029f4:	e005      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	75fb      	strb	r3, [r7, #23]
        break;
 80029fa:	e002      	b.n	8002a02 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	75fb      	strb	r3, [r7, #23]
        break;
 8002a00:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002a02:	f107 0208 	add.w	r2, r7, #8
 8002a06:	2301      	movs	r3, #1
 8002a08:	2110      	movs	r1, #16
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fe92 	bl	8002734 <lsm6dso_read_reg>
 8002a10:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	7a3b      	ldrb	r3, [r7, #8]
 8002a1c:	f362 1307 	bfi	r3, r2, #4, #4
 8002a20:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002a22:	f107 0208 	add.w	r2, r7, #8
 8002a26:	2301      	movs	r3, #1
 8002a28:	2110      	movs	r1, #16
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fe9a 	bl	8002764 <lsm6dso_write_reg>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

  return ret;
 8002a38:	693b      	ldr	r3, [r7, #16]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop

08002a44 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002a4e:	f107 0208 	add.w	r2, r7, #8
 8002a52:	2301      	movs	r3, #1
 8002a54:	2110      	movs	r1, #16
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fe6c 	bl	8002734 <lsm6dso_read_reg>
 8002a5c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8002a5e:	7a3b      	ldrb	r3, [r7, #8]
 8002a60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b0b      	cmp	r3, #11
 8002a68:	d84a      	bhi.n	8002b00 <lsm6dso_xl_data_rate_get+0xbc>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <lsm6dso_xl_data_rate_get+0x2c>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002aa1 	.word	0x08002aa1
 8002a74:	08002aa9 	.word	0x08002aa9
 8002a78:	08002ab1 	.word	0x08002ab1
 8002a7c:	08002ab9 	.word	0x08002ab9
 8002a80:	08002ac1 	.word	0x08002ac1
 8002a84:	08002ac9 	.word	0x08002ac9
 8002a88:	08002ad1 	.word	0x08002ad1
 8002a8c:	08002ad9 	.word	0x08002ad9
 8002a90:	08002ae1 	.word	0x08002ae1
 8002a94:	08002ae9 	.word	0x08002ae9
 8002a98:	08002af1 	.word	0x08002af1
 8002a9c:	08002af9 	.word	0x08002af9
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
      break;
 8002aa6:	e02f      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
      break;
 8002aae:	e02b      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	701a      	strb	r2, [r3, #0]
      break;
 8002ab6:	e027      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2203      	movs	r2, #3
 8002abc:	701a      	strb	r2, [r3, #0]
      break;
 8002abe:	e023      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	701a      	strb	r2, [r3, #0]
      break;
 8002ac6:	e01f      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2205      	movs	r2, #5
 8002acc:	701a      	strb	r2, [r3, #0]
      break;
 8002ace:	e01b      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2206      	movs	r2, #6
 8002ad4:	701a      	strb	r2, [r3, #0]
      break;
 8002ad6:	e017      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2207      	movs	r2, #7
 8002adc:	701a      	strb	r2, [r3, #0]
      break;
 8002ade:	e013      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	701a      	strb	r2, [r3, #0]
      break;
 8002ae6:	e00f      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2209      	movs	r2, #9
 8002aec:	701a      	strb	r2, [r3, #0]
      break;
 8002aee:	e00b      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	220a      	movs	r2, #10
 8002af4:	701a      	strb	r2, [r3, #0]
      break;
 8002af6:	e007      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	220b      	movs	r2, #11
 8002afc:	701a      	strb	r2, [r3, #0]
      break;
 8002afe:	e003      	b.n	8002b08 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
      break;
 8002b06:	bf00      	nop
  }

  return ret;
 8002b08:	68fb      	ldr	r3, [r7, #12]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop

08002b14 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002b20:	f107 0208 	add.w	r2, r7, #8
 8002b24:	2301      	movs	r3, #1
 8002b26:	2111      	movs	r1, #17
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff fe03 	bl	8002734 <lsm6dso_read_reg>
 8002b2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	7a3b      	ldrb	r3, [r7, #8]
 8002b40:	f362 0343 	bfi	r3, r2, #1, #3
 8002b44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002b46:	f107 0208 	add.w	r2, r7, #8
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	2111      	movs	r1, #17
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fe08 	bl	8002764 <lsm6dso_write_reg>
 8002b54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002b6a:	f107 0208 	add.w	r2, r7, #8
 8002b6e:	2301      	movs	r3, #1
 8002b70:	2111      	movs	r1, #17
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fdde 	bl	8002734 <lsm6dso_read_reg>
 8002b78:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8002b7a:	7a3b      	ldrb	r3, [r7, #8]
 8002b7c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b06      	cmp	r3, #6
 8002b84:	d824      	bhi.n	8002bd0 <lsm6dso_gy_full_scale_get+0x70>
 8002b86:	a201      	add	r2, pc, #4	@ (adr r2, 8002b8c <lsm6dso_gy_full_scale_get+0x2c>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002ba9 	.word	0x08002ba9
 8002b90:	08002bb1 	.word	0x08002bb1
 8002b94:	08002bb9 	.word	0x08002bb9
 8002b98:	08002bd1 	.word	0x08002bd1
 8002b9c:	08002bc1 	.word	0x08002bc1
 8002ba0:	08002bd1 	.word	0x08002bd1
 8002ba4:	08002bc9 	.word	0x08002bc9
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
      break;
 8002bae:	e013      	b.n	8002bd8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
      break;
 8002bb6:	e00f      	b.n	8002bd8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	701a      	strb	r2, [r3, #0]
      break;
 8002bbe:	e00b      	b.n	8002bd8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	701a      	strb	r2, [r3, #0]
      break;
 8002bc6:	e007      	b.n	8002bd8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2206      	movs	r2, #6
 8002bcc:	701a      	strb	r2, [r3, #0]
      break;
 8002bce:	e003      	b.n	8002bd8 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
      break;
 8002bd6:	bf00      	nop
  }

  return ret;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop

08002be4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fb17 	bl	800322e <lsm6dso_fsm_enable_get>
 8002c00:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <lsm6dso_gy_data_rate_set+0x28>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	e0e0      	b.n	8002dce <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002c0c:	7b3b      	ldrb	r3, [r7, #12]
 8002c0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c12:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002c14:	7b3b      	ldrb	r3, [r7, #12]
 8002c16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c1a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002c20:	7b3b      	ldrb	r3, [r7, #12]
 8002c22:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c26:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002c2c:	7b3b      	ldrb	r3, [r7, #12]
 8002c2e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c32:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002c38:	7b3b      	ldrb	r3, [r7, #12]
 8002c3a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c3e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002c44:	7b3b      	ldrb	r3, [r7, #12]
 8002c46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c4a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002c50:	7b3b      	ldrb	r3, [r7, #12]
 8002c52:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c56:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002c5c:	7b3b      	ldrb	r3, [r7, #12]
 8002c5e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c62:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002c68:	7b7b      	ldrb	r3, [r7, #13]
 8002c6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c6e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002c74:	7b7b      	ldrb	r3, [r7, #13]
 8002c76:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c7a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002c80:	7b7b      	ldrb	r3, [r7, #13]
 8002c82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c86:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002c8c:	7b7b      	ldrb	r3, [r7, #13]
 8002c8e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c92:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002c98:	7b7b      	ldrb	r3, [r7, #13]
 8002c9a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c9e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002ca4:	7b7b      	ldrb	r3, [r7, #13]
 8002ca6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002caa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002cac:	4313      	orrs	r3, r2
 8002cae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002cb0:	7b7b      	ldrb	r3, [r7, #13]
 8002cb2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002cb6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002cbc:	7b7b      	ldrb	r3, [r7, #13]
 8002cbe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002cc2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d164      	bne.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002ccc:	f107 030b 	add.w	r3, r7, #11
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 facc 	bl	8003270 <lsm6dso_fsm_data_rate_get>
 8002cd8:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <lsm6dso_gy_data_rate_set+0x100>
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	e074      	b.n	8002dce <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8002ce4:	7afb      	ldrb	r3, [r7, #11]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d852      	bhi.n	8002d90 <lsm6dso_gy_data_rate_set+0x1ac>
 8002cea:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf0 <lsm6dso_gy_data_rate_set+0x10c>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d13 	.word	0x08002d13
 8002cf8:	08002d31 	.word	0x08002d31
 8002cfc:	08002d5b 	.word	0x08002d5b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8002d06:	2301      	movs	r3, #1
 8002d08:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002d0a:	e044      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	75fb      	strb	r3, [r7, #23]
        break;
 8002d10:	e041      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002d1c:	e03b      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d102      	bne.n	8002d2a <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002d24:	2302      	movs	r3, #2
 8002d26:	75fb      	strb	r3, [r7, #23]
        break;
 8002d28:	e035      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	75fb      	strb	r3, [r7, #23]
        break;
 8002d2e:	e032      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002d36:	2303      	movs	r3, #3
 8002d38:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002d3a:	e02c      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d102      	bne.n	8002d48 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002d42:	2303      	movs	r3, #3
 8002d44:	75fb      	strb	r3, [r7, #23]
        break;
 8002d46:	e026      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d102      	bne.n	8002d54 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	75fb      	strb	r3, [r7, #23]
        break;
 8002d52:	e020      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	75fb      	strb	r3, [r7, #23]
        break;
 8002d58:	e01d      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002d60:	2304      	movs	r3, #4
 8002d62:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002d64:	e017      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	75fb      	strb	r3, [r7, #23]
        break;
 8002d70:	e011      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d102      	bne.n	8002d7e <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002d78:	2304      	movs	r3, #4
 8002d7a:	75fb      	strb	r3, [r7, #23]
        break;
 8002d7c:	e00b      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d102      	bne.n	8002d8a <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002d84:	2304      	movs	r3, #4
 8002d86:	75fb      	strb	r3, [r7, #23]
        break;
 8002d88:	e005      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	75fb      	strb	r3, [r7, #23]
        break;
 8002d8e:	e002      	b.n	8002d96 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	75fb      	strb	r3, [r7, #23]
        break;
 8002d94:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002d96:	f107 0208 	add.w	r2, r7, #8
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	2111      	movs	r1, #17
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fcc8 	bl	8002734 <lsm6dso_read_reg>
 8002da4:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	7a3b      	ldrb	r3, [r7, #8]
 8002db0:	f362 1307 	bfi	r3, r2, #4, #4
 8002db4:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002db6:	f107 0208 	add.w	r2, r7, #8
 8002dba:	2301      	movs	r3, #1
 8002dbc:	2111      	movs	r1, #17
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fcd0 	bl	8002764 <lsm6dso_write_reg>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]

  return ret;
 8002dcc:	693b      	ldr	r3, [r7, #16]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop

08002dd8 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002de2:	f107 0208 	add.w	r2, r7, #8
 8002de6:	2301      	movs	r3, #1
 8002de8:	2111      	movs	r1, #17
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff fca2 	bl	8002734 <lsm6dso_read_reg>
 8002df0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8002df2:	7a3b      	ldrb	r3, [r7, #8]
 8002df4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b0a      	cmp	r3, #10
 8002dfc:	d844      	bhi.n	8002e88 <lsm6dso_gy_data_rate_get+0xb0>
 8002dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002e04 <lsm6dso_gy_data_rate_get+0x2c>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e31 	.word	0x08002e31
 8002e08:	08002e39 	.word	0x08002e39
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	08002e49 	.word	0x08002e49
 8002e14:	08002e51 	.word	0x08002e51
 8002e18:	08002e59 	.word	0x08002e59
 8002e1c:	08002e61 	.word	0x08002e61
 8002e20:	08002e69 	.word	0x08002e69
 8002e24:	08002e71 	.word	0x08002e71
 8002e28:	08002e79 	.word	0x08002e79
 8002e2c:	08002e81 	.word	0x08002e81
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
      break;
 8002e36:	e02b      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
      break;
 8002e3e:	e027      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
      break;
 8002e46:	e023      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	701a      	strb	r2, [r3, #0]
      break;
 8002e4e:	e01f      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2204      	movs	r2, #4
 8002e54:	701a      	strb	r2, [r3, #0]
      break;
 8002e56:	e01b      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2205      	movs	r2, #5
 8002e5c:	701a      	strb	r2, [r3, #0]
      break;
 8002e5e:	e017      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2206      	movs	r2, #6
 8002e64:	701a      	strb	r2, [r3, #0]
      break;
 8002e66:	e013      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	701a      	strb	r2, [r3, #0]
      break;
 8002e6e:	e00f      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2208      	movs	r2, #8
 8002e74:	701a      	strb	r2, [r3, #0]
      break;
 8002e76:	e00b      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2209      	movs	r2, #9
 8002e7c:	701a      	strb	r2, [r3, #0]
      break;
 8002e7e:	e007      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	220a      	movs	r2, #10
 8002e84:	701a      	strb	r2, [r3, #0]
      break;
 8002e86:	e003      	b.n	8002e90 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
      break;
 8002e8e:	bf00      	nop
  }

  return ret;
 8002e90:	68fb      	ldr	r3, [r7, #12]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop

08002e9c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8002ea8:	f107 0208 	add.w	r2, r7, #8
 8002eac:	2301      	movs	r3, #1
 8002eae:	2112      	movs	r1, #18
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fc3f 	bl	8002734 <lsm6dso_read_reg>
 8002eb6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	7a3b      	ldrb	r3, [r7, #8]
 8002ec8:	f362 1386 	bfi	r3, r2, #6, #1
 8002ecc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8002ece:	f107 0208 	add.w	r2, r7, #8
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	2112      	movs	r1, #18
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff fc44 	bl	8002764 <lsm6dso_write_reg>
 8002edc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8002ef2:	f107 020c 	add.w	r2, r7, #12
 8002ef6:	2306      	movs	r3, #6
 8002ef8:	2122      	movs	r1, #34	@ 0x22
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fc1a 	bl	8002734 <lsm6dso_read_reg>
 8002f00:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002f02:	7b7b      	ldrb	r3, [r7, #13]
 8002f04:	b21a      	sxth	r2, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	7b3a      	ldrb	r2, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b21a      	sxth	r2, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	3302      	adds	r3, #2
 8002f28:	b212      	sxth	r2, r2
 8002f2a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	3302      	adds	r3, #2
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	7bba      	ldrb	r2, [r7, #14]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	3302      	adds	r3, #2
 8002f44:	b212      	sxth	r2, r2
 8002f46:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002f48:	7c7a      	ldrb	r2, [r7, #17]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	b212      	sxth	r2, r2
 8002f50:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	3304      	adds	r3, #4
 8002f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	7c3a      	ldrb	r2, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	b212      	sxth	r2, r2
 8002f6c:	801a      	strh	r2, [r3, #0]

  return ret;
 8002f6e:	697b      	ldr	r3, [r7, #20]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8002f82:	f107 020c 	add.w	r2, r7, #12
 8002f86:	2306      	movs	r3, #6
 8002f88:	2128      	movs	r1, #40	@ 0x28
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fbd2 	bl	8002734 <lsm6dso_read_reg>
 8002f90:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002f92:	7b7b      	ldrb	r3, [r7, #13]
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	7b3a      	ldrb	r2, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	b212      	sxth	r2, r2
 8002fba:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	7bba      	ldrb	r2, [r7, #14]
 8002fcc:	4413      	add	r3, r2
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	b212      	sxth	r2, r2
 8002fd6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002fd8:	7c7a      	ldrb	r2, [r7, #17]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	b212      	sxth	r2, r2
 8002fe0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	7c3a      	ldrb	r2, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	b212      	sxth	r2, r2
 8002ffc:	801a      	strh	r2, [r3, #0]

  return ret;
 8002ffe:	697b      	ldr	r3, [r7, #20]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8003014:	2300      	movs	r3, #0
 8003016:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	b2da      	uxtb	r2, r3
 8003020:	7a3b      	ldrb	r3, [r7, #8]
 8003022:	f362 1387 	bfi	r3, r2, #6, #2
 8003026:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8003028:	f107 0208 	add.w	r2, r7, #8
 800302c:	2301      	movs	r3, #1
 800302e:	2101      	movs	r1, #1
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fb97 	bl	8002764 <lsm6dso_write_reg>
 8003036:	60f8      	str	r0, [r7, #12]

  return ret;
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800304c:	2301      	movs	r3, #1
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	210f      	movs	r1, #15
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fb6e 	bl	8002734 <lsm6dso_read_reg>
 8003058:	60f8      	str	r0, [r7, #12]

  return ret;
 800305a:	68fb      	ldr	r3, [r7, #12]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003070:	f107 0208 	add.w	r2, r7, #8
 8003074:	2301      	movs	r3, #1
 8003076:	2112      	movs	r1, #18
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff fb5b 	bl	8002734 <lsm6dso_read_reg>
 800307e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	b2da      	uxtb	r2, r3
 800308e:	7a3b      	ldrb	r3, [r7, #8]
 8003090:	f362 0382 	bfi	r3, r2, #2, #1
 8003094:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003096:	f107 0208 	add.w	r2, r7, #8
 800309a:	2301      	movs	r3, #1
 800309c:	2112      	movs	r1, #18
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fb60 	bl	8002764 <lsm6dso_write_reg>
 80030a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80030a6:	68fb      	ldr	r3, [r7, #12]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80030bc:	f107 020c 	add.w	r2, r7, #12
 80030c0:	2301      	movs	r3, #1
 80030c2:	2118      	movs	r1, #24
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff fb35 	bl	8002734 <lsm6dso_read_reg>
 80030ca:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	09db      	lsrs	r3, r3, #7
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	7b3b      	ldrb	r3, [r7, #12]
 80030da:	f362 0341 	bfi	r3, r2, #1, #1
 80030de:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80030e0:	f107 020c 	add.w	r2, r7, #12
 80030e4:	2301      	movs	r3, #1
 80030e6:	2118      	movs	r1, #24
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fb3b 	bl	8002764 <lsm6dso_write_reg>
 80030ee:	4602      	mov	r2, r0
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	4413      	add	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <lsm6dso_i3c_disable_set+0x50>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	e01b      	b.n	8003138 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8003100:	f107 0210 	add.w	r2, r7, #16
 8003104:	2301      	movs	r3, #1
 8003106:	2162      	movs	r1, #98	@ 0x62
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fb13 	bl	8002734 <lsm6dso_read_reg>
 800310e:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	b2da      	uxtb	r2, r3
 8003118:	7c3b      	ldrb	r3, [r7, #16]
 800311a:	f362 03c4 	bfi	r3, r2, #3, #2
 800311e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8003120:	f107 0210 	add.w	r2, r7, #16
 8003124:	2301      	movs	r3, #1
 8003126:	2162      	movs	r1, #98	@ 0x62
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fb1b 	bl	8002764 <lsm6dso_write_reg>
 800312e:	4602      	mov	r2, r0
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4413      	add	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  return ret;
 8003136:	697b      	ldr	r3, [r7, #20]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <lsm6dso_6d_threshold_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_6d_threshold_set(stmdev_ctx_t *ctx,
                                 lsm6dso_sixd_ths_t val)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 800314c:	f107 0208 	add.w	r2, r7, #8
 8003150:	2301      	movs	r3, #1
 8003152:	2159      	movs	r1, #89	@ 0x59
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff faed 	bl	8002734 <lsm6dso_read_reg>
 800315a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <lsm6dso_6d_threshold_set+0x42>
  {
    reg.sixd_ths = (uint8_t)val;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	b2da      	uxtb	r2, r3
 800316a:	7a3b      	ldrb	r3, [r7, #8]
 800316c:	f362 1346 	bfi	r3, r2, #5, #2
 8003170:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 8003172:	f107 0208 	add.w	r2, r7, #8
 8003176:	2301      	movs	r3, #1
 8003178:	2159      	movs	r1, #89	@ 0x59
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff faf2 	bl	8002764 <lsm6dso_write_reg>
 8003180:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8003198:	f107 0208 	add.w	r2, r7, #8
 800319c:	2301      	movs	r3, #1
 800319e:	210a      	movs	r1, #10
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fac7 	bl	8002734 <lsm6dso_read_reg>
 80031a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	7a3b      	ldrb	r3, [r7, #8]
 80031b8:	f362 0302 	bfi	r3, r2, #0, #3
 80031bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80031be:	f107 0208 	add.w	r2, r7, #8
 80031c2:	2301      	movs	r3, #1
 80031c4:	210a      	movs	r1, #10
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff facc 	bl	8002764 <lsm6dso_write_reg>
 80031cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <lsm6dso_tilt_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_tilt_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_status_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80031e2:	2102      	movs	r1, #2
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff0f 	bl	8003008 <lsm6dso_mem_bank_set>
 80031ea:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <lsm6dso_tilt_flag_data_ready_get+0x1e>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	e017      	b.n	8003226 <lsm6dso_tilt_flag_data_ready_get+0x4e>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_STATUS, (uint8_t *)&reg, 1);
 80031f6:	f107 0208 	add.w	r2, r7, #8
 80031fa:	2301      	movs	r3, #1
 80031fc:	2112      	movs	r1, #18
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fa98 	bl	8002734 <lsm6dso_read_reg>
 8003204:	60f8      	str	r0, [r7, #12]
  *val = reg.is_tilt;
 8003206:	7a3b      	ldrb	r3, [r7, #8]
 8003208:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	701a      	strb	r2, [r3, #0]

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003214:	2100      	movs	r1, #0
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff fef6 	bl	8003008 <lsm6dso_mem_bank_set>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  return ret;
 8003224:	68fb      	ldr	r3, [r7, #12]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003238:	2102      	movs	r1, #2
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fee4 	bl	8003008 <lsm6dso_mem_bank_set>
 8003240:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8003242:	2302      	movs	r3, #2
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	2146      	movs	r1, #70	@ 0x46
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fa73 	bl	8002734 <lsm6dso_read_reg>
 800324e:	4602      	mov	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003256:	2100      	movs	r1, #0
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fed5 	bl	8003008 <lsm6dso_mem_bank_set>
 800325e:	4602      	mov	r2, r0
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  return ret;
 8003266:	68fb      	ldr	r3, [r7, #12]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800327a:	2102      	movs	r1, #2
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fec3 	bl	8003008 <lsm6dso_mem_bank_set>
 8003282:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <lsm6dso_fsm_data_rate_get+0x1e>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	e03a      	b.n	8003304 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 800328e:	f107 0208 	add.w	r2, r7, #8
 8003292:	2301      	movs	r3, #1
 8003294:	215f      	movs	r1, #95	@ 0x5f
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fa4c 	bl	8002734 <lsm6dso_read_reg>
 800329c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d125      	bne.n	80032f0 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 80032a4:	7a3b      	ldrb	r3, [r7, #8]
 80032a6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d81b      	bhi.n	80032e8 <lsm6dso_fsm_data_rate_get+0x78>
 80032b0:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <lsm6dso_fsm_data_rate_get+0x48>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032c9 	.word	0x080032c9
 80032bc:	080032d1 	.word	0x080032d1
 80032c0:	080032d9 	.word	0x080032d9
 80032c4:	080032e1 	.word	0x080032e1
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
      break;
 80032ce:	e010      	b.n	80032f2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
      break;
 80032d6:	e00c      	b.n	80032f2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2202      	movs	r2, #2
 80032dc:	701a      	strb	r2, [r3, #0]
      break;
 80032de:	e008      	b.n	80032f2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2203      	movs	r2, #3
 80032e4:	701a      	strb	r2, [r3, #0]
      break;
 80032e6:	e004      	b.n	80032f2 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
      break;
 80032ee:	e000      	b.n	80032f2 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 80032f0:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80032f2:	2100      	movs	r1, #0
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff fe87 	bl	8003008 <lsm6dso_mem_bank_set>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  return ret;
 8003302:	68fb      	ldr	r3, [r7, #12]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b090      	sub	sp, #64	@ 0x40
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_pin_int2_route_t  pin_int2_route;
  lsm6dso_emb_func_int1_t   emb_func_int1;
  lsm6dso_fsm_int1_a_t      fsm_int1_a;
  lsm6dso_fsm_int1_b_t      fsm_int1_b;
  lsm6dso_int1_ctrl_t       int1_ctrl = {0};
 800331a:	2300      	movs	r3, #0
 800331c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  /* INT1_CTRL */
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8003320:	793b      	ldrb	r3, [r7, #4]
 8003322:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800332c:	f362 0300 	bfi	r3, r2, #0, #1
 8003330:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8003334:	793b      	ldrb	r3, [r7, #4]
 8003336:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800333a:	b2da      	uxtb	r2, r3
 800333c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003340:	f362 0341 	bfi	r3, r2, #1, #1
 8003344:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_boot      = val.boot;
 8003348:	793b      	ldrb	r3, [r7, #4]
 800334a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800334e:	b2da      	uxtb	r2, r3
 8003350:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003354:	f362 0382 	bfi	r3, r2, #2, #1
 8003358:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 800335c:	793b      	ldrb	r3, [r7, #4]
 800335e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003362:	b2da      	uxtb	r2, r3
 8003364:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003368:	f362 03c3 	bfi	r3, r2, #3, #1
 800336c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8003370:	793b      	ldrb	r3, [r7, #4]
 8003372:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003376:	b2da      	uxtb	r2, r3
 8003378:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800337c:	f362 1304 	bfi	r3, r2, #4, #1
 8003380:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8003384:	793b      	ldrb	r3, [r7, #4]
 8003386:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800338a:	b2da      	uxtb	r2, r3
 800338c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003390:	f362 1345 	bfi	r3, r2, #5, #1
 8003394:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8003398:	793b      	ldrb	r3, [r7, #4]
 800339a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033a4:	f362 1386 	bfi	r3, r2, #6, #1
 80033a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 80033ac:	797b      	ldrb	r3, [r7, #5]
 80033ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033b8:	f362 13c7 	bfi	r3, r2, #7, #1
 80033bc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80033c0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80033c4:	2301      	movs	r3, #1
 80033c6:	210d      	movs	r1, #13
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7ff f9cb 	bl	8002764 <lsm6dso_write_reg>
 80033ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80033d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <lsm6dso_pin_int1_route_set+0xce>
 80033d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d8:	e33a      	b.n	8003a50 <lsm6dso_pin_int1_route_set+0x744>

  /* DRDY for temperature and/or timestamp */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80033da:	f107 0210 	add.w	r2, r7, #16
 80033de:	2301      	movs	r3, #1
 80033e0:	2113      	movs	r1, #19
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f7ff f9a6 	bl	8002734 <lsm6dso_read_reg>
 80033e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80033ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <lsm6dso_pin_int1_route_set+0xe8>
 80033f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f2:	e32d      	b.n	8003a50 <lsm6dso_pin_int1_route_set+0x744>

  if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 80033f4:	793b      	ldrb	r3, [r7, #4]
 80033f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	797b      	ldrb	r3, [r7, #5]
 80033fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4313      	orrs	r3, r2
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <lsm6dso_pin_int1_route_set+0x10a>
  {
    ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 800340c:	7c3b      	ldrb	r3, [r7, #16]
 800340e:	f043 0320 	orr.w	r3, r3, #32
 8003412:	743b      	strb	r3, [r7, #16]
 8003414:	e003      	b.n	800341e <lsm6dso_pin_int1_route_set+0x112>
  }
  else
  {
    ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8003416:	7c3b      	ldrb	r3, [r7, #16]
 8003418:	f36f 1345 	bfc	r3, #5, #1
 800341c:	743b      	strb	r3, [r7, #16]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800341e:	f107 0210 	add.w	r2, r7, #16
 8003422:	2301      	movs	r3, #1
 8003424:	2113      	movs	r1, #19
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff f99c 	bl	8002764 <lsm6dso_write_reg>
 800342c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800342e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <lsm6dso_pin_int1_route_set+0x12c>
 8003434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003436:	e30b      	b.n	8003a50 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8003438:	f107 0220 	add.w	r2, r7, #32
 800343c:	2301      	movs	r3, #1
 800343e:	210e      	movs	r1, #14
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff f977 	bl	8002734 <lsm6dso_read_reg>
 8003446:	63f8      	str	r0, [r7, #60]	@ 0x3c
  int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8003448:	793b      	ldrb	r3, [r7, #4]
 800344a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800344e:	b2da      	uxtb	r2, r3
 8003450:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003454:	f362 0382 	bfi	r3, r2, #2, #1
 8003458:	f887 3020 	strb.w	r3, [r7, #32]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 800345c:	f107 0220 	add.w	r2, r7, #32
 8003460:	2301      	movs	r3, #1
 8003462:	210e      	movs	r1, #14
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff f97d 	bl	8002764 <lsm6dso_write_reg>
 800346a:	4602      	mov	r2, r0
 800346c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800346e:	4413      	add	r3, r2
 8003470:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8003472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <lsm6dso_pin_int1_route_set+0x170>
 8003478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800347a:	e2e9      	b.n	8003a50 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800347c:	f107 0218 	add.w	r2, r7, #24
 8003480:	2301      	movs	r3, #1
 8003482:	215f      	movs	r1, #95	@ 0x5f
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff f955 	bl	8002734 <lsm6dso_read_reg>
 800348a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  md2_cfg.int2_timestamp = val.timestamp;
 800348c:	797b      	ldrb	r3, [r7, #5]
 800348e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003492:	b2da      	uxtb	r2, r3
 8003494:	7e3b      	ldrb	r3, [r7, #24]
 8003496:	f362 0300 	bfi	r3, r2, #0, #1
 800349a:	763b      	strb	r3, [r7, #24]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800349c:	f107 0218 	add.w	r2, r7, #24
 80034a0:	2301      	movs	r3, #1
 80034a2:	215f      	movs	r1, #95	@ 0x5f
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff f95d 	bl	8002764 <lsm6dso_write_reg>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ae:	4413      	add	r3, r2
 80034b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80034b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <lsm6dso_pin_int1_route_set+0x1b0>
 80034b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ba:	e2c9      	b.n	8003a50 <lsm6dso_pin_int1_route_set+0x744>

  /* emmbedded and FSM events */
  emb_func_int1.not_used_01 = 0;
 80034bc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80034c0:	f36f 0302 	bfc	r3, #0, #3
 80034c4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 80034c8:	79bb      	ldrb	r3, [r7, #6]
 80034ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80034d4:	f362 03c3 	bfi	r3, r2, #3, #1
 80034d8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 80034dc:	79bb      	ldrb	r3, [r7, #6]
 80034de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80034e8:	f362 1304 	bfi	r3, r2, #4, #1
 80034ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 80034f0:	79bb      	ldrb	r3, [r7, #6]
 80034f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80034fc:	f362 1345 	bfi	r3, r2, #5, #1
 8003500:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.not_used_02 = 0;
 8003504:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003508:	f36f 1386 	bfc	r3, #6, #1
 800350c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8003510:	79bb      	ldrb	r3, [r7, #6]
 8003512:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800351c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003520:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8003524:	79bb      	ldrb	r3, [r7, #6]
 8003526:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800352a:	b2da      	uxtb	r2, r3
 800352c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003530:	f362 0300 	bfi	r3, r2, #0, #1
 8003534:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8003538:	79bb      	ldrb	r3, [r7, #6]
 800353a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800353e:	b2da      	uxtb	r2, r3
 8003540:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003544:	f362 0341 	bfi	r3, r2, #1, #1
 8003548:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 800354c:	79bb      	ldrb	r3, [r7, #6]
 800354e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003552:	b2da      	uxtb	r2, r3
 8003554:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003558:	f362 0382 	bfi	r3, r2, #2, #1
 800355c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003566:	b2da      	uxtb	r2, r3
 8003568:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800356c:	f362 03c3 	bfi	r3, r2, #3, #1
 8003570:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003580:	f362 1304 	bfi	r3, r2, #4, #1
 8003584:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800358e:	b2da      	uxtb	r2, r3
 8003590:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003594:	f362 1345 	bfi	r3, r2, #5, #1
 8003598:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035a8:	f362 1386 	bfi	r3, r2, #6, #1
 80035ac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80035c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035d0:	f362 0300 	bfi	r3, r2, #0, #1
 80035d4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035e4:	f362 0341 	bfi	r3, r2, #1, #1
 80035e8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035f8:	f362 0382 	bfi	r3, r2, #2, #1
 80035fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 8003600:	7a3b      	ldrb	r3, [r7, #8]
 8003602:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800360c:	f362 03c3 	bfi	r3, r2, #3, #1
 8003610:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8003614:	7a3b      	ldrb	r3, [r7, #8]
 8003616:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003620:	f362 1304 	bfi	r3, r2, #4, #1
 8003624:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8003628:	7a3b      	ldrb	r3, [r7, #8]
 800362a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003634:	f362 1345 	bfi	r3, r2, #5, #1
 8003638:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 800363c:	7a3b      	ldrb	r3, [r7, #8]
 800363e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003648:	f362 1386 	bfi	r3, r2, #6, #1
 800364c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8003650:	7a3b      	ldrb	r3, [r7, #8]
 8003652:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003656:	b2da      	uxtb	r2, r3
 8003658:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800365c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003660:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003664:	2102      	movs	r1, #2
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff fcce 	bl	8003008 <lsm6dso_mem_bank_set>
 800366c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800366e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <lsm6dso_pin_int1_route_set+0x36c>
 8003674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003676:	e1eb      	b.n	8003a50 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 8003678:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800367c:	2301      	movs	r3, #1
 800367e:	210a      	movs	r1, #10
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff f86f 	bl	8002764 <lsm6dso_write_reg>
 8003686:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 8003688:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800368c:	2301      	movs	r3, #1
 800368e:	210b      	movs	r1, #11
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff f867 	bl	8002764 <lsm6dso_write_reg>
 8003696:	4602      	mov	r2, r0
 8003698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800369a:	4413      	add	r3, r2
 800369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 800369e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80036a2:	2301      	movs	r3, #1
 80036a4:	210c      	movs	r1, #12
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff f85c 	bl	8002764 <lsm6dso_write_reg>
 80036ac:	4602      	mov	r2, r0
 80036ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b0:	4413      	add	r3, r2
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80036b4:	2100      	movs	r1, #0
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff fca6 	bl	8003008 <lsm6dso_mem_bank_set>
 80036bc:	4602      	mov	r2, r0
 80036be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c0:	4413      	add	r3, r2
 80036c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80036c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <lsm6dso_pin_int1_route_set+0x3c2>
 80036ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036cc:	e1c0      	b.n	8003a50 <lsm6dso_pin_int1_route_set+0x744>

  /* MD1_CFG */
  md1_cfg.int1_shub         = val.sh_endop;
 80036ce:	797b      	ldrb	r3, [r7, #5]
 80036d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	7d3b      	ldrb	r3, [r7, #20]
 80036d8:	f362 0300 	bfi	r3, r2, #0, #1
 80036dc:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 80036de:	797b      	ldrb	r3, [r7, #5]
 80036e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	7d3b      	ldrb	r3, [r7, #20]
 80036e8:	f362 0382 	bfi	r3, r2, #2, #1
 80036ec:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 80036ee:	797b      	ldrb	r3, [r7, #5]
 80036f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	7d3b      	ldrb	r3, [r7, #20]
 80036f8:	f362 03c3 	bfi	r3, r2, #3, #1
 80036fc:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 80036fe:	797b      	ldrb	r3, [r7, #5]
 8003700:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	7d3b      	ldrb	r3, [r7, #20]
 8003708:	f362 1304 	bfi	r3, r2, #4, #1
 800370c:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 800370e:	797b      	ldrb	r3, [r7, #5]
 8003710:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003714:	b2da      	uxtb	r2, r3
 8003716:	7d3b      	ldrb	r3, [r7, #20]
 8003718:	f362 1345 	bfi	r3, r2, #5, #1
 800371c:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 800371e:	797b      	ldrb	r3, [r7, #5]
 8003720:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003724:	b2da      	uxtb	r2, r3
 8003726:	7d3b      	ldrb	r3, [r7, #20]
 8003728:	f362 1386 	bfi	r3, r2, #6, #1
 800372c:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 800372e:	79bb      	ldrb	r3, [r7, #6]
 8003730:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003734:	b2da      	uxtb	r2, r3
 8003736:	7d3b      	ldrb	r3, [r7, #20]
 8003738:	f362 13c7 	bfi	r3, r2, #7, #1
 800373c:	753b      	strb	r3, [r7, #20]

  if ((emb_func_int1.int1_fsm_lc
 800373e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003742:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003746:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_sig_mot
 8003748:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800374c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003750:	b2db      	uxtb	r3, r3
 8003752:	4313      	orrs	r3, r2
 8003754:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_step_detector
 8003756:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800375a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	4313      	orrs	r3, r2
 8003762:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_tilt
 8003764:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003768:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	4313      	orrs	r3, r2
 8003770:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm1
 8003772:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003776:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4313      	orrs	r3, r2
 800377e:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm2
 8003780:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003784:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm3
 800378e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003792:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm4
 800379c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80037a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm5
 80037aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80037ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4313      	orrs	r3, r2
 80037b6:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm6
 80037b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80037bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm7
 80037c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80037ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm8
 80037d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80037d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	4313      	orrs	r3, r2
 80037e0:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm9
 80037e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4313      	orrs	r3, r2
 80037ee:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm10
 80037f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm11
 80037fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003802:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm12
 800380c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003810:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003814:	b2db      	uxtb	r3, r3
 8003816:	4313      	orrs	r3, r2
 8003818:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm13
 800381a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800381e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm14
 8003828:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800382c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	4313      	orrs	r3, r2
 8003834:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm15
 8003836:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800383a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4313      	orrs	r3, r2
 8003842:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 8003844:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003848:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	4313      	orrs	r3, r2
 8003850:	b2db      	uxtb	r3, r3
  if ((emb_func_int1.int1_fsm_lc
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <lsm6dso_pin_int1_route_set+0x554>
  {
    md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 8003856:	7d3b      	ldrb	r3, [r7, #20]
 8003858:	f043 0302 	orr.w	r3, r3, #2
 800385c:	753b      	strb	r3, [r7, #20]
 800385e:	e003      	b.n	8003868 <lsm6dso_pin_int1_route_set+0x55c>
  }
  else
  {
    md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 8003860:	7d3b      	ldrb	r3, [r7, #20]
 8003862:	f36f 0341 	bfc	r3, #1, #1
 8003866:	753b      	strb	r3, [r7, #20]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003868:	f107 0214 	add.w	r2, r7, #20
 800386c:	2301      	movs	r3, #1
 800386e:	215e      	movs	r1, #94	@ 0x5e
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7fe ff77 	bl	8002764 <lsm6dso_write_reg>
 8003876:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8003878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <lsm6dso_pin_int1_route_set+0x576>
 800387e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003880:	e0e6      	b.n	8003a50 <lsm6dso_pin_int1_route_set+0x744>

  /* set interrupts_enable = 1 in TAP_CFG2 if it is the case */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8003882:	f107 021c 	add.w	r2, r7, #28
 8003886:	2301      	movs	r3, #1
 8003888:	2158      	movs	r1, #88	@ 0x58
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f7fe ff52 	bl	8002734 <lsm6dso_read_reg>
 8003890:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 8003892:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003896:	461a      	mov	r2, r3
 8003898:	2100      	movs	r1, #0
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fe3e 	bl	800451c <lsm6dso_pin_int2_route_get>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a4:	4413      	add	r3, r2
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80038a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <lsm6dso_pin_int1_route_set+0x5a6>
 80038ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b0:	e0ce      	b.n	8003a50 <lsm6dso_pin_int1_route_set+0x744>

  if ((pin_int2_route.fifo_bdr
 80038b2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80038b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80038ba:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_g
 80038bc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80038c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_temp
 80038ca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80038ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_xl
 80038d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80038dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4313      	orrs	r3, r2
 80038e4:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_full
 80038e6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80038ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4313      	orrs	r3, r2
 80038f2:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_ovr
 80038f4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80038f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	4313      	orrs	r3, r2
 8003900:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_th
 8003902:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003906:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4313      	orrs	r3, r2
 800390e:	b2da      	uxtb	r2, r3
       | pin_int2_route.six_d
 8003910:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003914:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	4313      	orrs	r3, r2
 800391c:	b2da      	uxtb	r2, r3
       | pin_int2_route.double_tap
 800391e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003922:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003926:	b2db      	uxtb	r3, r3
 8003928:	4313      	orrs	r3, r2
 800392a:	b2da      	uxtb	r2, r3
       | pin_int2_route.free_fall
 800392c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003930:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	4313      	orrs	r3, r2
 8003938:	b2da      	uxtb	r2, r3
       | pin_int2_route.wake_up
 800393a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800393e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4313      	orrs	r3, r2
 8003946:	b2da      	uxtb	r2, r3
       | pin_int2_route.single_tap
 8003948:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800394c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4313      	orrs	r3, r2
 8003954:	b2da      	uxtb	r2, r3
       | pin_int2_route.sleep_change
 8003956:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800395a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	4313      	orrs	r3, r2
 8003962:	b2da      	uxtb	r2, r3
       | int1_ctrl.den_drdy_flag
 8003964:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003968:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4313      	orrs	r3, r2
 8003970:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_boot
 8003972:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003976:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	4313      	orrs	r3, r2
 800397e:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_cnt_bdr
 8003980:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003984:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4313      	orrs	r3, r2
 800398c:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_g
 800398e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003992:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003996:	b2db      	uxtb	r3, r3
 8003998:	4313      	orrs	r3, r2
 800399a:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_xl
 800399c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_full
 80039aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_ovr
 80039b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	4313      	orrs	r3, r2
 80039c4:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_th
 80039c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4313      	orrs	r3, r2
 80039d2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_shub
 80039d4:	7d3b      	ldrb	r3, [r7, #20]
 80039d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4313      	orrs	r3, r2
 80039de:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_6d
 80039e0:	7d3b      	ldrb	r3, [r7, #20]
 80039e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	4313      	orrs	r3, r2
 80039ea:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_double_tap
 80039ec:	7d3b      	ldrb	r3, [r7, #20]
 80039ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4313      	orrs	r3, r2
 80039f6:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_ff
 80039f8:	7d3b      	ldrb	r3, [r7, #20]
 80039fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	4313      	orrs	r3, r2
 8003a02:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_wu
 8003a04:	7d3b      	ldrb	r3, [r7, #20]
 8003a06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_single_tap
 8003a10:	7d3b      	ldrb	r3, [r7, #20]
 8003a12:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 8003a1c:	7d3b      	ldrb	r3, [r7, #20]
 8003a1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	4313      	orrs	r3, r2
 8003a26:	b2db      	uxtb	r3, r3
  if ((pin_int2_route.fifo_bdr
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <lsm6dso_pin_int1_route_set+0x72a>
  {
    tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8003a2c:	7f3b      	ldrb	r3, [r7, #28]
 8003a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a32:	773b      	strb	r3, [r7, #28]
 8003a34:	e003      	b.n	8003a3e <lsm6dso_pin_int1_route_set+0x732>
  }
  else
  {
    tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8003a36:	7f3b      	ldrb	r3, [r7, #28]
 8003a38:	f36f 13c7 	bfc	r3, #7, #1
 8003a3c:	773b      	strb	r3, [r7, #28]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8003a3e:	f107 021c 	add.w	r2, r7, #28
 8003a42:	2301      	movs	r3, #1
 8003a44:	2158      	movs	r1, #88	@ 0x58
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7fe fe8c 	bl	8002764 <lsm6dso_write_reg>
 8003a4c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  return ret;
 8003a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3740      	adds	r7, #64	@ 0x40
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <lsm6dso_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t *val)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08c      	sub	sp, #48	@ 0x30
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  lsm6dso_md2_cfg_t         md2_cfg;
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003a62:	2102      	movs	r1, #2
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff facf 	bl	8003008 <lsm6dso_mem_bank_set>
 8003a6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <lsm6dso_pin_int1_route_get+0x1e>
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	e1dc      	b.n	8003e30 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 8003a76:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	210a      	movs	r1, #10
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fe fe58 	bl	8002734 <lsm6dso_read_reg>
 8003a84:	62f8      	str	r0, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 8003a86:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	210b      	movs	r1, #11
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe fe50 	bl	8002734 <lsm6dso_read_reg>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a98:	4413      	add	r3, r2
 8003a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8003a9c:	f107 0220 	add.w	r2, r7, #32
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	210c      	movs	r1, #12
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fe fe45 	bl	8002734 <lsm6dso_read_reg>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aae:	4413      	add	r3, r2
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff faa7 	bl	8003008 <lsm6dso_mem_bank_set>
 8003aba:	4602      	mov	r2, r0
 8003abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003abe:	4413      	add	r3, r2
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <lsm6dso_pin_int1_route_get+0x74>
 8003ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aca:	e1b1      	b.n	8003e30 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003acc:	f107 021c 	add.w	r2, r7, #28
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	210d      	movs	r1, #13
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fe fe2d 	bl	8002734 <lsm6dso_read_reg>
 8003ada:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <lsm6dso_pin_int1_route_get+0x8e>
 8003ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae4:	e1a4      	b.n	8003e30 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003ae6:	f107 0210 	add.w	r2, r7, #16
 8003aea:	2301      	movs	r3, #1
 8003aec:	215e      	movs	r1, #94	@ 0x5e
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe fe20 	bl	8002734 <lsm6dso_read_reg>
 8003af4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <lsm6dso_pin_int1_route_get+0xa8>
 8003afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afe:	e197      	b.n	8003e30 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003b00:	f107 020c 	add.w	r2, r7, #12
 8003b04:	2301      	movs	r3, #1
 8003b06:	2113      	movs	r1, #19
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fe fe13 	bl	8002734 <lsm6dso_read_reg>
 8003b0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <lsm6dso_pin_int1_route_get+0xc2>
 8003b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b18:	e18a      	b.n	8003e30 <lsm6dso_pin_int1_route_get+0x3d8>

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 8003b1a:	7b3b      	ldrb	r3, [r7, #12]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d025      	beq.n	8003b72 <lsm6dso_pin_int1_route_get+0x11a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8003b26:	f107 0218 	add.w	r2, r7, #24
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	210e      	movs	r1, #14
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe fe00 	bl	8002734 <lsm6dso_read_reg>
 8003b34:	62f8      	str	r0, [r7, #44]	@ 0x2c
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8003b36:	7e3b      	ldrb	r3, [r7, #24]
 8003b38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b3c:	b2d9      	uxtb	r1, r3
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	7813      	ldrb	r3, [r2, #0]
 8003b42:	f361 0382 	bfi	r3, r1, #2, #1
 8003b46:	7013      	strb	r3, [r2, #0]

    ret += lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8003b48:	f107 0214 	add.w	r2, r7, #20
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	215f      	movs	r1, #95	@ 0x5f
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fe fdef 	bl	8002734 <lsm6dso_read_reg>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5a:	4413      	add	r3, r2
 8003b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    val->timestamp = md2_cfg.int2_timestamp;
 8003b5e:	7d3b      	ldrb	r3, [r7, #20]
 8003b60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b64:	b2d9      	uxtb	r1, r3
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	7853      	ldrb	r3, [r2, #1]
 8003b6a:	f361 0382 	bfi	r3, r1, #2, #1
 8003b6e:	7053      	strb	r3, [r2, #1]
 8003b70:	e009      	b.n	8003b86 <lsm6dso_pin_int1_route_get+0x12e>
  }
  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	7813      	ldrb	r3, [r2, #0]
 8003b76:	f36f 0382 	bfc	r3, #2, #1
 8003b7a:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	7853      	ldrb	r3, [r2, #1]
 8003b80:	f36f 0382 	bfc	r3, #2, #1
 8003b84:	7053      	strb	r3, [r2, #1]
  }
  if (ret != 0) { return ret; }
 8003b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <lsm6dso_pin_int1_route_get+0x138>
 8003b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8e:	e14f      	b.n	8003e30 <lsm6dso_pin_int1_route_get+0x3d8>

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8003b90:	7f3b      	ldrb	r3, [r7, #28]
 8003b92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b96:	b2d9      	uxtb	r1, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	7813      	ldrb	r3, [r2, #0]
 8003b9c:	f361 0300 	bfi	r3, r1, #0, #1
 8003ba0:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 8003ba2:	7f3b      	ldrb	r3, [r7, #28]
 8003ba4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ba8:	b2d9      	uxtb	r1, r3
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	7813      	ldrb	r3, [r2, #0]
 8003bae:	f361 0341 	bfi	r3, r1, #1, #1
 8003bb2:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 8003bb4:	7f3b      	ldrb	r3, [r7, #28]
 8003bb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003bba:	b2d9      	uxtb	r1, r3
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	7813      	ldrb	r3, [r2, #0]
 8003bc0:	f361 03c3 	bfi	r3, r1, #3, #1
 8003bc4:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 8003bc6:	7f3b      	ldrb	r3, [r7, #28]
 8003bc8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003bcc:	b2d9      	uxtb	r1, r3
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	7813      	ldrb	r3, [r2, #0]
 8003bd2:	f361 1304 	bfi	r3, r1, #4, #1
 8003bd6:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 8003bd8:	7f3b      	ldrb	r3, [r7, #28]
 8003bda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003bde:	b2d9      	uxtb	r1, r3
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	7813      	ldrb	r3, [r2, #0]
 8003be4:	f361 1345 	bfi	r3, r1, #5, #1
 8003be8:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 8003bea:	7f3b      	ldrb	r3, [r7, #28]
 8003bec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003bf0:	b2d9      	uxtb	r1, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	7813      	ldrb	r3, [r2, #0]
 8003bf6:	f361 1386 	bfi	r3, r1, #6, #1
 8003bfa:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 8003bfc:	7f3b      	ldrb	r3, [r7, #28]
 8003bfe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c02:	b2d9      	uxtb	r1, r3
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	7813      	ldrb	r3, [r2, #0]
 8003c08:	f361 13c7 	bfi	r3, r1, #7, #1
 8003c0c:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 8003c0e:	7f3b      	ldrb	r3, [r7, #28]
 8003c10:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003c14:	b2d9      	uxtb	r1, r3
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	7853      	ldrb	r3, [r2, #1]
 8003c1a:	f361 0300 	bfi	r3, r1, #0, #1
 8003c1e:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 8003c20:	7c3b      	ldrb	r3, [r7, #16]
 8003c22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c26:	b2d9      	uxtb	r1, r3
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	7853      	ldrb	r3, [r2, #1]
 8003c2c:	f361 0341 	bfi	r3, r1, #1, #1
 8003c30:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 8003c32:	7c3b      	ldrb	r3, [r7, #16]
 8003c34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c38:	b2d9      	uxtb	r1, r3
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	7853      	ldrb	r3, [r2, #1]
 8003c3e:	f361 03c3 	bfi	r3, r1, #3, #1
 8003c42:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 8003c44:	7c3b      	ldrb	r3, [r7, #16]
 8003c46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c4a:	b2d9      	uxtb	r1, r3
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	7853      	ldrb	r3, [r2, #1]
 8003c50:	f361 1304 	bfi	r3, r1, #4, #1
 8003c54:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 8003c56:	7c3b      	ldrb	r3, [r7, #16]
 8003c58:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c5c:	b2d9      	uxtb	r1, r3
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	7853      	ldrb	r3, [r2, #1]
 8003c62:	f361 1345 	bfi	r3, r1, #5, #1
 8003c66:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 8003c68:	7c3b      	ldrb	r3, [r7, #16]
 8003c6a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c6e:	b2d9      	uxtb	r1, r3
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	7853      	ldrb	r3, [r2, #1]
 8003c74:	f361 1386 	bfi	r3, r1, #6, #1
 8003c78:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 8003c7a:	7c3b      	ldrb	r3, [r7, #16]
 8003c7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c80:	b2d9      	uxtb	r1, r3
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	7853      	ldrb	r3, [r2, #1]
 8003c86:	f361 13c7 	bfi	r3, r1, #7, #1
 8003c8a:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 8003c8c:	7c3b      	ldrb	r3, [r7, #16]
 8003c8e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003c92:	b2d9      	uxtb	r1, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	7893      	ldrb	r3, [r2, #2]
 8003c98:	f361 0300 	bfi	r3, r1, #0, #1
 8003c9c:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 8003c9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ca2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ca6:	b2d9      	uxtb	r1, r3
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	7893      	ldrb	r3, [r2, #2]
 8003cac:	f361 0341 	bfi	r3, r1, #1, #1
 8003cb0:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 8003cb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cb6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003cba:	b2d9      	uxtb	r1, r3
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	7893      	ldrb	r3, [r2, #2]
 8003cc0:	f361 0382 	bfi	r3, r1, #2, #1
 8003cc4:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 8003cc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003cce:	b2d9      	uxtb	r1, r3
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	7893      	ldrb	r3, [r2, #2]
 8003cd4:	f361 03c3 	bfi	r3, r1, #3, #1
 8003cd8:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 8003cda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cde:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ce2:	b2d9      	uxtb	r1, r3
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	7893      	ldrb	r3, [r2, #2]
 8003ce8:	f361 1304 	bfi	r3, r1, #4, #1
 8003cec:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 8003cee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003cf2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cf6:	b2d9      	uxtb	r1, r3
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	7893      	ldrb	r3, [r2, #2]
 8003cfc:	f361 1345 	bfi	r3, r1, #5, #1
 8003d00:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 8003d02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d0a:	b2d9      	uxtb	r1, r3
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	7893      	ldrb	r3, [r2, #2]
 8003d10:	f361 1386 	bfi	r3, r1, #6, #1
 8003d14:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 8003d16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d1e:	b2d9      	uxtb	r1, r3
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	7893      	ldrb	r3, [r2, #2]
 8003d24:	f361 13c7 	bfi	r3, r1, #7, #1
 8003d28:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 8003d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d2e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d32:	b2d9      	uxtb	r1, r3
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	78d3      	ldrb	r3, [r2, #3]
 8003d38:	f361 0300 	bfi	r3, r1, #0, #1
 8003d3c:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 8003d3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d42:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d46:	b2d9      	uxtb	r1, r3
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	78d3      	ldrb	r3, [r2, #3]
 8003d4c:	f361 0341 	bfi	r3, r1, #1, #1
 8003d50:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 8003d52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d56:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d5a:	b2d9      	uxtb	r1, r3
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	78d3      	ldrb	r3, [r2, #3]
 8003d60:	f361 0382 	bfi	r3, r1, #2, #1
 8003d64:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 8003d66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d6a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d6e:	b2d9      	uxtb	r1, r3
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	78d3      	ldrb	r3, [r2, #3]
 8003d74:	f361 03c3 	bfi	r3, r1, #3, #1
 8003d78:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 8003d7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d7e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d82:	b2d9      	uxtb	r1, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	78d3      	ldrb	r3, [r2, #3]
 8003d88:	f361 1304 	bfi	r3, r1, #4, #1
 8003d8c:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 8003d8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d96:	b2d9      	uxtb	r1, r3
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	78d3      	ldrb	r3, [r2, #3]
 8003d9c:	f361 1345 	bfi	r3, r1, #5, #1
 8003da0:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 8003da2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003da6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003daa:	b2d9      	uxtb	r1, r3
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	78d3      	ldrb	r3, [r2, #3]
 8003db0:	f361 1386 	bfi	r3, r1, #6, #1
 8003db4:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 8003db6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003dbe:	b2d9      	uxtb	r1, r3
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	78d3      	ldrb	r3, [r2, #3]
 8003dc4:	f361 13c7 	bfi	r3, r1, #7, #1
 8003dc8:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 8003dca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003dd2:	b2d9      	uxtb	r1, r3
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	7913      	ldrb	r3, [r2, #4]
 8003dd8:	f361 0300 	bfi	r3, r1, #0, #1
 8003ddc:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 8003dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003de2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003de6:	b2d9      	uxtb	r1, r3
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	7913      	ldrb	r3, [r2, #4]
 8003dec:	f361 0341 	bfi	r3, r1, #1, #1
 8003df0:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 8003df2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003df6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003dfa:	b2d9      	uxtb	r1, r3
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	7913      	ldrb	r3, [r2, #4]
 8003e00:	f361 0382 	bfi	r3, r1, #2, #1
 8003e04:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 8003e06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e0e:	b2d9      	uxtb	r1, r3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	7913      	ldrb	r3, [r2, #4]
 8003e14:	f361 03c3 	bfi	r3, r1, #3, #1
 8003e18:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 8003e1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e22:	b2d9      	uxtb	r1, r3
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	7913      	ldrb	r3, [r2, #4]
 8003e28:	f361 1304 	bfi	r3, r1, #4, #1
 8003e2c:	7113      	strb	r3, [r2, #4]

  return ret;
 8003e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3730      	adds	r7, #48	@ 0x30
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <lsm6dso_pin_int2_route_set>:
  *
  */
int32_t lsm6dso_pin_int2_route_set(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t val)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b090      	sub	sp, #64	@ 0x40
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	4639      	mov	r1, r7
 8003e44:	e881 000c 	stmia.w	r1, {r2, r3}
  lsm6dso_tap_cfg2_t       tap_cfg2;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                  ret;
  ret = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (aux_ctx != NULL)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01f      	beq.n	8003e92 <lsm6dso_pin_int2_route_set+0x5a>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 8003e52:	f107 0214 	add.w	r2, r7, #20
 8003e56:	2301      	movs	r3, #1
 8003e58:	216f      	movs	r1, #111	@ 0x6f
 8003e5a:	68b8      	ldr	r0, [r7, #8]
 8003e5c:	f7fe fc6a 	bl	8002734 <lsm6dso_read_reg>
 8003e60:	63f8      	str	r0, [r7, #60]	@ 0x3c
    int_ois.int2_drdy_ois = val.drdy_ois;
 8003e62:	783b      	ldrb	r3, [r7, #0]
 8003e64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	7d3b      	ldrb	r3, [r7, #20]
 8003e6c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003e70:	753b      	strb	r3, [r7, #20]
    ret += lsm6dso_write_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 8003e72:	f107 0214 	add.w	r2, r7, #20
 8003e76:	2301      	movs	r3, #1
 8003e78:	216f      	movs	r1, #111	@ 0x6f
 8003e7a:	68b8      	ldr	r0, [r7, #8]
 8003e7c:	f7fe fc72 	bl	8002764 <lsm6dso_write_reg>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e84:	4413      	add	r3, r2
 8003e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8003e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <lsm6dso_pin_int2_route_set+0x5a>
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e90:	e340      	b.n	8004514 <lsm6dso_pin_int2_route_set+0x6dc>
  }

  if (ctx != NULL)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 833c 	beq.w	8004512 <lsm6dso_pin_int2_route_set+0x6da>
  {
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 8003e9a:	783b      	ldrb	r3, [r7, #0]
 8003e9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ea6:	f362 0300 	bfi	r3, r2, #0, #1
 8003eaa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_g    = val.drdy_g;
 8003eae:	783b      	ldrb	r3, [r7, #0]
 8003eb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003eba:	f362 0341 	bfi	r3, r2, #1, #1
 8003ebe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8003ec2:	783b      	ldrb	r3, [r7, #0]
 8003ec4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ece:	f362 0382 	bfi	r3, r2, #2, #1
 8003ed2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_th   = val.fifo_th;
 8003ed6:	783b      	ldrb	r3, [r7, #0]
 8003ed8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ee2:	f362 03c3 	bfi	r3, r2, #3, #1
 8003ee6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 8003eea:	783b      	ldrb	r3, [r7, #0]
 8003eec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ef6:	f362 1304 	bfi	r3, r2, #4, #1
 8003efa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_full = val.fifo_full;
 8003efe:	783b      	ldrb	r3, [r7, #0]
 8003f00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f0a:	f362 1345 	bfi	r3, r2, #5, #1
 8003f0e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
 8003f12:	783b      	ldrb	r3, [r7, #0]
 8003f14:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f1e:	f362 1386 	bfi	r3, r2, #6, #1
 8003f22:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.not_used_01    = 0;
 8003f26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f2a:	f36f 13c7 	bfc	r3, #7, #1
 8003f2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8003f32:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003f36:	2301      	movs	r3, #1
 8003f38:	210e      	movs	r1, #14
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7fe fc12 	bl	8002764 <lsm6dso_write_reg>
 8003f40:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8003f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <lsm6dso_pin_int2_route_set+0x114>
 8003f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4a:	e2e3      	b.n	8004514 <lsm6dso_pin_int2_route_set+0x6dc>

    md2_cfg.int2_timestamp    = val.timestamp;
 8003f4c:	787b      	ldrb	r3, [r7, #1]
 8003f4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	7f3b      	ldrb	r3, [r7, #28]
 8003f56:	f362 0300 	bfi	r3, r2, #0, #1
 8003f5a:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_6d           = val.six_d;
 8003f5c:	787b      	ldrb	r3, [r7, #1]
 8003f5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	7f3b      	ldrb	r3, [r7, #28]
 8003f66:	f362 0382 	bfi	r3, r2, #2, #1
 8003f6a:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_double_tap   = val.double_tap;
 8003f6c:	787b      	ldrb	r3, [r7, #1]
 8003f6e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	7f3b      	ldrb	r3, [r7, #28]
 8003f76:	f362 03c3 	bfi	r3, r2, #3, #1
 8003f7a:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_ff           = val.free_fall;
 8003f7c:	787b      	ldrb	r3, [r7, #1]
 8003f7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	7f3b      	ldrb	r3, [r7, #28]
 8003f86:	f362 1304 	bfi	r3, r2, #4, #1
 8003f8a:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_wu           = val.wake_up;
 8003f8c:	787b      	ldrb	r3, [r7, #1]
 8003f8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	7f3b      	ldrb	r3, [r7, #28]
 8003f96:	f362 1345 	bfi	r3, r2, #5, #1
 8003f9a:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_single_tap   = val.single_tap;
 8003f9c:	787b      	ldrb	r3, [r7, #1]
 8003f9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	7f3b      	ldrb	r3, [r7, #28]
 8003fa6:	f362 1386 	bfi	r3, r2, #6, #1
 8003faa:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_sleep_change = val.sleep_change;
 8003fac:	787b      	ldrb	r3, [r7, #1]
 8003fae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	7f3b      	ldrb	r3, [r7, #28]
 8003fb6:	f362 13c7 	bfi	r3, r2, #7, #1
 8003fba:	773b      	strb	r3, [r7, #28]
    emb_func_int2.not_used_01 = 0;
 8003fbc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003fc0:	f36f 0302 	bfc	r3, #0, #3
 8003fc4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2. int2_step_detector = val.step_detector;
 8003fc8:	787b      	ldrb	r3, [r7, #1]
 8003fca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003fd4:	f362 03c3 	bfi	r3, r2, #3, #1
 8003fd8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_tilt           = val.tilt;
 8003fdc:	78bb      	ldrb	r3, [r7, #2]
 8003fde:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003fe8:	f362 1304 	bfi	r3, r2, #4, #1
 8003fec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_sig_mot        = val.sig_mot;
 8003ff0:	78bb      	ldrb	r3, [r7, #2]
 8003ff2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003ffc:	f362 1345 	bfi	r3, r2, #5, #1
 8004000:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.not_used_02 = 0;
 8004004:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004008:	f36f 1386 	bfc	r3, #6, #1
 800400c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_fsm_lc         = val.fsm_lc;
 8004010:	78bb      	ldrb	r3, [r7, #2]
 8004012:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800401c:	f362 13c7 	bfi	r3, r2, #7, #1
 8004020:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    fsm_int2_a.int2_fsm1 = val.fsm1;
 8004024:	78bb      	ldrb	r3, [r7, #2]
 8004026:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800402a:	b2da      	uxtb	r2, r3
 800402c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004030:	f362 0300 	bfi	r3, r2, #0, #1
 8004034:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm2 = val.fsm2;
 8004038:	78bb      	ldrb	r3, [r7, #2]
 800403a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004044:	f362 0341 	bfi	r3, r2, #1, #1
 8004048:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm3 = val.fsm3;
 800404c:	78bb      	ldrb	r3, [r7, #2]
 800404e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004052:	b2da      	uxtb	r2, r3
 8004054:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004058:	f362 0382 	bfi	r3, r2, #2, #1
 800405c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm4 = val.fsm4;
 8004060:	78bb      	ldrb	r3, [r7, #2]
 8004062:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004066:	b2da      	uxtb	r2, r3
 8004068:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800406c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004070:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm5 = val.fsm5;
 8004074:	78bb      	ldrb	r3, [r7, #2]
 8004076:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800407a:	b2da      	uxtb	r2, r3
 800407c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004080:	f362 1304 	bfi	r3, r2, #4, #1
 8004084:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm6 = val.fsm6;
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800408e:	b2da      	uxtb	r2, r3
 8004090:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004094:	f362 1345 	bfi	r3, r2, #5, #1
 8004098:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm7 = val.fsm7;
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80040a8:	f362 1386 	bfi	r3, r2, #6, #1
 80040ac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm8 = val.fsm8;
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80040bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80040c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80040d0:	f362 0300 	bfi	r3, r2, #0, #1
 80040d4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm10 = val.fsm10;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80040e4:	f362 0341 	bfi	r3, r2, #1, #1
 80040e8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm11 = val.fsm11;
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80040f8:	f362 0382 	bfi	r3, r2, #2, #1
 80040fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm12 = val.fsm12;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800410c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004110:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm13 = val.fsm13;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800411a:	b2da      	uxtb	r2, r3
 800411c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004120:	f362 1304 	bfi	r3, r2, #4, #1
 8004124:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm14 = val.fsm14;
 8004128:	793b      	ldrb	r3, [r7, #4]
 800412a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004134:	f362 1345 	bfi	r3, r2, #5, #1
 8004138:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm15 = val.fsm15;
 800413c:	793b      	ldrb	r3, [r7, #4]
 800413e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004142:	b2da      	uxtb	r2, r3
 8004144:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004148:	f362 1386 	bfi	r3, r2, #6, #1
 800414c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm16 = val.fsm16;
 8004150:	793b      	ldrb	r3, [r7, #4]
 8004152:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800415c:	f362 13c7 	bfi	r3, r2, #7, #1
 8004160:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004164:	f107 0218 	add.w	r2, r7, #24
 8004168:	2301      	movs	r3, #1
 800416a:	2113      	movs	r1, #19
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7fe fae1 	bl	8002734 <lsm6dso_read_reg>
 8004172:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8004174:	783b      	ldrb	r3, [r7, #0]
 8004176:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	787b      	ldrb	r3, [r7, #1]
 800417e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	4313      	orrs	r3, r2
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <lsm6dso_pin_int2_route_set+0x35c>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 800418c:	7e3b      	ldrb	r3, [r7, #24]
 800418e:	f36f 1345 	bfc	r3, #5, #1
 8004192:	763b      	strb	r3, [r7, #24]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004194:	f107 0218 	add.w	r2, r7, #24
 8004198:	2301      	movs	r3, #1
 800419a:	2113      	movs	r1, #19
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7fe fae1 	bl	8002764 <lsm6dso_write_reg>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a6:	4413      	add	r3, r2
 80041a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 80041aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <lsm6dso_pin_int2_route_set+0x37c>
 80041b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b2:	e1af      	b.n	8004514 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80041b4:	2102      	movs	r1, #2
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f7fe ff26 	bl	8003008 <lsm6dso_mem_bank_set>
 80041bc:	63f8      	str	r0, [r7, #60]	@ 0x3c

    ret += lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&emb_func_int2, 1);
 80041be:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80041c2:	2301      	movs	r3, #1
 80041c4:	210e      	movs	r1, #14
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f7fe facc 	bl	8002764 <lsm6dso_write_reg>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d0:	4413      	add	r3, r2
 80041d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_A, (uint8_t *)&fsm_int2_a, 1);
 80041d4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80041d8:	2301      	movs	r3, #1
 80041da:	210f      	movs	r1, #15
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7fe fac1 	bl	8002764 <lsm6dso_write_reg>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e6:	4413      	add	r3, r2
 80041e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_B, (uint8_t *)&fsm_int2_b, 1);
 80041ea:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80041ee:	2301      	movs	r3, #1
 80041f0:	2110      	movs	r1, #16
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7fe fab6 	bl	8002764 <lsm6dso_write_reg>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041fc:	4413      	add	r3, r2
 80041fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004200:	2100      	movs	r1, #0
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7fe ff00 	bl	8003008 <lsm6dso_mem_bank_set>
 8004208:	4602      	mov	r2, r0
 800420a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800420c:	4413      	add	r3, r2
 800420e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8004210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <lsm6dso_pin_int2_route_set+0x3e2>
 8004216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004218:	e17c      	b.n	8004514 <lsm6dso_pin_int2_route_set+0x6dc>

    if ((emb_func_int2.int2_fsm_lc
 800421a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800421e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004222:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_sig_mot
 8004224:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004228:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	4313      	orrs	r3, r2
 8004230:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_step_detector
 8004232:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004236:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800423a:	b2db      	uxtb	r3, r3
 800423c:	4313      	orrs	r3, r2
 800423e:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_tilt
 8004240:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004244:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004248:	b2db      	uxtb	r3, r3
 800424a:	4313      	orrs	r3, r2
 800424c:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm1
 800424e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004252:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	4313      	orrs	r3, r2
 800425a:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm2
 800425c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004260:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	4313      	orrs	r3, r2
 8004268:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm3
 800426a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800426e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004272:	b2db      	uxtb	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm4
 8004278:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800427c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm5
 8004286:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800428a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800428e:	b2db      	uxtb	r3, r3
 8004290:	4313      	orrs	r3, r2
 8004292:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm6
 8004294:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004298:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm7
 80042a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80042a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm8
 80042b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80042b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm9
 80042be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	4313      	orrs	r3, r2
 80042ca:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm10
 80042cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	4313      	orrs	r3, r2
 80042d8:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm11
 80042da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm12
 80042e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	4313      	orrs	r3, r2
 80042f4:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm13
 80042f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	4313      	orrs	r3, r2
 8004302:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm14
 8004304:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004308:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	4313      	orrs	r3, r2
 8004310:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm15
 8004312:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004316:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	4313      	orrs	r3, r2
 800431e:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm16) != PROPERTY_DISABLE)
 8004320:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004324:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004328:	b2db      	uxtb	r3, r3
 800432a:	4313      	orrs	r3, r2
 800432c:	b2db      	uxtb	r3, r3
    if ((emb_func_int2.int2_fsm_lc
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <lsm6dso_pin_int2_route_set+0x504>
    {
      md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 8004332:	7f3b      	ldrb	r3, [r7, #28]
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	773b      	strb	r3, [r7, #28]
 800433a:	e003      	b.n	8004344 <lsm6dso_pin_int2_route_set+0x50c>
    }
    else
    {
      md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 800433c:	7f3b      	ldrb	r3, [r7, #28]
 800433e:	f36f 0341 	bfc	r3, #1, #1
 8004342:	773b      	strb	r3, [r7, #28]
    }

    ret = lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8004344:	f107 021c 	add.w	r2, r7, #28
 8004348:	2301      	movs	r3, #1
 800434a:	215f      	movs	r1, #95	@ 0x5f
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7fe fa09 	bl	8002764 <lsm6dso_write_reg>
 8004352:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8004354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <lsm6dso_pin_int2_route_set+0x526>
 800435a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435c:	e0da      	b.n	8004514 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 800435e:	f107 0220 	add.w	r2, r7, #32
 8004362:	2301      	movs	r3, #1
 8004364:	2158      	movs	r1, #88	@ 0x58
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7fe f9e4 	bl	8002734 <lsm6dso_read_reg>
 800436c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    ret += lsm6dso_pin_int1_route_get(ctx, &pin_int1_route);
 800436e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004372:	4619      	mov	r1, r3
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff fb6f 	bl	8003a58 <lsm6dso_pin_int1_route_get>
 800437a:	4602      	mov	r2, r0
 800437c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437e:	4413      	add	r3, r2
 8004380:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if ((val.fifo_bdr
 8004382:	783b      	ldrb	r3, [r7, #0]
 8004384:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004388:	b2da      	uxtb	r2, r3
         | val.drdy_g
 800438a:	783b      	ldrb	r3, [r7, #0]
 800438c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	4313      	orrs	r3, r2
 8004394:	b2da      	uxtb	r2, r3
         | val.drdy_temp
 8004396:	783b      	ldrb	r3, [r7, #0]
 8004398:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	b2da      	uxtb	r2, r3
         | val.drdy_xl
 80043a2:	783b      	ldrb	r3, [r7, #0]
 80043a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	4313      	orrs	r3, r2
 80043ac:	b2da      	uxtb	r2, r3
         | val.fifo_full
 80043ae:	783b      	ldrb	r3, [r7, #0]
 80043b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4313      	orrs	r3, r2
 80043b8:	b2da      	uxtb	r2, r3
         | val.fifo_ovr
 80043ba:	783b      	ldrb	r3, [r7, #0]
 80043bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4313      	orrs	r3, r2
 80043c4:	b2da      	uxtb	r2, r3
         | val.fifo_th
 80043c6:	783b      	ldrb	r3, [r7, #0]
 80043c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b2da      	uxtb	r2, r3
         | val.six_d
 80043d2:	787b      	ldrb	r3, [r7, #1]
 80043d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	4313      	orrs	r3, r2
 80043dc:	b2da      	uxtb	r2, r3
         | val.double_tap
 80043de:	787b      	ldrb	r3, [r7, #1]
 80043e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	4313      	orrs	r3, r2
 80043e8:	b2da      	uxtb	r2, r3
         | val.free_fall
 80043ea:	787b      	ldrb	r3, [r7, #1]
 80043ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b2da      	uxtb	r2, r3
         | val.wake_up
 80043f6:	787b      	ldrb	r3, [r7, #1]
 80043f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	4313      	orrs	r3, r2
 8004400:	b2da      	uxtb	r2, r3
         | val.single_tap
 8004402:	787b      	ldrb	r3, [r7, #1]
 8004404:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4313      	orrs	r3, r2
 800440c:	b2da      	uxtb	r2, r3
         | val.sleep_change
 800440e:	787b      	ldrb	r3, [r7, #1]
 8004410:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	4313      	orrs	r3, r2
 8004418:	b2da      	uxtb	r2, r3
         | pin_int1_route.den_flag
 800441a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800441e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4313      	orrs	r3, r2
 8004426:	b2da      	uxtb	r2, r3
         | pin_int1_route.boot
 8004428:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800442c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4313      	orrs	r3, r2
 8004434:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_bdr
 8004436:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800443a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800443e:	b2db      	uxtb	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_g
 8004444:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004448:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800444c:	b2db      	uxtb	r3, r3
 800444e:	4313      	orrs	r3, r2
 8004450:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_xl
 8004452:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004456:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	4313      	orrs	r3, r2
 800445e:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_full
 8004460:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004464:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	4313      	orrs	r3, r2
 800446c:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_ovr
 800446e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004472:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_th
 800447c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004480:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	b2da      	uxtb	r2, r3
         | pin_int1_route.six_d
 800448a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800448e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	4313      	orrs	r3, r2
 8004496:	b2da      	uxtb	r2, r3
         | pin_int1_route.double_tap
 8004498:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800449c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	4313      	orrs	r3, r2
 80044a4:	b2da      	uxtb	r2, r3
         | pin_int1_route.free_fall
 80044a6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80044aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	4313      	orrs	r3, r2
 80044b2:	b2da      	uxtb	r2, r3
         | pin_int1_route.wake_up
 80044b4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80044b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4313      	orrs	r3, r2
 80044c0:	b2da      	uxtb	r2, r3
         | pin_int1_route.single_tap
 80044c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80044c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	4313      	orrs	r3, r2
 80044ce:	b2da      	uxtb	r2, r3
         | pin_int1_route.sleep_change) != PROPERTY_DISABLE)
 80044d0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80044d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	4313      	orrs	r3, r2
 80044dc:	b2db      	uxtb	r3, r3
    if ((val.fifo_bdr
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d006      	beq.n	80044f0 <lsm6dso_pin_int2_route_set+0x6b8>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 80044e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ea:	f887 3020 	strb.w	r3, [r7, #32]
 80044ee:	e005      	b.n	80044fc <lsm6dso_pin_int2_route_set+0x6c4>
    }
    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 80044f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044f4:	f36f 13c7 	bfc	r3, #7, #1
 80044f8:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 80044fc:	f107 0220 	add.w	r2, r7, #32
 8004500:	2301      	movs	r3, #1
 8004502:	2158      	movs	r1, #88	@ 0x58
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7fe f92d 	bl	8002764 <lsm6dso_write_reg>
 800450a:	4602      	mov	r2, r0
 800450c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450e:	4413      	add	r3, r2
 8004510:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return ret;
 8004512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004514:	4618      	mov	r0, r3
 8004516:	3740      	adds	r7, #64	@ 0x40
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08c      	sub	sp, #48	@ 0x30
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (aux_ctx != NULL)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d010      	beq.n	8004554 <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 8004532:	f107 0210 	add.w	r2, r7, #16
 8004536:	2301      	movs	r3, #1
 8004538:	216f      	movs	r1, #111	@ 0x6f
 800453a:	68b8      	ldr	r0, [r7, #8]
 800453c:	f7fe f8fa 	bl	8002734 <lsm6dso_read_reg>
 8004540:	62f8      	str	r0, [r7, #44]	@ 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 8004542:	7c3b      	ldrb	r3, [r7, #16]
 8004544:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004548:	b2d9      	uxtb	r1, r3
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	7813      	ldrb	r3, [r2, #0]
 800454e:	f361 0300 	bfi	r3, r1, #0, #1
 8004552:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 81c7 	beq.w	80048ea <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 800455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004562:	2102      	movs	r1, #2
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7fe fd4f 	bl	8003008 <lsm6dso_mem_bank_set>
 800456a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 800456c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 8004572:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004576:	2301      	movs	r3, #1
 8004578:	210e      	movs	r1, #14
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7fe f8da 	bl	8002734 <lsm6dso_read_reg>
 8004580:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d107      	bne.n	8004598 <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 8004588:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800458c:	2301      	movs	r3, #1
 800458e:	210f      	movs	r1, #15
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f7fe f8cf 	bl	8002734 <lsm6dso_read_reg>
 8004596:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 800459e:	f107 0220 	add.w	r2, r7, #32
 80045a2:	2301      	movs	r3, #1
 80045a4:	2110      	movs	r1, #16
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7fe f8c4 	bl	8002734 <lsm6dso_read_reg>
 80045ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 80045ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80045b4:	2100      	movs	r1, #0
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7fe fd26 	bl	8003008 <lsm6dso_mem_bank_set>
 80045bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 80045be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d107      	bne.n	80045d4 <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 80045c4:	f107 021c 	add.w	r2, r7, #28
 80045c8:	2301      	movs	r3, #1
 80045ca:	210e      	movs	r1, #14
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7fe f8b1 	bl	8002734 <lsm6dso_read_reg>
 80045d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 80045d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d107      	bne.n	80045ea <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 80045da:	f107 0218 	add.w	r2, r7, #24
 80045de:	2301      	movs	r3, #1
 80045e0:	215f      	movs	r1, #95	@ 0x5f
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7fe f8a6 	bl	8002734 <lsm6dso_read_reg>
 80045e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 80045ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80045f0:	f107 0214 	add.w	r2, r7, #20
 80045f4:	2301      	movs	r3, #1
 80045f6:	2113      	movs	r1, #19
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7fe f89b 	bl	8002734 <lsm6dso_read_reg>
 80045fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 8004600:	7d3b      	ldrb	r3, [r7, #20]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d128      	bne.n	800465e <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 800460c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d110      	bne.n	8004634 <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8004612:	f107 021c 	add.w	r2, r7, #28
 8004616:	2301      	movs	r3, #1
 8004618:	210e      	movs	r1, #14
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7fe f88a 	bl	8002734 <lsm6dso_read_reg>
 8004620:	62f8      	str	r0, [r7, #44]	@ 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8004622:	7f3b      	ldrb	r3, [r7, #28]
 8004624:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004628:	b2d9      	uxtb	r1, r3
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	7813      	ldrb	r3, [r2, #0]
 800462e:	f361 03c3 	bfi	r3, r1, #3, #1
 8004632:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 8004634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11b      	bne.n	8004672 <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800463a:	f107 0218 	add.w	r2, r7, #24
 800463e:	2301      	movs	r3, #1
 8004640:	215f      	movs	r1, #95	@ 0x5f
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7fe f876 	bl	8002734 <lsm6dso_read_reg>
 8004648:	62f8      	str	r0, [r7, #44]	@ 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 800464a:	7e3b      	ldrb	r3, [r7, #24]
 800464c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004650:	b2d9      	uxtb	r1, r3
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	7853      	ldrb	r3, [r2, #1]
 8004656:	f361 0300 	bfi	r3, r1, #0, #1
 800465a:	7053      	strb	r3, [r2, #1]
 800465c:	e009      	b.n	8004672 <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	7813      	ldrb	r3, [r2, #0]
 8004662:	f36f 03c3 	bfc	r3, #3, #1
 8004666:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	7853      	ldrb	r3, [r2, #1]
 800466c:	f36f 0300 	bfc	r3, #0, #1
 8004670:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8004672:	7f3b      	ldrb	r3, [r7, #28]
 8004674:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004678:	b2d9      	uxtb	r1, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	7813      	ldrb	r3, [r2, #0]
 800467e:	f361 0341 	bfi	r3, r1, #1, #1
 8004682:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 8004684:	7f3b      	ldrb	r3, [r7, #28]
 8004686:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800468a:	b2d9      	uxtb	r1, r3
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	7813      	ldrb	r3, [r2, #0]
 8004690:	f361 0382 	bfi	r3, r1, #2, #1
 8004694:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8004696:	7f3b      	ldrb	r3, [r7, #28]
 8004698:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800469c:	b2d9      	uxtb	r1, r3
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	7813      	ldrb	r3, [r2, #0]
 80046a2:	f361 03c3 	bfi	r3, r1, #3, #1
 80046a6:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 80046a8:	7f3b      	ldrb	r3, [r7, #28]
 80046aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80046ae:	b2d9      	uxtb	r1, r3
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	7813      	ldrb	r3, [r2, #0]
 80046b4:	f361 1304 	bfi	r3, r1, #4, #1
 80046b8:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 80046ba:	7f3b      	ldrb	r3, [r7, #28]
 80046bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80046c0:	b2d9      	uxtb	r1, r3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	7813      	ldrb	r3, [r2, #0]
 80046c6:	f361 1345 	bfi	r3, r1, #5, #1
 80046ca:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 80046cc:	7f3b      	ldrb	r3, [r7, #28]
 80046ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80046d2:	b2d9      	uxtb	r1, r3
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	7813      	ldrb	r3, [r2, #0]
 80046d8:	f361 1386 	bfi	r3, r1, #6, #1
 80046dc:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 80046de:	7f3b      	ldrb	r3, [r7, #28]
 80046e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80046e4:	b2d9      	uxtb	r1, r3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	7813      	ldrb	r3, [r2, #0]
 80046ea:	f361 13c7 	bfi	r3, r1, #7, #1
 80046ee:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 80046f0:	7e3b      	ldrb	r3, [r7, #24]
 80046f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80046f6:	b2d9      	uxtb	r1, r3
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	7853      	ldrb	r3, [r2, #1]
 80046fc:	f361 0300 	bfi	r3, r1, #0, #1
 8004700:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 8004702:	7e3b      	ldrb	r3, [r7, #24]
 8004704:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004708:	b2d9      	uxtb	r1, r3
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	7853      	ldrb	r3, [r2, #1]
 800470e:	f361 0341 	bfi	r3, r1, #1, #1
 8004712:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 8004714:	7e3b      	ldrb	r3, [r7, #24]
 8004716:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800471a:	b2d9      	uxtb	r1, r3
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	7853      	ldrb	r3, [r2, #1]
 8004720:	f361 0382 	bfi	r3, r1, #2, #1
 8004724:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 8004726:	7e3b      	ldrb	r3, [r7, #24]
 8004728:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800472c:	b2d9      	uxtb	r1, r3
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	7853      	ldrb	r3, [r2, #1]
 8004732:	f361 03c3 	bfi	r3, r1, #3, #1
 8004736:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 8004738:	7e3b      	ldrb	r3, [r7, #24]
 800473a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800473e:	b2d9      	uxtb	r1, r3
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	7853      	ldrb	r3, [r2, #1]
 8004744:	f361 1304 	bfi	r3, r1, #4, #1
 8004748:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 800474a:	7e3b      	ldrb	r3, [r7, #24]
 800474c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004750:	b2d9      	uxtb	r1, r3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	7853      	ldrb	r3, [r2, #1]
 8004756:	f361 1345 	bfi	r3, r1, #5, #1
 800475a:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 800475c:	7e3b      	ldrb	r3, [r7, #24]
 800475e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004762:	b2d9      	uxtb	r1, r3
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	7853      	ldrb	r3, [r2, #1]
 8004768:	f361 1386 	bfi	r3, r1, #6, #1
 800476c:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 800476e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004772:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004776:	b2d9      	uxtb	r1, r3
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	7853      	ldrb	r3, [r2, #1]
 800477c:	f361 13c7 	bfi	r3, r1, #7, #1
 8004780:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 8004782:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004786:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800478a:	b2d9      	uxtb	r1, r3
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	7893      	ldrb	r3, [r2, #2]
 8004790:	f361 0300 	bfi	r3, r1, #0, #1
 8004794:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 8004796:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800479a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800479e:	b2d9      	uxtb	r1, r3
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	7893      	ldrb	r3, [r2, #2]
 80047a4:	f361 0382 	bfi	r3, r1, #2, #1
 80047a8:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 80047aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047b2:	b2d9      	uxtb	r1, r3
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	7893      	ldrb	r3, [r2, #2]
 80047b8:	f361 03c3 	bfi	r3, r1, #3, #1
 80047bc:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 80047be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80047c6:	b2d9      	uxtb	r1, r3
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	7893      	ldrb	r3, [r2, #2]
 80047cc:	f361 1304 	bfi	r3, r1, #4, #1
 80047d0:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 80047d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80047da:	b2d9      	uxtb	r1, r3
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	7893      	ldrb	r3, [r2, #2]
 80047e0:	f361 1345 	bfi	r3, r1, #5, #1
 80047e4:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 80047e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80047ee:	b2d9      	uxtb	r1, r3
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	7893      	ldrb	r3, [r2, #2]
 80047f4:	f361 1386 	bfi	r3, r1, #6, #1
 80047f8:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 80047fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004802:	b2d9      	uxtb	r1, r3
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	7893      	ldrb	r3, [r2, #2]
 8004808:	f361 13c7 	bfi	r3, r1, #7, #1
 800480c:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 800480e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004812:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004816:	b2d9      	uxtb	r1, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	78d3      	ldrb	r3, [r2, #3]
 800481c:	f361 0300 	bfi	r3, r1, #0, #1
 8004820:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 8004822:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004826:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800482a:	b2d9      	uxtb	r1, r3
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	78d3      	ldrb	r3, [r2, #3]
 8004830:	f361 0341 	bfi	r3, r1, #1, #1
 8004834:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 8004836:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800483a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800483e:	b2d9      	uxtb	r1, r3
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	78d3      	ldrb	r3, [r2, #3]
 8004844:	f361 0382 	bfi	r3, r1, #2, #1
 8004848:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 800484a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800484e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004852:	b2d9      	uxtb	r1, r3
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	78d3      	ldrb	r3, [r2, #3]
 8004858:	f361 03c3 	bfi	r3, r1, #3, #1
 800485c:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 800485e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004862:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004866:	b2d9      	uxtb	r1, r3
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	78d3      	ldrb	r3, [r2, #3]
 800486c:	f361 1304 	bfi	r3, r1, #4, #1
 8004870:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 8004872:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004876:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800487a:	b2d9      	uxtb	r1, r3
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	78d3      	ldrb	r3, [r2, #3]
 8004880:	f361 1345 	bfi	r3, r1, #5, #1
 8004884:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 8004886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800488a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800488e:	b2d9      	uxtb	r1, r3
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	78d3      	ldrb	r3, [r2, #3]
 8004894:	f361 1386 	bfi	r3, r1, #6, #1
 8004898:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 800489a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800489e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048a2:	b2d9      	uxtb	r1, r3
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	78d3      	ldrb	r3, [r2, #3]
 80048a8:	f361 13c7 	bfi	r3, r1, #7, #1
 80048ac:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 80048ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048b6:	b2d9      	uxtb	r1, r3
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	7913      	ldrb	r3, [r2, #4]
 80048bc:	f361 0300 	bfi	r3, r1, #0, #1
 80048c0:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 80048c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80048ca:	b2d9      	uxtb	r1, r3
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	7913      	ldrb	r3, [r2, #4]
 80048d0:	f361 0341 	bfi	r3, r1, #1, #1
 80048d4:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 80048d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048de:	b2d9      	uxtb	r1, r3
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	7913      	ldrb	r3, [r2, #4]
 80048e4:	f361 0382 	bfi	r3, r1, #2, #1
 80048e8:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 80048ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3730      	adds	r7, #48	@ 0x30
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <BSP_LED_Init+0x20>)
 8004902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004906:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	0800a810 	.word	0x0800a810

08004918 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800491e:	4b1c      	ldr	r3, [pc, #112]	@ (8004990 <LED_USER_GPIO_Init+0x78>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004922:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <LED_USER_GPIO_Init+0x78>)
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800492a:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <LED_USER_GPIO_Init+0x78>)
 800492c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004936:	f107 030c 	add.w	r3, r7, #12
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004946:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <LED_USER_GPIO_Init+0x78>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494a:	4a11      	ldr	r2, [pc, #68]	@ (8004990 <LED_USER_GPIO_Init+0x78>)
 800494c:	f043 0302 	orr.w	r3, r3, #2
 8004950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004952:	4b0f      	ldr	r3, [pc, #60]	@ (8004990 <LED_USER_GPIO_Init+0x78>)
 8004954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	607b      	str	r3, [r7, #4]
 800495c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800495e:	2200      	movs	r2, #0
 8004960:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004964:	480b      	ldr	r0, [pc, #44]	@ (8004994 <LED_USER_GPIO_Init+0x7c>)
 8004966:	f000 ffd3 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800496a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800496e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004970:	2301      	movs	r3, #1
 8004972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800497c:	f107 030c 	add.w	r3, r7, #12
 8004980:	4619      	mov	r1, r3
 8004982:	4804      	ldr	r0, [pc, #16]	@ (8004994 <LED_USER_GPIO_Init+0x7c>)
 8004984:	f000 fd48 	bl	8005418 <HAL_GPIO_Init>

}
 8004988:	bf00      	nop
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	48000400 	.word	0x48000400

08004998 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	460a      	mov	r2, r1
 80049a2:	71fb      	strb	r3, [r7, #7]
 80049a4:	4613      	mov	r3, r2
 80049a6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	4a1f      	ldr	r2, [pc, #124]	@ (8004a2c <BSP_PB_Init+0x94>)
 80049b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80049b6:	79bb      	ldrb	r3, [r7, #6]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d132      	bne.n	8004a22 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a30 <BSP_PB_Init+0x98>)
 80049c2:	441a      	add	r2, r3
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	491b      	ldr	r1, [pc, #108]	@ (8004a34 <BSP_PB_Init+0x9c>)
 80049c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 fb2e 	bl	8005030 <HAL_EXTI_GetHandle>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80049da:	f06f 0303 	mvn.w	r3, #3
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e01f      	b.n	8004a22 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4a12      	ldr	r2, [pc, #72]	@ (8004a30 <BSP_PB_Init+0x98>)
 80049e8:	1898      	adds	r0, r3, r2
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	4a12      	ldr	r2, [pc, #72]	@ (8004a38 <BSP_PB_Init+0xa0>)
 80049ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f2:	461a      	mov	r2, r3
 80049f4:	2100      	movs	r1, #0
 80049f6:	f000 fafe 	bl	8004ff6 <HAL_EXTI_RegisterCallback>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004a00:	f06f 0303 	mvn.w	r3, #3
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e00c      	b.n	8004a22 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004a08:	2017      	movs	r0, #23
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004a3c <BSP_PB_Init+0xa4>)
 8004a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a12:	2200      	movs	r2, #0
 8004a14:	4619      	mov	r1, r3
 8004a16:	f000 faba 	bl	8004f8e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004a1a:	2317      	movs	r3, #23
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fad0 	bl	8004fc2 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8004a22:	68fb      	ldr	r3, [r7, #12]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	0800a814 	.word	0x0800a814
 8004a30:	20000060 	.word	0x20000060
 8004a34:	0800a818 	.word	0x0800a818
 8004a38:	0800a81c 	.word	0x0800a81c
 8004a3c:	0800a820 	.word	0x0800a820

08004a40 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	4a08      	ldr	r2, [pc, #32]	@ (8004a70 <BSP_PB_GetState+0x30>)
 8004a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a52:	2280      	movs	r2, #128	@ 0x80
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 ff42 	bl	80058e0 <HAL_GPIO_ReadPin>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	2000005c 	.word	0x2000005c

08004a74 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f003 fdbb 	bl	80085f4 <BSP_PB_Callback>
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8a:	4b19      	ldr	r3, [pc, #100]	@ (8004af0 <BUTTON_USER_GPIO_Init+0x6c>)
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a8e:	4a18      	ldr	r2, [pc, #96]	@ (8004af0 <BUTTON_USER_GPIO_Init+0x6c>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a96:	4b16      	ldr	r3, [pc, #88]	@ (8004af0 <BUTTON_USER_GPIO_Init+0x6c>)
 8004a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa2:	f107 030c 	add.w	r3, r7, #12
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
 8004aac:	609a      	str	r2, [r3, #8]
 8004aae:	60da      	str	r2, [r3, #12]
 8004ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8004af0 <BUTTON_USER_GPIO_Init+0x6c>)
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8004af0 <BUTTON_USER_GPIO_Init+0x6c>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004abe:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <BUTTON_USER_GPIO_Init+0x6c>)
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8004aca:	2380      	movs	r3, #128	@ 0x80
 8004acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ace:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	4619      	mov	r1, r3
 8004ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ae2:	f000 fc99 	bl	8005418 <HAL_GPIO_Init>

}
 8004ae6:	bf00      	nop
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000

08004af4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d903      	bls.n	8004b10 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004b08:	f06f 0301 	mvn.w	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e022      	b.n	8004b56 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8004b10:	79fa      	ldrb	r2, [r7, #7]
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	4912      	ldr	r1, [pc, #72]	@ (8004b60 <BSP_COM_Init+0x6c>)
 8004b16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004b1a:	4912      	ldr	r1, [pc, #72]	@ (8004b64 <BSP_COM_Init+0x70>)
 8004b1c:	2094      	movs	r0, #148	@ 0x94
 8004b1e:	fb00 f303 	mul.w	r3, r0, r3
 8004b22:	440b      	add	r3, r1
 8004b24:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2294      	movs	r2, #148	@ 0x94
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8004b64 <BSP_COM_Init+0x70>)
 8004b30:	4413      	add	r3, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f86a 	bl	8004c0c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	2294      	movs	r2, #148	@ 0x94
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	4a08      	ldr	r2, [pc, #32]	@ (8004b64 <BSP_COM_Init+0x70>)
 8004b42:	4413      	add	r3, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f80f 	bl	8004b68 <MX_USART2_UART_Init>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004b50:	f06f 0303 	mvn.w	r3, #3
 8004b54:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000068 	.word	0x20000068
 8004b64:	200001e4 	.word	0x200001e4

08004b68 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a24      	ldr	r2, [pc, #144]	@ (8004c08 <MX_USART2_UART_Init+0xa0>)
 8004b78:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004b80:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	220c      	movs	r2, #12
 8004b98:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f002 fe13 	bl	80077e4 <HAL_UART_Init>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <MX_USART2_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bc8:	2100      	movs	r1, #0
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f003 fc16 	bl	80083fc <HAL_UARTEx_SetTxFifoThreshold>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <MX_USART2_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bda:	2100      	movs	r1, #0
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f003 fc4b 	bl	8008478 <HAL_UARTEx_SetRxFifoThreshold>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <MX_USART2_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f003 fbcc 	bl	800838a <HAL_UARTEx_DisableFifoMode>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <MX_USART2_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40004400 	.word	0x40004400

08004c0c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b09a      	sub	sp, #104	@ 0x68
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c14:	f107 0310 	add.w	r3, r7, #16
 8004c18:	2244      	movs	r2, #68	@ 0x44
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f004 fbff 	bl	8009420 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004c22:	2302      	movs	r3, #2
 8004c24:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8004c2a:	f107 0310 	add.w	r3, r7, #16
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fc68 	bl	8006504 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c34:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb0 <USART2_MspInit+0xa4>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c38:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <USART2_MspInit+0xa4>)
 8004c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c40:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb0 <USART2_MspInit+0xa4>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4c:	4b18      	ldr	r3, [pc, #96]	@ (8004cb0 <USART2_MspInit+0xa4>)
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c50:	4a17      	ldr	r2, [pc, #92]	@ (8004cb0 <USART2_MspInit+0xa4>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c58:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <USART2_MspInit+0xa4>)
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8004c64:	2304      	movs	r3, #4
 8004c66:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c70:	2300      	movs	r3, #0
 8004c72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8004c74:	2307      	movs	r3, #7
 8004c76:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8004c78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c82:	f000 fbc9 	bl	8005418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8004c86:	2308      	movs	r3, #8
 8004c88:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c92:	2300      	movs	r3, #0
 8004c94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8004c96:	2307      	movs	r3, #7
 8004c98:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8004c9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ca4:	f000 fbb8 	bl	8005418 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8004ca8:	bf00      	nop
 8004caa:	3768      	adds	r7, #104	@ 0x68
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000

08004cb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cbe:	2003      	movs	r0, #3
 8004cc0:	f000 f95a 	bl	8004f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f000 f80d 	bl	8004ce4 <HAL_InitTick>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	71fb      	strb	r3, [r7, #7]
 8004cd4:	e001      	b.n	8004cda <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004cd6:	f7fb fd93 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004cda:	79fb      	ldrb	r3, [r7, #7]

}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004cf0:	4b16      	ldr	r3, [pc, #88]	@ (8004d4c <HAL_InitTick+0x68>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d022      	beq.n	8004d3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004cf8:	4b15      	ldr	r3, [pc, #84]	@ (8004d50 <HAL_InitTick+0x6c>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b13      	ldr	r3, [pc, #76]	@ (8004d4c <HAL_InitTick+0x68>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f966 	bl	8004fde <HAL_SYSTICK_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b0f      	cmp	r3, #15
 8004d1c:	d809      	bhi.n	8004d32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d26:	f000 f932 	bl	8004f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d54 <HAL_InitTick+0x70>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	e007      	b.n	8004d42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
 8004d36:	e004      	b.n	8004d42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
 8004d3c:	e001      	b.n	8004d42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000070 	.word	0x20000070
 8004d50:	20000000 	.word	0x20000000
 8004d54:	2000006c 	.word	0x2000006c

08004d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d5c:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <HAL_IncTick+0x1c>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <HAL_IncTick+0x20>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4413      	add	r3, r2
 8004d66:	4a03      	ldr	r2, [pc, #12]	@ (8004d74 <HAL_IncTick+0x1c>)
 8004d68:	6013      	str	r3, [r2, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	20000278 	.word	0x20000278
 8004d78:	20000070 	.word	0x20000070

08004d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d80:	4b03      	ldr	r3, [pc, #12]	@ (8004d90 <HAL_GetTick+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000278 	.word	0x20000278

08004d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d9c:	f7ff ffee 	bl	8004d7c <HAL_GetTick>
 8004da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dac:	d004      	beq.n	8004db8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dae:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_Delay+0x40>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004db8:	bf00      	nop
 8004dba:	f7ff ffdf 	bl	8004d7c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d8f7      	bhi.n	8004dba <HAL_Delay+0x26>
  {
  }
}
 8004dca:	bf00      	nop
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000070 	.word	0x20000070

08004dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004de8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e1c <__NVIC_SetPriorityGrouping+0x44>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004df4:	4013      	ands	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e0a:	4a04      	ldr	r2, [pc, #16]	@ (8004e1c <__NVIC_SetPriorityGrouping+0x44>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	60d3      	str	r3, [r2, #12]
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	e000ed00 	.word	0xe000ed00

08004e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e24:	4b04      	ldr	r3, [pc, #16]	@ (8004e38 <__NVIC_GetPriorityGrouping+0x18>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	f003 0307 	and.w	r3, r3, #7
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	db0b      	blt.n	8004e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	f003 021f 	and.w	r2, r3, #31
 8004e54:	4907      	ldr	r1, [pc, #28]	@ (8004e74 <__NVIC_EnableIRQ+0x38>)
 8004e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	e000e100 	.word	0xe000e100

08004e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	6039      	str	r1, [r7, #0]
 8004e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	db0a      	blt.n	8004ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	490c      	ldr	r1, [pc, #48]	@ (8004ec4 <__NVIC_SetPriority+0x4c>)
 8004e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e96:	0112      	lsls	r2, r2, #4
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ea0:	e00a      	b.n	8004eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4908      	ldr	r1, [pc, #32]	@ (8004ec8 <__NVIC_SetPriority+0x50>)
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	3b04      	subs	r3, #4
 8004eb0:	0112      	lsls	r2, r2, #4
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	761a      	strb	r2, [r3, #24]
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	e000e100 	.word	0xe000e100
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	@ 0x24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f1c3 0307 	rsb	r3, r3, #7
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	bf28      	it	cs
 8004eea:	2304      	movcs	r3, #4
 8004eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2b06      	cmp	r3, #6
 8004ef4:	d902      	bls.n	8004efc <NVIC_EncodePriority+0x30>
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	3b03      	subs	r3, #3
 8004efa:	e000      	b.n	8004efe <NVIC_EncodePriority+0x32>
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43da      	mvns	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	401a      	ands	r2, r3
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1e:	43d9      	mvns	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f24:	4313      	orrs	r3, r2
         );
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3724      	adds	r7, #36	@ 0x24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f44:	d301      	bcc.n	8004f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f46:	2301      	movs	r3, #1
 8004f48:	e00f      	b.n	8004f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f74 <SysTick_Config+0x40>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f52:	210f      	movs	r1, #15
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f58:	f7ff ff8e 	bl	8004e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f5c:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <SysTick_Config+0x40>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f62:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <SysTick_Config+0x40>)
 8004f64:	2207      	movs	r2, #7
 8004f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	e000e010 	.word	0xe000e010

08004f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ff29 	bl	8004dd8 <__NVIC_SetPriorityGrouping>
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	4603      	mov	r3, r0
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f9c:	f7ff ff40 	bl	8004e20 <__NVIC_GetPriorityGrouping>
 8004fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	6978      	ldr	r0, [r7, #20]
 8004fa8:	f7ff ff90 	bl	8004ecc <NVIC_EncodePriority>
 8004fac:	4602      	mov	r2, r0
 8004fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff ff5f 	bl	8004e78 <__NVIC_SetPriority>
}
 8004fba:	bf00      	nop
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	4603      	mov	r3, r0
 8004fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff ff33 	bl	8004e3c <__NVIC_EnableIRQ>
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff ffa4 	bl	8004f34 <SysTick_Config>
 8004fec:	4603      	mov	r3, r0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b087      	sub	sp, #28
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	460b      	mov	r3, r1
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8005008:	7afb      	ldrb	r3, [r7, #11]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	605a      	str	r2, [r3, #4]
      break;
 8005014:	e005      	b.n	8005022 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	75fb      	strb	r3, [r7, #23]
      break;
 8005020:	bf00      	nop
  }

  return status;
 8005022:	7dfb      	ldrb	r3, [r7, #23]
}
 8005024:	4618      	mov	r0, r3
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e003      	b.n	800504c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800504a:	2300      	movs	r3, #0
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2201      	movs	r2, #1
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <HAL_EXTI_IRQHandler+0x5c>)
 8005082:	4413      	add	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4013      	ands	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4798      	blx	r3
    }
  }
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40010414 	.word	0x40010414

080050b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e147      	b.n	800535a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fb fbb2 	bl	8000848 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0210 	bic.w	r2, r2, #16
 80050f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f4:	f7ff fe42 	bl	8004d7c <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050fa:	e012      	b.n	8005122 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80050fc:	f7ff fe3e 	bl	8004d7c <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b0a      	cmp	r3, #10
 8005108:	d90b      	bls.n	8005122 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800510e:	f043 0201 	orr.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2203      	movs	r2, #3
 800511a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e11b      	b.n	800535a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b08      	cmp	r3, #8
 800512e:	d0e5      	beq.n	80050fc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005140:	f7ff fe1c 	bl	8004d7c <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005146:	e012      	b.n	800516e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005148:	f7ff fe18 	bl	8004d7c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b0a      	cmp	r3, #10
 8005154:	d90b      	bls.n	800516e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800515a:	f043 0201 	orr.w	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2203      	movs	r2, #3
 8005166:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e0f5      	b.n	800535a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0e5      	beq.n	8005148 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0202 	orr.w	r2, r2, #2
 800518a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a74      	ldr	r2, [pc, #464]	@ (8005364 <HAL_FDCAN_Init+0x2ac>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d103      	bne.n	800519e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005196:	4a74      	ldr	r2, [pc, #464]	@ (8005368 <HAL_FDCAN_Init+0x2b0>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	7c1b      	ldrb	r3, [r3, #16]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d108      	bne.n	80051b8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b4:	619a      	str	r2, [r3, #24]
 80051b6:	e007      	b.n	80051c8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7c5b      	ldrb	r3, [r3, #17]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d108      	bne.n	80051e2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051de:	619a      	str	r2, [r3, #24]
 80051e0:	e007      	b.n	80051f2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051f0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	7c9b      	ldrb	r3, [r3, #18]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d108      	bne.n	800520c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699a      	ldr	r2, [r3, #24]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005208:	619a      	str	r2, [r3, #24]
 800520a:	e007      	b.n	800521c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800521a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699a      	ldr	r2, [r3, #24]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005240:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0210 	bic.w	r2, r2, #16
 8005250:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d108      	bne.n	800526c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0204 	orr.w	r2, r2, #4
 8005268:	619a      	str	r2, [r3, #24]
 800526a:	e02c      	b.n	80052c6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d028      	beq.n	80052c6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d01c      	beq.n	80052b6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800528a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0210 	orr.w	r2, r2, #16
 800529a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d110      	bne.n	80052c6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0220 	orr.w	r2, r2, #32
 80052b2:	619a      	str	r2, [r3, #24]
 80052b4:	e007      	b.n	80052c6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699a      	ldr	r2, [r3, #24]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0220 	orr.w	r2, r2, #32
 80052c4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052d6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80052de:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80052ee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052f0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052fa:	d115      	bne.n	8005328 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	3b01      	subs	r3, #1
 8005308:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800530a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005310:	3b01      	subs	r3, #1
 8005312:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005314:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	3b01      	subs	r3, #1
 800531e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005324:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005326:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f814 	bl	800536c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40006400 	.word	0x40006400
 8005368:	40006500 	.word	0x40006500

0800536c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005374:	4b27      	ldr	r3, [pc, #156]	@ (8005414 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8005376:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005386:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538e:	041a      	lsls	r2, r3, #16
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ac:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b4:	061a      	lsls	r2, r3, #24
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e005      	b.n	80053fa <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3304      	adds	r3, #4
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	429a      	cmp	r2, r3
 8005404:	d3f3      	bcc.n	80053ee <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005406:	bf00      	nop
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	4000a400 	.word	0x4000a400

08005418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005426:	e15a      	b.n	80056de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	2101      	movs	r1, #1
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 814c 	beq.w	80056d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	2b01      	cmp	r3, #1
 800544a:	d005      	beq.n	8005458 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005454:	2b02      	cmp	r3, #2
 8005456:	d130      	bne.n	80054ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	2203      	movs	r2, #3
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4013      	ands	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800548e:	2201      	movs	r2, #1
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43db      	mvns	r3, r3
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4013      	ands	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 0201 	and.w	r2, r3, #1
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d017      	beq.n	80054f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	2203      	movs	r2, #3
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4013      	ands	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d123      	bne.n	800554a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	08da      	lsrs	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3208      	adds	r2, #8
 800550a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	220f      	movs	r2, #15
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4013      	ands	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	08da      	lsrs	r2, r3, #3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3208      	adds	r2, #8
 8005544:	6939      	ldr	r1, [r7, #16]
 8005546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	2203      	movs	r2, #3
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4013      	ands	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f003 0203 	and.w	r2, r3, #3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 80a6 	beq.w	80056d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800558c:	4b5b      	ldr	r3, [pc, #364]	@ (80056fc <HAL_GPIO_Init+0x2e4>)
 800558e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005590:	4a5a      	ldr	r2, [pc, #360]	@ (80056fc <HAL_GPIO_Init+0x2e4>)
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	6613      	str	r3, [r2, #96]	@ 0x60
 8005598:	4b58      	ldr	r3, [pc, #352]	@ (80056fc <HAL_GPIO_Init+0x2e4>)
 800559a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055a4:	4a56      	ldr	r2, [pc, #344]	@ (8005700 <HAL_GPIO_Init+0x2e8>)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	089b      	lsrs	r3, r3, #2
 80055aa:	3302      	adds	r3, #2
 80055ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	220f      	movs	r2, #15
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	43db      	mvns	r3, r3
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4013      	ands	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80055ce:	d01f      	beq.n	8005610 <HAL_GPIO_Init+0x1f8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005704 <HAL_GPIO_Init+0x2ec>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d019      	beq.n	800560c <HAL_GPIO_Init+0x1f4>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a4b      	ldr	r2, [pc, #300]	@ (8005708 <HAL_GPIO_Init+0x2f0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <HAL_GPIO_Init+0x1f0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a4a      	ldr	r2, [pc, #296]	@ (800570c <HAL_GPIO_Init+0x2f4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00d      	beq.n	8005604 <HAL_GPIO_Init+0x1ec>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a49      	ldr	r2, [pc, #292]	@ (8005710 <HAL_GPIO_Init+0x2f8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d007      	beq.n	8005600 <HAL_GPIO_Init+0x1e8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a48      	ldr	r2, [pc, #288]	@ (8005714 <HAL_GPIO_Init+0x2fc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <HAL_GPIO_Init+0x1e4>
 80055f8:	2305      	movs	r3, #5
 80055fa:	e00a      	b.n	8005612 <HAL_GPIO_Init+0x1fa>
 80055fc:	2306      	movs	r3, #6
 80055fe:	e008      	b.n	8005612 <HAL_GPIO_Init+0x1fa>
 8005600:	2304      	movs	r3, #4
 8005602:	e006      	b.n	8005612 <HAL_GPIO_Init+0x1fa>
 8005604:	2303      	movs	r3, #3
 8005606:	e004      	b.n	8005612 <HAL_GPIO_Init+0x1fa>
 8005608:	2302      	movs	r3, #2
 800560a:	e002      	b.n	8005612 <HAL_GPIO_Init+0x1fa>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <HAL_GPIO_Init+0x1fa>
 8005610:	2300      	movs	r3, #0
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	f002 0203 	and.w	r2, r2, #3
 8005618:	0092      	lsls	r2, r2, #2
 800561a:	4093      	lsls	r3, r2
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005622:	4937      	ldr	r1, [pc, #220]	@ (8005700 <HAL_GPIO_Init+0x2e8>)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	089b      	lsrs	r3, r3, #2
 8005628:	3302      	adds	r3, #2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005630:	4b39      	ldr	r3, [pc, #228]	@ (8005718 <HAL_GPIO_Init+0x300>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	43db      	mvns	r3, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4013      	ands	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005654:	4a30      	ldr	r2, [pc, #192]	@ (8005718 <HAL_GPIO_Init+0x300>)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800565a:	4b2f      	ldr	r3, [pc, #188]	@ (8005718 <HAL_GPIO_Init+0x300>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	43db      	mvns	r3, r3
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800567e:	4a26      	ldr	r2, [pc, #152]	@ (8005718 <HAL_GPIO_Init+0x300>)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005684:	4b24      	ldr	r3, [pc, #144]	@ (8005718 <HAL_GPIO_Init+0x300>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	43db      	mvns	r3, r3
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4013      	ands	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005718 <HAL_GPIO_Init+0x300>)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005718 <HAL_GPIO_Init+0x300>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	43db      	mvns	r3, r3
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4013      	ands	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056d2:	4a11      	ldr	r2, [pc, #68]	@ (8005718 <HAL_GPIO_Init+0x300>)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	3301      	adds	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f47f ae9d 	bne.w	8005428 <HAL_GPIO_Init+0x10>
  }
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	40021000 	.word	0x40021000
 8005700:	40010000 	.word	0x40010000
 8005704:	48000400 	.word	0x48000400
 8005708:	48000800 	.word	0x48000800
 800570c:	48000c00 	.word	0x48000c00
 8005710:	48001000 	.word	0x48001000
 8005714:	48001400 	.word	0x48001400
 8005718:	40010400 	.word	0x40010400

0800571c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800572a:	e0bd      	b.n	80058a8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800572c:	2201      	movs	r2, #1
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	4013      	ands	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80b0 	beq.w	80058a2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8005742:	4a60      	ldr	r2, [pc, #384]	@ (80058c4 <HAL_GPIO_DeInit+0x1a8>)
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	089b      	lsrs	r3, r3, #2
 8005748:	3302      	adds	r3, #2
 800574a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	220f      	movs	r2, #15
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800576a:	d01f      	beq.n	80057ac <HAL_GPIO_DeInit+0x90>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a56      	ldr	r2, [pc, #344]	@ (80058c8 <HAL_GPIO_DeInit+0x1ac>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d019      	beq.n	80057a8 <HAL_GPIO_DeInit+0x8c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a55      	ldr	r2, [pc, #340]	@ (80058cc <HAL_GPIO_DeInit+0x1b0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <HAL_GPIO_DeInit+0x88>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a54      	ldr	r2, [pc, #336]	@ (80058d0 <HAL_GPIO_DeInit+0x1b4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00d      	beq.n	80057a0 <HAL_GPIO_DeInit+0x84>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a53      	ldr	r2, [pc, #332]	@ (80058d4 <HAL_GPIO_DeInit+0x1b8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <HAL_GPIO_DeInit+0x80>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a52      	ldr	r2, [pc, #328]	@ (80058d8 <HAL_GPIO_DeInit+0x1bc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d101      	bne.n	8005798 <HAL_GPIO_DeInit+0x7c>
 8005794:	2305      	movs	r3, #5
 8005796:	e00a      	b.n	80057ae <HAL_GPIO_DeInit+0x92>
 8005798:	2306      	movs	r3, #6
 800579a:	e008      	b.n	80057ae <HAL_GPIO_DeInit+0x92>
 800579c:	2304      	movs	r3, #4
 800579e:	e006      	b.n	80057ae <HAL_GPIO_DeInit+0x92>
 80057a0:	2303      	movs	r3, #3
 80057a2:	e004      	b.n	80057ae <HAL_GPIO_DeInit+0x92>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e002      	b.n	80057ae <HAL_GPIO_DeInit+0x92>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <HAL_GPIO_DeInit+0x92>
 80057ac:	2300      	movs	r3, #0
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	f002 0203 	and.w	r2, r2, #3
 80057b4:	0092      	lsls	r2, r2, #2
 80057b6:	4093      	lsls	r3, r2
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d132      	bne.n	8005824 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80057be:	4b47      	ldr	r3, [pc, #284]	@ (80058dc <HAL_GPIO_DeInit+0x1c0>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	43db      	mvns	r3, r3
 80057c6:	4945      	ldr	r1, [pc, #276]	@ (80058dc <HAL_GPIO_DeInit+0x1c0>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80057cc:	4b43      	ldr	r3, [pc, #268]	@ (80058dc <HAL_GPIO_DeInit+0x1c0>)
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	43db      	mvns	r3, r3
 80057d4:	4941      	ldr	r1, [pc, #260]	@ (80058dc <HAL_GPIO_DeInit+0x1c0>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80057da:	4b40      	ldr	r3, [pc, #256]	@ (80058dc <HAL_GPIO_DeInit+0x1c0>)
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	493e      	ldr	r1, [pc, #248]	@ (80058dc <HAL_GPIO_DeInit+0x1c0>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80057e8:	4b3c      	ldr	r3, [pc, #240]	@ (80058dc <HAL_GPIO_DeInit+0x1c0>)
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	43db      	mvns	r3, r3
 80057f0:	493a      	ldr	r1, [pc, #232]	@ (80058dc <HAL_GPIO_DeInit+0x1c0>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	220f      	movs	r2, #15
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005806:	4a2f      	ldr	r2, [pc, #188]	@ (80058c4 <HAL_GPIO_DeInit+0x1a8>)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	3302      	adds	r3, #2
 800580e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	43da      	mvns	r2, r3
 8005816:	482b      	ldr	r0, [pc, #172]	@ (80058c4 <HAL_GPIO_DeInit+0x1a8>)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	089b      	lsrs	r3, r3, #2
 800581c:	400a      	ands	r2, r1
 800581e:	3302      	adds	r3, #2
 8005820:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	2103      	movs	r1, #3
 800582e:	fa01 f303 	lsl.w	r3, r1, r3
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	08da      	lsrs	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3208      	adds	r2, #8
 8005840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	220f      	movs	r2, #15
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	43db      	mvns	r3, r3
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	08d2      	lsrs	r2, r2, #3
 8005858:	4019      	ands	r1, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3208      	adds	r2, #8
 800585e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	2103      	movs	r1, #3
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	401a      	ands	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	2101      	movs	r1, #1
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	2103      	movs	r1, #3
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	401a      	ands	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	3301      	adds	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	fa22 f303 	lsr.w	r3, r2, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f47f af3b 	bne.w	800572c <HAL_GPIO_DeInit+0x10>
  }
}
 80058b6:	bf00      	nop
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	40010000 	.word	0x40010000
 80058c8:	48000400 	.word	0x48000400
 80058cc:	48000800 	.word	0x48000800
 80058d0:	48000c00 	.word	0x48000c00
 80058d4:	48001000 	.word	0x48001000
 80058d8:	48001400 	.word	0x48001400
 80058dc:	40010400 	.word	0x40010400

080058e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	887b      	ldrh	r3, [r7, #2]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
 80058fc:	e001      	b.n	8005902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
 800591c:	4613      	mov	r3, r2
 800591e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005920:	787b      	ldrb	r3, [r7, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005926:	887a      	ldrh	r2, [r7, #2]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800592c:	e002      	b.n	8005934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d141      	bne.n	80059d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800594e:	4b4b      	ldr	r3, [pc, #300]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595a:	d131      	bne.n	80059c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800595c:	4b47      	ldr	r3, [pc, #284]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800595e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005962:	4a46      	ldr	r2, [pc, #280]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800596c:	4b43      	ldr	r3, [pc, #268]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005974:	4a41      	ldr	r2, [pc, #260]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800597a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800597c:	4b40      	ldr	r3, [pc, #256]	@ (8005a80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2232      	movs	r2, #50	@ 0x32
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	4a3f      	ldr	r2, [pc, #252]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	0c9b      	lsrs	r3, r3, #18
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005992:	e002      	b.n	800599a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3b01      	subs	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800599a:	4b38      	ldr	r3, [pc, #224]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a6:	d102      	bne.n	80059ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f2      	bne.n	8005994 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059ae:	4b33      	ldr	r3, [pc, #204]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ba:	d158      	bne.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e057      	b.n	8005a70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059c0:	4b2e      	ldr	r3, [pc, #184]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c6:	4a2d      	ldr	r2, [pc, #180]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80059d0:	e04d      	b.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d8:	d141      	bne.n	8005a5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059da:	4b28      	ldr	r3, [pc, #160]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e6:	d131      	bne.n	8005a4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059e8:	4b24      	ldr	r3, [pc, #144]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ee:	4a23      	ldr	r2, [pc, #140]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059f8:	4b20      	ldr	r3, [pc, #128]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a00:	4a1e      	ldr	r2, [pc, #120]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a08:	4b1d      	ldr	r3, [pc, #116]	@ (8005a80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2232      	movs	r2, #50	@ 0x32
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	4a1c      	ldr	r2, [pc, #112]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	0c9b      	lsrs	r3, r3, #18
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a1e:	e002      	b.n	8005a26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a26:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a32:	d102      	bne.n	8005a3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f2      	bne.n	8005a20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a3a:	4b10      	ldr	r3, [pc, #64]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a46:	d112      	bne.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e011      	b.n	8005a70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a52:	4a0a      	ldr	r2, [pc, #40]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005a5c:	e007      	b.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a5e:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a66:	4a05      	ldr	r2, [pc, #20]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40007000 	.word	0x40007000
 8005a80:	20000000 	.word	0x20000000
 8005a84:	431bde83 	.word	0x431bde83

08005a88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005a8c:	4b05      	ldr	r3, [pc, #20]	@ (8005aa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a04      	ldr	r2, [pc, #16]	@ (8005aa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a96:	6093      	str	r3, [r2, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40007000 	.word	0x40007000

08005aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e2fe      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d075      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ac6:	4b97      	ldr	r3, [pc, #604]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ad0:	4b94      	ldr	r3, [pc, #592]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b0c      	cmp	r3, #12
 8005ade:	d102      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x3e>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d002      	beq.n	8005aec <HAL_RCC_OscConfig+0x44>
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d10b      	bne.n	8005b04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aec:	4b8d      	ldr	r3, [pc, #564]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d05b      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x108>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d157      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e2d9      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b0c:	d106      	bne.n	8005b1c <HAL_RCC_OscConfig+0x74>
 8005b0e:	4b85      	ldr	r3, [pc, #532]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a84      	ldr	r2, [pc, #528]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e01d      	b.n	8005b58 <HAL_RCC_OscConfig+0xb0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b24:	d10c      	bne.n	8005b40 <HAL_RCC_OscConfig+0x98>
 8005b26:	4b7f      	ldr	r3, [pc, #508]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	4b7c      	ldr	r3, [pc, #496]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a7b      	ldr	r2, [pc, #492]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e00b      	b.n	8005b58 <HAL_RCC_OscConfig+0xb0>
 8005b40:	4b78      	ldr	r3, [pc, #480]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a77      	ldr	r2, [pc, #476]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4b75      	ldr	r3, [pc, #468]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a74      	ldr	r2, [pc, #464]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d013      	beq.n	8005b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7ff f90c 	bl	8004d7c <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b68:	f7ff f908 	bl	8004d7c <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	@ 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e29e      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0xc0>
 8005b86:	e014      	b.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7ff f8f8 	bl	8004d7c <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b90:	f7ff f8f4 	bl	8004d7c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b64      	cmp	r3, #100	@ 0x64
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e28a      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ba2:	4b60      	ldr	r3, [pc, #384]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0xe8>
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d075      	beq.n	8005caa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bbe:	4b59      	ldr	r3, [pc, #356]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bc8:	4b56      	ldr	r3, [pc, #344]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d102      	bne.n	8005bde <HAL_RCC_OscConfig+0x136>
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d002      	beq.n	8005be4 <HAL_RCC_OscConfig+0x13c>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d11f      	bne.n	8005c24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005be4:	4b4f      	ldr	r3, [pc, #316]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_RCC_OscConfig+0x154>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e25d      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfc:	4b49      	ldr	r3, [pc, #292]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	061b      	lsls	r3, r3, #24
 8005c0a:	4946      	ldr	r1, [pc, #280]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c10:	4b45      	ldr	r3, [pc, #276]	@ (8005d28 <HAL_RCC_OscConfig+0x280>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff f865 	bl	8004ce4 <HAL_InitTick>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d043      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e249      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d023      	beq.n	8005c74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a3c      	ldr	r2, [pc, #240]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c38:	f7ff f8a0 	bl	8004d7c <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c40:	f7ff f89c 	bl	8004d7c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e232      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c52:	4b34      	ldr	r3, [pc, #208]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5e:	4b31      	ldr	r3, [pc, #196]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	061b      	lsls	r3, r3, #24
 8005c6c:	492d      	ldr	r1, [pc, #180]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	604b      	str	r3, [r1, #4]
 8005c72:	e01a      	b.n	8005caa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c74:	4b2b      	ldr	r3, [pc, #172]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2a      	ldr	r2, [pc, #168]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005c7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7ff f87c 	bl	8004d7c <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c88:	f7ff f878 	bl	8004d7c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e20e      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c9a:	4b22      	ldr	r3, [pc, #136]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0x1e0>
 8005ca6:	e000      	b.n	8005caa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ca8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d041      	beq.n	8005d3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01c      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cbe:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc4:	4a17      	ldr	r2, [pc, #92]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005cc6:	f043 0301 	orr.w	r3, r3, #1
 8005cca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cce:	f7ff f855 	bl	8004d7c <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd6:	f7ff f851 	bl	8004d7c <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e1e7      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0ef      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x22e>
 8005cf6:	e020      	b.n	8005d3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cfe:	4a09      	ldr	r2, [pc, #36]	@ (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005d00:	f023 0301 	bic.w	r3, r3, #1
 8005d04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d08:	f7ff f838 	bl	8004d7c <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d0e:	e00d      	b.n	8005d2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d10:	f7ff f834 	bl	8004d7c <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d906      	bls.n	8005d2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e1ca      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
 8005d22:	bf00      	nop
 8005d24:	40021000 	.word	0x40021000
 8005d28:	2000006c 	.word	0x2000006c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d2c:	4b8c      	ldr	r3, [pc, #560]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1ea      	bne.n	8005d10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80a6 	beq.w	8005e94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d4c:	4b84      	ldr	r3, [pc, #528]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_RCC_OscConfig+0x2b4>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <HAL_RCC_OscConfig+0x2b6>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00d      	beq.n	8005d7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d62:	4b7f      	ldr	r3, [pc, #508]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d66:	4a7e      	ldr	r2, [pc, #504]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d7e:	4b79      	ldr	r3, [pc, #484]	@ (8005f64 <HAL_RCC_OscConfig+0x4bc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d118      	bne.n	8005dbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d8a:	4b76      	ldr	r3, [pc, #472]	@ (8005f64 <HAL_RCC_OscConfig+0x4bc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a75      	ldr	r2, [pc, #468]	@ (8005f64 <HAL_RCC_OscConfig+0x4bc>)
 8005d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d96:	f7fe fff1 	bl	8004d7c <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9e:	f7fe ffed 	bl	8004d7c <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e183      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db0:	4b6c      	ldr	r3, [pc, #432]	@ (8005f64 <HAL_RCC_OscConfig+0x4bc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d108      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x32e>
 8005dc4:	4b66      	ldr	r3, [pc, #408]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dca:	4a65      	ldr	r2, [pc, #404]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dd4:	e024      	b.n	8005e20 <HAL_RCC_OscConfig+0x378>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b05      	cmp	r3, #5
 8005ddc:	d110      	bne.n	8005e00 <HAL_RCC_OscConfig+0x358>
 8005dde:	4b60      	ldr	r3, [pc, #384]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de4:	4a5e      	ldr	r2, [pc, #376]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005de6:	f043 0304 	orr.w	r3, r3, #4
 8005dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dee:	4b5c      	ldr	r3, [pc, #368]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df4:	4a5a      	ldr	r2, [pc, #360]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dfe:	e00f      	b.n	8005e20 <HAL_RCC_OscConfig+0x378>
 8005e00:	4b57      	ldr	r3, [pc, #348]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e06:	4a56      	ldr	r2, [pc, #344]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e10:	4b53      	ldr	r3, [pc, #332]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e16:	4a52      	ldr	r2, [pc, #328]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005e18:	f023 0304 	bic.w	r3, r3, #4
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d016      	beq.n	8005e56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e28:	f7fe ffa8 	bl	8004d7c <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e30:	f7fe ffa4 	bl	8004d7c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e138      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e46:	4b46      	ldr	r3, [pc, #280]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0ed      	beq.n	8005e30 <HAL_RCC_OscConfig+0x388>
 8005e54:	e015      	b.n	8005e82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e56:	f7fe ff91 	bl	8004d7c <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fe ff8d 	bl	8004d7c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e121      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e74:	4b3a      	ldr	r3, [pc, #232]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ed      	bne.n	8005e5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e82:	7ffb      	ldrb	r3, [r7, #31]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d105      	bne.n	8005e94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e88:	4b35      	ldr	r3, [pc, #212]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8c:	4a34      	ldr	r2, [pc, #208]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d03c      	beq.n	8005f1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01c      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eae:	4a2c      	ldr	r2, [pc, #176]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb8:	f7fe ff60 	bl	8004d7c <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ec0:	f7fe ff5c 	bl	8004d7c <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e0f2      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ed2:	4b23      	ldr	r3, [pc, #140]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0ef      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x418>
 8005ee0:	e01b      	b.n	8005f1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005eea:	f023 0301 	bic.w	r3, r3, #1
 8005eee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef2:	f7fe ff43 	bl	8004d7c <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005efa:	f7fe ff3f 	bl	8004d7c <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e0d5      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f0c:	4b14      	ldr	r3, [pc, #80]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1ef      	bne.n	8005efa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 80c9 	beq.w	80060b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f24:	4b0e      	ldr	r3, [pc, #56]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 030c 	and.w	r3, r3, #12
 8005f2c:	2b0c      	cmp	r3, #12
 8005f2e:	f000 8083 	beq.w	8006038 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d15e      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3a:	4b09      	ldr	r3, [pc, #36]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a08      	ldr	r2, [pc, #32]	@ (8005f60 <HAL_RCC_OscConfig+0x4b8>)
 8005f40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fe ff19 	bl	8004d7c <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f4c:	e00c      	b.n	8005f68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f4e:	f7fe ff15 	bl	8004d7c <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d905      	bls.n	8005f68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e0ab      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
 8005f60:	40021000 	.word	0x40021000
 8005f64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f68:	4b55      	ldr	r3, [pc, #340]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1ec      	bne.n	8005f4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f74:	4b52      	ldr	r3, [pc, #328]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	4b52      	ldr	r3, [pc, #328]	@ (80060c4 <HAL_RCC_OscConfig+0x61c>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6a11      	ldr	r1, [r2, #32]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f84:	3a01      	subs	r2, #1
 8005f86:	0112      	lsls	r2, r2, #4
 8005f88:	4311      	orrs	r1, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005f8e:	0212      	lsls	r2, r2, #8
 8005f90:	4311      	orrs	r1, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f96:	0852      	lsrs	r2, r2, #1
 8005f98:	3a01      	subs	r2, #1
 8005f9a:	0552      	lsls	r2, r2, #21
 8005f9c:	4311      	orrs	r1, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005fa2:	0852      	lsrs	r2, r2, #1
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	0652      	lsls	r2, r2, #25
 8005fa8:	4311      	orrs	r1, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005fae:	06d2      	lsls	r2, r2, #27
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	4943      	ldr	r1, [pc, #268]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fb8:	4b41      	ldr	r3, [pc, #260]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a40      	ldr	r2, [pc, #256]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4a3d      	ldr	r2, [pc, #244]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fe fed4 	bl	8004d7c <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd8:	f7fe fed0 	bl	8004d7c <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e066      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fea:	4b35      	ldr	r3, [pc, #212]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x530>
 8005ff6:	e05e      	b.n	80060b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff8:	4b31      	ldr	r3, [pc, #196]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a30      	ldr	r2, [pc, #192]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8005ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fe feba 	bl	8004d7c <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600c:	f7fe feb6 	bl	8004d7c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e04c      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800601e:	4b28      	ldr	r3, [pc, #160]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800602a:	4b25      	ldr	r3, [pc, #148]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	4924      	ldr	r1, [pc, #144]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8006030:	4b25      	ldr	r3, [pc, #148]	@ (80060c8 <HAL_RCC_OscConfig+0x620>)
 8006032:	4013      	ands	r3, r2
 8006034:	60cb      	str	r3, [r1, #12]
 8006036:	e03e      	b.n	80060b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e039      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006044:	4b1e      	ldr	r3, [pc, #120]	@ (80060c0 <HAL_RCC_OscConfig+0x618>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f003 0203 	and.w	r2, r3, #3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	429a      	cmp	r2, r3
 8006056:	d12c      	bne.n	80060b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006062:	3b01      	subs	r3, #1
 8006064:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006066:	429a      	cmp	r2, r3
 8006068:	d123      	bne.n	80060b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006074:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006076:	429a      	cmp	r2, r3
 8006078:	d11b      	bne.n	80060b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006086:	429a      	cmp	r2, r3
 8006088:	d113      	bne.n	80060b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	3b01      	subs	r3, #1
 8006098:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800609a:	429a      	cmp	r2, r3
 800609c:	d109      	bne.n	80060b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	3b01      	subs	r3, #1
 80060ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d001      	beq.n	80060b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	019f800c 	.word	0x019f800c
 80060c8:	feeefffc 	.word	0xfeeefffc

080060cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e11e      	b.n	8006322 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060e4:	4b91      	ldr	r3, [pc, #580]	@ (800632c <HAL_RCC_ClockConfig+0x260>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d910      	bls.n	8006114 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f2:	4b8e      	ldr	r3, [pc, #568]	@ (800632c <HAL_RCC_ClockConfig+0x260>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 020f 	bic.w	r2, r3, #15
 80060fa:	498c      	ldr	r1, [pc, #560]	@ (800632c <HAL_RCC_ClockConfig+0x260>)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	4313      	orrs	r3, r2
 8006100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006102:	4b8a      	ldr	r3, [pc, #552]	@ (800632c <HAL_RCC_ClockConfig+0x260>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d001      	beq.n	8006114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e106      	b.n	8006322 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d073      	beq.n	8006208 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2b03      	cmp	r3, #3
 8006126:	d129      	bne.n	800617c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006128:	4b81      	ldr	r3, [pc, #516]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e0f4      	b.n	8006322 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006138:	f000 f99e 	bl	8006478 <RCC_GetSysClockFreqFromPLLSource>
 800613c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4a7c      	ldr	r2, [pc, #496]	@ (8006334 <HAL_RCC_ClockConfig+0x268>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d93f      	bls.n	80061c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006146:	4b7a      	ldr	r3, [pc, #488]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800615a:	2b00      	cmp	r3, #0
 800615c:	d033      	beq.n	80061c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006162:	2b00      	cmp	r3, #0
 8006164:	d12f      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006166:	4b72      	ldr	r3, [pc, #456]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800616e:	4a70      	ldr	r2, [pc, #448]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006174:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006176:	2380      	movs	r3, #128	@ 0x80
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e024      	b.n	80061c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d107      	bne.n	8006194 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006184:	4b6a      	ldr	r3, [pc, #424]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d109      	bne.n	80061a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0c6      	b.n	8006322 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006194:	4b66      	ldr	r3, [pc, #408]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0be      	b.n	8006322 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80061a4:	f000 f8ce 	bl	8006344 <HAL_RCC_GetSysClockFreq>
 80061a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4a61      	ldr	r2, [pc, #388]	@ (8006334 <HAL_RCC_ClockConfig+0x268>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d909      	bls.n	80061c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061b2:	4b5f      	ldr	r3, [pc, #380]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061ba:	4a5d      	ldr	r2, [pc, #372]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80061bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80061c2:	2380      	movs	r3, #128	@ 0x80
 80061c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061c6:	4b5a      	ldr	r3, [pc, #360]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f023 0203 	bic.w	r2, r3, #3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4957      	ldr	r1, [pc, #348]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d8:	f7fe fdd0 	bl	8004d7c <HAL_GetTick>
 80061dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061de:	e00a      	b.n	80061f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e0:	f7fe fdcc 	bl	8004d7c <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e095      	b.n	8006322 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061f6:	4b4e      	ldr	r3, [pc, #312]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 020c 	and.w	r2, r3, #12
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	429a      	cmp	r2, r3
 8006206:	d1eb      	bne.n	80061e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d023      	beq.n	800625c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006220:	4b43      	ldr	r3, [pc, #268]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	4a42      	ldr	r2, [pc, #264]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006226:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800622a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006238:	4b3d      	ldr	r3, [pc, #244]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006240:	4a3b      	ldr	r2, [pc, #236]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006242:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006246:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006248:	4b39      	ldr	r3, [pc, #228]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4936      	ldr	r1, [pc, #216]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006256:	4313      	orrs	r3, r2
 8006258:	608b      	str	r3, [r1, #8]
 800625a:	e008      	b.n	800626e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b80      	cmp	r3, #128	@ 0x80
 8006260:	d105      	bne.n	800626e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006262:	4b33      	ldr	r3, [pc, #204]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	4a32      	ldr	r2, [pc, #200]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 8006268:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800626c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800626e:	4b2f      	ldr	r3, [pc, #188]	@ (800632c <HAL_RCC_ClockConfig+0x260>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d21d      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627c:	4b2b      	ldr	r3, [pc, #172]	@ (800632c <HAL_RCC_ClockConfig+0x260>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f023 020f 	bic.w	r2, r3, #15
 8006284:	4929      	ldr	r1, [pc, #164]	@ (800632c <HAL_RCC_ClockConfig+0x260>)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800628c:	f7fe fd76 	bl	8004d7c <HAL_GetTick>
 8006290:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	e00a      	b.n	80062aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006294:	f7fe fd72 	bl	8004d7c <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e03b      	b.n	8006322 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b20      	ldr	r3, [pc, #128]	@ (800632c <HAL_RCC_ClockConfig+0x260>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d1ed      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4917      	ldr	r1, [pc, #92]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062e2:	4b13      	ldr	r3, [pc, #76]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	490f      	ldr	r1, [pc, #60]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062f6:	f000 f825 	bl	8006344 <HAL_RCC_GetSysClockFreq>
 80062fa:	4602      	mov	r2, r0
 80062fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006330 <HAL_RCC_ClockConfig+0x264>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	091b      	lsrs	r3, r3, #4
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	490c      	ldr	r1, [pc, #48]	@ (8006338 <HAL_RCC_ClockConfig+0x26c>)
 8006308:	5ccb      	ldrb	r3, [r1, r3]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	fa22 f303 	lsr.w	r3, r2, r3
 8006312:	4a0a      	ldr	r2, [pc, #40]	@ (800633c <HAL_RCC_ClockConfig+0x270>)
 8006314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006316:	4b0a      	ldr	r3, [pc, #40]	@ (8006340 <HAL_RCC_ClockConfig+0x274>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fce2 	bl	8004ce4 <HAL_InitTick>
 8006320:	4603      	mov	r3, r0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40022000 	.word	0x40022000
 8006330:	40021000 	.word	0x40021000
 8006334:	04c4b400 	.word	0x04c4b400
 8006338:	0800a7f8 	.word	0x0800a7f8
 800633c:	20000000 	.word	0x20000000
 8006340:	2000006c 	.word	0x2000006c

08006344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800634a:	4b2c      	ldr	r3, [pc, #176]	@ (80063fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 030c 	and.w	r3, r3, #12
 8006352:	2b04      	cmp	r3, #4
 8006354:	d102      	bne.n	800635c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006356:	4b2a      	ldr	r3, [pc, #168]	@ (8006400 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	e047      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800635c:	4b27      	ldr	r3, [pc, #156]	@ (80063fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 030c 	and.w	r3, r3, #12
 8006364:	2b08      	cmp	r3, #8
 8006366:	d102      	bne.n	800636e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006368:	4b26      	ldr	r3, [pc, #152]	@ (8006404 <HAL_RCC_GetSysClockFreq+0xc0>)
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	e03e      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800636e:	4b23      	ldr	r3, [pc, #140]	@ (80063fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 030c 	and.w	r3, r3, #12
 8006376:	2b0c      	cmp	r3, #12
 8006378:	d136      	bne.n	80063e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800637a:	4b20      	ldr	r3, [pc, #128]	@ (80063fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006384:	4b1d      	ldr	r3, [pc, #116]	@ (80063fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	3301      	adds	r3, #1
 8006390:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d10c      	bne.n	80063b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006398:	4a1a      	ldr	r2, [pc, #104]	@ (8006404 <HAL_RCC_GetSysClockFreq+0xc0>)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a0:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80063a2:	68d2      	ldr	r2, [r2, #12]
 80063a4:	0a12      	lsrs	r2, r2, #8
 80063a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	617b      	str	r3, [r7, #20]
      break;
 80063b0:	e00c      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063b2:	4a13      	ldr	r2, [pc, #76]	@ (8006400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ba:	4a10      	ldr	r2, [pc, #64]	@ (80063fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80063bc:	68d2      	ldr	r2, [r2, #12]
 80063be:	0a12      	lsrs	r2, r2, #8
 80063c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063c4:	fb02 f303 	mul.w	r3, r2, r3
 80063c8:	617b      	str	r3, [r7, #20]
      break;
 80063ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063cc:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	0e5b      	lsrs	r3, r3, #25
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	3301      	adds	r3, #1
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	e001      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80063ec:	693b      	ldr	r3, [r7, #16]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40021000 	.word	0x40021000
 8006400:	00f42400 	.word	0x00f42400
 8006404:	007a1200 	.word	0x007a1200

08006408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800640c:	4b03      	ldr	r3, [pc, #12]	@ (800641c <HAL_RCC_GetHCLKFreq+0x14>)
 800640e:	681b      	ldr	r3, [r3, #0]
}
 8006410:	4618      	mov	r0, r3
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000000 	.word	0x20000000

08006420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006424:	f7ff fff0 	bl	8006408 <HAL_RCC_GetHCLKFreq>
 8006428:	4602      	mov	r2, r0
 800642a:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	0a1b      	lsrs	r3, r3, #8
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	4904      	ldr	r1, [pc, #16]	@ (8006448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006436:	5ccb      	ldrb	r3, [r1, r3]
 8006438:	f003 031f 	and.w	r3, r3, #31
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40021000 	.word	0x40021000
 8006448:	0800a808 	.word	0x0800a808

0800644c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006450:	f7ff ffda 	bl	8006408 <HAL_RCC_GetHCLKFreq>
 8006454:	4602      	mov	r2, r0
 8006456:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	0adb      	lsrs	r3, r3, #11
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	4904      	ldr	r1, [pc, #16]	@ (8006474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006462:	5ccb      	ldrb	r3, [r1, r3]
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40021000 	.word	0x40021000
 8006474:	0800a808 	.word	0x0800a808

08006478 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800647e:	4b1e      	ldr	r3, [pc, #120]	@ (80064f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006488:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	3301      	adds	r3, #1
 8006494:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d10c      	bne.n	80064b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800649c:	4a17      	ldr	r2, [pc, #92]	@ (80064fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	4a14      	ldr	r2, [pc, #80]	@ (80064f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064a6:	68d2      	ldr	r2, [r2, #12]
 80064a8:	0a12      	lsrs	r2, r2, #8
 80064aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	617b      	str	r3, [r7, #20]
    break;
 80064b4:	e00c      	b.n	80064d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064b6:	4a12      	ldr	r2, [pc, #72]	@ (8006500 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	4a0e      	ldr	r2, [pc, #56]	@ (80064f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064c0:	68d2      	ldr	r2, [r2, #12]
 80064c2:	0a12      	lsrs	r2, r2, #8
 80064c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064c8:	fb02 f303 	mul.w	r3, r2, r3
 80064cc:	617b      	str	r3, [r7, #20]
    break;
 80064ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064d0:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	0e5b      	lsrs	r3, r3, #25
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	3301      	adds	r3, #1
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80064ea:	687b      	ldr	r3, [r7, #4]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	40021000 	.word	0x40021000
 80064fc:	007a1200 	.word	0x007a1200
 8006500:	00f42400 	.word	0x00f42400

08006504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800650c:	2300      	movs	r3, #0
 800650e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006510:	2300      	movs	r3, #0
 8006512:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8098 	beq.w	8006652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006522:	2300      	movs	r3, #0
 8006524:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006526:	4b43      	ldr	r3, [pc, #268]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10d      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006532:	4b40      	ldr	r3, [pc, #256]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006536:	4a3f      	ldr	r2, [pc, #252]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800653c:	6593      	str	r3, [r2, #88]	@ 0x58
 800653e:	4b3d      	ldr	r3, [pc, #244]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006546:	60bb      	str	r3, [r7, #8]
 8006548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800654a:	2301      	movs	r3, #1
 800654c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800654e:	4b3a      	ldr	r3, [pc, #232]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a39      	ldr	r2, [pc, #228]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800655a:	f7fe fc0f 	bl	8004d7c <HAL_GetTick>
 800655e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006560:	e009      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006562:	f7fe fc0b 	bl	8004d7c <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d902      	bls.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	74fb      	strb	r3, [r7, #19]
        break;
 8006574:	e005      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006576:	4b30      	ldr	r3, [pc, #192]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0ef      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006582:	7cfb      	ldrb	r3, [r7, #19]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d159      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006588:	4b2a      	ldr	r3, [pc, #168]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800658a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800658e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006592:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d01e      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d019      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065a4:	4b23      	ldr	r3, [pc, #140]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065b0:	4b20      	ldr	r3, [pc, #128]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065d0:	4a18      	ldr	r2, [pc, #96]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d016      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e2:	f7fe fbcb 	bl	8004d7c <HAL_GetTick>
 80065e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065e8:	e00b      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ea:	f7fe fbc7 	bl	8004d7c <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d902      	bls.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	74fb      	strb	r3, [r7, #19]
            break;
 8006600:	e006      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006602:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0ec      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006610:	7cfb      	ldrb	r3, [r7, #19]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006616:	4b07      	ldr	r3, [pc, #28]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	4903      	ldr	r1, [pc, #12]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800662c:	e008      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800662e:	7cfb      	ldrb	r3, [r7, #19]
 8006630:	74bb      	strb	r3, [r7, #18]
 8006632:	e005      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006634:	40021000 	.word	0x40021000
 8006638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	7cfb      	ldrb	r3, [r7, #19]
 800663e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006640:	7c7b      	ldrb	r3, [r7, #17]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d105      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006646:	4ba6      	ldr	r3, [pc, #664]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664a:	4aa5      	ldr	r2, [pc, #660]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006650:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800665e:	4ba0      	ldr	r3, [pc, #640]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006664:	f023 0203 	bic.w	r2, r3, #3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	499c      	ldr	r1, [pc, #624]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006680:	4b97      	ldr	r3, [pc, #604]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006686:	f023 020c 	bic.w	r2, r3, #12
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4994      	ldr	r1, [pc, #592]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066a2:	4b8f      	ldr	r3, [pc, #572]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	498b      	ldr	r1, [pc, #556]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066c4:	4b86      	ldr	r3, [pc, #536]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	4983      	ldr	r1, [pc, #524]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066e6:	4b7e      	ldr	r3, [pc, #504]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	497a      	ldr	r1, [pc, #488]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006708:	4b75      	ldr	r3, [pc, #468]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	4972      	ldr	r1, [pc, #456]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800672a:	4b6d      	ldr	r3, [pc, #436]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006730:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	4969      	ldr	r1, [pc, #420]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800674c:	4b64      	ldr	r3, [pc, #400]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	4961      	ldr	r1, [pc, #388]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800676e:	4b5c      	ldr	r3, [pc, #368]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006774:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	4958      	ldr	r1, [pc, #352]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800678c:	2b00      	cmp	r3, #0
 800678e:	d015      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006790:	4b53      	ldr	r3, [pc, #332]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006796:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679e:	4950      	ldr	r1, [pc, #320]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ae:	d105      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b0:	4b4b      	ldr	r3, [pc, #300]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4a4a      	ldr	r2, [pc, #296]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d015      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067c8:	4b45      	ldr	r3, [pc, #276]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	4942      	ldr	r1, [pc, #264]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067e6:	d105      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067e8:	4b3d      	ldr	r3, [pc, #244]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	4a3c      	ldr	r2, [pc, #240]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d015      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006800:	4b37      	ldr	r3, [pc, #220]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006806:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680e:	4934      	ldr	r1, [pc, #208]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006810:	4313      	orrs	r3, r2
 8006812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800681e:	d105      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006820:	4b2f      	ldr	r3, [pc, #188]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	4a2e      	ldr	r2, [pc, #184]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800682a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d015      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006838:	4b29      	ldr	r3, [pc, #164]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006846:	4926      	ldr	r1, [pc, #152]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006852:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006856:	d105      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006858:	4b21      	ldr	r3, [pc, #132]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	4a20      	ldr	r2, [pc, #128]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800685e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006862:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d015      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006870:	4b1b      	ldr	r3, [pc, #108]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006876:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	4918      	ldr	r1, [pc, #96]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006880:	4313      	orrs	r3, r2
 8006882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800688e:	d105      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006890:	4b13      	ldr	r3, [pc, #76]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	4a12      	ldr	r2, [pc, #72]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800689a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d015      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068a8:	4b0d      	ldr	r3, [pc, #52]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b6:	490a      	ldr	r1, [pc, #40]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068c6:	d105      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068c8:	4b05      	ldr	r3, [pc, #20]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	4a04      	ldr	r2, [pc, #16]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80068d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40021000 	.word	0x40021000

080068e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e09d      	b.n	8006a32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d108      	bne.n	8006910 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006906:	d009      	beq.n	800691c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	61da      	str	r2, [r3, #28]
 800690e:	e005      	b.n	800691c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f8a7 	bl	8006a8a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006952:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800695c:	d902      	bls.n	8006964 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e002      	b.n	800696a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006968:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006972:	d007      	beq.n	8006984 <HAL_SPI_Init+0xa0>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800697c:	d002      	beq.n	8006984 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c6:	ea42 0103 	orr.w	r1, r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	f003 0204 	and.w	r2, r3, #4
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a00:	ea42 0103 	orr.w	r1, r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b082      	sub	sp, #8
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e01a      	b.n	8006a82 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a62:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f81a 	bl	8006a9e <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b088      	sub	sp, #32
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	603b      	str	r3, [r7, #0]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_SPI_Transmit+0x22>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e15f      	b.n	8006d94 <HAL_SPI_Transmit+0x2e2>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006adc:	f7fe f94e 	bl	8004d7c <HAL_GetTick>
 8006ae0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d002      	beq.n	8006af8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006af2:	2302      	movs	r3, #2
 8006af4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006af6:	e148      	b.n	8006d8a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_SPI_Transmit+0x52>
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b08:	e13f      	b.n	8006d8a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	88fa      	ldrh	r2, [r7, #6]
 8006b28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b54:	d10f      	bne.n	8006b76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b80:	2b40      	cmp	r3, #64	@ 0x40
 8006b82:	d007      	beq.n	8006b94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b9c:	d94f      	bls.n	8006c3e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_SPI_Transmit+0xfa>
 8006ba6:	8afb      	ldrh	r3, [r7, #22]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d142      	bne.n	8006c32 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb0:	881a      	ldrh	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	1c9a      	adds	r2, r3, #2
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bd0:	e02f      	b.n	8006c32 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d112      	bne.n	8006c06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be4:	881a      	ldrh	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf0:	1c9a      	adds	r2, r3, #2
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c04:	e015      	b.n	8006c32 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c06:	f7fe f8b9 	bl	8004d7c <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d803      	bhi.n	8006c1e <HAL_SPI_Transmit+0x16c>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c1c:	d102      	bne.n	8006c24 <HAL_SPI_Transmit+0x172>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006c30:	e0ab      	b.n	8006d8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1ca      	bne.n	8006bd2 <HAL_SPI_Transmit+0x120>
 8006c3c:	e080      	b.n	8006d40 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_SPI_Transmit+0x19a>
 8006c46:	8afb      	ldrh	r3, [r7, #22]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d174      	bne.n	8006d36 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d912      	bls.n	8006c7c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5a:	881a      	ldrh	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c66:	1c9a      	adds	r2, r3, #2
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b02      	subs	r3, #2
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c7a:	e05c      	b.n	8006d36 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	330c      	adds	r3, #12
 8006c86:	7812      	ldrb	r2, [r2, #0]
 8006c88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ca2:	e048      	b.n	8006d36 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d12b      	bne.n	8006d0a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d912      	bls.n	8006ce2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc0:	881a      	ldrh	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ccc:	1c9a      	adds	r2, r3, #2
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b02      	subs	r3, #2
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ce0:	e029      	b.n	8006d36 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	7812      	ldrb	r2, [r2, #0]
 8006cee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d08:	e015      	b.n	8006d36 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d0a:	f7fe f837 	bl	8004d7c <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d803      	bhi.n	8006d22 <HAL_SPI_Transmit+0x270>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d20:	d102      	bne.n	8006d28 <HAL_SPI_Transmit+0x276>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006d34:	e029      	b.n	8006d8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1b1      	bne.n	8006ca4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fd07 	bl	8007758 <SPI_EndRxTxTransaction>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e003      	b.n	8006d8a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006d92:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3720      	adds	r7, #32
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d002      	beq.n	8006dc2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006dc0:	e11a      	b.n	8006ff8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dca:	d112      	bne.n	8006df2 <HAL_SPI_Receive+0x56>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10e      	bne.n	8006df2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	68b9      	ldr	r1, [r7, #8]
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f90e 	bl	800700a <HAL_SPI_TransmitReceive>
 8006dee:	4603      	mov	r3, r0
 8006df0:	e107      	b.n	8007002 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_SPI_Receive+0x64>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e100      	b.n	8007002 <HAL_SPI_Receive+0x266>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e08:	f7fd ffb8 	bl	8004d7c <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_SPI_Receive+0x7e>
 8006e14:	88fb      	ldrh	r3, [r7, #6]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e1e:	e0eb      	b.n	8006ff8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2204      	movs	r2, #4
 8006e24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e6a:	d908      	bls.n	8006e7e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e7a:	605a      	str	r2, [r3, #4]
 8006e7c:	e007      	b.n	8006e8e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e8c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e96:	d10f      	bne.n	8006eb8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ea6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006eb6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec2:	2b40      	cmp	r3, #64	@ 0x40
 8006ec4:	d007      	beq.n	8006ed6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ed4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ede:	d86f      	bhi.n	8006fc0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ee0:	e034      	b.n	8006f4c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d117      	bne.n	8006f20 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f103 020c 	add.w	r2, r3, #12
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006f1e:	e015      	b.n	8006f4c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f20:	f7fd ff2c 	bl	8004d7c <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d803      	bhi.n	8006f38 <HAL_SPI_Receive+0x19c>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f36:	d102      	bne.n	8006f3e <HAL_SPI_Receive+0x1a2>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006f4a:	e055      	b.n	8006ff8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1c4      	bne.n	8006ee2 <HAL_SPI_Receive+0x146>
 8006f58:	e038      	b.n	8006fcc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d115      	bne.n	8006f94 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f72:	b292      	uxth	r2, r2
 8006f74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7a:	1c9a      	adds	r2, r3, #2
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006f92:	e015      	b.n	8006fc0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f94:	f7fd fef2 	bl	8004d7c <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d803      	bhi.n	8006fac <HAL_SPI_Receive+0x210>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006faa:	d102      	bne.n	8006fb2 <HAL_SPI_Receive+0x216>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006fbe:	e01b      	b.n	8006ff8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1c6      	bne.n	8006f5a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 fb69 	bl	80076a8 <SPI_EndRxTransaction>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	75fb      	strb	r3, [r7, #23]
 8006fee:	e003      	b.n	8006ff8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b08a      	sub	sp, #40	@ 0x28
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	607a      	str	r2, [r7, #4]
 8007016:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007018:	2301      	movs	r3, #1
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_SPI_TransmitReceive+0x26>
 800702c:	2302      	movs	r3, #2
 800702e:	e20a      	b.n	8007446 <HAL_SPI_TransmitReceive+0x43c>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007038:	f7fd fea0 	bl	8004d7c <HAL_GetTick>
 800703c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007044:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800704c:	887b      	ldrh	r3, [r7, #2]
 800704e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007050:	887b      	ldrh	r3, [r7, #2]
 8007052:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007054:	7efb      	ldrb	r3, [r7, #27]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d00e      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x6e>
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007060:	d106      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d102      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x66>
 800706a:	7efb      	ldrb	r3, [r7, #27]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d003      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007070:	2302      	movs	r3, #2
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007076:	e1e0      	b.n	800743a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <HAL_SPI_TransmitReceive+0x80>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_SPI_TransmitReceive+0x80>
 8007084:	887b      	ldrh	r3, [r7, #2]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d103      	bne.n	8007092 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007090:	e1d3      	b.n	800743a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b04      	cmp	r3, #4
 800709c:	d003      	beq.n	80070a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2205      	movs	r2, #5
 80070a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	887a      	ldrh	r2, [r7, #2]
 80070b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	887a      	ldrh	r2, [r7, #2]
 80070be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	887a      	ldrh	r2, [r7, #2]
 80070cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	887a      	ldrh	r2, [r7, #2]
 80070d2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070e8:	d802      	bhi.n	80070f0 <HAL_SPI_TransmitReceive+0xe6>
 80070ea:	8a3b      	ldrh	r3, [r7, #16]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d908      	bls.n	8007102 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070fe:	605a      	str	r2, [r3, #4]
 8007100:	e007      	b.n	8007112 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007110:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711c:	2b40      	cmp	r3, #64	@ 0x40
 800711e:	d007      	beq.n	8007130 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800712e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007138:	f240 8081 	bls.w	800723e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_SPI_TransmitReceive+0x140>
 8007144:	8a7b      	ldrh	r3, [r7, #18]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d16d      	bne.n	8007226 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	881a      	ldrh	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715a:	1c9a      	adds	r2, r3, #2
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800716e:	e05a      	b.n	8007226 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b02      	cmp	r3, #2
 800717c:	d11b      	bne.n	80071b6 <HAL_SPI_TransmitReceive+0x1ac>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007182:	b29b      	uxth	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d016      	beq.n	80071b6 <HAL_SPI_TransmitReceive+0x1ac>
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	2b01      	cmp	r3, #1
 800718c:	d113      	bne.n	80071b6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007192:	881a      	ldrh	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	1c9a      	adds	r2, r3, #2
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d11c      	bne.n	80071fe <HAL_SPI_TransmitReceive+0x1f4>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d016      	beq.n	80071fe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071da:	b292      	uxth	r2, r2
 80071dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	1c9a      	adds	r2, r3, #2
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071fa:	2301      	movs	r3, #1
 80071fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071fe:	f7fd fdbd 	bl	8004d7c <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800720a:	429a      	cmp	r2, r3
 800720c:	d80b      	bhi.n	8007226 <HAL_SPI_TransmitReceive+0x21c>
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007214:	d007      	beq.n	8007226 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007224:	e109      	b.n	800743a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d19f      	bne.n	8007170 <HAL_SPI_TransmitReceive+0x166>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007236:	b29b      	uxth	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d199      	bne.n	8007170 <HAL_SPI_TransmitReceive+0x166>
 800723c:	e0e3      	b.n	8007406 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_SPI_TransmitReceive+0x244>
 8007246:	8a7b      	ldrh	r3, [r7, #18]
 8007248:	2b01      	cmp	r3, #1
 800724a:	f040 80cf 	bne.w	80073ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d912      	bls.n	800727e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725c:	881a      	ldrh	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007268:	1c9a      	adds	r2, r3, #2
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b02      	subs	r3, #2
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800727c:	e0b6      	b.n	80073ec <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	7812      	ldrb	r2, [r2, #0]
 800728a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072a4:	e0a2      	b.n	80073ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d134      	bne.n	800731e <HAL_SPI_TransmitReceive+0x314>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d02f      	beq.n	800731e <HAL_SPI_TransmitReceive+0x314>
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d12c      	bne.n	800731e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d912      	bls.n	80072f4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d2:	881a      	ldrh	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072de:	1c9a      	adds	r2, r3, #2
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b02      	subs	r3, #2
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072f2:	e012      	b.n	800731a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	330c      	adds	r3, #12
 80072fe:	7812      	ldrb	r2, [r2, #0]
 8007300:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b01      	cmp	r3, #1
 800732a:	d148      	bne.n	80073be <HAL_SPI_TransmitReceive+0x3b4>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d042      	beq.n	80073be <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d923      	bls.n	800738c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734e:	b292      	uxth	r2, r2
 8007350:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007356:	1c9a      	adds	r2, r3, #2
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b02      	subs	r3, #2
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b01      	cmp	r3, #1
 8007378:	d81f      	bhi.n	80073ba <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007388:	605a      	str	r2, [r3, #4]
 800738a:	e016      	b.n	80073ba <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f103 020c 	add.w	r2, r3, #12
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007398:	7812      	ldrb	r2, [r2, #0]
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073ba:	2301      	movs	r3, #1
 80073bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073be:	f7fd fcdd 	bl	8004d7c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d803      	bhi.n	80073d6 <HAL_SPI_TransmitReceive+0x3cc>
 80073ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073d4:	d102      	bne.n	80073dc <HAL_SPI_TransmitReceive+0x3d2>
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d107      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80073ea:	e026      	b.n	800743a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f47f af57 	bne.w	80072a6 <HAL_SPI_TransmitReceive+0x29c>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	f47f af50 	bne.w	80072a6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f9a4 	bl	8007758 <SPI_EndRxTxTransaction>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007430:	e003      	b.n	800743a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007442:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007446:	4618      	mov	r0, r3
 8007448:	3728      	adds	r7, #40	@ 0x28
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800745c:	b2db      	uxtb	r3, r3
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800747c:	f7fd fc7e 	bl	8004d7c <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	4413      	add	r3, r2
 800748a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800748c:	f7fd fc76 	bl	8004d7c <HAL_GetTick>
 8007490:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007492:	4b39      	ldr	r3, [pc, #228]	@ (8007578 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	015b      	lsls	r3, r3, #5
 8007498:	0d1b      	lsrs	r3, r3, #20
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074a2:	e054      	b.n	800754e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074aa:	d050      	beq.n	800754e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074ac:	f7fd fc66 	bl	8004d7c <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d902      	bls.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d13d      	bne.n	800753e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80074d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074da:	d111      	bne.n	8007500 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074e4:	d004      	beq.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ee:	d107      	bne.n	8007500 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007508:	d10f      	bne.n	800752a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007528:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e017      	b.n	800756e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	3b01      	subs	r3, #1
 800754c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4013      	ands	r3, r2
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	bf0c      	ite	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	2300      	movne	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	429a      	cmp	r2, r3
 800756a:	d19b      	bne.n	80074a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000000 	.word	0x20000000

0800757c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08a      	sub	sp, #40	@ 0x28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800758e:	f7fd fbf5 	bl	8004d7c <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	4413      	add	r3, r2
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800759e:	f7fd fbed 	bl	8004d7c <HAL_GetTick>
 80075a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80075ac:	4b3d      	ldr	r3, [pc, #244]	@ (80076a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	00da      	lsls	r2, r3, #3
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	0d1b      	lsrs	r3, r3, #20
 80075bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075be:	fb02 f303 	mul.w	r3, r2, r3
 80075c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80075c4:	e060      	b.n	8007688 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80075cc:	d107      	bne.n	80075de <SPI_WaitFifoStateUntilTimeout+0x62>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d104      	bne.n	80075de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075e4:	d050      	beq.n	8007688 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075e6:	f7fd fbc9 	bl	8004d7c <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d902      	bls.n	80075fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d13d      	bne.n	8007678 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800760a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007614:	d111      	bne.n	800763a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800761e:	d004      	beq.n	800762a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007628:	d107      	bne.n	800763a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007638:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007642:	d10f      	bne.n	8007664 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007662:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e010      	b.n	800769a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	3b01      	subs	r3, #1
 8007686:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	4013      	ands	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	d196      	bne.n	80075c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3728      	adds	r7, #40	@ 0x28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20000000 	.word	0x20000000

080076a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076bc:	d111      	bne.n	80076e2 <SPI_EndRxTransaction+0x3a>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076c6:	d004      	beq.n	80076d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076d0:	d107      	bne.n	80076e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2200      	movs	r2, #0
 80076ea:	2180      	movs	r1, #128	@ 0x80
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff febd 	bl	800746c <SPI_WaitFlagStateUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d007      	beq.n	8007708 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076fc:	f043 0220 	orr.w	r2, r3, #32
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e023      	b.n	8007750 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007710:	d11d      	bne.n	800774e <SPI_EndRxTransaction+0xa6>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800771a:	d004      	beq.n	8007726 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007724:	d113      	bne.n	800774e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2200      	movs	r2, #0
 800772e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff ff22 	bl	800757c <SPI_WaitFifoStateUntilTimeout>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007742:	f043 0220 	orr.w	r2, r3, #32
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e000      	b.n	8007750 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2200      	movs	r2, #0
 800776c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f7ff ff03 	bl	800757c <SPI_WaitFifoStateUntilTimeout>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007780:	f043 0220 	orr.w	r2, r3, #32
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e027      	b.n	80077dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2200      	movs	r2, #0
 8007794:	2180      	movs	r1, #128	@ 0x80
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff fe68 	bl	800746c <SPI_WaitFlagStateUntilTimeout>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a6:	f043 0220 	orr.w	r2, r3, #32
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e014      	b.n	80077dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff fedc 	bl	800757c <SPI_WaitFifoStateUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ce:	f043 0220 	orr.w	r2, r3, #32
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e000      	b.n	80077dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e042      	b.n	800787c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f83b 	bl	8007884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2224      	movs	r2, #36	@ 0x24
 8007812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fb8c 	bl	8007f4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f8bd 	bl	80079b4 <UART_SetConfig>
 800783a:	4603      	mov	r3, r0
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e01b      	b.n	800787c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fc0b 	bl	8008090 <UART_CheckIdleState>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	@ 0x28
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d17b      	bne.n	80079aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_UART_Transmit+0x26>
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e074      	b.n	80079ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2221      	movs	r2, #33	@ 0x21
 80078ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078d2:	f7fd fa53 	bl	8004d7c <HAL_GetTick>
 80078d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f0:	d108      	bne.n	8007904 <HAL_UART_Transmit+0x6c>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d104      	bne.n	8007904 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	e003      	b.n	800790c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007908:	2300      	movs	r3, #0
 800790a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800790c:	e030      	b.n	8007970 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2200      	movs	r2, #0
 8007916:	2180      	movs	r1, #128	@ 0x80
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 fc63 	bl	80081e4 <UART_WaitOnFlagUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e03d      	b.n	80079ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10b      	bne.n	800794e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007944:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	3302      	adds	r3, #2
 800794a:	61bb      	str	r3, [r7, #24]
 800794c:	e007      	b.n	800795e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	781a      	ldrb	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	3301      	adds	r3, #1
 800795c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1c8      	bne.n	800790e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2200      	movs	r2, #0
 8007984:	2140      	movs	r1, #64	@ 0x40
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fc2c 	bl	80081e4 <UART_WaitOnFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e006      	b.n	80079ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e000      	b.n	80079ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80079aa:	2302      	movs	r3, #2
  }
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b8:	b08c      	sub	sp, #48	@ 0x30
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	431a      	orrs	r2, r3
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	4313      	orrs	r3, r2
 80079da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	4bab      	ldr	r3, [pc, #684]	@ (8007c90 <UART_SetConfig+0x2dc>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	6812      	ldr	r2, [r2, #0]
 80079ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ec:	430b      	orrs	r3, r1
 80079ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4aa0      	ldr	r2, [pc, #640]	@ (8007c94 <UART_SetConfig+0x2e0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007a2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a34:	430b      	orrs	r3, r1
 8007a36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3e:	f023 010f 	bic.w	r1, r3, #15
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a91      	ldr	r2, [pc, #580]	@ (8007c98 <UART_SetConfig+0x2e4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d125      	bne.n	8007aa4 <UART_SetConfig+0xf0>
 8007a58:	4b90      	ldr	r3, [pc, #576]	@ (8007c9c <UART_SetConfig+0x2e8>)
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d81a      	bhi.n	8007a9c <UART_SetConfig+0xe8>
 8007a66:	a201      	add	r2, pc, #4	@ (adr r2, 8007a6c <UART_SetConfig+0xb8>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a7d 	.word	0x08007a7d
 8007a70:	08007a8d 	.word	0x08007a8d
 8007a74:	08007a85 	.word	0x08007a85
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a82:	e0d6      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007a84:	2302      	movs	r3, #2
 8007a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a8a:	e0d2      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a92:	e0ce      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007a94:	2308      	movs	r3, #8
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a9a:	e0ca      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aa2:	e0c6      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a7d      	ldr	r2, [pc, #500]	@ (8007ca0 <UART_SetConfig+0x2ec>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d138      	bne.n	8007b20 <UART_SetConfig+0x16c>
 8007aae:	4b7b      	ldr	r3, [pc, #492]	@ (8007c9c <UART_SetConfig+0x2e8>)
 8007ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab4:	f003 030c 	and.w	r3, r3, #12
 8007ab8:	2b0c      	cmp	r3, #12
 8007aba:	d82d      	bhi.n	8007b18 <UART_SetConfig+0x164>
 8007abc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac4 <UART_SetConfig+0x110>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007af9 	.word	0x08007af9
 8007ac8:	08007b19 	.word	0x08007b19
 8007acc:	08007b19 	.word	0x08007b19
 8007ad0:	08007b19 	.word	0x08007b19
 8007ad4:	08007b09 	.word	0x08007b09
 8007ad8:	08007b19 	.word	0x08007b19
 8007adc:	08007b19 	.word	0x08007b19
 8007ae0:	08007b19 	.word	0x08007b19
 8007ae4:	08007b01 	.word	0x08007b01
 8007ae8:	08007b19 	.word	0x08007b19
 8007aec:	08007b19 	.word	0x08007b19
 8007af0:	08007b19 	.word	0x08007b19
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	2300      	movs	r3, #0
 8007afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007afe:	e098      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b00:	2302      	movs	r3, #2
 8007b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b06:	e094      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b0e:	e090      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b10:	2308      	movs	r3, #8
 8007b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b16:	e08c      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b1e:	e088      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a5f      	ldr	r2, [pc, #380]	@ (8007ca4 <UART_SetConfig+0x2f0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d125      	bne.n	8007b76 <UART_SetConfig+0x1c2>
 8007b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8007c9c <UART_SetConfig+0x2e8>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b34:	2b30      	cmp	r3, #48	@ 0x30
 8007b36:	d016      	beq.n	8007b66 <UART_SetConfig+0x1b2>
 8007b38:	2b30      	cmp	r3, #48	@ 0x30
 8007b3a:	d818      	bhi.n	8007b6e <UART_SetConfig+0x1ba>
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d00a      	beq.n	8007b56 <UART_SetConfig+0x1a2>
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d814      	bhi.n	8007b6e <UART_SetConfig+0x1ba>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <UART_SetConfig+0x19a>
 8007b48:	2b10      	cmp	r3, #16
 8007b4a:	d008      	beq.n	8007b5e <UART_SetConfig+0x1aa>
 8007b4c:	e00f      	b.n	8007b6e <UART_SetConfig+0x1ba>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b54:	e06d      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b56:	2302      	movs	r3, #2
 8007b58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5c:	e069      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b5e:	2304      	movs	r3, #4
 8007b60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b64:	e065      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b66:	2308      	movs	r3, #8
 8007b68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b6c:	e061      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b6e:	2310      	movs	r3, #16
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b74:	e05d      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8007ca8 <UART_SetConfig+0x2f4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d125      	bne.n	8007bcc <UART_SetConfig+0x218>
 8007b80:	4b46      	ldr	r3, [pc, #280]	@ (8007c9c <UART_SetConfig+0x2e8>)
 8007b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b8c:	d016      	beq.n	8007bbc <UART_SetConfig+0x208>
 8007b8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b90:	d818      	bhi.n	8007bc4 <UART_SetConfig+0x210>
 8007b92:	2b80      	cmp	r3, #128	@ 0x80
 8007b94:	d00a      	beq.n	8007bac <UART_SetConfig+0x1f8>
 8007b96:	2b80      	cmp	r3, #128	@ 0x80
 8007b98:	d814      	bhi.n	8007bc4 <UART_SetConfig+0x210>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <UART_SetConfig+0x1f0>
 8007b9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ba0:	d008      	beq.n	8007bb4 <UART_SetConfig+0x200>
 8007ba2:	e00f      	b.n	8007bc4 <UART_SetConfig+0x210>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007baa:	e042      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007bac:	2302      	movs	r3, #2
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb2:	e03e      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007bb4:	2304      	movs	r3, #4
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bba:	e03a      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc2:	e036      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bca:	e032      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a30      	ldr	r2, [pc, #192]	@ (8007c94 <UART_SetConfig+0x2e0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d12a      	bne.n	8007c2c <UART_SetConfig+0x278>
 8007bd6:	4b31      	ldr	r3, [pc, #196]	@ (8007c9c <UART_SetConfig+0x2e8>)
 8007bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007be0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007be4:	d01a      	beq.n	8007c1c <UART_SetConfig+0x268>
 8007be6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bea:	d81b      	bhi.n	8007c24 <UART_SetConfig+0x270>
 8007bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bf0:	d00c      	beq.n	8007c0c <UART_SetConfig+0x258>
 8007bf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bf6:	d815      	bhi.n	8007c24 <UART_SetConfig+0x270>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <UART_SetConfig+0x250>
 8007bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c00:	d008      	beq.n	8007c14 <UART_SetConfig+0x260>
 8007c02:	e00f      	b.n	8007c24 <UART_SetConfig+0x270>
 8007c04:	2300      	movs	r3, #0
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0a:	e012      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c12:	e00e      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007c14:	2304      	movs	r3, #4
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1a:	e00a      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c22:	e006      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007c24:	2310      	movs	r3, #16
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c2a:	e002      	b.n	8007c32 <UART_SetConfig+0x27e>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a17      	ldr	r2, [pc, #92]	@ (8007c94 <UART_SetConfig+0x2e0>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	f040 80a8 	bne.w	8007d8e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d834      	bhi.n	8007cb0 <UART_SetConfig+0x2fc>
 8007c46:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <UART_SetConfig+0x298>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007c71 	.word	0x08007c71
 8007c50:	08007cb1 	.word	0x08007cb1
 8007c54:	08007c79 	.word	0x08007c79
 8007c58:	08007cb1 	.word	0x08007cb1
 8007c5c:	08007c7f 	.word	0x08007c7f
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007cb1 	.word	0x08007cb1
 8007c68:	08007cb1 	.word	0x08007cb1
 8007c6c:	08007c87 	.word	0x08007c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c70:	f7fe fbd6 	bl	8006420 <HAL_RCC_GetPCLK1Freq>
 8007c74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c76:	e021      	b.n	8007cbc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c78:	4b0c      	ldr	r3, [pc, #48]	@ (8007cac <UART_SetConfig+0x2f8>)
 8007c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c7c:	e01e      	b.n	8007cbc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c7e:	f7fe fb61 	bl	8006344 <HAL_RCC_GetSysClockFreq>
 8007c82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c84:	e01a      	b.n	8007cbc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c8c:	e016      	b.n	8007cbc <UART_SetConfig+0x308>
 8007c8e:	bf00      	nop
 8007c90:	cfff69f3 	.word	0xcfff69f3
 8007c94:	40008000 	.word	0x40008000
 8007c98:	40013800 	.word	0x40013800
 8007c9c:	40021000 	.word	0x40021000
 8007ca0:	40004400 	.word	0x40004400
 8007ca4:	40004800 	.word	0x40004800
 8007ca8:	40004c00 	.word	0x40004c00
 8007cac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007cba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 812a 	beq.w	8007f18 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc8:	4a9e      	ldr	r2, [pc, #632]	@ (8007f44 <UART_SetConfig+0x590>)
 8007cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	4413      	add	r3, r2
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d305      	bcc.n	8007cf4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d903      	bls.n	8007cfc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007cfa:	e10d      	b.n	8007f18 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	2200      	movs	r2, #0
 8007d00:	60bb      	str	r3, [r7, #8]
 8007d02:	60fa      	str	r2, [r7, #12]
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d08:	4a8e      	ldr	r2, [pc, #568]	@ (8007f44 <UART_SetConfig+0x590>)
 8007d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	2200      	movs	r2, #0
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	607a      	str	r2, [r7, #4]
 8007d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d1e:	f7f8 facf 	bl	80002c0 <__aeabi_uldivmod>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4610      	mov	r0, r2
 8007d28:	4619      	mov	r1, r3
 8007d2a:	f04f 0200 	mov.w	r2, #0
 8007d2e:	f04f 0300 	mov.w	r3, #0
 8007d32:	020b      	lsls	r3, r1, #8
 8007d34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d38:	0202      	lsls	r2, r0, #8
 8007d3a:	6979      	ldr	r1, [r7, #20]
 8007d3c:	6849      	ldr	r1, [r1, #4]
 8007d3e:	0849      	lsrs	r1, r1, #1
 8007d40:	2000      	movs	r0, #0
 8007d42:	460c      	mov	r4, r1
 8007d44:	4605      	mov	r5, r0
 8007d46:	eb12 0804 	adds.w	r8, r2, r4
 8007d4a:	eb43 0905 	adc.w	r9, r3, r5
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	469a      	mov	sl, r3
 8007d56:	4693      	mov	fp, r2
 8007d58:	4652      	mov	r2, sl
 8007d5a:	465b      	mov	r3, fp
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	4649      	mov	r1, r9
 8007d60:	f7f8 faae 	bl	80002c0 <__aeabi_uldivmod>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4613      	mov	r3, r2
 8007d6a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d72:	d308      	bcc.n	8007d86 <UART_SetConfig+0x3d2>
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d7a:	d204      	bcs.n	8007d86 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6a3a      	ldr	r2, [r7, #32]
 8007d82:	60da      	str	r2, [r3, #12]
 8007d84:	e0c8      	b.n	8007f18 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d8c:	e0c4      	b.n	8007f18 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d96:	d167      	bne.n	8007e68 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007d98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d828      	bhi.n	8007df2 <UART_SetConfig+0x43e>
 8007da0:	a201      	add	r2, pc, #4	@ (adr r2, 8007da8 <UART_SetConfig+0x3f4>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007dcd 	.word	0x08007dcd
 8007dac:	08007dd5 	.word	0x08007dd5
 8007db0:	08007ddd 	.word	0x08007ddd
 8007db4:	08007df3 	.word	0x08007df3
 8007db8:	08007de3 	.word	0x08007de3
 8007dbc:	08007df3 	.word	0x08007df3
 8007dc0:	08007df3 	.word	0x08007df3
 8007dc4:	08007df3 	.word	0x08007df3
 8007dc8:	08007deb 	.word	0x08007deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dcc:	f7fe fb28 	bl	8006420 <HAL_RCC_GetPCLK1Freq>
 8007dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dd2:	e014      	b.n	8007dfe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd4:	f7fe fb3a 	bl	800644c <HAL_RCC_GetPCLK2Freq>
 8007dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dda:	e010      	b.n	8007dfe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8007f48 <UART_SetConfig+0x594>)
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007de0:	e00d      	b.n	8007dfe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007de2:	f7fe faaf 	bl	8006344 <HAL_RCC_GetSysClockFreq>
 8007de6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007de8:	e009      	b.n	8007dfe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007df0:	e005      	b.n	8007dfe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8089 	beq.w	8007f18 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0a:	4a4e      	ldr	r2, [pc, #312]	@ (8007f44 <UART_SetConfig+0x590>)
 8007e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e10:	461a      	mov	r2, r3
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e18:	005a      	lsls	r2, r3, #1
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	085b      	lsrs	r3, r3, #1
 8007e20:	441a      	add	r2, r3
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	2b0f      	cmp	r3, #15
 8007e30:	d916      	bls.n	8007e60 <UART_SetConfig+0x4ac>
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e38:	d212      	bcs.n	8007e60 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f023 030f 	bic.w	r3, r3, #15
 8007e42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	085b      	lsrs	r3, r3, #1
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	8bfb      	ldrh	r3, [r7, #30]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	8bfa      	ldrh	r2, [r7, #30]
 8007e5c:	60da      	str	r2, [r3, #12]
 8007e5e:	e05b      	b.n	8007f18 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e66:	e057      	b.n	8007f18 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d828      	bhi.n	8007ec2 <UART_SetConfig+0x50e>
 8007e70:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <UART_SetConfig+0x4c4>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007e9d 	.word	0x08007e9d
 8007e7c:	08007ea5 	.word	0x08007ea5
 8007e80:	08007ead 	.word	0x08007ead
 8007e84:	08007ec3 	.word	0x08007ec3
 8007e88:	08007eb3 	.word	0x08007eb3
 8007e8c:	08007ec3 	.word	0x08007ec3
 8007e90:	08007ec3 	.word	0x08007ec3
 8007e94:	08007ec3 	.word	0x08007ec3
 8007e98:	08007ebb 	.word	0x08007ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7fe fac0 	bl	8006420 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ea2:	e014      	b.n	8007ece <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea4:	f7fe fad2 	bl	800644c <HAL_RCC_GetPCLK2Freq>
 8007ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eaa:	e010      	b.n	8007ece <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eac:	4b26      	ldr	r3, [pc, #152]	@ (8007f48 <UART_SetConfig+0x594>)
 8007eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007eb0:	e00d      	b.n	8007ece <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb2:	f7fe fa47 	bl	8006344 <HAL_RCC_GetSysClockFreq>
 8007eb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eb8:	e009      	b.n	8007ece <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ec0:	e005      	b.n	8007ece <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d021      	beq.n	8007f18 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8007f44 <UART_SetConfig+0x590>)
 8007eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	085b      	lsrs	r3, r3, #1
 8007eec:	441a      	add	r2, r3
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	2b0f      	cmp	r3, #15
 8007efc:	d909      	bls.n	8007f12 <UART_SetConfig+0x55e>
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f04:	d205      	bcs.n	8007f12 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60da      	str	r2, [r3, #12]
 8007f10:	e002      	b.n	8007f18 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2200      	movs	r2, #0
 8007f32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3730      	adds	r7, #48	@ 0x30
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f42:	bf00      	nop
 8007f44:	0800a824 	.word	0x0800a824
 8007f48:	00f42400 	.word	0x00f42400

08007f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d01a      	beq.n	8008062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800804a:	d10a      	bne.n	8008062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	605a      	str	r2, [r3, #4]
  }
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b098      	sub	sp, #96	@ 0x60
 8008094:	af02      	add	r7, sp, #8
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080a0:	f7fc fe6c 	bl	8004d7c <HAL_GetTick>
 80080a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d12f      	bne.n	8008114 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080bc:	2200      	movs	r2, #0
 80080be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f88e 	bl	80081e4 <UART_WaitOnFlagUntilTimeout>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d022      	beq.n	8008114 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d6:	e853 3f00 	ldrex	r3, [r3]
 80080da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e6      	bne.n	80080ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e063      	b.n	80081dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b04      	cmp	r3, #4
 8008120:	d149      	bne.n	80081b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008122:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800812a:	2200      	movs	r2, #0
 800812c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f857 	bl	80081e4 <UART_WaitOnFlagUntilTimeout>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d03c      	beq.n	80081b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	623b      	str	r3, [r7, #32]
   return(result);
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800815a:	633b      	str	r3, [r7, #48]	@ 0x30
 800815c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e6      	bne.n	800813c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3308      	adds	r3, #8
 8008174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	60fb      	str	r3, [r7, #12]
   return(result);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3308      	adds	r3, #8
 800818c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800818e:	61fa      	str	r2, [r7, #28]
 8008190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	69b9      	ldr	r1, [r7, #24]
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	617b      	str	r3, [r7, #20]
   return(result);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e5      	bne.n	800816e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e012      	b.n	80081dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3758      	adds	r7, #88	@ 0x58
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	4613      	mov	r3, r2
 80081f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f4:	e04f      	b.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081fc:	d04b      	beq.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fe:	f7fc fdbd 	bl	8004d7c <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	429a      	cmp	r2, r3
 800820c:	d302      	bcc.n	8008214 <UART_WaitOnFlagUntilTimeout+0x30>
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e04e      	b.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0304 	and.w	r3, r3, #4
 8008222:	2b00      	cmp	r3, #0
 8008224:	d037      	beq.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b80      	cmp	r3, #128	@ 0x80
 800822a:	d034      	beq.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b40      	cmp	r3, #64	@ 0x40
 8008230:	d031      	beq.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	f003 0308 	and.w	r3, r3, #8
 800823c:	2b08      	cmp	r3, #8
 800823e:	d110      	bne.n	8008262 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2208      	movs	r2, #8
 8008246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f838 	bl	80082be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2208      	movs	r2, #8
 8008252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e029      	b.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800826c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008270:	d111      	bne.n	8008296 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800827a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 f81e 	bl	80082be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e00f      	b.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4013      	ands	r3, r2
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	bf0c      	ite	eq
 80082a6:	2301      	moveq	r3, #1
 80082a8:	2300      	movne	r3, #0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d0a0      	beq.n	80081f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082be:	b480      	push	{r7}
 80082c0:	b095      	sub	sp, #84	@ 0x54
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082ec:	e841 2300 	strex	r3, r2, [r1]
 80082f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e6      	bne.n	80082c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	61fb      	str	r3, [r7, #28]
   return(result);
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3308      	adds	r3, #8
 800831a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800831c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800831e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800832a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e3      	bne.n	80082f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008334:	2b01      	cmp	r3, #1
 8008336:	d118      	bne.n	800836a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	60bb      	str	r3, [r7, #8]
   return(result);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f023 0310 	bic.w	r3, r3, #16
 800834c:	647b      	str	r3, [r7, #68]	@ 0x44
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008356:	61bb      	str	r3, [r7, #24]
 8008358:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6979      	ldr	r1, [r7, #20]
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	613b      	str	r3, [r7, #16]
   return(result);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e6      	bne.n	8008338 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800837e:	bf00      	nop
 8008380:	3754      	adds	r7, #84	@ 0x54
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008398:	2b01      	cmp	r3, #1
 800839a:	d101      	bne.n	80083a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800839c:	2302      	movs	r3, #2
 800839e:	e027      	b.n	80083f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2224      	movs	r2, #36	@ 0x24
 80083ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0201 	bic.w	r2, r2, #1
 80083c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800840c:	2b01      	cmp	r3, #1
 800840e:	d101      	bne.n	8008414 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008410:	2302      	movs	r3, #2
 8008412:	e02d      	b.n	8008470 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2224      	movs	r2, #36	@ 0x24
 8008420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0201 	bic.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f84f 	bl	80084f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008488:	2b01      	cmp	r3, #1
 800848a:	d101      	bne.n	8008490 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800848c:	2302      	movs	r3, #2
 800848e:	e02d      	b.n	80084ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2224      	movs	r2, #36	@ 0x24
 800849c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0201 	bic.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f811 	bl	80084f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008500:	2b00      	cmp	r3, #0
 8008502:	d108      	bne.n	8008516 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008514:	e031      	b.n	800857a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008516:	2308      	movs	r3, #8
 8008518:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800851a:	2308      	movs	r3, #8
 800851c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	0e5b      	lsrs	r3, r3, #25
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	0f5b      	lsrs	r3, r3, #29
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	7b3a      	ldrb	r2, [r7, #12]
 8008542:	4911      	ldr	r1, [pc, #68]	@ (8008588 <UARTEx_SetNbDataToProcess+0x94>)
 8008544:	5c8a      	ldrb	r2, [r1, r2]
 8008546:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800854a:	7b3a      	ldrb	r2, [r7, #12]
 800854c:	490f      	ldr	r1, [pc, #60]	@ (800858c <UARTEx_SetNbDataToProcess+0x98>)
 800854e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008550:	fb93 f3f2 	sdiv	r3, r3, r2
 8008554:	b29a      	uxth	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	7b7a      	ldrb	r2, [r7, #13]
 8008560:	4909      	ldr	r1, [pc, #36]	@ (8008588 <UARTEx_SetNbDataToProcess+0x94>)
 8008562:	5c8a      	ldrb	r2, [r1, r2]
 8008564:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008568:	7b7a      	ldrb	r2, [r7, #13]
 800856a:	4908      	ldr	r1, [pc, #32]	@ (800858c <UARTEx_SetNbDataToProcess+0x98>)
 800856c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800856e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008572:	b29a      	uxth	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	0800a83c 	.word	0x0800a83c
 800858c:	0800a844 	.word	0x0800a844

08008590 <MX_MEMS_Init>:
static void MX_LSM6DSO_6DOrientation_Init(void);
static void MX_LSM6DSO_6DOrientation_Process(void);
static void Send_Orientation(void);

void MX_MEMS_Init(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_LSM6DSO_6DOrientation_Init();
 8008594:	f000 f808 	bl	80085a8 <MX_LSM6DSO_6DOrientation_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8008598:	bf00      	nop
 800859a:	bd80      	pop	{r7, pc}

0800859c <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_LSM6DSO_6DOrientation_Process();
 80085a0:	f000 f838 	bl	8008614 <MX_LSM6DSO_6DOrientation_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 80085a4:	bf00      	nop
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <MX_LSM6DSO_6DOrientation_Init>:
/**
  * @brief  Initialize the LSM6DSO 6D Orientation application
  * @retval None
  */
void MX_LSM6DSO_6DOrientation_Init(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 80085ac:	2000      	movs	r0, #0
 80085ae:	f7fc f9a1 	bl	80048f4 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80085b2:	2101      	movs	r1, #1
 80085b4:	2000      	movs	r0, #0
 80085b6:	f7fc f9ef 	bl	8004998 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 80085ba:	2000      	movs	r0, #0
 80085bc:	f7fc fa40 	bl	8004a40 <BSP_PB_GetState>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	bf0c      	ite	eq
 80085c6:	2301      	moveq	r3, #1
 80085c8:	2300      	movne	r3, #0
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	4b08      	ldr	r3, [pc, #32]	@ (80085f0 <MX_LSM6DSO_6DOrientation_Init+0x48>)
 80085d0:	601a      	str	r2, [r3, #0]

  /* Set EXTI settings for Interrupt A */
  set_mems_int_pin_a_exti();
 80085d2:	f000 f9ad 	bl	8008930 <set_mems_int_pin_a_exti>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80085d6:	2000      	movs	r0, #0
 80085d8:	f7fc fa8c 	bl	8004af4 <BSP_COM_Init>

  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 80085dc:	2103      	movs	r1, #3
 80085de:	2000      	movs	r0, #0
 80085e0:	f000 f9cc 	bl	800897c <CUSTOM_MOTION_SENSOR_Init>

  (void)CUSTOM_MOTION_SENSOR_Enable_6D_Orientation(CUSTOM_LSM6DSO_0, CUSTOM_MOTION_SENSOR_INT1_PIN);
 80085e4:	2100      	movs	r1, #0
 80085e6:	2000      	movs	r0, #0
 80085e8:	f000 fbd0 	bl	8008d8c <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation>
}
 80085ec:	bf00      	nop
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20000380 	.word	0x20000380

080085f4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 80085fe:	4b04      	ldr	r3, [pc, #16]	@ (8008610 <BSP_PB_Callback+0x1c>)
 8008600:	2201      	movs	r2, #1
 8008602:	701a      	strb	r2, [r3, #0]
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	2000027d 	.word	0x2000027d

08008614 <MX_LSM6DSO_6DOrientation_Process>:
/**
  * @brief  Process of the LSM6DSO 6D Orientation application
  * @retval None
  */
void MX_LSM6DSO_6DOrientation_Process(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
  CUSTOM_MOTION_SENSOR_Event_Status_t status;

  if (PushButtonDetected != 0U)
 800861a:	4b20      	ldr	r3, [pc, #128]	@ (800869c <MX_LSM6DSO_6DOrientation_Process+0x88>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d014      	beq.n	800864e <MX_LSM6DSO_6DOrientation_Process+0x3a>
  {
    /* Debouncing */
    HAL_Delay(50);
 8008624:	2032      	movs	r0, #50	@ 0x32
 8008626:	f7fc fbb5 	bl	8004d94 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800862a:	bf00      	nop
 800862c:	2000      	movs	r0, #0
 800862e:	f7fc fa07 	bl	8004a40 <BSP_PB_GetState>
 8008632:	4602      	mov	r2, r0
 8008634:	4b1a      	ldr	r3, [pc, #104]	@ (80086a0 <MX_LSM6DSO_6DOrientation_Process+0x8c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d0f7      	beq.n	800862c <MX_LSM6DSO_6DOrientation_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 800863c:	2032      	movs	r0, #50	@ 0x32
 800863e:	f7fc fba9 	bl	8004d94 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8008642:	4b16      	ldr	r3, [pc, #88]	@ (800869c <MX_LSM6DSO_6DOrientation_Process+0x88>)
 8008644:	2200      	movs	r2, #0
 8008646:	701a      	strb	r2, [r3, #0]

    /* Request to send actual 6D orientation */
    SendOrientationRequest  = 1;
 8008648:	4b16      	ldr	r3, [pc, #88]	@ (80086a4 <MX_LSM6DSO_6DOrientation_Process+0x90>)
 800864a:	2201      	movs	r2, #1
 800864c:	701a      	strb	r2, [r3, #0]
  }

  if (SendOrientationRequest != 0U)
 800864e:	4b15      	ldr	r3, [pc, #84]	@ (80086a4 <MX_LSM6DSO_6DOrientation_Process+0x90>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <MX_LSM6DSO_6DOrientation_Process+0x4c>
  {
    SendOrientationRequest = 0;
 8008656:	4b13      	ldr	r3, [pc, #76]	@ (80086a4 <MX_LSM6DSO_6DOrientation_Process+0x90>)
 8008658:	2200      	movs	r2, #0
 800865a:	701a      	strb	r2, [r3, #0]

    Send_Orientation();
 800865c:	f000 f826 	bl	80086ac <Send_Orientation>
  }

  if (MemsEventDetected != 0U)
 8008660:	4b11      	ldr	r3, [pc, #68]	@ (80086a8 <MX_LSM6DSO_6DOrientation_Process+0x94>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d014      	beq.n	8008694 <MX_LSM6DSO_6DOrientation_Process+0x80>
  {
    MemsEventDetected = 0;
 800866a:	4b0f      	ldr	r3, [pc, #60]	@ (80086a8 <MX_LSM6DSO_6DOrientation_Process+0x94>)
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]

    if (CUSTOM_MOTION_SENSOR_Get_Event_Status(CUSTOM_LSM6DSO_0, &status) != BSP_ERROR_NONE)
 8008670:	1d3b      	adds	r3, r7, #4
 8008672:	4619      	mov	r1, r3
 8008674:	2000      	movs	r0, #0
 8008676:	f000 fb63 	bl	8008d40 <CUSTOM_MOTION_SENSOR_Get_Event_Status>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <MX_LSM6DSO_6DOrientation_Process+0x70>
    {
      Error_Handler();
 8008680:	f7f8 f8b8 	bl	80007f4 <Error_Handler>
    }

    if (status.D6DOrientationStatus != 0U)
 8008684:	793b      	ldrb	r3, [r7, #4]
 8008686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <MX_LSM6DSO_6DOrientation_Process+0x80>
    {
      Send_Orientation();
 8008690:	f000 f80c 	bl	80086ac <Send_Orientation>
    }
  }
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	2000027d 	.word	0x2000027d
 80086a0:	20000380 	.word	0x20000380
 80086a4:	2000027e 	.word	0x2000027e
 80086a8:	2000027c 	.word	0x2000027c

080086ac <Send_Orientation>:
/**
  * @brief  Send actual 6D orientation to UART
  * @retval None
  */
static void Send_Orientation(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
  uint8_t xl = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	71fb      	strb	r3, [r7, #7]
  uint8_t xh = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	71bb      	strb	r3, [r7, #6]
  uint8_t yl = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	717b      	strb	r3, [r7, #5]
  uint8_t yh = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	713b      	strb	r3, [r7, #4]
  uint8_t zl = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	70fb      	strb	r3, [r7, #3]
  uint8_t zh = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	70bb      	strb	r3, [r7, #2]

  if (CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XL(CUSTOM_LSM6DSO_0, &xl) != BSP_ERROR_NONE)
 80086ca:	1dfb      	adds	r3, r7, #7
 80086cc:	4619      	mov	r1, r3
 80086ce:	2000      	movs	r0, #0
 80086d0:	f000 fb84 	bl	8008ddc <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XL>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <Send_Orientation+0x44>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation XL axis from LSM6DSO - accelerometer.\r\n");
 80086da:	4a86      	ldr	r2, [pc, #536]	@ (80088f4 <Send_Orientation+0x248>)
 80086dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80086e0:	4885      	ldr	r0, [pc, #532]	@ (80088f8 <Send_Orientation+0x24c>)
 80086e2:	f000 fd91 	bl	8009208 <sniprintf>
    printf("%s", dataOut);
 80086e6:	4984      	ldr	r1, [pc, #528]	@ (80088f8 <Send_Orientation+0x24c>)
 80086e8:	4884      	ldr	r0, [pc, #528]	@ (80088fc <Send_Orientation+0x250>)
 80086ea:	f000 fd1d 	bl	8009128 <iprintf>
    return;
 80086ee:	e0fe      	b.n	80088ee <Send_Orientation+0x242>
  }
  if (CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XH(CUSTOM_LSM6DSO_0, &xh) != BSP_ERROR_NONE)
 80086f0:	1dbb      	adds	r3, r7, #6
 80086f2:	4619      	mov	r1, r3
 80086f4:	2000      	movs	r0, #0
 80086f6:	f000 fb97 	bl	8008e28 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XH>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00a      	beq.n	8008716 <Send_Orientation+0x6a>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation XH axis from LSM6DSO - accelerometer.\r\n");
 8008700:	4a7f      	ldr	r2, [pc, #508]	@ (8008900 <Send_Orientation+0x254>)
 8008702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008706:	487c      	ldr	r0, [pc, #496]	@ (80088f8 <Send_Orientation+0x24c>)
 8008708:	f000 fd7e 	bl	8009208 <sniprintf>
    printf("%s", dataOut);
 800870c:	497a      	ldr	r1, [pc, #488]	@ (80088f8 <Send_Orientation+0x24c>)
 800870e:	487b      	ldr	r0, [pc, #492]	@ (80088fc <Send_Orientation+0x250>)
 8008710:	f000 fd0a 	bl	8009128 <iprintf>
    return;
 8008714:	e0eb      	b.n	80088ee <Send_Orientation+0x242>
  }
  if (CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YL(CUSTOM_LSM6DSO_0, &yl) != BSP_ERROR_NONE)
 8008716:	1d7b      	adds	r3, r7, #5
 8008718:	4619      	mov	r1, r3
 800871a:	2000      	movs	r0, #0
 800871c:	f000 fbaa 	bl	8008e74 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YL>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <Send_Orientation+0x90>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation YL axis from LSM6DSO - accelerometer.\r\n");
 8008726:	4a77      	ldr	r2, [pc, #476]	@ (8008904 <Send_Orientation+0x258>)
 8008728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800872c:	4872      	ldr	r0, [pc, #456]	@ (80088f8 <Send_Orientation+0x24c>)
 800872e:	f000 fd6b 	bl	8009208 <sniprintf>
    printf("%s", dataOut);
 8008732:	4971      	ldr	r1, [pc, #452]	@ (80088f8 <Send_Orientation+0x24c>)
 8008734:	4871      	ldr	r0, [pc, #452]	@ (80088fc <Send_Orientation+0x250>)
 8008736:	f000 fcf7 	bl	8009128 <iprintf>
    return;
 800873a:	e0d8      	b.n	80088ee <Send_Orientation+0x242>
  }
  if (CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YH(CUSTOM_LSM6DSO_0, &yh) != BSP_ERROR_NONE)
 800873c:	1d3b      	adds	r3, r7, #4
 800873e:	4619      	mov	r1, r3
 8008740:	2000      	movs	r0, #0
 8008742:	f000 fbbd 	bl	8008ec0 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YH>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <Send_Orientation+0xb6>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation YH axis from LSM6DSO - accelerometer.\r\n");
 800874c:	4a6e      	ldr	r2, [pc, #440]	@ (8008908 <Send_Orientation+0x25c>)
 800874e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008752:	4869      	ldr	r0, [pc, #420]	@ (80088f8 <Send_Orientation+0x24c>)
 8008754:	f000 fd58 	bl	8009208 <sniprintf>
    printf("%s", dataOut);
 8008758:	4967      	ldr	r1, [pc, #412]	@ (80088f8 <Send_Orientation+0x24c>)
 800875a:	4868      	ldr	r0, [pc, #416]	@ (80088fc <Send_Orientation+0x250>)
 800875c:	f000 fce4 	bl	8009128 <iprintf>
    return;
 8008760:	e0c5      	b.n	80088ee <Send_Orientation+0x242>
  }
  if (CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZL(CUSTOM_LSM6DSO_0, &zl) != BSP_ERROR_NONE)
 8008762:	1cfb      	adds	r3, r7, #3
 8008764:	4619      	mov	r1, r3
 8008766:	2000      	movs	r0, #0
 8008768:	f000 fbd0 	bl	8008f0c <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZL>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <Send_Orientation+0xdc>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation ZL axis from LSM6DSO - accelerometer.\r\n");
 8008772:	4a66      	ldr	r2, [pc, #408]	@ (800890c <Send_Orientation+0x260>)
 8008774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008778:	485f      	ldr	r0, [pc, #380]	@ (80088f8 <Send_Orientation+0x24c>)
 800877a:	f000 fd45 	bl	8009208 <sniprintf>
    printf("%s", dataOut);
 800877e:	495e      	ldr	r1, [pc, #376]	@ (80088f8 <Send_Orientation+0x24c>)
 8008780:	485e      	ldr	r0, [pc, #376]	@ (80088fc <Send_Orientation+0x250>)
 8008782:	f000 fcd1 	bl	8009128 <iprintf>
    return;
 8008786:	e0b2      	b.n	80088ee <Send_Orientation+0x242>
  }
  if (CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZH(CUSTOM_LSM6DSO_0, &zh) != BSP_ERROR_NONE)
 8008788:	1cbb      	adds	r3, r7, #2
 800878a:	4619      	mov	r1, r3
 800878c:	2000      	movs	r0, #0
 800878e:	f000 fbe3 	bl	8008f58 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZH>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00a      	beq.n	80087ae <Send_Orientation+0x102>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation ZH axis from LSM6DSO - accelerometer.\r\n");
 8008798:	4a5d      	ldr	r2, [pc, #372]	@ (8008910 <Send_Orientation+0x264>)
 800879a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800879e:	4856      	ldr	r0, [pc, #344]	@ (80088f8 <Send_Orientation+0x24c>)
 80087a0:	f000 fd32 	bl	8009208 <sniprintf>
    printf("%s", dataOut);
 80087a4:	4954      	ldr	r1, [pc, #336]	@ (80088f8 <Send_Orientation+0x24c>)
 80087a6:	4855      	ldr	r0, [pc, #340]	@ (80088fc <Send_Orientation+0x250>)
 80087a8:	f000 fcbe 	bl	8009128 <iprintf>
    return;
 80087ac:	e09f      	b.n	80088ee <Send_Orientation+0x242>
  }

  if (xl == 0U && yl == 0U && zl == 0U && xh == 0U && yh == 1U && zh == 0U)
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d115      	bne.n	80087e0 <Send_Orientation+0x134>
 80087b4:	797b      	ldrb	r3, [r7, #5]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d112      	bne.n	80087e0 <Send_Orientation+0x134>
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10f      	bne.n	80087e0 <Send_Orientation+0x134>
 80087c0:	79bb      	ldrb	r3, [r7, #6]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10c      	bne.n	80087e0 <Send_Orientation+0x134>
 80087c6:	793b      	ldrb	r3, [r7, #4]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d109      	bne.n	80087e0 <Send_Orientation+0x134>
 80087cc:	78bb      	ldrb	r3, [r7, #2]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <Send_Orientation+0x134>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 80087d2:	4a50      	ldr	r2, [pc, #320]	@ (8008914 <Send_Orientation+0x268>)
 80087d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80087d8:	4847      	ldr	r0, [pc, #284]	@ (80088f8 <Send_Orientation+0x24c>)
 80087da:	f000 fd15 	bl	8009208 <sniprintf>
 80087de:	e082      	b.n	80088e6 <Send_Orientation+0x23a>
                   "\r\n |                | " \
                   "\r\n |                | " \
                   "\r\n |________________| \r\n");
  }

  else if (xl == 1U && yl == 0U && zl == 0U && xh == 0U && yh == 0U && zh == 0U)
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d115      	bne.n	8008812 <Send_Orientation+0x166>
 80087e6:	797b      	ldrb	r3, [r7, #5]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d112      	bne.n	8008812 <Send_Orientation+0x166>
 80087ec:	78fb      	ldrb	r3, [r7, #3]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10f      	bne.n	8008812 <Send_Orientation+0x166>
 80087f2:	79bb      	ldrb	r3, [r7, #6]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10c      	bne.n	8008812 <Send_Orientation+0x166>
 80087f8:	793b      	ldrb	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d109      	bne.n	8008812 <Send_Orientation+0x166>
 80087fe:	78bb      	ldrb	r3, [r7, #2]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <Send_Orientation+0x166>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 8008804:	4a44      	ldr	r2, [pc, #272]	@ (8008918 <Send_Orientation+0x26c>)
 8008806:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800880a:	483b      	ldr	r0, [pc, #236]	@ (80088f8 <Send_Orientation+0x24c>)
 800880c:	f000 fcfc 	bl	8009208 <sniprintf>
 8008810:	e069      	b.n	80088e6 <Send_Orientation+0x23a>
                   "\r\n |                | " \
                   "\r\n |                | " \
                   "\r\n |________________| \r\n");
  }

  else if (xl == 0U && yl == 0U && zl == 0U && xh == 1U && yh == 0U && zh == 0U)
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d115      	bne.n	8008844 <Send_Orientation+0x198>
 8008818:	797b      	ldrb	r3, [r7, #5]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d112      	bne.n	8008844 <Send_Orientation+0x198>
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10f      	bne.n	8008844 <Send_Orientation+0x198>
 8008824:	79bb      	ldrb	r3, [r7, #6]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d10c      	bne.n	8008844 <Send_Orientation+0x198>
 800882a:	793b      	ldrb	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <Send_Orientation+0x198>
 8008830:	78bb      	ldrb	r3, [r7, #2]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <Send_Orientation+0x198>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 8008836:	4a39      	ldr	r2, [pc, #228]	@ (800891c <Send_Orientation+0x270>)
 8008838:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800883c:	482e      	ldr	r0, [pc, #184]	@ (80088f8 <Send_Orientation+0x24c>)
 800883e:	f000 fce3 	bl	8009208 <sniprintf>
 8008842:	e050      	b.n	80088e6 <Send_Orientation+0x23a>
                   "\r\n |                | " \
                   "\r\n |  *             | " \
                   "\r\n |________________| \r\n");
  }

  else if (xl == 0U && yl == 1U && zl == 0U && xh == 0U && yh == 0U && zh == 0U)
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d115      	bne.n	8008876 <Send_Orientation+0x1ca>
 800884a:	797b      	ldrb	r3, [r7, #5]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d112      	bne.n	8008876 <Send_Orientation+0x1ca>
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10f      	bne.n	8008876 <Send_Orientation+0x1ca>
 8008856:	79bb      	ldrb	r3, [r7, #6]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10c      	bne.n	8008876 <Send_Orientation+0x1ca>
 800885c:	793b      	ldrb	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d109      	bne.n	8008876 <Send_Orientation+0x1ca>
 8008862:	78bb      	ldrb	r3, [r7, #2]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d106      	bne.n	8008876 <Send_Orientation+0x1ca>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 8008868:	4a2d      	ldr	r2, [pc, #180]	@ (8008920 <Send_Orientation+0x274>)
 800886a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800886e:	4822      	ldr	r0, [pc, #136]	@ (80088f8 <Send_Orientation+0x24c>)
 8008870:	f000 fcca 	bl	8009208 <sniprintf>
 8008874:	e037      	b.n	80088e6 <Send_Orientation+0x23a>
                   "\r\n |                | " \
                   "\r\n |             *  | " \
                   "\r\n |________________| \r\n");
  }

  else if (xl == 0U && yl == 0U && zl == 0U && xh == 0U && yh == 0U && zh == 1U)
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d115      	bne.n	80088a8 <Send_Orientation+0x1fc>
 800887c:	797b      	ldrb	r3, [r7, #5]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d112      	bne.n	80088a8 <Send_Orientation+0x1fc>
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10f      	bne.n	80088a8 <Send_Orientation+0x1fc>
 8008888:	79bb      	ldrb	r3, [r7, #6]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10c      	bne.n	80088a8 <Send_Orientation+0x1fc>
 800888e:	793b      	ldrb	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d109      	bne.n	80088a8 <Send_Orientation+0x1fc>
 8008894:	78bb      	ldrb	r3, [r7, #2]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d106      	bne.n	80088a8 <Send_Orientation+0x1fc>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n  __*_____________  " \
 800889a:	4a22      	ldr	r2, [pc, #136]	@ (8008924 <Send_Orientation+0x278>)
 800889c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80088a0:	4815      	ldr	r0, [pc, #84]	@ (80088f8 <Send_Orientation+0x24c>)
 80088a2:	f000 fcb1 	bl	8009208 <sniprintf>
 80088a6:	e01e      	b.n	80088e6 <Send_Orientation+0x23a>
                   "\r\n |________________| \r\n");
  }

  else if (xl == 0U && yl == 0U && zl == 1U && xh == 0U && yh == 0U && zh == 0U)
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d115      	bne.n	80088da <Send_Orientation+0x22e>
 80088ae:	797b      	ldrb	r3, [r7, #5]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d112      	bne.n	80088da <Send_Orientation+0x22e>
 80088b4:	78fb      	ldrb	r3, [r7, #3]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d10f      	bne.n	80088da <Send_Orientation+0x22e>
 80088ba:	79bb      	ldrb	r3, [r7, #6]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10c      	bne.n	80088da <Send_Orientation+0x22e>
 80088c0:	793b      	ldrb	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <Send_Orientation+0x22e>
 80088c6:	78bb      	ldrb	r3, [r7, #2]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <Send_Orientation+0x22e>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 80088cc:	4a16      	ldr	r2, [pc, #88]	@ (8008928 <Send_Orientation+0x27c>)
 80088ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80088d2:	4809      	ldr	r0, [pc, #36]	@ (80088f8 <Send_Orientation+0x24c>)
 80088d4:	f000 fc98 	bl	8009208 <sniprintf>
 80088d8:	e005      	b.n	80088e6 <Send_Orientation+0x23a>
                   "\r\n    *               \r\n");
  }

  else
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "None of the 6D orientation axes is set in LSM6DSO - accelerometer.\r\n");
 80088da:	4a14      	ldr	r2, [pc, #80]	@ (800892c <Send_Orientation+0x280>)
 80088dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80088e0:	4805      	ldr	r0, [pc, #20]	@ (80088f8 <Send_Orientation+0x24c>)
 80088e2:	f000 fc91 	bl	8009208 <sniprintf>
  }

  printf("%s", dataOut);
 80088e6:	4904      	ldr	r1, [pc, #16]	@ (80088f8 <Send_Orientation+0x24c>)
 80088e8:	4804      	ldr	r0, [pc, #16]	@ (80088fc <Send_Orientation+0x250>)
 80088ea:	f000 fc1d 	bl	8009128 <iprintf>
}
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	0800a2b4 	.word	0x0800a2b4
 80088f8:	20000280 	.word	0x20000280
 80088fc:	0800a2fc 	.word	0x0800a2fc
 8008900:	0800a300 	.word	0x0800a300
 8008904:	0800a348 	.word	0x0800a348
 8008908:	0800a390 	.word	0x0800a390
 800890c:	0800a3d8 	.word	0x0800a3d8
 8008910:	0800a420 	.word	0x0800a420
 8008914:	0800a468 	.word	0x0800a468
 8008918:	0800a51c 	.word	0x0800a51c
 800891c:	0800a5d0 	.word	0x0800a5d0
 8008920:	0800a684 	.word	0x0800a684
 8008924:	0800a738 	.word	0x0800a738
 8008928:	0800a768 	.word	0x0800a768
 800892c:	0800a7b0 	.word	0x0800a7b0

08008930 <set_mems_int_pin_a_exti>:
extern volatile uint8_t MemsEventDetected;

static void mems_int_pin_a_hardware_event_isr(void);

void set_mems_int_pin_a_exti(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
  /* register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8008934:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8008938:	4808      	ldr	r0, [pc, #32]	@ (800895c <set_mems_int_pin_a_exti+0x2c>)
 800893a:	f7fc fb79 	bl	8005030 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, mems_int_pin_a_hardware_event_isr);
 800893e:	4a08      	ldr	r2, [pc, #32]	@ (8008960 <set_mems_int_pin_a_exti+0x30>)
 8008940:	2100      	movs	r1, #0
 8008942:	4806      	ldr	r0, [pc, #24]	@ (800895c <set_mems_int_pin_a_exti+0x2c>)
 8008944:	f7fc fb57 	bl	8004ff6 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008948:	2200      	movs	r2, #0
 800894a:	2100      	movs	r1, #0
 800894c:	2006      	movs	r0, #6
 800894e:	f7fc fb1e 	bl	8004f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008952:	2006      	movs	r0, #6
 8008954:	f7fc fb35 	bl	8004fc2 <HAL_NVIC_EnableIRQ>
}
 8008958:	bf00      	nop
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20000074 	.word	0x20000074
 8008960:	08008965 	.word	0x08008965

08008964 <mems_int_pin_a_hardware_event_isr>:

static void mems_int_pin_a_hardware_event_isr(void)
{
 8008964:	b480      	push	{r7}
 8008966:	af00      	add	r7, sp, #0
  MemsEventDetected = 1;
 8008968:	4b03      	ldr	r3, [pc, #12]	@ (8008978 <mems_int_pin_a_hardware_event_isr+0x14>)
 800896a:	2201      	movs	r2, #1
 800896c:	701a      	strb	r2, [r3, #0]
}
 800896e:	bf00      	nop
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	2000027c 	.word	0x2000027c

0800897c <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08e      	sub	sp, #56	@ 0x38
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008986:	2300      	movs	r3, #0
 8008988:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800898a:	2301      	movs	r3, #1
 800898c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	62bb      	str	r3, [r7, #40]	@ 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d131      	bne.n	80089fc <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8008998:	6838      	ldr	r0, [r7, #0]
 800899a:	f000 f877 	bl	8008a8c <LSM6DSO_0_Probe>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 80089a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089a8:	e064      	b.n	8008a74 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80089aa:	4a34      	ldr	r2, [pc, #208]	@ (8008a7c <CUSTOM_MOTION_SENSOR_Init+0x100>)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	4932      	ldr	r1, [pc, #200]	@ (8008a80 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80089bc:	f107 010c 	add.w	r1, r7, #12
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80089ca:	f06f 0306 	mvn.w	r3, #6
 80089ce:	e051      	b.n	8008a74 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 80089d0:	7b3b      	ldrb	r3, [r7, #12]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d103      	bne.n	80089de <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 80089d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d8:	f043 0302 	orr.w	r3, r3, #2
 80089dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 80089de:	7b7b      	ldrb	r3, [r7, #13]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d103      	bne.n	80089ec <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 80089e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d108      	bne.n	8008a04 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 80089f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f4:	f043 0304 	orr.w	r3, r3, #4
 80089f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 80089fa:	e003      	b.n	8008a04 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80089fc:	f06f 0301 	mvn.w	r3, #1
 8008a00:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8008a02:	e000      	b.n	8008a06 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 8008a04:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0e:	e031      	b.n	8008a74 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8008a10:	2300      	movs	r3, #0
 8008a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a14:	e02a      	b.n	8008a6c <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d11e      	bne.n	8008a60 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 8008a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	4013      	ands	r3, r2
 8008a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d118      	bne.n	8008a60 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008a2e:	4a15      	ldr	r2, [pc, #84]	@ (8008a84 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008a36:	4814      	ldr	r0, [pc, #80]	@ (8008a88 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	005b      	lsls	r3, r3, #1
 8008a3e:	4413      	add	r3, r2
 8008a40:	440b      	add	r3, r1
 8008a42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	490d      	ldr	r1, [pc, #52]	@ (8008a80 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008a50:	4610      	mov	r0, r2
 8008a52:	4798      	blx	r3
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008a5a:	f06f 0304 	mvn.w	r3, #4
 8008a5e:	e009      	b.n	8008a74 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8008a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8008a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a68:	3301      	adds	r3, #1
 8008a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d9d1      	bls.n	8008a16 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 8008a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3738      	adds	r7, #56	@ 0x38
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	20000394 	.word	0x20000394
 8008a80:	20000384 	.word	0x20000384
 8008a84:	2000007c 	.word	0x2000007c
 8008a88:	20000388 	.word	0x20000388

08008a8c <LSM6DSO_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b094      	sub	sp, #80	@ 0x50
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008a94:	2300      	movs	r3, #0
 8008a96:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8008a98:	2301      	movs	r3, #1
 8008a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = 0x0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = CUSTOM_LSM6DSO_0_Init;
 8008aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8008bd0 <LSM6DSO_0_Probe+0x144>)
 8008aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = CUSTOM_LSM6DSO_0_DeInit;
 8008aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8008bd4 <LSM6DSO_0_Probe+0x148>)
 8008aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = CUSTOM_LSM6DSO_0_ReadReg;
 8008aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8008bd8 <LSM6DSO_0_Probe+0x14c>)
 8008aac:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = CUSTOM_LSM6DSO_0_WriteReg;
 8008aae:	4b4b      	ldr	r3, [pc, #300]	@ (8008bdc <LSM6DSO_0_Probe+0x150>)
 8008ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 8008ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8008be0 <LSM6DSO_0_Probe+0x154>)
 8008ab4:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = HAL_Delay;
 8008ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8008be4 <LSM6DSO_0_Probe+0x158>)
 8008ab8:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8008aba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4849      	ldr	r0, [pc, #292]	@ (8008be8 <LSM6DSO_0_Probe+0x15c>)
 8008ac2:	f7f8 f96f 	bl	8000da4 <LSM6DSO_RegisterBusIO>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008acc:	f06f 0306 	mvn.w	r3, #6
 8008ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ad2:	e077      	b.n	8008bc4 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8008ad4:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4843      	ldr	r0, [pc, #268]	@ (8008be8 <LSM6DSO_0_Probe+0x15c>)
 8008adc:	f7f8 fa6c 	bl	8000fb8 <LSM6DSO_ReadID>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ae6:	f06f 0306 	mvn.w	r3, #6
 8008aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aec:	e06a      	b.n	8008bc4 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != (uint8_t)LSM6DSO_ID)
 8008aee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008af2:	2b6c      	cmp	r3, #108	@ 0x6c
 8008af4:	d003      	beq.n	8008afe <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008af6:	f06f 0306 	mvn.w	r3, #6
 8008afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008afc:	e062      	b.n	8008bc4 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8008afe:	f107 030c 	add.w	r3, r7, #12
 8008b02:	4619      	mov	r1, r3
 8008b04:	4838      	ldr	r0, [pc, #224]	@ (8008be8 <LSM6DSO_0_Probe+0x15c>)
 8008b06:	f7f8 fa6d 	bl	8000fe4 <LSM6DSO_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008b0a:	7b7b      	ldrb	r3, [r7, #13]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	7b3b      	ldrb	r3, [r7, #12]
 8008b10:	005b      	lsls	r3, r3, #1
 8008b12:	431a      	orrs	r2, r3
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	4a34      	ldr	r2, [pc, #208]	@ (8008bec <LSM6DSO_0_Probe+0x160>)
 8008b1c:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSO_0] = &lsm6dso_obj_0;
 8008b1e:	4b34      	ldr	r3, [pc, #208]	@ (8008bf0 <LSM6DSO_0_Probe+0x164>)
 8008b20:	4a31      	ldr	r2, [pc, #196]	@ (8008be8 <LSM6DSO_0_Probe+0x15c>)
 8008b22:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008b24:	4b33      	ldr	r3, [pc, #204]	@ (8008bf4 <LSM6DSO_0_Probe+0x168>)
 8008b26:	4a34      	ldr	r2, [pc, #208]	@ (8008bf8 <LSM6DSO_0_Probe+0x16c>)
 8008b28:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d11d      	bne.n	8008b6c <LSM6DSO_0_Probe+0xe0>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d018      	beq.n	8008b6c <LSM6DSO_0_Probe+0xe0>
 8008b3a:	7b7b      	ldrb	r3, [r7, #13]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d115      	bne.n	8008b6c <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008b40:	4b2e      	ldr	r3, [pc, #184]	@ (8008bfc <LSM6DSO_0_Probe+0x170>)
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	4a2e      	ldr	r2, [pc, #184]	@ (8008c00 <LSM6DSO_0_Probe+0x174>)
 8008b46:	492f      	ldr	r1, [pc, #188]	@ (8008c04 <LSM6DSO_0_Probe+0x178>)
 8008b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                     void *)&LSM6DSO_GYRO_Driver;

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 8008b4c:	4b29      	ldr	r3, [pc, #164]	@ (8008bf4 <LSM6DSO_0_Probe+0x168>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a27      	ldr	r2, [pc, #156]	@ (8008bf0 <LSM6DSO_0_Probe+0x164>)
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	4610      	mov	r0, r2
 8008b58:	4798      	blx	r3
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b60:	f06f 0304 	mvn.w	r3, #4
 8008b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b66:	e001      	b.n	8008b6c <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d11d      	bne.n	8008bae <LSM6DSO_0_Probe+0x122>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f003 0302 	and.w	r3, r3, #2
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d018      	beq.n	8008bae <LSM6DSO_0_Probe+0x122>
 8008b7c:	7b3b      	ldrb	r3, [r7, #12]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d115      	bne.n	8008bae <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008b82:	4b1e      	ldr	r3, [pc, #120]	@ (8008bfc <LSM6DSO_0_Probe+0x170>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	4a1e      	ldr	r2, [pc, #120]	@ (8008c00 <LSM6DSO_0_Probe+0x174>)
 8008b88:	491f      	ldr	r1, [pc, #124]	@ (8008c08 <LSM6DSO_0_Probe+0x17c>)
 8008b8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 8008b8e:	4b19      	ldr	r3, [pc, #100]	@ (8008bf4 <LSM6DSO_0_Probe+0x168>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a16      	ldr	r2, [pc, #88]	@ (8008bf0 <LSM6DSO_0_Probe+0x164>)
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4798      	blx	r3
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ba2:	f06f 0304 	mvn.w	r3, #4
 8008ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ba8:	e001      	b.n	8008bae <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008baa:	2300      	movs	r3, #0
 8008bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d107      	bne.n	8008bc4 <LSM6DSO_0_Probe+0x138>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f003 0304 	and.w	r3, r3, #4
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bbe:	f06f 0304 	mvn.w	r3, #4
 8008bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8008bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3750      	adds	r7, #80	@ 0x50
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	08008c0d 	.word	0x08008c0d
 8008bd4:	08008c31 	.word	0x08008c31
 8008bd8:	08008cc5 	.word	0x08008cc5
 8008bdc:	08008c55 	.word	0x08008c55
 8008be0:	08000aa5 	.word	0x08000aa5
 8008be4:	08004d95 	.word	0x08004d95
 8008be8:	2000039c 	.word	0x2000039c
 8008bec:	20000398 	.word	0x20000398
 8008bf0:	20000384 	.word	0x20000384
 8008bf4:	20000394 	.word	0x20000394
 8008bf8:	20000004 	.word	0x20000004
 8008bfc:	2000007c 	.word	0x2000007c
 8008c00:	20000388 	.word	0x20000388
 8008c04:	20000038 	.word	0x20000038
 8008c08:	20000014 	.word	0x20000014

08008c0c <CUSTOM_LSM6DSO_0_Init>:
/**
  * @brief  Initialize SPI bus for LSM6DSO
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_Init(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008c12:	f06f 0305 	mvn.w	r3, #5
 8008c16:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSO_0_SPI_Init() == BSP_ERROR_NONE)
 8008c18:	f7f7 feb4 	bl	8000984 <BSP_SPI1_Init>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <CUSTOM_LSM6DSO_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8008c22:	2300      	movs	r3, #0
 8008c24:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8008c26:	687b      	ldr	r3, [r7, #4]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <CUSTOM_LSM6DSO_0_DeInit>:
/**
  * @brief  DeInitialize SPI bus for LSM6DSO
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_DeInit(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008c36:	f06f 0305 	mvn.w	r3, #5
 8008c3a:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSO_0_SPI_DeInit() == BSP_ERROR_NONE)
 8008c3c:	f7f7 fed2 	bl	80009e4 <BSP_SPI1_DeInit>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <CUSTOM_LSM6DSO_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8008c46:	2300      	movs	r3, #0
 8008c48:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8008c4a:	687b      	ldr	r3, [r7, #4]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <CUSTOM_LSM6DSO_0_WriteReg>:
  * @param  pdata the pointer to the data to be written
  * @param  len the length of the data to be written
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60ba      	str	r2, [r7, #8]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	4603      	mov	r3, r0
 8008c60:	81fb      	strh	r3, [r7, #14]
 8008c62:	460b      	mov	r3, r1
 8008c64:	81bb      	strh	r3, [r7, #12]
 8008c66:	4613      	mov	r3, r2
 8008c68:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8008c6e:	89bb      	ldrh	r3, [r7, #12]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_RESET);
 8008c74:	2200      	movs	r2, #0
 8008c76:	2102      	movs	r1, #2
 8008c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008c7c:	f7fc fe48 	bl	8005910 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSO_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8008c80:	f107 0313 	add.w	r3, r7, #19
 8008c84:	2101      	movs	r1, #1
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f7 fed4 	bl	8000a34 <BSP_SPI1_Send>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <CUSTOM_LSM6DSO_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008c92:	f06f 0305 	mvn.w	r3, #5
 8008c96:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSO_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	68b8      	ldr	r0, [r7, #8]
 8008c9e:	f7f7 fec9 	bl	8000a34 <BSP_SPI1_Send>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <CUSTOM_LSM6DSO_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008ca8:	f06f 0305 	mvn.w	r3, #5
 8008cac:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_SET);
 8008cae:	2201      	movs	r2, #1
 8008cb0:	2102      	movs	r1, #2
 8008cb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008cb6:	f7fc fe2b 	bl	8005910 <HAL_GPIO_WritePin>

  return ret;
 8008cba:	697b      	ldr	r3, [r7, #20]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <CUSTOM_LSM6DSO_0_ReadReg>:
  * @param  pdata the pointer to the data to be read
  * @param  len the length of the data to be read
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60ba      	str	r2, [r7, #8]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4603      	mov	r3, r0
 8008cd0:	81fb      	strh	r3, [r7, #14]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	81bb      	strh	r3, [r7, #12]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8008cde:	89bb      	ldrh	r3, [r7, #12]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 8008ce4:	7cfb      	ldrb	r3, [r7, #19]
 8008ce6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_RESET);
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2102      	movs	r1, #2
 8008cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008cf6:	f7fc fe0b 	bl	8005910 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSO_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8008cfa:	f107 0313 	add.w	r3, r7, #19
 8008cfe:	2101      	movs	r1, #1
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7f7 fe97 	bl	8000a34 <BSP_SPI1_Send>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <CUSTOM_LSM6DSO_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008d0c:	f06f 0305 	mvn.w	r3, #5
 8008d10:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSO_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 8008d12:	88fb      	ldrh	r3, [r7, #6]
 8008d14:	4619      	mov	r1, r3
 8008d16:	68b8      	ldr	r0, [r7, #8]
 8008d18:	f7f7 fea8 	bl	8000a6c <BSP_SPI1_Recv>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <CUSTOM_LSM6DSO_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008d22:	f06f 0305 	mvn.w	r3, #5
 8008d26:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_SET);
 8008d28:	2201      	movs	r2, #1
 8008d2a:	2102      	movs	r1, #2
 8008d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008d30:	f7fc fdee 	bl	8005910 <HAL_GPIO_WritePin>

  return ret;
 8008d34:	697b      	ldr	r3, [r7, #20]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <CUSTOM_MOTION_SENSOR_Get_Event_Status>:
  * @param  Instance the device instance
  * @param  Status the pointer to the status of all hardware events
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Get_Event_Status(uint32_t Instance, CUSTOM_MOTION_SENSOR_Event_Status_t *Status)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d111      	bne.n	8008d74 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      if (LSM6DSO_ACC_Get_Event_Status(MotionCompObj[Instance], (LSM6DSO_Event_Status_t *)(void *)Status) != BSP_ERROR_NONE)
 8008d50:	4a0d      	ldr	r2, [pc, #52]	@ (8008d88 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x48>)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f9 f934 	bl	8001fc8 <LSM6DSO_ACC_Get_Event_Status>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d66:	f06f 0304 	mvn.w	r3, #4
 8008d6a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008d6c:	e006      	b.n	8008d7c <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x3c>
        ret = BSP_ERROR_NONE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
      break;
 8008d72:	e003      	b.n	8008d7c <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008d74:	f06f 0301 	mvn.w	r3, #1
 8008d78:	60fb      	str	r3, [r7, #12]
      break;
 8008d7a:	bf00      	nop
  }

  return ret;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20000384 	.word	0x20000384

08008d8c <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation>:
  * @param  Instance the device instance
  * @param  IntPin the interrupt pin to be used
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Enable_6D_Orientation(uint32_t Instance, CUSTOM_MOTION_SENSOR_IntPin_t IntPin)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d112      	bne.n	8008dc4 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x38>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_6D_Orientation(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 8008d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8008dd8 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x4c>)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7f8 ffcc 	bl	8001d48 <LSM6DSO_ACC_Enable_6D_Orientation>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008db6:	f06f 0304 	mvn.w	r3, #4
 8008dba:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008dbc:	e006      	b.n	8008dcc <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x40>
        ret = BSP_ERROR_NONE;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60fb      	str	r3, [r7, #12]
      break;
 8008dc2:	e003      	b.n	8008dcc <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008dc4:	f06f 0301 	mvn.w	r3, #1
 8008dc8:	60fb      	str	r3, [r7, #12]
      break;
 8008dca:	bf00      	nop
  }

  return ret;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20000384 	.word	0x20000384

08008ddc <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XL>:
  * @param  Instance the device instance
  * @param  xl the pointer to the 6D orientation XL axis
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XL(uint32_t Instance, uint8_t *xl)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d111      	bne.n	8008e10 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XL+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Get_6D_Orientation_XL(MotionCompObj[Instance], xl) != BSP_ERROR_NONE)
 8008dec:	4a0d      	ldr	r2, [pc, #52]	@ (8008e24 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XL+0x48>)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f9 f826 	bl	8001e48 <LSM6DSO_ACC_Get_6D_Orientation_XL>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XL+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e02:	f06f 0304 	mvn.w	r3, #4
 8008e06:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008e08:	e006      	b.n	8008e18 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XL+0x3c>
        ret = BSP_ERROR_NONE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
      break;
 8008e0e:	e003      	b.n	8008e18 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XL+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008e10:	f06f 0301 	mvn.w	r3, #1
 8008e14:	60fb      	str	r3, [r7, #12]
      break;
 8008e16:	bf00      	nop
  }

  return ret;
 8008e18:	68fb      	ldr	r3, [r7, #12]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20000384 	.word	0x20000384

08008e28 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XH>:
  * @param  Instance the device instance
  * @param  xh the pointer to the 6D orientation XH axis
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XH(uint32_t Instance, uint8_t *xh)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d111      	bne.n	8008e5c <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XH+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Get_6D_Orientation_XH(MotionCompObj[Instance], xh) != BSP_ERROR_NONE)
 8008e38:	4a0d      	ldr	r2, [pc, #52]	@ (8008e70 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XH+0x48>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7f9 f820 	bl	8001e88 <LSM6DSO_ACC_Get_6D_Orientation_XH>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XH+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e4e:	f06f 0304 	mvn.w	r3, #4
 8008e52:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008e54:	e006      	b.n	8008e64 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XH+0x3c>
        ret = BSP_ERROR_NONE;
 8008e56:	2300      	movs	r3, #0
 8008e58:	60fb      	str	r3, [r7, #12]
      break;
 8008e5a:	e003      	b.n	8008e64 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_XH+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008e5c:	f06f 0301 	mvn.w	r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
      break;
 8008e62:	bf00      	nop
  }

  return ret;
 8008e64:	68fb      	ldr	r3, [r7, #12]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000384 	.word	0x20000384

08008e74 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YL>:
  * @param  Instance the device instance
  * @param  yl the pointer to the 6D orientation YL axis
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YL(uint32_t Instance, uint8_t *yl)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d111      	bne.n	8008ea8 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YL+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Get_6D_Orientation_YL(MotionCompObj[Instance], yl) != BSP_ERROR_NONE)
 8008e84:	4a0d      	ldr	r2, [pc, #52]	@ (8008ebc <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YL+0x48>)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7f9 f81a 	bl	8001ec8 <LSM6DSO_ACC_Get_6D_Orientation_YL>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YL+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e9a:	f06f 0304 	mvn.w	r3, #4
 8008e9e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008ea0:	e006      	b.n	8008eb0 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YL+0x3c>
        ret = BSP_ERROR_NONE;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
      break;
 8008ea6:	e003      	b.n	8008eb0 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YL+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008ea8:	f06f 0301 	mvn.w	r3, #1
 8008eac:	60fb      	str	r3, [r7, #12]
      break;
 8008eae:	bf00      	nop
  }

  return ret;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	20000384 	.word	0x20000384

08008ec0 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YH>:
  * @param  Instance the device instance
  * @param  yh the pointer to the 6D orientation YH axis
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YH(uint32_t Instance, uint8_t *yh)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d111      	bne.n	8008ef4 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YH+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Get_6D_Orientation_YH(MotionCompObj[Instance], yh) != BSP_ERROR_NONE)
 8008ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8008f08 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YH+0x48>)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7f9 f814 	bl	8001f08 <LSM6DSO_ACC_Get_6D_Orientation_YH>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YH+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ee6:	f06f 0304 	mvn.w	r3, #4
 8008eea:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008eec:	e006      	b.n	8008efc <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YH+0x3c>
        ret = BSP_ERROR_NONE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
      break;
 8008ef2:	e003      	b.n	8008efc <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_YH+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008ef4:	f06f 0301 	mvn.w	r3, #1
 8008ef8:	60fb      	str	r3, [r7, #12]
      break;
 8008efa:	bf00      	nop
  }

  return ret;
 8008efc:	68fb      	ldr	r3, [r7, #12]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20000384 	.word	0x20000384

08008f0c <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZL>:
  * @param  Instance the device instance
  * @param  zl the pointer to the 6D orientation ZL axis
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZL(uint32_t Instance, uint8_t *zl)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d111      	bne.n	8008f40 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZL+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Get_6D_Orientation_ZL(MotionCompObj[Instance], zl) != BSP_ERROR_NONE)
 8008f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8008f54 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZL+0x48>)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f9 f80e 	bl	8001f48 <LSM6DSO_ACC_Get_6D_Orientation_ZL>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZL+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f32:	f06f 0304 	mvn.w	r3, #4
 8008f36:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008f38:	e006      	b.n	8008f48 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZL+0x3c>
        ret = BSP_ERROR_NONE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
      break;
 8008f3e:	e003      	b.n	8008f48 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZL+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008f40:	f06f 0301 	mvn.w	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]
      break;
 8008f46:	bf00      	nop
  }

  return ret;
 8008f48:	68fb      	ldr	r3, [r7, #12]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000384 	.word	0x20000384

08008f58 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZH>:
  * @param  Instance the device instance
  * @param  zh the pointer to the 6D orientation ZH axis
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZH(uint32_t Instance, uint8_t *zh)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d111      	bne.n	8008f8c <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZH+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Get_6D_Orientation_ZH(MotionCompObj[Instance], zh) != BSP_ERROR_NONE)
 8008f68:	4a0d      	ldr	r2, [pc, #52]	@ (8008fa0 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZH+0x48>)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7f9 f808 	bl	8001f88 <LSM6DSO_ACC_Get_6D_Orientation_ZH>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZH+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f7e:	f06f 0304 	mvn.w	r3, #4
 8008f82:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008f84:	e006      	b.n	8008f94 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZH+0x3c>
        ret = BSP_ERROR_NONE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
      break;
 8008f8a:	e003      	b.n	8008f94 <CUSTOM_MOTION_SENSOR_Get_6D_Orientation_ZH+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008f8c:	f06f 0301 	mvn.w	r3, #1
 8008f90:	60fb      	str	r3, [r7, #12]
      break;
 8008f92:	bf00      	nop
  }

  return ret;
 8008f94:	68fb      	ldr	r3, [r7, #12]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000384 	.word	0x20000384

08008fa4 <std>:
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	4604      	mov	r4, r0
 8008faa:	e9c0 3300 	strd	r3, r3, [r0]
 8008fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fb2:	6083      	str	r3, [r0, #8]
 8008fb4:	8181      	strh	r1, [r0, #12]
 8008fb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fb8:	81c2      	strh	r2, [r0, #14]
 8008fba:	6183      	str	r3, [r0, #24]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	2208      	movs	r2, #8
 8008fc0:	305c      	adds	r0, #92	@ 0x5c
 8008fc2:	f000 fa2d 	bl	8009420 <memset>
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008ffc <std+0x58>)
 8008fc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fca:	4b0d      	ldr	r3, [pc, #52]	@ (8009000 <std+0x5c>)
 8008fcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fce:	4b0d      	ldr	r3, [pc, #52]	@ (8009004 <std+0x60>)
 8008fd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009008 <std+0x64>)
 8008fd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800900c <std+0x68>)
 8008fd8:	6224      	str	r4, [r4, #32]
 8008fda:	429c      	cmp	r4, r3
 8008fdc:	d006      	beq.n	8008fec <std+0x48>
 8008fde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008fe2:	4294      	cmp	r4, r2
 8008fe4:	d002      	beq.n	8008fec <std+0x48>
 8008fe6:	33d0      	adds	r3, #208	@ 0xd0
 8008fe8:	429c      	cmp	r4, r3
 8008fea:	d105      	bne.n	8008ff8 <std+0x54>
 8008fec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff4:	f000 ba8c 	b.w	8009510 <__retarget_lock_init_recursive>
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	bf00      	nop
 8008ffc:	08009271 	.word	0x08009271
 8009000:	08009293 	.word	0x08009293
 8009004:	080092cb 	.word	0x080092cb
 8009008:	080092ef 	.word	0x080092ef
 800900c:	200003d4 	.word	0x200003d4

08009010 <stdio_exit_handler>:
 8009010:	4a02      	ldr	r2, [pc, #8]	@ (800901c <stdio_exit_handler+0xc>)
 8009012:	4903      	ldr	r1, [pc, #12]	@ (8009020 <stdio_exit_handler+0x10>)
 8009014:	4803      	ldr	r0, [pc, #12]	@ (8009024 <stdio_exit_handler+0x14>)
 8009016:	f000 b869 	b.w	80090ec <_fwalk_sglue>
 800901a:	bf00      	nop
 800901c:	2000009c 	.word	0x2000009c
 8009020:	0800a061 	.word	0x0800a061
 8009024:	200000ac 	.word	0x200000ac

08009028 <cleanup_stdio>:
 8009028:	6841      	ldr	r1, [r0, #4]
 800902a:	4b0c      	ldr	r3, [pc, #48]	@ (800905c <cleanup_stdio+0x34>)
 800902c:	4299      	cmp	r1, r3
 800902e:	b510      	push	{r4, lr}
 8009030:	4604      	mov	r4, r0
 8009032:	d001      	beq.n	8009038 <cleanup_stdio+0x10>
 8009034:	f001 f814 	bl	800a060 <_fflush_r>
 8009038:	68a1      	ldr	r1, [r4, #8]
 800903a:	4b09      	ldr	r3, [pc, #36]	@ (8009060 <cleanup_stdio+0x38>)
 800903c:	4299      	cmp	r1, r3
 800903e:	d002      	beq.n	8009046 <cleanup_stdio+0x1e>
 8009040:	4620      	mov	r0, r4
 8009042:	f001 f80d 	bl	800a060 <_fflush_r>
 8009046:	68e1      	ldr	r1, [r4, #12]
 8009048:	4b06      	ldr	r3, [pc, #24]	@ (8009064 <cleanup_stdio+0x3c>)
 800904a:	4299      	cmp	r1, r3
 800904c:	d004      	beq.n	8009058 <cleanup_stdio+0x30>
 800904e:	4620      	mov	r0, r4
 8009050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009054:	f001 b804 	b.w	800a060 <_fflush_r>
 8009058:	bd10      	pop	{r4, pc}
 800905a:	bf00      	nop
 800905c:	200003d4 	.word	0x200003d4
 8009060:	2000043c 	.word	0x2000043c
 8009064:	200004a4 	.word	0x200004a4

08009068 <global_stdio_init.part.0>:
 8009068:	b510      	push	{r4, lr}
 800906a:	4b0b      	ldr	r3, [pc, #44]	@ (8009098 <global_stdio_init.part.0+0x30>)
 800906c:	4c0b      	ldr	r4, [pc, #44]	@ (800909c <global_stdio_init.part.0+0x34>)
 800906e:	4a0c      	ldr	r2, [pc, #48]	@ (80090a0 <global_stdio_init.part.0+0x38>)
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	4620      	mov	r0, r4
 8009074:	2200      	movs	r2, #0
 8009076:	2104      	movs	r1, #4
 8009078:	f7ff ff94 	bl	8008fa4 <std>
 800907c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009080:	2201      	movs	r2, #1
 8009082:	2109      	movs	r1, #9
 8009084:	f7ff ff8e 	bl	8008fa4 <std>
 8009088:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800908c:	2202      	movs	r2, #2
 800908e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009092:	2112      	movs	r1, #18
 8009094:	f7ff bf86 	b.w	8008fa4 <std>
 8009098:	2000050c 	.word	0x2000050c
 800909c:	200003d4 	.word	0x200003d4
 80090a0:	08009011 	.word	0x08009011

080090a4 <__sfp_lock_acquire>:
 80090a4:	4801      	ldr	r0, [pc, #4]	@ (80090ac <__sfp_lock_acquire+0x8>)
 80090a6:	f000 ba34 	b.w	8009512 <__retarget_lock_acquire_recursive>
 80090aa:	bf00      	nop
 80090ac:	20000515 	.word	0x20000515

080090b0 <__sfp_lock_release>:
 80090b0:	4801      	ldr	r0, [pc, #4]	@ (80090b8 <__sfp_lock_release+0x8>)
 80090b2:	f000 ba2f 	b.w	8009514 <__retarget_lock_release_recursive>
 80090b6:	bf00      	nop
 80090b8:	20000515 	.word	0x20000515

080090bc <__sinit>:
 80090bc:	b510      	push	{r4, lr}
 80090be:	4604      	mov	r4, r0
 80090c0:	f7ff fff0 	bl	80090a4 <__sfp_lock_acquire>
 80090c4:	6a23      	ldr	r3, [r4, #32]
 80090c6:	b11b      	cbz	r3, 80090d0 <__sinit+0x14>
 80090c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090cc:	f7ff bff0 	b.w	80090b0 <__sfp_lock_release>
 80090d0:	4b04      	ldr	r3, [pc, #16]	@ (80090e4 <__sinit+0x28>)
 80090d2:	6223      	str	r3, [r4, #32]
 80090d4:	4b04      	ldr	r3, [pc, #16]	@ (80090e8 <__sinit+0x2c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1f5      	bne.n	80090c8 <__sinit+0xc>
 80090dc:	f7ff ffc4 	bl	8009068 <global_stdio_init.part.0>
 80090e0:	e7f2      	b.n	80090c8 <__sinit+0xc>
 80090e2:	bf00      	nop
 80090e4:	08009029 	.word	0x08009029
 80090e8:	2000050c 	.word	0x2000050c

080090ec <_fwalk_sglue>:
 80090ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f0:	4607      	mov	r7, r0
 80090f2:	4688      	mov	r8, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	2600      	movs	r6, #0
 80090f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090fc:	f1b9 0901 	subs.w	r9, r9, #1
 8009100:	d505      	bpl.n	800910e <_fwalk_sglue+0x22>
 8009102:	6824      	ldr	r4, [r4, #0]
 8009104:	2c00      	cmp	r4, #0
 8009106:	d1f7      	bne.n	80090f8 <_fwalk_sglue+0xc>
 8009108:	4630      	mov	r0, r6
 800910a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910e:	89ab      	ldrh	r3, [r5, #12]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d907      	bls.n	8009124 <_fwalk_sglue+0x38>
 8009114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009118:	3301      	adds	r3, #1
 800911a:	d003      	beq.n	8009124 <_fwalk_sglue+0x38>
 800911c:	4629      	mov	r1, r5
 800911e:	4638      	mov	r0, r7
 8009120:	47c0      	blx	r8
 8009122:	4306      	orrs	r6, r0
 8009124:	3568      	adds	r5, #104	@ 0x68
 8009126:	e7e9      	b.n	80090fc <_fwalk_sglue+0x10>

08009128 <iprintf>:
 8009128:	b40f      	push	{r0, r1, r2, r3}
 800912a:	b507      	push	{r0, r1, r2, lr}
 800912c:	4906      	ldr	r1, [pc, #24]	@ (8009148 <iprintf+0x20>)
 800912e:	ab04      	add	r3, sp, #16
 8009130:	6808      	ldr	r0, [r1, #0]
 8009132:	f853 2b04 	ldr.w	r2, [r3], #4
 8009136:	6881      	ldr	r1, [r0, #8]
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	f000 fc67 	bl	8009a0c <_vfiprintf_r>
 800913e:	b003      	add	sp, #12
 8009140:	f85d eb04 	ldr.w	lr, [sp], #4
 8009144:	b004      	add	sp, #16
 8009146:	4770      	bx	lr
 8009148:	200000a8 	.word	0x200000a8

0800914c <_puts_r>:
 800914c:	6a03      	ldr	r3, [r0, #32]
 800914e:	b570      	push	{r4, r5, r6, lr}
 8009150:	6884      	ldr	r4, [r0, #8]
 8009152:	4605      	mov	r5, r0
 8009154:	460e      	mov	r6, r1
 8009156:	b90b      	cbnz	r3, 800915c <_puts_r+0x10>
 8009158:	f7ff ffb0 	bl	80090bc <__sinit>
 800915c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800915e:	07db      	lsls	r3, r3, #31
 8009160:	d405      	bmi.n	800916e <_puts_r+0x22>
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	0598      	lsls	r0, r3, #22
 8009166:	d402      	bmi.n	800916e <_puts_r+0x22>
 8009168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800916a:	f000 f9d2 	bl	8009512 <__retarget_lock_acquire_recursive>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	0719      	lsls	r1, r3, #28
 8009172:	d502      	bpl.n	800917a <_puts_r+0x2e>
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d135      	bne.n	80091e6 <_puts_r+0x9a>
 800917a:	4621      	mov	r1, r4
 800917c:	4628      	mov	r0, r5
 800917e:	f000 f8f9 	bl	8009374 <__swsetup_r>
 8009182:	b380      	cbz	r0, 80091e6 <_puts_r+0x9a>
 8009184:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009188:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800918a:	07da      	lsls	r2, r3, #31
 800918c:	d405      	bmi.n	800919a <_puts_r+0x4e>
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	059b      	lsls	r3, r3, #22
 8009192:	d402      	bmi.n	800919a <_puts_r+0x4e>
 8009194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009196:	f000 f9bd 	bl	8009514 <__retarget_lock_release_recursive>
 800919a:	4628      	mov	r0, r5
 800919c:	bd70      	pop	{r4, r5, r6, pc}
 800919e:	2b00      	cmp	r3, #0
 80091a0:	da04      	bge.n	80091ac <_puts_r+0x60>
 80091a2:	69a2      	ldr	r2, [r4, #24]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	dc17      	bgt.n	80091d8 <_puts_r+0x8c>
 80091a8:	290a      	cmp	r1, #10
 80091aa:	d015      	beq.n	80091d8 <_puts_r+0x8c>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	6022      	str	r2, [r4, #0]
 80091b2:	7019      	strb	r1, [r3, #0]
 80091b4:	68a3      	ldr	r3, [r4, #8]
 80091b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091ba:	3b01      	subs	r3, #1
 80091bc:	60a3      	str	r3, [r4, #8]
 80091be:	2900      	cmp	r1, #0
 80091c0:	d1ed      	bne.n	800919e <_puts_r+0x52>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	da11      	bge.n	80091ea <_puts_r+0x9e>
 80091c6:	4622      	mov	r2, r4
 80091c8:	210a      	movs	r1, #10
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 f893 	bl	80092f6 <__swbuf_r>
 80091d0:	3001      	adds	r0, #1
 80091d2:	d0d7      	beq.n	8009184 <_puts_r+0x38>
 80091d4:	250a      	movs	r5, #10
 80091d6:	e7d7      	b.n	8009188 <_puts_r+0x3c>
 80091d8:	4622      	mov	r2, r4
 80091da:	4628      	mov	r0, r5
 80091dc:	f000 f88b 	bl	80092f6 <__swbuf_r>
 80091e0:	3001      	adds	r0, #1
 80091e2:	d1e7      	bne.n	80091b4 <_puts_r+0x68>
 80091e4:	e7ce      	b.n	8009184 <_puts_r+0x38>
 80091e6:	3e01      	subs	r6, #1
 80091e8:	e7e4      	b.n	80091b4 <_puts_r+0x68>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	6022      	str	r2, [r4, #0]
 80091f0:	220a      	movs	r2, #10
 80091f2:	701a      	strb	r2, [r3, #0]
 80091f4:	e7ee      	b.n	80091d4 <_puts_r+0x88>
	...

080091f8 <puts>:
 80091f8:	4b02      	ldr	r3, [pc, #8]	@ (8009204 <puts+0xc>)
 80091fa:	4601      	mov	r1, r0
 80091fc:	6818      	ldr	r0, [r3, #0]
 80091fe:	f7ff bfa5 	b.w	800914c <_puts_r>
 8009202:	bf00      	nop
 8009204:	200000a8 	.word	0x200000a8

08009208 <sniprintf>:
 8009208:	b40c      	push	{r2, r3}
 800920a:	b530      	push	{r4, r5, lr}
 800920c:	4b17      	ldr	r3, [pc, #92]	@ (800926c <sniprintf+0x64>)
 800920e:	1e0c      	subs	r4, r1, #0
 8009210:	681d      	ldr	r5, [r3, #0]
 8009212:	b09d      	sub	sp, #116	@ 0x74
 8009214:	da08      	bge.n	8009228 <sniprintf+0x20>
 8009216:	238b      	movs	r3, #139	@ 0x8b
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800921e:	b01d      	add	sp, #116	@ 0x74
 8009220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009224:	b002      	add	sp, #8
 8009226:	4770      	bx	lr
 8009228:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800922c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009230:	bf14      	ite	ne
 8009232:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009236:	4623      	moveq	r3, r4
 8009238:	9304      	str	r3, [sp, #16]
 800923a:	9307      	str	r3, [sp, #28]
 800923c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009240:	9002      	str	r0, [sp, #8]
 8009242:	9006      	str	r0, [sp, #24]
 8009244:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009248:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800924a:	ab21      	add	r3, sp, #132	@ 0x84
 800924c:	a902      	add	r1, sp, #8
 800924e:	4628      	mov	r0, r5
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	f000 fab5 	bl	80097c0 <_svfiprintf_r>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	bfbc      	itt	lt
 800925a:	238b      	movlt	r3, #139	@ 0x8b
 800925c:	602b      	strlt	r3, [r5, #0]
 800925e:	2c00      	cmp	r4, #0
 8009260:	d0dd      	beq.n	800921e <sniprintf+0x16>
 8009262:	9b02      	ldr	r3, [sp, #8]
 8009264:	2200      	movs	r2, #0
 8009266:	701a      	strb	r2, [r3, #0]
 8009268:	e7d9      	b.n	800921e <sniprintf+0x16>
 800926a:	bf00      	nop
 800926c:	200000a8 	.word	0x200000a8

08009270 <__sread>:
 8009270:	b510      	push	{r4, lr}
 8009272:	460c      	mov	r4, r1
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	f000 f8fc 	bl	8009474 <_read_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	bfab      	itete	ge
 8009280:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009282:	89a3      	ldrhlt	r3, [r4, #12]
 8009284:	181b      	addge	r3, r3, r0
 8009286:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800928a:	bfac      	ite	ge
 800928c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800928e:	81a3      	strhlt	r3, [r4, #12]
 8009290:	bd10      	pop	{r4, pc}

08009292 <__swrite>:
 8009292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009296:	461f      	mov	r7, r3
 8009298:	898b      	ldrh	r3, [r1, #12]
 800929a:	05db      	lsls	r3, r3, #23
 800929c:	4605      	mov	r5, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	4616      	mov	r6, r2
 80092a2:	d505      	bpl.n	80092b0 <__swrite+0x1e>
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	2302      	movs	r3, #2
 80092aa:	2200      	movs	r2, #0
 80092ac:	f000 f8d0 	bl	8009450 <_lseek_r>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	4632      	mov	r2, r6
 80092be:	463b      	mov	r3, r7
 80092c0:	4628      	mov	r0, r5
 80092c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	f000 b8e7 	b.w	8009498 <_write_r>

080092ca <__sseek>:
 80092ca:	b510      	push	{r4, lr}
 80092cc:	460c      	mov	r4, r1
 80092ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d2:	f000 f8bd 	bl	8009450 <_lseek_r>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	bf15      	itete	ne
 80092dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092e6:	81a3      	strheq	r3, [r4, #12]
 80092e8:	bf18      	it	ne
 80092ea:	81a3      	strhne	r3, [r4, #12]
 80092ec:	bd10      	pop	{r4, pc}

080092ee <__sclose>:
 80092ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f2:	f000 b89d 	b.w	8009430 <_close_r>

080092f6 <__swbuf_r>:
 80092f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f8:	460e      	mov	r6, r1
 80092fa:	4614      	mov	r4, r2
 80092fc:	4605      	mov	r5, r0
 80092fe:	b118      	cbz	r0, 8009308 <__swbuf_r+0x12>
 8009300:	6a03      	ldr	r3, [r0, #32]
 8009302:	b90b      	cbnz	r3, 8009308 <__swbuf_r+0x12>
 8009304:	f7ff feda 	bl	80090bc <__sinit>
 8009308:	69a3      	ldr	r3, [r4, #24]
 800930a:	60a3      	str	r3, [r4, #8]
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	071a      	lsls	r2, r3, #28
 8009310:	d501      	bpl.n	8009316 <__swbuf_r+0x20>
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	b943      	cbnz	r3, 8009328 <__swbuf_r+0x32>
 8009316:	4621      	mov	r1, r4
 8009318:	4628      	mov	r0, r5
 800931a:	f000 f82b 	bl	8009374 <__swsetup_r>
 800931e:	b118      	cbz	r0, 8009328 <__swbuf_r+0x32>
 8009320:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009324:	4638      	mov	r0, r7
 8009326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	6922      	ldr	r2, [r4, #16]
 800932c:	1a98      	subs	r0, r3, r2
 800932e:	6963      	ldr	r3, [r4, #20]
 8009330:	b2f6      	uxtb	r6, r6
 8009332:	4283      	cmp	r3, r0
 8009334:	4637      	mov	r7, r6
 8009336:	dc05      	bgt.n	8009344 <__swbuf_r+0x4e>
 8009338:	4621      	mov	r1, r4
 800933a:	4628      	mov	r0, r5
 800933c:	f000 fe90 	bl	800a060 <_fflush_r>
 8009340:	2800      	cmp	r0, #0
 8009342:	d1ed      	bne.n	8009320 <__swbuf_r+0x2a>
 8009344:	68a3      	ldr	r3, [r4, #8]
 8009346:	3b01      	subs	r3, #1
 8009348:	60a3      	str	r3, [r4, #8]
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	6022      	str	r2, [r4, #0]
 8009350:	701e      	strb	r6, [r3, #0]
 8009352:	6962      	ldr	r2, [r4, #20]
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	429a      	cmp	r2, r3
 8009358:	d004      	beq.n	8009364 <__swbuf_r+0x6e>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	07db      	lsls	r3, r3, #31
 800935e:	d5e1      	bpl.n	8009324 <__swbuf_r+0x2e>
 8009360:	2e0a      	cmp	r6, #10
 8009362:	d1df      	bne.n	8009324 <__swbuf_r+0x2e>
 8009364:	4621      	mov	r1, r4
 8009366:	4628      	mov	r0, r5
 8009368:	f000 fe7a 	bl	800a060 <_fflush_r>
 800936c:	2800      	cmp	r0, #0
 800936e:	d0d9      	beq.n	8009324 <__swbuf_r+0x2e>
 8009370:	e7d6      	b.n	8009320 <__swbuf_r+0x2a>
	...

08009374 <__swsetup_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4b29      	ldr	r3, [pc, #164]	@ (800941c <__swsetup_r+0xa8>)
 8009378:	4605      	mov	r5, r0
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	460c      	mov	r4, r1
 800937e:	b118      	cbz	r0, 8009388 <__swsetup_r+0x14>
 8009380:	6a03      	ldr	r3, [r0, #32]
 8009382:	b90b      	cbnz	r3, 8009388 <__swsetup_r+0x14>
 8009384:	f7ff fe9a 	bl	80090bc <__sinit>
 8009388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800938c:	0719      	lsls	r1, r3, #28
 800938e:	d422      	bmi.n	80093d6 <__swsetup_r+0x62>
 8009390:	06da      	lsls	r2, r3, #27
 8009392:	d407      	bmi.n	80093a4 <__swsetup_r+0x30>
 8009394:	2209      	movs	r2, #9
 8009396:	602a      	str	r2, [r5, #0]
 8009398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093a2:	e033      	b.n	800940c <__swsetup_r+0x98>
 80093a4:	0758      	lsls	r0, r3, #29
 80093a6:	d512      	bpl.n	80093ce <__swsetup_r+0x5a>
 80093a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093aa:	b141      	cbz	r1, 80093be <__swsetup_r+0x4a>
 80093ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093b0:	4299      	cmp	r1, r3
 80093b2:	d002      	beq.n	80093ba <__swsetup_r+0x46>
 80093b4:	4628      	mov	r0, r5
 80093b6:	f000 f8af 	bl	8009518 <_free_r>
 80093ba:	2300      	movs	r3, #0
 80093bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	2300      	movs	r3, #0
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	6923      	ldr	r3, [r4, #16]
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f043 0308 	orr.w	r3, r3, #8
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	6923      	ldr	r3, [r4, #16]
 80093d8:	b94b      	cbnz	r3, 80093ee <__swsetup_r+0x7a>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093e4:	d003      	beq.n	80093ee <__swsetup_r+0x7a>
 80093e6:	4621      	mov	r1, r4
 80093e8:	4628      	mov	r0, r5
 80093ea:	f000 fe87 	bl	800a0fc <__smakebuf_r>
 80093ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f2:	f013 0201 	ands.w	r2, r3, #1
 80093f6:	d00a      	beq.n	800940e <__swsetup_r+0x9a>
 80093f8:	2200      	movs	r2, #0
 80093fa:	60a2      	str	r2, [r4, #8]
 80093fc:	6962      	ldr	r2, [r4, #20]
 80093fe:	4252      	negs	r2, r2
 8009400:	61a2      	str	r2, [r4, #24]
 8009402:	6922      	ldr	r2, [r4, #16]
 8009404:	b942      	cbnz	r2, 8009418 <__swsetup_r+0xa4>
 8009406:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800940a:	d1c5      	bne.n	8009398 <__swsetup_r+0x24>
 800940c:	bd38      	pop	{r3, r4, r5, pc}
 800940e:	0799      	lsls	r1, r3, #30
 8009410:	bf58      	it	pl
 8009412:	6962      	ldrpl	r2, [r4, #20]
 8009414:	60a2      	str	r2, [r4, #8]
 8009416:	e7f4      	b.n	8009402 <__swsetup_r+0x8e>
 8009418:	2000      	movs	r0, #0
 800941a:	e7f7      	b.n	800940c <__swsetup_r+0x98>
 800941c:	200000a8 	.word	0x200000a8

08009420 <memset>:
 8009420:	4402      	add	r2, r0
 8009422:	4603      	mov	r3, r0
 8009424:	4293      	cmp	r3, r2
 8009426:	d100      	bne.n	800942a <memset+0xa>
 8009428:	4770      	bx	lr
 800942a:	f803 1b01 	strb.w	r1, [r3], #1
 800942e:	e7f9      	b.n	8009424 <memset+0x4>

08009430 <_close_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d06      	ldr	r5, [pc, #24]	@ (800944c <_close_r+0x1c>)
 8009434:	2300      	movs	r3, #0
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	602b      	str	r3, [r5, #0]
 800943c:	f7f7 fc0b 	bl	8000c56 <_close>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_close_r+0x1a>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_close_r+0x1a>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20000510 	.word	0x20000510

08009450 <_lseek_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d07      	ldr	r5, [pc, #28]	@ (8009470 <_lseek_r+0x20>)
 8009454:	4604      	mov	r4, r0
 8009456:	4608      	mov	r0, r1
 8009458:	4611      	mov	r1, r2
 800945a:	2200      	movs	r2, #0
 800945c:	602a      	str	r2, [r5, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	f7f7 fc20 	bl	8000ca4 <_lseek>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_lseek_r+0x1e>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_lseek_r+0x1e>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20000510 	.word	0x20000510

08009474 <_read_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4d07      	ldr	r5, [pc, #28]	@ (8009494 <_read_r+0x20>)
 8009478:	4604      	mov	r4, r0
 800947a:	4608      	mov	r0, r1
 800947c:	4611      	mov	r1, r2
 800947e:	2200      	movs	r2, #0
 8009480:	602a      	str	r2, [r5, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	f7f7 fbca 	bl	8000c1c <_read>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_read_r+0x1e>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_read_r+0x1e>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20000510 	.word	0x20000510

08009498 <_write_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d07      	ldr	r5, [pc, #28]	@ (80094b8 <_write_r+0x20>)
 800949c:	4604      	mov	r4, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f7 f882 	bl	80005b0 <_write>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_write_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_write_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000510 	.word	0x20000510

080094bc <__errno>:
 80094bc:	4b01      	ldr	r3, [pc, #4]	@ (80094c4 <__errno+0x8>)
 80094be:	6818      	ldr	r0, [r3, #0]
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	200000a8 	.word	0x200000a8

080094c8 <__libc_init_array>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009500 <__libc_init_array+0x38>)
 80094cc:	4c0d      	ldr	r4, [pc, #52]	@ (8009504 <__libc_init_array+0x3c>)
 80094ce:	1b64      	subs	r4, r4, r5
 80094d0:	10a4      	asrs	r4, r4, #2
 80094d2:	2600      	movs	r6, #0
 80094d4:	42a6      	cmp	r6, r4
 80094d6:	d109      	bne.n	80094ec <__libc_init_array+0x24>
 80094d8:	4d0b      	ldr	r5, [pc, #44]	@ (8009508 <__libc_init_array+0x40>)
 80094da:	4c0c      	ldr	r4, [pc, #48]	@ (800950c <__libc_init_array+0x44>)
 80094dc:	f000 feda 	bl	800a294 <_init>
 80094e0:	1b64      	subs	r4, r4, r5
 80094e2:	10a4      	asrs	r4, r4, #2
 80094e4:	2600      	movs	r6, #0
 80094e6:	42a6      	cmp	r6, r4
 80094e8:	d105      	bne.n	80094f6 <__libc_init_array+0x2e>
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f0:	4798      	blx	r3
 80094f2:	3601      	adds	r6, #1
 80094f4:	e7ee      	b.n	80094d4 <__libc_init_array+0xc>
 80094f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fa:	4798      	blx	r3
 80094fc:	3601      	adds	r6, #1
 80094fe:	e7f2      	b.n	80094e6 <__libc_init_array+0x1e>
 8009500:	0800a888 	.word	0x0800a888
 8009504:	0800a888 	.word	0x0800a888
 8009508:	0800a888 	.word	0x0800a888
 800950c:	0800a88c 	.word	0x0800a88c

08009510 <__retarget_lock_init_recursive>:
 8009510:	4770      	bx	lr

08009512 <__retarget_lock_acquire_recursive>:
 8009512:	4770      	bx	lr

08009514 <__retarget_lock_release_recursive>:
 8009514:	4770      	bx	lr
	...

08009518 <_free_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4605      	mov	r5, r0
 800951c:	2900      	cmp	r1, #0
 800951e:	d041      	beq.n	80095a4 <_free_r+0x8c>
 8009520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009524:	1f0c      	subs	r4, r1, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	bfb8      	it	lt
 800952a:	18e4      	addlt	r4, r4, r3
 800952c:	f000 f8e0 	bl	80096f0 <__malloc_lock>
 8009530:	4a1d      	ldr	r2, [pc, #116]	@ (80095a8 <_free_r+0x90>)
 8009532:	6813      	ldr	r3, [r2, #0]
 8009534:	b933      	cbnz	r3, 8009544 <_free_r+0x2c>
 8009536:	6063      	str	r3, [r4, #4]
 8009538:	6014      	str	r4, [r2, #0]
 800953a:	4628      	mov	r0, r5
 800953c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009540:	f000 b8dc 	b.w	80096fc <__malloc_unlock>
 8009544:	42a3      	cmp	r3, r4
 8009546:	d908      	bls.n	800955a <_free_r+0x42>
 8009548:	6820      	ldr	r0, [r4, #0]
 800954a:	1821      	adds	r1, r4, r0
 800954c:	428b      	cmp	r3, r1
 800954e:	bf01      	itttt	eq
 8009550:	6819      	ldreq	r1, [r3, #0]
 8009552:	685b      	ldreq	r3, [r3, #4]
 8009554:	1809      	addeq	r1, r1, r0
 8009556:	6021      	streq	r1, [r4, #0]
 8009558:	e7ed      	b.n	8009536 <_free_r+0x1e>
 800955a:	461a      	mov	r2, r3
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	b10b      	cbz	r3, 8009564 <_free_r+0x4c>
 8009560:	42a3      	cmp	r3, r4
 8009562:	d9fa      	bls.n	800955a <_free_r+0x42>
 8009564:	6811      	ldr	r1, [r2, #0]
 8009566:	1850      	adds	r0, r2, r1
 8009568:	42a0      	cmp	r0, r4
 800956a:	d10b      	bne.n	8009584 <_free_r+0x6c>
 800956c:	6820      	ldr	r0, [r4, #0]
 800956e:	4401      	add	r1, r0
 8009570:	1850      	adds	r0, r2, r1
 8009572:	4283      	cmp	r3, r0
 8009574:	6011      	str	r1, [r2, #0]
 8009576:	d1e0      	bne.n	800953a <_free_r+0x22>
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	6053      	str	r3, [r2, #4]
 800957e:	4408      	add	r0, r1
 8009580:	6010      	str	r0, [r2, #0]
 8009582:	e7da      	b.n	800953a <_free_r+0x22>
 8009584:	d902      	bls.n	800958c <_free_r+0x74>
 8009586:	230c      	movs	r3, #12
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	e7d6      	b.n	800953a <_free_r+0x22>
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	1821      	adds	r1, r4, r0
 8009590:	428b      	cmp	r3, r1
 8009592:	bf04      	itt	eq
 8009594:	6819      	ldreq	r1, [r3, #0]
 8009596:	685b      	ldreq	r3, [r3, #4]
 8009598:	6063      	str	r3, [r4, #4]
 800959a:	bf04      	itt	eq
 800959c:	1809      	addeq	r1, r1, r0
 800959e:	6021      	streq	r1, [r4, #0]
 80095a0:	6054      	str	r4, [r2, #4]
 80095a2:	e7ca      	b.n	800953a <_free_r+0x22>
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	bf00      	nop
 80095a8:	2000051c 	.word	0x2000051c

080095ac <sbrk_aligned>:
 80095ac:	b570      	push	{r4, r5, r6, lr}
 80095ae:	4e0f      	ldr	r6, [pc, #60]	@ (80095ec <sbrk_aligned+0x40>)
 80095b0:	460c      	mov	r4, r1
 80095b2:	6831      	ldr	r1, [r6, #0]
 80095b4:	4605      	mov	r5, r0
 80095b6:	b911      	cbnz	r1, 80095be <sbrk_aligned+0x12>
 80095b8:	f000 fe18 	bl	800a1ec <_sbrk_r>
 80095bc:	6030      	str	r0, [r6, #0]
 80095be:	4621      	mov	r1, r4
 80095c0:	4628      	mov	r0, r5
 80095c2:	f000 fe13 	bl	800a1ec <_sbrk_r>
 80095c6:	1c43      	adds	r3, r0, #1
 80095c8:	d103      	bne.n	80095d2 <sbrk_aligned+0x26>
 80095ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80095ce:	4620      	mov	r0, r4
 80095d0:	bd70      	pop	{r4, r5, r6, pc}
 80095d2:	1cc4      	adds	r4, r0, #3
 80095d4:	f024 0403 	bic.w	r4, r4, #3
 80095d8:	42a0      	cmp	r0, r4
 80095da:	d0f8      	beq.n	80095ce <sbrk_aligned+0x22>
 80095dc:	1a21      	subs	r1, r4, r0
 80095de:	4628      	mov	r0, r5
 80095e0:	f000 fe04 	bl	800a1ec <_sbrk_r>
 80095e4:	3001      	adds	r0, #1
 80095e6:	d1f2      	bne.n	80095ce <sbrk_aligned+0x22>
 80095e8:	e7ef      	b.n	80095ca <sbrk_aligned+0x1e>
 80095ea:	bf00      	nop
 80095ec:	20000518 	.word	0x20000518

080095f0 <_malloc_r>:
 80095f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	1ccd      	adds	r5, r1, #3
 80095f6:	f025 0503 	bic.w	r5, r5, #3
 80095fa:	3508      	adds	r5, #8
 80095fc:	2d0c      	cmp	r5, #12
 80095fe:	bf38      	it	cc
 8009600:	250c      	movcc	r5, #12
 8009602:	2d00      	cmp	r5, #0
 8009604:	4606      	mov	r6, r0
 8009606:	db01      	blt.n	800960c <_malloc_r+0x1c>
 8009608:	42a9      	cmp	r1, r5
 800960a:	d904      	bls.n	8009616 <_malloc_r+0x26>
 800960c:	230c      	movs	r3, #12
 800960e:	6033      	str	r3, [r6, #0]
 8009610:	2000      	movs	r0, #0
 8009612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009616:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096ec <_malloc_r+0xfc>
 800961a:	f000 f869 	bl	80096f0 <__malloc_lock>
 800961e:	f8d8 3000 	ldr.w	r3, [r8]
 8009622:	461c      	mov	r4, r3
 8009624:	bb44      	cbnz	r4, 8009678 <_malloc_r+0x88>
 8009626:	4629      	mov	r1, r5
 8009628:	4630      	mov	r0, r6
 800962a:	f7ff ffbf 	bl	80095ac <sbrk_aligned>
 800962e:	1c43      	adds	r3, r0, #1
 8009630:	4604      	mov	r4, r0
 8009632:	d158      	bne.n	80096e6 <_malloc_r+0xf6>
 8009634:	f8d8 4000 	ldr.w	r4, [r8]
 8009638:	4627      	mov	r7, r4
 800963a:	2f00      	cmp	r7, #0
 800963c:	d143      	bne.n	80096c6 <_malloc_r+0xd6>
 800963e:	2c00      	cmp	r4, #0
 8009640:	d04b      	beq.n	80096da <_malloc_r+0xea>
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	4639      	mov	r1, r7
 8009646:	4630      	mov	r0, r6
 8009648:	eb04 0903 	add.w	r9, r4, r3
 800964c:	f000 fdce 	bl	800a1ec <_sbrk_r>
 8009650:	4581      	cmp	r9, r0
 8009652:	d142      	bne.n	80096da <_malloc_r+0xea>
 8009654:	6821      	ldr	r1, [r4, #0]
 8009656:	1a6d      	subs	r5, r5, r1
 8009658:	4629      	mov	r1, r5
 800965a:	4630      	mov	r0, r6
 800965c:	f7ff ffa6 	bl	80095ac <sbrk_aligned>
 8009660:	3001      	adds	r0, #1
 8009662:	d03a      	beq.n	80096da <_malloc_r+0xea>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	442b      	add	r3, r5
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	f8d8 3000 	ldr.w	r3, [r8]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	bb62      	cbnz	r2, 80096cc <_malloc_r+0xdc>
 8009672:	f8c8 7000 	str.w	r7, [r8]
 8009676:	e00f      	b.n	8009698 <_malloc_r+0xa8>
 8009678:	6822      	ldr	r2, [r4, #0]
 800967a:	1b52      	subs	r2, r2, r5
 800967c:	d420      	bmi.n	80096c0 <_malloc_r+0xd0>
 800967e:	2a0b      	cmp	r2, #11
 8009680:	d917      	bls.n	80096b2 <_malloc_r+0xc2>
 8009682:	1961      	adds	r1, r4, r5
 8009684:	42a3      	cmp	r3, r4
 8009686:	6025      	str	r5, [r4, #0]
 8009688:	bf18      	it	ne
 800968a:	6059      	strne	r1, [r3, #4]
 800968c:	6863      	ldr	r3, [r4, #4]
 800968e:	bf08      	it	eq
 8009690:	f8c8 1000 	streq.w	r1, [r8]
 8009694:	5162      	str	r2, [r4, r5]
 8009696:	604b      	str	r3, [r1, #4]
 8009698:	4630      	mov	r0, r6
 800969a:	f000 f82f 	bl	80096fc <__malloc_unlock>
 800969e:	f104 000b 	add.w	r0, r4, #11
 80096a2:	1d23      	adds	r3, r4, #4
 80096a4:	f020 0007 	bic.w	r0, r0, #7
 80096a8:	1ac2      	subs	r2, r0, r3
 80096aa:	bf1c      	itt	ne
 80096ac:	1a1b      	subne	r3, r3, r0
 80096ae:	50a3      	strne	r3, [r4, r2]
 80096b0:	e7af      	b.n	8009612 <_malloc_r+0x22>
 80096b2:	6862      	ldr	r2, [r4, #4]
 80096b4:	42a3      	cmp	r3, r4
 80096b6:	bf0c      	ite	eq
 80096b8:	f8c8 2000 	streq.w	r2, [r8]
 80096bc:	605a      	strne	r2, [r3, #4]
 80096be:	e7eb      	b.n	8009698 <_malloc_r+0xa8>
 80096c0:	4623      	mov	r3, r4
 80096c2:	6864      	ldr	r4, [r4, #4]
 80096c4:	e7ae      	b.n	8009624 <_malloc_r+0x34>
 80096c6:	463c      	mov	r4, r7
 80096c8:	687f      	ldr	r7, [r7, #4]
 80096ca:	e7b6      	b.n	800963a <_malloc_r+0x4a>
 80096cc:	461a      	mov	r2, r3
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	d1fb      	bne.n	80096cc <_malloc_r+0xdc>
 80096d4:	2300      	movs	r3, #0
 80096d6:	6053      	str	r3, [r2, #4]
 80096d8:	e7de      	b.n	8009698 <_malloc_r+0xa8>
 80096da:	230c      	movs	r3, #12
 80096dc:	6033      	str	r3, [r6, #0]
 80096de:	4630      	mov	r0, r6
 80096e0:	f000 f80c 	bl	80096fc <__malloc_unlock>
 80096e4:	e794      	b.n	8009610 <_malloc_r+0x20>
 80096e6:	6005      	str	r5, [r0, #0]
 80096e8:	e7d6      	b.n	8009698 <_malloc_r+0xa8>
 80096ea:	bf00      	nop
 80096ec:	2000051c 	.word	0x2000051c

080096f0 <__malloc_lock>:
 80096f0:	4801      	ldr	r0, [pc, #4]	@ (80096f8 <__malloc_lock+0x8>)
 80096f2:	f7ff bf0e 	b.w	8009512 <__retarget_lock_acquire_recursive>
 80096f6:	bf00      	nop
 80096f8:	20000514 	.word	0x20000514

080096fc <__malloc_unlock>:
 80096fc:	4801      	ldr	r0, [pc, #4]	@ (8009704 <__malloc_unlock+0x8>)
 80096fe:	f7ff bf09 	b.w	8009514 <__retarget_lock_release_recursive>
 8009702:	bf00      	nop
 8009704:	20000514 	.word	0x20000514

08009708 <__ssputs_r>:
 8009708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800970c:	688e      	ldr	r6, [r1, #8]
 800970e:	461f      	mov	r7, r3
 8009710:	42be      	cmp	r6, r7
 8009712:	680b      	ldr	r3, [r1, #0]
 8009714:	4682      	mov	sl, r0
 8009716:	460c      	mov	r4, r1
 8009718:	4690      	mov	r8, r2
 800971a:	d82d      	bhi.n	8009778 <__ssputs_r+0x70>
 800971c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009720:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009724:	d026      	beq.n	8009774 <__ssputs_r+0x6c>
 8009726:	6965      	ldr	r5, [r4, #20]
 8009728:	6909      	ldr	r1, [r1, #16]
 800972a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800972e:	eba3 0901 	sub.w	r9, r3, r1
 8009732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009736:	1c7b      	adds	r3, r7, #1
 8009738:	444b      	add	r3, r9
 800973a:	106d      	asrs	r5, r5, #1
 800973c:	429d      	cmp	r5, r3
 800973e:	bf38      	it	cc
 8009740:	461d      	movcc	r5, r3
 8009742:	0553      	lsls	r3, r2, #21
 8009744:	d527      	bpl.n	8009796 <__ssputs_r+0x8e>
 8009746:	4629      	mov	r1, r5
 8009748:	f7ff ff52 	bl	80095f0 <_malloc_r>
 800974c:	4606      	mov	r6, r0
 800974e:	b360      	cbz	r0, 80097aa <__ssputs_r+0xa2>
 8009750:	6921      	ldr	r1, [r4, #16]
 8009752:	464a      	mov	r2, r9
 8009754:	f000 fd5a 	bl	800a20c <memcpy>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800975e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	6126      	str	r6, [r4, #16]
 8009766:	6165      	str	r5, [r4, #20]
 8009768:	444e      	add	r6, r9
 800976a:	eba5 0509 	sub.w	r5, r5, r9
 800976e:	6026      	str	r6, [r4, #0]
 8009770:	60a5      	str	r5, [r4, #8]
 8009772:	463e      	mov	r6, r7
 8009774:	42be      	cmp	r6, r7
 8009776:	d900      	bls.n	800977a <__ssputs_r+0x72>
 8009778:	463e      	mov	r6, r7
 800977a:	6820      	ldr	r0, [r4, #0]
 800977c:	4632      	mov	r2, r6
 800977e:	4641      	mov	r1, r8
 8009780:	f000 fcf8 	bl	800a174 <memmove>
 8009784:	68a3      	ldr	r3, [r4, #8]
 8009786:	1b9b      	subs	r3, r3, r6
 8009788:	60a3      	str	r3, [r4, #8]
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	4433      	add	r3, r6
 800978e:	6023      	str	r3, [r4, #0]
 8009790:	2000      	movs	r0, #0
 8009792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009796:	462a      	mov	r2, r5
 8009798:	f000 fd46 	bl	800a228 <_realloc_r>
 800979c:	4606      	mov	r6, r0
 800979e:	2800      	cmp	r0, #0
 80097a0:	d1e0      	bne.n	8009764 <__ssputs_r+0x5c>
 80097a2:	6921      	ldr	r1, [r4, #16]
 80097a4:	4650      	mov	r0, sl
 80097a6:	f7ff feb7 	bl	8009518 <_free_r>
 80097aa:	230c      	movs	r3, #12
 80097ac:	f8ca 3000 	str.w	r3, [sl]
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097bc:	e7e9      	b.n	8009792 <__ssputs_r+0x8a>
	...

080097c0 <_svfiprintf_r>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	4698      	mov	r8, r3
 80097c6:	898b      	ldrh	r3, [r1, #12]
 80097c8:	061b      	lsls	r3, r3, #24
 80097ca:	b09d      	sub	sp, #116	@ 0x74
 80097cc:	4607      	mov	r7, r0
 80097ce:	460d      	mov	r5, r1
 80097d0:	4614      	mov	r4, r2
 80097d2:	d510      	bpl.n	80097f6 <_svfiprintf_r+0x36>
 80097d4:	690b      	ldr	r3, [r1, #16]
 80097d6:	b973      	cbnz	r3, 80097f6 <_svfiprintf_r+0x36>
 80097d8:	2140      	movs	r1, #64	@ 0x40
 80097da:	f7ff ff09 	bl	80095f0 <_malloc_r>
 80097de:	6028      	str	r0, [r5, #0]
 80097e0:	6128      	str	r0, [r5, #16]
 80097e2:	b930      	cbnz	r0, 80097f2 <_svfiprintf_r+0x32>
 80097e4:	230c      	movs	r3, #12
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097ec:	b01d      	add	sp, #116	@ 0x74
 80097ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f2:	2340      	movs	r3, #64	@ 0x40
 80097f4:	616b      	str	r3, [r5, #20]
 80097f6:	2300      	movs	r3, #0
 80097f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097fa:	2320      	movs	r3, #32
 80097fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009800:	f8cd 800c 	str.w	r8, [sp, #12]
 8009804:	2330      	movs	r3, #48	@ 0x30
 8009806:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099a4 <_svfiprintf_r+0x1e4>
 800980a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800980e:	f04f 0901 	mov.w	r9, #1
 8009812:	4623      	mov	r3, r4
 8009814:	469a      	mov	sl, r3
 8009816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800981a:	b10a      	cbz	r2, 8009820 <_svfiprintf_r+0x60>
 800981c:	2a25      	cmp	r2, #37	@ 0x25
 800981e:	d1f9      	bne.n	8009814 <_svfiprintf_r+0x54>
 8009820:	ebba 0b04 	subs.w	fp, sl, r4
 8009824:	d00b      	beq.n	800983e <_svfiprintf_r+0x7e>
 8009826:	465b      	mov	r3, fp
 8009828:	4622      	mov	r2, r4
 800982a:	4629      	mov	r1, r5
 800982c:	4638      	mov	r0, r7
 800982e:	f7ff ff6b 	bl	8009708 <__ssputs_r>
 8009832:	3001      	adds	r0, #1
 8009834:	f000 80a7 	beq.w	8009986 <_svfiprintf_r+0x1c6>
 8009838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800983a:	445a      	add	r2, fp
 800983c:	9209      	str	r2, [sp, #36]	@ 0x24
 800983e:	f89a 3000 	ldrb.w	r3, [sl]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 809f 	beq.w	8009986 <_svfiprintf_r+0x1c6>
 8009848:	2300      	movs	r3, #0
 800984a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800984e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009852:	f10a 0a01 	add.w	sl, sl, #1
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	9307      	str	r3, [sp, #28]
 800985a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800985e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009860:	4654      	mov	r4, sl
 8009862:	2205      	movs	r2, #5
 8009864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009868:	484e      	ldr	r0, [pc, #312]	@ (80099a4 <_svfiprintf_r+0x1e4>)
 800986a:	f7f6 fcd9 	bl	8000220 <memchr>
 800986e:	9a04      	ldr	r2, [sp, #16]
 8009870:	b9d8      	cbnz	r0, 80098aa <_svfiprintf_r+0xea>
 8009872:	06d0      	lsls	r0, r2, #27
 8009874:	bf44      	itt	mi
 8009876:	2320      	movmi	r3, #32
 8009878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800987c:	0711      	lsls	r1, r2, #28
 800987e:	bf44      	itt	mi
 8009880:	232b      	movmi	r3, #43	@ 0x2b
 8009882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009886:	f89a 3000 	ldrb.w	r3, [sl]
 800988a:	2b2a      	cmp	r3, #42	@ 0x2a
 800988c:	d015      	beq.n	80098ba <_svfiprintf_r+0xfa>
 800988e:	9a07      	ldr	r2, [sp, #28]
 8009890:	4654      	mov	r4, sl
 8009892:	2000      	movs	r0, #0
 8009894:	f04f 0c0a 	mov.w	ip, #10
 8009898:	4621      	mov	r1, r4
 800989a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800989e:	3b30      	subs	r3, #48	@ 0x30
 80098a0:	2b09      	cmp	r3, #9
 80098a2:	d94b      	bls.n	800993c <_svfiprintf_r+0x17c>
 80098a4:	b1b0      	cbz	r0, 80098d4 <_svfiprintf_r+0x114>
 80098a6:	9207      	str	r2, [sp, #28]
 80098a8:	e014      	b.n	80098d4 <_svfiprintf_r+0x114>
 80098aa:	eba0 0308 	sub.w	r3, r0, r8
 80098ae:	fa09 f303 	lsl.w	r3, r9, r3
 80098b2:	4313      	orrs	r3, r2
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	46a2      	mov	sl, r4
 80098b8:	e7d2      	b.n	8009860 <_svfiprintf_r+0xa0>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	1d19      	adds	r1, r3, #4
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	9103      	str	r1, [sp, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	bfbb      	ittet	lt
 80098c6:	425b      	neglt	r3, r3
 80098c8:	f042 0202 	orrlt.w	r2, r2, #2
 80098cc:	9307      	strge	r3, [sp, #28]
 80098ce:	9307      	strlt	r3, [sp, #28]
 80098d0:	bfb8      	it	lt
 80098d2:	9204      	strlt	r2, [sp, #16]
 80098d4:	7823      	ldrb	r3, [r4, #0]
 80098d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80098d8:	d10a      	bne.n	80098f0 <_svfiprintf_r+0x130>
 80098da:	7863      	ldrb	r3, [r4, #1]
 80098dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80098de:	d132      	bne.n	8009946 <_svfiprintf_r+0x186>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	1d1a      	adds	r2, r3, #4
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	9203      	str	r2, [sp, #12]
 80098e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098ec:	3402      	adds	r4, #2
 80098ee:	9305      	str	r3, [sp, #20]
 80098f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099b4 <_svfiprintf_r+0x1f4>
 80098f4:	7821      	ldrb	r1, [r4, #0]
 80098f6:	2203      	movs	r2, #3
 80098f8:	4650      	mov	r0, sl
 80098fa:	f7f6 fc91 	bl	8000220 <memchr>
 80098fe:	b138      	cbz	r0, 8009910 <_svfiprintf_r+0x150>
 8009900:	9b04      	ldr	r3, [sp, #16]
 8009902:	eba0 000a 	sub.w	r0, r0, sl
 8009906:	2240      	movs	r2, #64	@ 0x40
 8009908:	4082      	lsls	r2, r0
 800990a:	4313      	orrs	r3, r2
 800990c:	3401      	adds	r4, #1
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009914:	4824      	ldr	r0, [pc, #144]	@ (80099a8 <_svfiprintf_r+0x1e8>)
 8009916:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800991a:	2206      	movs	r2, #6
 800991c:	f7f6 fc80 	bl	8000220 <memchr>
 8009920:	2800      	cmp	r0, #0
 8009922:	d036      	beq.n	8009992 <_svfiprintf_r+0x1d2>
 8009924:	4b21      	ldr	r3, [pc, #132]	@ (80099ac <_svfiprintf_r+0x1ec>)
 8009926:	bb1b      	cbnz	r3, 8009970 <_svfiprintf_r+0x1b0>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	3307      	adds	r3, #7
 800992c:	f023 0307 	bic.w	r3, r3, #7
 8009930:	3308      	adds	r3, #8
 8009932:	9303      	str	r3, [sp, #12]
 8009934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009936:	4433      	add	r3, r6
 8009938:	9309      	str	r3, [sp, #36]	@ 0x24
 800993a:	e76a      	b.n	8009812 <_svfiprintf_r+0x52>
 800993c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009940:	460c      	mov	r4, r1
 8009942:	2001      	movs	r0, #1
 8009944:	e7a8      	b.n	8009898 <_svfiprintf_r+0xd8>
 8009946:	2300      	movs	r3, #0
 8009948:	3401      	adds	r4, #1
 800994a:	9305      	str	r3, [sp, #20]
 800994c:	4619      	mov	r1, r3
 800994e:	f04f 0c0a 	mov.w	ip, #10
 8009952:	4620      	mov	r0, r4
 8009954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009958:	3a30      	subs	r2, #48	@ 0x30
 800995a:	2a09      	cmp	r2, #9
 800995c:	d903      	bls.n	8009966 <_svfiprintf_r+0x1a6>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0c6      	beq.n	80098f0 <_svfiprintf_r+0x130>
 8009962:	9105      	str	r1, [sp, #20]
 8009964:	e7c4      	b.n	80098f0 <_svfiprintf_r+0x130>
 8009966:	fb0c 2101 	mla	r1, ip, r1, r2
 800996a:	4604      	mov	r4, r0
 800996c:	2301      	movs	r3, #1
 800996e:	e7f0      	b.n	8009952 <_svfiprintf_r+0x192>
 8009970:	ab03      	add	r3, sp, #12
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	462a      	mov	r2, r5
 8009976:	4b0e      	ldr	r3, [pc, #56]	@ (80099b0 <_svfiprintf_r+0x1f0>)
 8009978:	a904      	add	r1, sp, #16
 800997a:	4638      	mov	r0, r7
 800997c:	f3af 8000 	nop.w
 8009980:	1c42      	adds	r2, r0, #1
 8009982:	4606      	mov	r6, r0
 8009984:	d1d6      	bne.n	8009934 <_svfiprintf_r+0x174>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	065b      	lsls	r3, r3, #25
 800998a:	f53f af2d 	bmi.w	80097e8 <_svfiprintf_r+0x28>
 800998e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009990:	e72c      	b.n	80097ec <_svfiprintf_r+0x2c>
 8009992:	ab03      	add	r3, sp, #12
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	462a      	mov	r2, r5
 8009998:	4b05      	ldr	r3, [pc, #20]	@ (80099b0 <_svfiprintf_r+0x1f0>)
 800999a:	a904      	add	r1, sp, #16
 800999c:	4638      	mov	r0, r7
 800999e:	f000 f9bb 	bl	8009d18 <_printf_i>
 80099a2:	e7ed      	b.n	8009980 <_svfiprintf_r+0x1c0>
 80099a4:	0800a84c 	.word	0x0800a84c
 80099a8:	0800a856 	.word	0x0800a856
 80099ac:	00000000 	.word	0x00000000
 80099b0:	08009709 	.word	0x08009709
 80099b4:	0800a852 	.word	0x0800a852

080099b8 <__sfputc_r>:
 80099b8:	6893      	ldr	r3, [r2, #8]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	b410      	push	{r4}
 80099c0:	6093      	str	r3, [r2, #8]
 80099c2:	da08      	bge.n	80099d6 <__sfputc_r+0x1e>
 80099c4:	6994      	ldr	r4, [r2, #24]
 80099c6:	42a3      	cmp	r3, r4
 80099c8:	db01      	blt.n	80099ce <__sfputc_r+0x16>
 80099ca:	290a      	cmp	r1, #10
 80099cc:	d103      	bne.n	80099d6 <__sfputc_r+0x1e>
 80099ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d2:	f7ff bc90 	b.w	80092f6 <__swbuf_r>
 80099d6:	6813      	ldr	r3, [r2, #0]
 80099d8:	1c58      	adds	r0, r3, #1
 80099da:	6010      	str	r0, [r2, #0]
 80099dc:	7019      	strb	r1, [r3, #0]
 80099de:	4608      	mov	r0, r1
 80099e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <__sfputs_r>:
 80099e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e8:	4606      	mov	r6, r0
 80099ea:	460f      	mov	r7, r1
 80099ec:	4614      	mov	r4, r2
 80099ee:	18d5      	adds	r5, r2, r3
 80099f0:	42ac      	cmp	r4, r5
 80099f2:	d101      	bne.n	80099f8 <__sfputs_r+0x12>
 80099f4:	2000      	movs	r0, #0
 80099f6:	e007      	b.n	8009a08 <__sfputs_r+0x22>
 80099f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fc:	463a      	mov	r2, r7
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7ff ffda 	bl	80099b8 <__sfputc_r>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d1f3      	bne.n	80099f0 <__sfputs_r+0xa>
 8009a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a0c <_vfiprintf_r>:
 8009a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	460d      	mov	r5, r1
 8009a12:	b09d      	sub	sp, #116	@ 0x74
 8009a14:	4614      	mov	r4, r2
 8009a16:	4698      	mov	r8, r3
 8009a18:	4606      	mov	r6, r0
 8009a1a:	b118      	cbz	r0, 8009a24 <_vfiprintf_r+0x18>
 8009a1c:	6a03      	ldr	r3, [r0, #32]
 8009a1e:	b90b      	cbnz	r3, 8009a24 <_vfiprintf_r+0x18>
 8009a20:	f7ff fb4c 	bl	80090bc <__sinit>
 8009a24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a26:	07d9      	lsls	r1, r3, #31
 8009a28:	d405      	bmi.n	8009a36 <_vfiprintf_r+0x2a>
 8009a2a:	89ab      	ldrh	r3, [r5, #12]
 8009a2c:	059a      	lsls	r2, r3, #22
 8009a2e:	d402      	bmi.n	8009a36 <_vfiprintf_r+0x2a>
 8009a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a32:	f7ff fd6e 	bl	8009512 <__retarget_lock_acquire_recursive>
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	071b      	lsls	r3, r3, #28
 8009a3a:	d501      	bpl.n	8009a40 <_vfiprintf_r+0x34>
 8009a3c:	692b      	ldr	r3, [r5, #16]
 8009a3e:	b99b      	cbnz	r3, 8009a68 <_vfiprintf_r+0x5c>
 8009a40:	4629      	mov	r1, r5
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff fc96 	bl	8009374 <__swsetup_r>
 8009a48:	b170      	cbz	r0, 8009a68 <_vfiprintf_r+0x5c>
 8009a4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a4c:	07dc      	lsls	r4, r3, #31
 8009a4e:	d504      	bpl.n	8009a5a <_vfiprintf_r+0x4e>
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a54:	b01d      	add	sp, #116	@ 0x74
 8009a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	0598      	lsls	r0, r3, #22
 8009a5e:	d4f7      	bmi.n	8009a50 <_vfiprintf_r+0x44>
 8009a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a62:	f7ff fd57 	bl	8009514 <__retarget_lock_release_recursive>
 8009a66:	e7f3      	b.n	8009a50 <_vfiprintf_r+0x44>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a76:	2330      	movs	r3, #48	@ 0x30
 8009a78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c28 <_vfiprintf_r+0x21c>
 8009a7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a80:	f04f 0901 	mov.w	r9, #1
 8009a84:	4623      	mov	r3, r4
 8009a86:	469a      	mov	sl, r3
 8009a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a8c:	b10a      	cbz	r2, 8009a92 <_vfiprintf_r+0x86>
 8009a8e:	2a25      	cmp	r2, #37	@ 0x25
 8009a90:	d1f9      	bne.n	8009a86 <_vfiprintf_r+0x7a>
 8009a92:	ebba 0b04 	subs.w	fp, sl, r4
 8009a96:	d00b      	beq.n	8009ab0 <_vfiprintf_r+0xa4>
 8009a98:	465b      	mov	r3, fp
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7ff ffa1 	bl	80099e6 <__sfputs_r>
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	f000 80a7 	beq.w	8009bf8 <_vfiprintf_r+0x1ec>
 8009aaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aac:	445a      	add	r2, fp
 8009aae:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 809f 	beq.w	8009bf8 <_vfiprintf_r+0x1ec>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ac4:	f10a 0a01 	add.w	sl, sl, #1
 8009ac8:	9304      	str	r3, [sp, #16]
 8009aca:	9307      	str	r3, [sp, #28]
 8009acc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ad0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ad2:	4654      	mov	r4, sl
 8009ad4:	2205      	movs	r2, #5
 8009ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ada:	4853      	ldr	r0, [pc, #332]	@ (8009c28 <_vfiprintf_r+0x21c>)
 8009adc:	f7f6 fba0 	bl	8000220 <memchr>
 8009ae0:	9a04      	ldr	r2, [sp, #16]
 8009ae2:	b9d8      	cbnz	r0, 8009b1c <_vfiprintf_r+0x110>
 8009ae4:	06d1      	lsls	r1, r2, #27
 8009ae6:	bf44      	itt	mi
 8009ae8:	2320      	movmi	r3, #32
 8009aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aee:	0713      	lsls	r3, r2, #28
 8009af0:	bf44      	itt	mi
 8009af2:	232b      	movmi	r3, #43	@ 0x2b
 8009af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009af8:	f89a 3000 	ldrb.w	r3, [sl]
 8009afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009afe:	d015      	beq.n	8009b2c <_vfiprintf_r+0x120>
 8009b00:	9a07      	ldr	r2, [sp, #28]
 8009b02:	4654      	mov	r4, sl
 8009b04:	2000      	movs	r0, #0
 8009b06:	f04f 0c0a 	mov.w	ip, #10
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b10:	3b30      	subs	r3, #48	@ 0x30
 8009b12:	2b09      	cmp	r3, #9
 8009b14:	d94b      	bls.n	8009bae <_vfiprintf_r+0x1a2>
 8009b16:	b1b0      	cbz	r0, 8009b46 <_vfiprintf_r+0x13a>
 8009b18:	9207      	str	r2, [sp, #28]
 8009b1a:	e014      	b.n	8009b46 <_vfiprintf_r+0x13a>
 8009b1c:	eba0 0308 	sub.w	r3, r0, r8
 8009b20:	fa09 f303 	lsl.w	r3, r9, r3
 8009b24:	4313      	orrs	r3, r2
 8009b26:	9304      	str	r3, [sp, #16]
 8009b28:	46a2      	mov	sl, r4
 8009b2a:	e7d2      	b.n	8009ad2 <_vfiprintf_r+0xc6>
 8009b2c:	9b03      	ldr	r3, [sp, #12]
 8009b2e:	1d19      	adds	r1, r3, #4
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	9103      	str	r1, [sp, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	bfbb      	ittet	lt
 8009b38:	425b      	neglt	r3, r3
 8009b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b3e:	9307      	strge	r3, [sp, #28]
 8009b40:	9307      	strlt	r3, [sp, #28]
 8009b42:	bfb8      	it	lt
 8009b44:	9204      	strlt	r2, [sp, #16]
 8009b46:	7823      	ldrb	r3, [r4, #0]
 8009b48:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b4a:	d10a      	bne.n	8009b62 <_vfiprintf_r+0x156>
 8009b4c:	7863      	ldrb	r3, [r4, #1]
 8009b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b50:	d132      	bne.n	8009bb8 <_vfiprintf_r+0x1ac>
 8009b52:	9b03      	ldr	r3, [sp, #12]
 8009b54:	1d1a      	adds	r2, r3, #4
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	9203      	str	r2, [sp, #12]
 8009b5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b5e:	3402      	adds	r4, #2
 8009b60:	9305      	str	r3, [sp, #20]
 8009b62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c38 <_vfiprintf_r+0x22c>
 8009b66:	7821      	ldrb	r1, [r4, #0]
 8009b68:	2203      	movs	r2, #3
 8009b6a:	4650      	mov	r0, sl
 8009b6c:	f7f6 fb58 	bl	8000220 <memchr>
 8009b70:	b138      	cbz	r0, 8009b82 <_vfiprintf_r+0x176>
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	eba0 000a 	sub.w	r0, r0, sl
 8009b78:	2240      	movs	r2, #64	@ 0x40
 8009b7a:	4082      	lsls	r2, r0
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	3401      	adds	r4, #1
 8009b80:	9304      	str	r3, [sp, #16]
 8009b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b86:	4829      	ldr	r0, [pc, #164]	@ (8009c2c <_vfiprintf_r+0x220>)
 8009b88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b8c:	2206      	movs	r2, #6
 8009b8e:	f7f6 fb47 	bl	8000220 <memchr>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d03f      	beq.n	8009c16 <_vfiprintf_r+0x20a>
 8009b96:	4b26      	ldr	r3, [pc, #152]	@ (8009c30 <_vfiprintf_r+0x224>)
 8009b98:	bb1b      	cbnz	r3, 8009be2 <_vfiprintf_r+0x1d6>
 8009b9a:	9b03      	ldr	r3, [sp, #12]
 8009b9c:	3307      	adds	r3, #7
 8009b9e:	f023 0307 	bic.w	r3, r3, #7
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	9303      	str	r3, [sp, #12]
 8009ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba8:	443b      	add	r3, r7
 8009baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bac:	e76a      	b.n	8009a84 <_vfiprintf_r+0x78>
 8009bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	2001      	movs	r0, #1
 8009bb6:	e7a8      	b.n	8009b0a <_vfiprintf_r+0xfe>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	3401      	adds	r4, #1
 8009bbc:	9305      	str	r3, [sp, #20]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	f04f 0c0a 	mov.w	ip, #10
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bca:	3a30      	subs	r2, #48	@ 0x30
 8009bcc:	2a09      	cmp	r2, #9
 8009bce:	d903      	bls.n	8009bd8 <_vfiprintf_r+0x1cc>
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d0c6      	beq.n	8009b62 <_vfiprintf_r+0x156>
 8009bd4:	9105      	str	r1, [sp, #20]
 8009bd6:	e7c4      	b.n	8009b62 <_vfiprintf_r+0x156>
 8009bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bdc:	4604      	mov	r4, r0
 8009bde:	2301      	movs	r3, #1
 8009be0:	e7f0      	b.n	8009bc4 <_vfiprintf_r+0x1b8>
 8009be2:	ab03      	add	r3, sp, #12
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	462a      	mov	r2, r5
 8009be8:	4b12      	ldr	r3, [pc, #72]	@ (8009c34 <_vfiprintf_r+0x228>)
 8009bea:	a904      	add	r1, sp, #16
 8009bec:	4630      	mov	r0, r6
 8009bee:	f3af 8000 	nop.w
 8009bf2:	4607      	mov	r7, r0
 8009bf4:	1c78      	adds	r0, r7, #1
 8009bf6:	d1d6      	bne.n	8009ba6 <_vfiprintf_r+0x19a>
 8009bf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bfa:	07d9      	lsls	r1, r3, #31
 8009bfc:	d405      	bmi.n	8009c0a <_vfiprintf_r+0x1fe>
 8009bfe:	89ab      	ldrh	r3, [r5, #12]
 8009c00:	059a      	lsls	r2, r3, #22
 8009c02:	d402      	bmi.n	8009c0a <_vfiprintf_r+0x1fe>
 8009c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c06:	f7ff fc85 	bl	8009514 <__retarget_lock_release_recursive>
 8009c0a:	89ab      	ldrh	r3, [r5, #12]
 8009c0c:	065b      	lsls	r3, r3, #25
 8009c0e:	f53f af1f 	bmi.w	8009a50 <_vfiprintf_r+0x44>
 8009c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c14:	e71e      	b.n	8009a54 <_vfiprintf_r+0x48>
 8009c16:	ab03      	add	r3, sp, #12
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	4b05      	ldr	r3, [pc, #20]	@ (8009c34 <_vfiprintf_r+0x228>)
 8009c1e:	a904      	add	r1, sp, #16
 8009c20:	4630      	mov	r0, r6
 8009c22:	f000 f879 	bl	8009d18 <_printf_i>
 8009c26:	e7e4      	b.n	8009bf2 <_vfiprintf_r+0x1e6>
 8009c28:	0800a84c 	.word	0x0800a84c
 8009c2c:	0800a856 	.word	0x0800a856
 8009c30:	00000000 	.word	0x00000000
 8009c34:	080099e7 	.word	0x080099e7
 8009c38:	0800a852 	.word	0x0800a852

08009c3c <_printf_common>:
 8009c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	4616      	mov	r6, r2
 8009c42:	4698      	mov	r8, r3
 8009c44:	688a      	ldr	r2, [r1, #8]
 8009c46:	690b      	ldr	r3, [r1, #16]
 8009c48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	bfb8      	it	lt
 8009c50:	4613      	movlt	r3, r2
 8009c52:	6033      	str	r3, [r6, #0]
 8009c54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c58:	4607      	mov	r7, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	b10a      	cbz	r2, 8009c62 <_printf_common+0x26>
 8009c5e:	3301      	adds	r3, #1
 8009c60:	6033      	str	r3, [r6, #0]
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	0699      	lsls	r1, r3, #26
 8009c66:	bf42      	ittt	mi
 8009c68:	6833      	ldrmi	r3, [r6, #0]
 8009c6a:	3302      	addmi	r3, #2
 8009c6c:	6033      	strmi	r3, [r6, #0]
 8009c6e:	6825      	ldr	r5, [r4, #0]
 8009c70:	f015 0506 	ands.w	r5, r5, #6
 8009c74:	d106      	bne.n	8009c84 <_printf_common+0x48>
 8009c76:	f104 0a19 	add.w	sl, r4, #25
 8009c7a:	68e3      	ldr	r3, [r4, #12]
 8009c7c:	6832      	ldr	r2, [r6, #0]
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	dc26      	bgt.n	8009cd2 <_printf_common+0x96>
 8009c84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c88:	6822      	ldr	r2, [r4, #0]
 8009c8a:	3b00      	subs	r3, #0
 8009c8c:	bf18      	it	ne
 8009c8e:	2301      	movne	r3, #1
 8009c90:	0692      	lsls	r2, r2, #26
 8009c92:	d42b      	bmi.n	8009cec <_printf_common+0xb0>
 8009c94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c98:	4641      	mov	r1, r8
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	47c8      	blx	r9
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	d01e      	beq.n	8009ce0 <_printf_common+0xa4>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	6922      	ldr	r2, [r4, #16]
 8009ca6:	f003 0306 	and.w	r3, r3, #6
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	bf02      	ittt	eq
 8009cae:	68e5      	ldreq	r5, [r4, #12]
 8009cb0:	6833      	ldreq	r3, [r6, #0]
 8009cb2:	1aed      	subeq	r5, r5, r3
 8009cb4:	68a3      	ldr	r3, [r4, #8]
 8009cb6:	bf0c      	ite	eq
 8009cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cbc:	2500      	movne	r5, #0
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	bfc4      	itt	gt
 8009cc2:	1a9b      	subgt	r3, r3, r2
 8009cc4:	18ed      	addgt	r5, r5, r3
 8009cc6:	2600      	movs	r6, #0
 8009cc8:	341a      	adds	r4, #26
 8009cca:	42b5      	cmp	r5, r6
 8009ccc:	d11a      	bne.n	8009d04 <_printf_common+0xc8>
 8009cce:	2000      	movs	r0, #0
 8009cd0:	e008      	b.n	8009ce4 <_printf_common+0xa8>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	4641      	mov	r1, r8
 8009cd8:	4638      	mov	r0, r7
 8009cda:	47c8      	blx	r9
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d103      	bne.n	8009ce8 <_printf_common+0xac>
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce8:	3501      	adds	r5, #1
 8009cea:	e7c6      	b.n	8009c7a <_printf_common+0x3e>
 8009cec:	18e1      	adds	r1, r4, r3
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	2030      	movs	r0, #48	@ 0x30
 8009cf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cf6:	4422      	add	r2, r4
 8009cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d00:	3302      	adds	r3, #2
 8009d02:	e7c7      	b.n	8009c94 <_printf_common+0x58>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4622      	mov	r2, r4
 8009d08:	4641      	mov	r1, r8
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	47c8      	blx	r9
 8009d0e:	3001      	adds	r0, #1
 8009d10:	d0e6      	beq.n	8009ce0 <_printf_common+0xa4>
 8009d12:	3601      	adds	r6, #1
 8009d14:	e7d9      	b.n	8009cca <_printf_common+0x8e>
	...

08009d18 <_printf_i>:
 8009d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	7e0f      	ldrb	r7, [r1, #24]
 8009d1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d20:	2f78      	cmp	r7, #120	@ 0x78
 8009d22:	4691      	mov	r9, r2
 8009d24:	4680      	mov	r8, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	469a      	mov	sl, r3
 8009d2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d2e:	d807      	bhi.n	8009d40 <_printf_i+0x28>
 8009d30:	2f62      	cmp	r7, #98	@ 0x62
 8009d32:	d80a      	bhi.n	8009d4a <_printf_i+0x32>
 8009d34:	2f00      	cmp	r7, #0
 8009d36:	f000 80d2 	beq.w	8009ede <_printf_i+0x1c6>
 8009d3a:	2f58      	cmp	r7, #88	@ 0x58
 8009d3c:	f000 80b9 	beq.w	8009eb2 <_printf_i+0x19a>
 8009d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d48:	e03a      	b.n	8009dc0 <_printf_i+0xa8>
 8009d4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d4e:	2b15      	cmp	r3, #21
 8009d50:	d8f6      	bhi.n	8009d40 <_printf_i+0x28>
 8009d52:	a101      	add	r1, pc, #4	@ (adr r1, 8009d58 <_printf_i+0x40>)
 8009d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d58:	08009db1 	.word	0x08009db1
 8009d5c:	08009dc5 	.word	0x08009dc5
 8009d60:	08009d41 	.word	0x08009d41
 8009d64:	08009d41 	.word	0x08009d41
 8009d68:	08009d41 	.word	0x08009d41
 8009d6c:	08009d41 	.word	0x08009d41
 8009d70:	08009dc5 	.word	0x08009dc5
 8009d74:	08009d41 	.word	0x08009d41
 8009d78:	08009d41 	.word	0x08009d41
 8009d7c:	08009d41 	.word	0x08009d41
 8009d80:	08009d41 	.word	0x08009d41
 8009d84:	08009ec5 	.word	0x08009ec5
 8009d88:	08009def 	.word	0x08009def
 8009d8c:	08009e7f 	.word	0x08009e7f
 8009d90:	08009d41 	.word	0x08009d41
 8009d94:	08009d41 	.word	0x08009d41
 8009d98:	08009ee7 	.word	0x08009ee7
 8009d9c:	08009d41 	.word	0x08009d41
 8009da0:	08009def 	.word	0x08009def
 8009da4:	08009d41 	.word	0x08009d41
 8009da8:	08009d41 	.word	0x08009d41
 8009dac:	08009e87 	.word	0x08009e87
 8009db0:	6833      	ldr	r3, [r6, #0]
 8009db2:	1d1a      	adds	r2, r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6032      	str	r2, [r6, #0]
 8009db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e09d      	b.n	8009f00 <_printf_i+0x1e8>
 8009dc4:	6833      	ldr	r3, [r6, #0]
 8009dc6:	6820      	ldr	r0, [r4, #0]
 8009dc8:	1d19      	adds	r1, r3, #4
 8009dca:	6031      	str	r1, [r6, #0]
 8009dcc:	0606      	lsls	r6, r0, #24
 8009dce:	d501      	bpl.n	8009dd4 <_printf_i+0xbc>
 8009dd0:	681d      	ldr	r5, [r3, #0]
 8009dd2:	e003      	b.n	8009ddc <_printf_i+0xc4>
 8009dd4:	0645      	lsls	r5, r0, #25
 8009dd6:	d5fb      	bpl.n	8009dd0 <_printf_i+0xb8>
 8009dd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ddc:	2d00      	cmp	r5, #0
 8009dde:	da03      	bge.n	8009de8 <_printf_i+0xd0>
 8009de0:	232d      	movs	r3, #45	@ 0x2d
 8009de2:	426d      	negs	r5, r5
 8009de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009de8:	4859      	ldr	r0, [pc, #356]	@ (8009f50 <_printf_i+0x238>)
 8009dea:	230a      	movs	r3, #10
 8009dec:	e011      	b.n	8009e12 <_printf_i+0xfa>
 8009dee:	6821      	ldr	r1, [r4, #0]
 8009df0:	6833      	ldr	r3, [r6, #0]
 8009df2:	0608      	lsls	r0, r1, #24
 8009df4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009df8:	d402      	bmi.n	8009e00 <_printf_i+0xe8>
 8009dfa:	0649      	lsls	r1, r1, #25
 8009dfc:	bf48      	it	mi
 8009dfe:	b2ad      	uxthmi	r5, r5
 8009e00:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e02:	4853      	ldr	r0, [pc, #332]	@ (8009f50 <_printf_i+0x238>)
 8009e04:	6033      	str	r3, [r6, #0]
 8009e06:	bf14      	ite	ne
 8009e08:	230a      	movne	r3, #10
 8009e0a:	2308      	moveq	r3, #8
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e12:	6866      	ldr	r6, [r4, #4]
 8009e14:	60a6      	str	r6, [r4, #8]
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	bfa2      	ittt	ge
 8009e1a:	6821      	ldrge	r1, [r4, #0]
 8009e1c:	f021 0104 	bicge.w	r1, r1, #4
 8009e20:	6021      	strge	r1, [r4, #0]
 8009e22:	b90d      	cbnz	r5, 8009e28 <_printf_i+0x110>
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	d04b      	beq.n	8009ec0 <_printf_i+0x1a8>
 8009e28:	4616      	mov	r6, r2
 8009e2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e2e:	fb03 5711 	mls	r7, r3, r1, r5
 8009e32:	5dc7      	ldrb	r7, [r0, r7]
 8009e34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e38:	462f      	mov	r7, r5
 8009e3a:	42bb      	cmp	r3, r7
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	d9f4      	bls.n	8009e2a <_printf_i+0x112>
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	d10b      	bne.n	8009e5c <_printf_i+0x144>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	07df      	lsls	r7, r3, #31
 8009e48:	d508      	bpl.n	8009e5c <_printf_i+0x144>
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	6861      	ldr	r1, [r4, #4]
 8009e4e:	4299      	cmp	r1, r3
 8009e50:	bfde      	ittt	le
 8009e52:	2330      	movle	r3, #48	@ 0x30
 8009e54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009e5c:	1b92      	subs	r2, r2, r6
 8009e5e:	6122      	str	r2, [r4, #16]
 8009e60:	f8cd a000 	str.w	sl, [sp]
 8009e64:	464b      	mov	r3, r9
 8009e66:	aa03      	add	r2, sp, #12
 8009e68:	4621      	mov	r1, r4
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	f7ff fee6 	bl	8009c3c <_printf_common>
 8009e70:	3001      	adds	r0, #1
 8009e72:	d14a      	bne.n	8009f0a <_printf_i+0x1f2>
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e78:	b004      	add	sp, #16
 8009e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	f043 0320 	orr.w	r3, r3, #32
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	4833      	ldr	r0, [pc, #204]	@ (8009f54 <_printf_i+0x23c>)
 8009e88:	2778      	movs	r7, #120	@ 0x78
 8009e8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	6831      	ldr	r1, [r6, #0]
 8009e92:	061f      	lsls	r7, r3, #24
 8009e94:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e98:	d402      	bmi.n	8009ea0 <_printf_i+0x188>
 8009e9a:	065f      	lsls	r7, r3, #25
 8009e9c:	bf48      	it	mi
 8009e9e:	b2ad      	uxthmi	r5, r5
 8009ea0:	6031      	str	r1, [r6, #0]
 8009ea2:	07d9      	lsls	r1, r3, #31
 8009ea4:	bf44      	itt	mi
 8009ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8009eaa:	6023      	strmi	r3, [r4, #0]
 8009eac:	b11d      	cbz	r5, 8009eb6 <_printf_i+0x19e>
 8009eae:	2310      	movs	r3, #16
 8009eb0:	e7ac      	b.n	8009e0c <_printf_i+0xf4>
 8009eb2:	4827      	ldr	r0, [pc, #156]	@ (8009f50 <_printf_i+0x238>)
 8009eb4:	e7e9      	b.n	8009e8a <_printf_i+0x172>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	f023 0320 	bic.w	r3, r3, #32
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	e7f6      	b.n	8009eae <_printf_i+0x196>
 8009ec0:	4616      	mov	r6, r2
 8009ec2:	e7bd      	b.n	8009e40 <_printf_i+0x128>
 8009ec4:	6833      	ldr	r3, [r6, #0]
 8009ec6:	6825      	ldr	r5, [r4, #0]
 8009ec8:	6961      	ldr	r1, [r4, #20]
 8009eca:	1d18      	adds	r0, r3, #4
 8009ecc:	6030      	str	r0, [r6, #0]
 8009ece:	062e      	lsls	r6, r5, #24
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	d501      	bpl.n	8009ed8 <_printf_i+0x1c0>
 8009ed4:	6019      	str	r1, [r3, #0]
 8009ed6:	e002      	b.n	8009ede <_printf_i+0x1c6>
 8009ed8:	0668      	lsls	r0, r5, #25
 8009eda:	d5fb      	bpl.n	8009ed4 <_printf_i+0x1bc>
 8009edc:	8019      	strh	r1, [r3, #0]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	6123      	str	r3, [r4, #16]
 8009ee2:	4616      	mov	r6, r2
 8009ee4:	e7bc      	b.n	8009e60 <_printf_i+0x148>
 8009ee6:	6833      	ldr	r3, [r6, #0]
 8009ee8:	1d1a      	adds	r2, r3, #4
 8009eea:	6032      	str	r2, [r6, #0]
 8009eec:	681e      	ldr	r6, [r3, #0]
 8009eee:	6862      	ldr	r2, [r4, #4]
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7f6 f994 	bl	8000220 <memchr>
 8009ef8:	b108      	cbz	r0, 8009efe <_printf_i+0x1e6>
 8009efa:	1b80      	subs	r0, r0, r6
 8009efc:	6060      	str	r0, [r4, #4]
 8009efe:	6863      	ldr	r3, [r4, #4]
 8009f00:	6123      	str	r3, [r4, #16]
 8009f02:	2300      	movs	r3, #0
 8009f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f08:	e7aa      	b.n	8009e60 <_printf_i+0x148>
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	4649      	mov	r1, r9
 8009f10:	4640      	mov	r0, r8
 8009f12:	47d0      	blx	sl
 8009f14:	3001      	adds	r0, #1
 8009f16:	d0ad      	beq.n	8009e74 <_printf_i+0x15c>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	079b      	lsls	r3, r3, #30
 8009f1c:	d413      	bmi.n	8009f46 <_printf_i+0x22e>
 8009f1e:	68e0      	ldr	r0, [r4, #12]
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	4298      	cmp	r0, r3
 8009f24:	bfb8      	it	lt
 8009f26:	4618      	movlt	r0, r3
 8009f28:	e7a6      	b.n	8009e78 <_printf_i+0x160>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	4649      	mov	r1, r9
 8009f30:	4640      	mov	r0, r8
 8009f32:	47d0      	blx	sl
 8009f34:	3001      	adds	r0, #1
 8009f36:	d09d      	beq.n	8009e74 <_printf_i+0x15c>
 8009f38:	3501      	adds	r5, #1
 8009f3a:	68e3      	ldr	r3, [r4, #12]
 8009f3c:	9903      	ldr	r1, [sp, #12]
 8009f3e:	1a5b      	subs	r3, r3, r1
 8009f40:	42ab      	cmp	r3, r5
 8009f42:	dcf2      	bgt.n	8009f2a <_printf_i+0x212>
 8009f44:	e7eb      	b.n	8009f1e <_printf_i+0x206>
 8009f46:	2500      	movs	r5, #0
 8009f48:	f104 0619 	add.w	r6, r4, #25
 8009f4c:	e7f5      	b.n	8009f3a <_printf_i+0x222>
 8009f4e:	bf00      	nop
 8009f50:	0800a85d 	.word	0x0800a85d
 8009f54:	0800a86e 	.word	0x0800a86e

08009f58 <__sflush_r>:
 8009f58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f60:	0716      	lsls	r6, r2, #28
 8009f62:	4605      	mov	r5, r0
 8009f64:	460c      	mov	r4, r1
 8009f66:	d454      	bmi.n	800a012 <__sflush_r+0xba>
 8009f68:	684b      	ldr	r3, [r1, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	dc02      	bgt.n	8009f74 <__sflush_r+0x1c>
 8009f6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	dd48      	ble.n	800a006 <__sflush_r+0xae>
 8009f74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f76:	2e00      	cmp	r6, #0
 8009f78:	d045      	beq.n	800a006 <__sflush_r+0xae>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f80:	682f      	ldr	r7, [r5, #0]
 8009f82:	6a21      	ldr	r1, [r4, #32]
 8009f84:	602b      	str	r3, [r5, #0]
 8009f86:	d030      	beq.n	8009fea <__sflush_r+0x92>
 8009f88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	0759      	lsls	r1, r3, #29
 8009f8e:	d505      	bpl.n	8009f9c <__sflush_r+0x44>
 8009f90:	6863      	ldr	r3, [r4, #4]
 8009f92:	1ad2      	subs	r2, r2, r3
 8009f94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f96:	b10b      	cbz	r3, 8009f9c <__sflush_r+0x44>
 8009f98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f9a:	1ad2      	subs	r2, r2, r3
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fa0:	6a21      	ldr	r1, [r4, #32]
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	47b0      	blx	r6
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	d106      	bne.n	8009fba <__sflush_r+0x62>
 8009fac:	6829      	ldr	r1, [r5, #0]
 8009fae:	291d      	cmp	r1, #29
 8009fb0:	d82b      	bhi.n	800a00a <__sflush_r+0xb2>
 8009fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800a05c <__sflush_r+0x104>)
 8009fb4:	410a      	asrs	r2, r1
 8009fb6:	07d6      	lsls	r6, r2, #31
 8009fb8:	d427      	bmi.n	800a00a <__sflush_r+0xb2>
 8009fba:	2200      	movs	r2, #0
 8009fbc:	6062      	str	r2, [r4, #4]
 8009fbe:	04d9      	lsls	r1, r3, #19
 8009fc0:	6922      	ldr	r2, [r4, #16]
 8009fc2:	6022      	str	r2, [r4, #0]
 8009fc4:	d504      	bpl.n	8009fd0 <__sflush_r+0x78>
 8009fc6:	1c42      	adds	r2, r0, #1
 8009fc8:	d101      	bne.n	8009fce <__sflush_r+0x76>
 8009fca:	682b      	ldr	r3, [r5, #0]
 8009fcc:	b903      	cbnz	r3, 8009fd0 <__sflush_r+0x78>
 8009fce:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fd2:	602f      	str	r7, [r5, #0]
 8009fd4:	b1b9      	cbz	r1, 800a006 <__sflush_r+0xae>
 8009fd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fda:	4299      	cmp	r1, r3
 8009fdc:	d002      	beq.n	8009fe4 <__sflush_r+0x8c>
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f7ff fa9a 	bl	8009518 <_free_r>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fe8:	e00d      	b.n	800a006 <__sflush_r+0xae>
 8009fea:	2301      	movs	r3, #1
 8009fec:	4628      	mov	r0, r5
 8009fee:	47b0      	blx	r6
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	1c50      	adds	r0, r2, #1
 8009ff4:	d1c9      	bne.n	8009f8a <__sflush_r+0x32>
 8009ff6:	682b      	ldr	r3, [r5, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0c6      	beq.n	8009f8a <__sflush_r+0x32>
 8009ffc:	2b1d      	cmp	r3, #29
 8009ffe:	d001      	beq.n	800a004 <__sflush_r+0xac>
 800a000:	2b16      	cmp	r3, #22
 800a002:	d11e      	bne.n	800a042 <__sflush_r+0xea>
 800a004:	602f      	str	r7, [r5, #0]
 800a006:	2000      	movs	r0, #0
 800a008:	e022      	b.n	800a050 <__sflush_r+0xf8>
 800a00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a00e:	b21b      	sxth	r3, r3
 800a010:	e01b      	b.n	800a04a <__sflush_r+0xf2>
 800a012:	690f      	ldr	r7, [r1, #16]
 800a014:	2f00      	cmp	r7, #0
 800a016:	d0f6      	beq.n	800a006 <__sflush_r+0xae>
 800a018:	0793      	lsls	r3, r2, #30
 800a01a:	680e      	ldr	r6, [r1, #0]
 800a01c:	bf08      	it	eq
 800a01e:	694b      	ldreq	r3, [r1, #20]
 800a020:	600f      	str	r7, [r1, #0]
 800a022:	bf18      	it	ne
 800a024:	2300      	movne	r3, #0
 800a026:	eba6 0807 	sub.w	r8, r6, r7
 800a02a:	608b      	str	r3, [r1, #8]
 800a02c:	f1b8 0f00 	cmp.w	r8, #0
 800a030:	dde9      	ble.n	800a006 <__sflush_r+0xae>
 800a032:	6a21      	ldr	r1, [r4, #32]
 800a034:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a036:	4643      	mov	r3, r8
 800a038:	463a      	mov	r2, r7
 800a03a:	4628      	mov	r0, r5
 800a03c:	47b0      	blx	r6
 800a03e:	2800      	cmp	r0, #0
 800a040:	dc08      	bgt.n	800a054 <__sflush_r+0xfc>
 800a042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a054:	4407      	add	r7, r0
 800a056:	eba8 0800 	sub.w	r8, r8, r0
 800a05a:	e7e7      	b.n	800a02c <__sflush_r+0xd4>
 800a05c:	dfbffffe 	.word	0xdfbffffe

0800a060 <_fflush_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	690b      	ldr	r3, [r1, #16]
 800a064:	4605      	mov	r5, r0
 800a066:	460c      	mov	r4, r1
 800a068:	b913      	cbnz	r3, 800a070 <_fflush_r+0x10>
 800a06a:	2500      	movs	r5, #0
 800a06c:	4628      	mov	r0, r5
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	b118      	cbz	r0, 800a07a <_fflush_r+0x1a>
 800a072:	6a03      	ldr	r3, [r0, #32]
 800a074:	b90b      	cbnz	r3, 800a07a <_fflush_r+0x1a>
 800a076:	f7ff f821 	bl	80090bc <__sinit>
 800a07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0f3      	beq.n	800a06a <_fflush_r+0xa>
 800a082:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a084:	07d0      	lsls	r0, r2, #31
 800a086:	d404      	bmi.n	800a092 <_fflush_r+0x32>
 800a088:	0599      	lsls	r1, r3, #22
 800a08a:	d402      	bmi.n	800a092 <_fflush_r+0x32>
 800a08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a08e:	f7ff fa40 	bl	8009512 <__retarget_lock_acquire_recursive>
 800a092:	4628      	mov	r0, r5
 800a094:	4621      	mov	r1, r4
 800a096:	f7ff ff5f 	bl	8009f58 <__sflush_r>
 800a09a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a09c:	07da      	lsls	r2, r3, #31
 800a09e:	4605      	mov	r5, r0
 800a0a0:	d4e4      	bmi.n	800a06c <_fflush_r+0xc>
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	059b      	lsls	r3, r3, #22
 800a0a6:	d4e1      	bmi.n	800a06c <_fflush_r+0xc>
 800a0a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0aa:	f7ff fa33 	bl	8009514 <__retarget_lock_release_recursive>
 800a0ae:	e7dd      	b.n	800a06c <_fflush_r+0xc>

0800a0b0 <__swhatbuf_r>:
 800a0b0:	b570      	push	{r4, r5, r6, lr}
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b8:	2900      	cmp	r1, #0
 800a0ba:	b096      	sub	sp, #88	@ 0x58
 800a0bc:	4615      	mov	r5, r2
 800a0be:	461e      	mov	r6, r3
 800a0c0:	da0d      	bge.n	800a0de <__swhatbuf_r+0x2e>
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0c8:	f04f 0100 	mov.w	r1, #0
 800a0cc:	bf14      	ite	ne
 800a0ce:	2340      	movne	r3, #64	@ 0x40
 800a0d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	6031      	str	r1, [r6, #0]
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	b016      	add	sp, #88	@ 0x58
 800a0dc:	bd70      	pop	{r4, r5, r6, pc}
 800a0de:	466a      	mov	r2, sp
 800a0e0:	f000 f862 	bl	800a1a8 <_fstat_r>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	dbec      	blt.n	800a0c2 <__swhatbuf_r+0x12>
 800a0e8:	9901      	ldr	r1, [sp, #4]
 800a0ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a0ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a0f2:	4259      	negs	r1, r3
 800a0f4:	4159      	adcs	r1, r3
 800a0f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0fa:	e7eb      	b.n	800a0d4 <__swhatbuf_r+0x24>

0800a0fc <__smakebuf_r>:
 800a0fc:	898b      	ldrh	r3, [r1, #12]
 800a0fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a100:	079d      	lsls	r5, r3, #30
 800a102:	4606      	mov	r6, r0
 800a104:	460c      	mov	r4, r1
 800a106:	d507      	bpl.n	800a118 <__smakebuf_r+0x1c>
 800a108:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	2301      	movs	r3, #1
 800a112:	6163      	str	r3, [r4, #20]
 800a114:	b003      	add	sp, #12
 800a116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a118:	ab01      	add	r3, sp, #4
 800a11a:	466a      	mov	r2, sp
 800a11c:	f7ff ffc8 	bl	800a0b0 <__swhatbuf_r>
 800a120:	9f00      	ldr	r7, [sp, #0]
 800a122:	4605      	mov	r5, r0
 800a124:	4639      	mov	r1, r7
 800a126:	4630      	mov	r0, r6
 800a128:	f7ff fa62 	bl	80095f0 <_malloc_r>
 800a12c:	b948      	cbnz	r0, 800a142 <__smakebuf_r+0x46>
 800a12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a132:	059a      	lsls	r2, r3, #22
 800a134:	d4ee      	bmi.n	800a114 <__smakebuf_r+0x18>
 800a136:	f023 0303 	bic.w	r3, r3, #3
 800a13a:	f043 0302 	orr.w	r3, r3, #2
 800a13e:	81a3      	strh	r3, [r4, #12]
 800a140:	e7e2      	b.n	800a108 <__smakebuf_r+0xc>
 800a142:	89a3      	ldrh	r3, [r4, #12]
 800a144:	6020      	str	r0, [r4, #0]
 800a146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	9b01      	ldr	r3, [sp, #4]
 800a14e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a152:	b15b      	cbz	r3, 800a16c <__smakebuf_r+0x70>
 800a154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a158:	4630      	mov	r0, r6
 800a15a:	f000 f837 	bl	800a1cc <_isatty_r>
 800a15e:	b128      	cbz	r0, 800a16c <__smakebuf_r+0x70>
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	f023 0303 	bic.w	r3, r3, #3
 800a166:	f043 0301 	orr.w	r3, r3, #1
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	431d      	orrs	r5, r3
 800a170:	81a5      	strh	r5, [r4, #12]
 800a172:	e7cf      	b.n	800a114 <__smakebuf_r+0x18>

0800a174 <memmove>:
 800a174:	4288      	cmp	r0, r1
 800a176:	b510      	push	{r4, lr}
 800a178:	eb01 0402 	add.w	r4, r1, r2
 800a17c:	d902      	bls.n	800a184 <memmove+0x10>
 800a17e:	4284      	cmp	r4, r0
 800a180:	4623      	mov	r3, r4
 800a182:	d807      	bhi.n	800a194 <memmove+0x20>
 800a184:	1e43      	subs	r3, r0, #1
 800a186:	42a1      	cmp	r1, r4
 800a188:	d008      	beq.n	800a19c <memmove+0x28>
 800a18a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a18e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a192:	e7f8      	b.n	800a186 <memmove+0x12>
 800a194:	4402      	add	r2, r0
 800a196:	4601      	mov	r1, r0
 800a198:	428a      	cmp	r2, r1
 800a19a:	d100      	bne.n	800a19e <memmove+0x2a>
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1a6:	e7f7      	b.n	800a198 <memmove+0x24>

0800a1a8 <_fstat_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	4d07      	ldr	r5, [pc, #28]	@ (800a1c8 <_fstat_r+0x20>)
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	4608      	mov	r0, r1
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	f7f6 fd5a 	bl	8000c6e <_fstat>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	d102      	bne.n	800a1c4 <_fstat_r+0x1c>
 800a1be:	682b      	ldr	r3, [r5, #0]
 800a1c0:	b103      	cbz	r3, 800a1c4 <_fstat_r+0x1c>
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	bd38      	pop	{r3, r4, r5, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000510 	.word	0x20000510

0800a1cc <_isatty_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	4d06      	ldr	r5, [pc, #24]	@ (800a1e8 <_isatty_r+0x1c>)
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	602b      	str	r3, [r5, #0]
 800a1d8:	f7f6 fd59 	bl	8000c8e <_isatty>
 800a1dc:	1c43      	adds	r3, r0, #1
 800a1de:	d102      	bne.n	800a1e6 <_isatty_r+0x1a>
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	b103      	cbz	r3, 800a1e6 <_isatty_r+0x1a>
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	bd38      	pop	{r3, r4, r5, pc}
 800a1e8:	20000510 	.word	0x20000510

0800a1ec <_sbrk_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d06      	ldr	r5, [pc, #24]	@ (800a208 <_sbrk_r+0x1c>)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	602b      	str	r3, [r5, #0]
 800a1f8:	f7f6 fd62 	bl	8000cc0 <_sbrk>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_sbrk_r+0x1a>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_sbrk_r+0x1a>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	20000510 	.word	0x20000510

0800a20c <memcpy>:
 800a20c:	440a      	add	r2, r1
 800a20e:	4291      	cmp	r1, r2
 800a210:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a214:	d100      	bne.n	800a218 <memcpy+0xc>
 800a216:	4770      	bx	lr
 800a218:	b510      	push	{r4, lr}
 800a21a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a21e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a222:	4291      	cmp	r1, r2
 800a224:	d1f9      	bne.n	800a21a <memcpy+0xe>
 800a226:	bd10      	pop	{r4, pc}

0800a228 <_realloc_r>:
 800a228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22c:	4680      	mov	r8, r0
 800a22e:	4615      	mov	r5, r2
 800a230:	460c      	mov	r4, r1
 800a232:	b921      	cbnz	r1, 800a23e <_realloc_r+0x16>
 800a234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a238:	4611      	mov	r1, r2
 800a23a:	f7ff b9d9 	b.w	80095f0 <_malloc_r>
 800a23e:	b92a      	cbnz	r2, 800a24c <_realloc_r+0x24>
 800a240:	f7ff f96a 	bl	8009518 <_free_r>
 800a244:	2400      	movs	r4, #0
 800a246:	4620      	mov	r0, r4
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24c:	f000 f81a 	bl	800a284 <_malloc_usable_size_r>
 800a250:	4285      	cmp	r5, r0
 800a252:	4606      	mov	r6, r0
 800a254:	d802      	bhi.n	800a25c <_realloc_r+0x34>
 800a256:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a25a:	d8f4      	bhi.n	800a246 <_realloc_r+0x1e>
 800a25c:	4629      	mov	r1, r5
 800a25e:	4640      	mov	r0, r8
 800a260:	f7ff f9c6 	bl	80095f0 <_malloc_r>
 800a264:	4607      	mov	r7, r0
 800a266:	2800      	cmp	r0, #0
 800a268:	d0ec      	beq.n	800a244 <_realloc_r+0x1c>
 800a26a:	42b5      	cmp	r5, r6
 800a26c:	462a      	mov	r2, r5
 800a26e:	4621      	mov	r1, r4
 800a270:	bf28      	it	cs
 800a272:	4632      	movcs	r2, r6
 800a274:	f7ff ffca 	bl	800a20c <memcpy>
 800a278:	4621      	mov	r1, r4
 800a27a:	4640      	mov	r0, r8
 800a27c:	f7ff f94c 	bl	8009518 <_free_r>
 800a280:	463c      	mov	r4, r7
 800a282:	e7e0      	b.n	800a246 <_realloc_r+0x1e>

0800a284 <_malloc_usable_size_r>:
 800a284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a288:	1f18      	subs	r0, r3, #4
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	bfbc      	itt	lt
 800a28e:	580b      	ldrlt	r3, [r1, r0]
 800a290:	18c0      	addlt	r0, r0, r3
 800a292:	4770      	bx	lr

0800a294 <_init>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	bf00      	nop
 800a298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29a:	bc08      	pop	{r3}
 800a29c:	469e      	mov	lr, r3
 800a29e:	4770      	bx	lr

0800a2a0 <_fini>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	bf00      	nop
 800a2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a6:	bc08      	pop	{r3}
 800a2a8:	469e      	mov	lr, r3
 800a2aa:	4770      	bx	lr
