
IMU_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08009bb4  08009bb4  0000abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c48  08009c48  0000b0e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c50  08009c50  0000b0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c50  08009c50  0000ac50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c54  08009c54  0000ac54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08009c58  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200000e0  08009d38  0000b0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08009d38  0000b424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028386  00000000  00000000  0000b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003416  00000000  00000000  00033496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  000368b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d6  00000000  00000000  00038790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000061de  00000000  00000000  00039f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c50d  00000000  00000000  00040144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce422  00000000  00000000  0005c651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012aa73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c28  00000000  00000000  0012aab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001336e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000e0 	.word	0x200000e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009b9c 	.word	0x08009b9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000e4 	.word	0x200000e4
 800021c:	08009b9c 	.word	0x08009b9c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C" {
	int _write(int file, uint8_t  *ptr, int len) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
		for (int DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e00b      	b.n	80005da <_write+0x2a>
	//        ITM_SendChar(*ptr++);
			HAL_UART_Transmit(&huart2, ptr++, 1, HAL_MAX_DELAY);
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	1c4b      	adds	r3, r1, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005cc:	2201      	movs	r2, #1
 80005ce:	4807      	ldr	r0, [pc, #28]	@ (80005ec <_write+0x3c>)
 80005d0:	f007 fa66 	bl	8007aa0 <HAL_UART_Transmit>
		for (int DataIdx = 0; DataIdx < len; DataIdx++)
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	3301      	adds	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	429a      	cmp	r2, r3
 80005e0:	dbef      	blt.n	80005c2 <_write+0x12>
		return len;
 80005e2:	687b      	ldr	r3, [r7, #4]
	}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000184 	.word	0x20000184

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f004 fa33 	bl	8004a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f841 	bl	8000680 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f969 	bl	80008d4 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8000602:	f000 f8bb 	bl	800077c <_ZL14MX_FDCAN1_Initv>
  MX_CRC_Init();
 8000606:	f000 f891 	bl	800072c <_ZL11MX_CRC_Initv>
  MX_USART2_UART_Init();
 800060a:	f000 f903 	bl	8000814 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

    printf("Hello!\n");
 800060e:	481a      	ldr	r0, [pc, #104]	@ (8000678 <main+0x88>)
 8000610:	f008 fd0e 	bl	8009030 <puts>
//    set_mems_int_pin_a_exti();
//
//    /* Initialize Virtual COM Port */
//    BSP_COM_Init(COM1);

    (void) CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8000614:	2103      	movs	r1, #3
 8000616:	2000      	movs	r0, #0
 8000618:	f008 f8be 	bl	8008798 <CUSTOM_MOTION_SENSOR_Init>

    (void) CUSTOM_MOTION_SENSOR_Enable_6D_Orientation(CUSTOM_LSM6DSO_0, CUSTOM_MOTION_SENSOR_INT1_PIN);
 800061c:	2100      	movs	r1, #0
 800061e:	2000      	movs	r0, #0
 8000620:	f008 fb06 	bl	8008c30 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    CUSTOM_MOTION_SENSOR_Event_Status_t status;

    while (1) {
        if (CUSTOM_MOTION_SENSOR_Get_Event_Status(CUSTOM_LSM6DSO_0, &status) != BSP_ERROR_NONE) {
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	2000      	movs	r0, #0
 800062c:	f008 fada 	bl	8008be4 <CUSTOM_MOTION_SENSOR_Get_Event_Status>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf14      	ite	ne
 8000636:	2301      	movne	r3, #1
 8000638:	2300      	moveq	r3, #0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <main+0x54>
            Error_Handler();
 8000640:	f000 f9ca 	bl	80009d8 <Error_Handler>
        }


        CUSTOM_MOTION_SENSOR_Axes_t axes;
        if (CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_LSM6DSO_0, MOTION_GYRO, &axes) != BSP_ERROR_NONE) {
 8000644:	463b      	mov	r3, r7
 8000646:	461a      	mov	r2, r3
 8000648:	2101      	movs	r1, #1
 800064a:	2000      	movs	r0, #0
 800064c:	f008 f92c 	bl	80088a8 <CUSTOM_MOTION_SENSOR_GetAxes>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	bf14      	ite	ne
 8000656:	2301      	movne	r3, #1
 8000658:	2300      	moveq	r3, #0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <main+0x74>
            Error_Handler();
 8000660:	f000 f9ba 	bl	80009d8 <Error_Handler>
        }

        // Print the data
        printf("X: %d\t, Y: %d\t, Z: %d\n", axes.x, axes.y, axes.z);
 8000664:	6839      	ldr	r1, [r7, #0]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4804      	ldr	r0, [pc, #16]	@ (800067c <main+0x8c>)
 800066c:	f008 fc78 	bl	8008f60 <iprintf>

        HAL_Delay(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f004 fa65 	bl	8004b40 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
 8000676:	e7d5      	b.n	8000624 <main+0x34>
 8000678:	08009bb4 	.word	0x08009bb4
 800067c:	08009bbc 	.word	0x08009bbc

08000680 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2238      	movs	r2, #56	@ 0x38
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f008 fdae 	bl	80091f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f005 fa5a 	bl	8005b5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2340      	movs	r3, #64	@ 0x40
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006be:	2304      	movs	r3, #4
 80006c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006c2:	2355      	movs	r3, #85	@ 0x55
 80006c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 faf4 	bl	8005cc4 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf14      	ite	ne
 80006e2:	2301      	movne	r3, #1
 80006e4:	2300      	moveq	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80006ec:	f000 f974 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2104      	movs	r1, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f005 fded 	bl	80062e8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800071e:	f000 f95b 	bl	80009d8 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	@ 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <_ZL11MX_CRC_Initv+0x48>)
 8000732:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <_ZL11MX_CRC_Initv+0x4c>)
 8000734:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <_ZL11MX_CRC_Initv+0x48>)
 8000738:	2200      	movs	r2, #0
 800073a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <_ZL11MX_CRC_Initv+0x48>)
 800073e:	2200      	movs	r2, #0
 8000740:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <_ZL11MX_CRC_Initv+0x48>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <_ZL11MX_CRC_Initv+0x48>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <_ZL11MX_CRC_Initv+0x48>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000754:	4807      	ldr	r0, [pc, #28]	@ (8000774 <_ZL11MX_CRC_Initv+0x48>)
 8000756:	f004 fb25 	bl	8004da4 <HAL_CRC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 800076a:	f000 f935 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000fc 	.word	0x200000fc
 8000778:	40023000 	.word	0x40023000

0800077c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000780:	4b22      	ldr	r3, [pc, #136]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000782:	4a23      	ldr	r2, [pc, #140]	@ (8000810 <_ZL14MX_FDCAN1_Initv+0x94>)
 8000784:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000786:	4b21      	ldr	r3, [pc, #132]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000792:	4b1e      	ldr	r3, [pc, #120]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000798:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 800079a:	2201      	movs	r2, #1
 800079c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800079e:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007a4:	4b19      	ldr	r3, [pc, #100]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007ac:	220a      	movs	r2, #10
 80007ae:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007b8:	220e      	movs	r2, #14
 80007ba:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80007bc:	4b13      	ldr	r3, [pc, #76]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007be:	2202      	movs	r2, #2
 80007c0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007c8:	4b10      	ldr	r3, [pc, #64]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007d0:	220e      	movs	r2, #14
 80007d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007ec:	4807      	ldr	r0, [pc, #28]	@ (800080c <_ZL14MX_FDCAN1_Initv+0x90>)
 80007ee:	f004 fbcb 	bl	8004f88 <HAL_FDCAN_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8000802:	f000 f8e9 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000120 	.word	0x20000120
 8000810:	40006400 	.word	0x40006400

08000814 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b2c      	ldr	r3, [pc, #176]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800081a:	4a2d      	ldr	r2, [pc, #180]	@ (80008d0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085c:	481b      	ldr	r0, [pc, #108]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800085e:	f007 f8cf 	bl	8007a00 <HAL_UART_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000872:	f000 f8b1 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4814      	ldr	r0, [pc, #80]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800087a:	f007 fec3 	bl	8008604 <HAL_UARTEx_SetTxFifoThreshold>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800088e:	f000 f8a3 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	480d      	ldr	r0, [pc, #52]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000896:	f007 fef3 	bl	8008680 <HAL_UARTEx_SetRxFifoThreshold>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	bf14      	ite	ne
 80008a0:	2301      	movne	r3, #1
 80008a2:	2300      	moveq	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80008aa:	f000 f895 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008ae:	4807      	ldr	r0, [pc, #28]	@ (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008b0:	f007 fe6f 	bl	8008592 <HAL_UARTEx_DisableFifoMode>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80008c4:	f000 f888 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000184 	.word	0x20000184
 80008d0:	40004400 	.word	0x40004400

080008d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b39      	ldr	r3, [pc, #228]	@ (80009d0 <_ZL12MX_GPIO_Initv+0xfc>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a38      	ldr	r2, [pc, #224]	@ (80009d0 <_ZL12MX_GPIO_Initv+0xfc>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b36      	ldr	r3, [pc, #216]	@ (80009d0 <_ZL12MX_GPIO_Initv+0xfc>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b33      	ldr	r3, [pc, #204]	@ (80009d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a32      	ldr	r2, [pc, #200]	@ (80009d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2102      	movs	r1, #2
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f005 f8df 	bl	8005ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800092c:	4829      	ldr	r0, [pc, #164]	@ (80009d4 <_ZL12MX_GPIO_Initv+0x100>)
 800092e:	f005 f8d9 	bl	8005ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000932:	2301      	movs	r3, #1
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000936:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094a:	f004 fe67 	bl	800561c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800094e:	2302      	movs	r3, #2
 8000950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f004 fe58 	bl	800561c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000970:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000984:	f004 fe4a 	bl	800561c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <_ZL12MX_GPIO_Initv+0x100>)
 80009a2:	f004 fe3b 	bl	800561c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2006      	movs	r0, #6
 80009ac:	f004 f9c5 	bl	8004d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009b0:	2006      	movs	r0, #6
 80009b2:	f004 f9dc 	bl	8004d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2017      	movs	r0, #23
 80009bc:	f004 f9bd 	bl	8004d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009c0:	2017      	movs	r0, #23
 80009c2:	f004 f9d4 	bl	8004d6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000400 	.word	0x48000400

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a1a:	f005 f943 	bl	8005ca4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_CRC_MspInit+0x38>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10b      	bne.n	8000a56 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <HAL_CRC_MspInit+0x3c>)
 8000a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a42:	4a09      	ldr	r2, [pc, #36]	@ (8000a68 <HAL_CRC_MspInit+0x3c>)
 8000a44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a48:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <HAL_CRC_MspInit+0x3c>)
 8000a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023000 	.word	0x40023000
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09a      	sub	sp, #104	@ 0x68
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2244      	movs	r2, #68	@ 0x44
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f008 fbaf 	bl	80091f0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a24      	ldr	r2, [pc, #144]	@ (8000b28 <HAL_FDCAN_MspInit+0xbc>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d141      	bne.n	8000b20 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000aa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000aa6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4618      	mov	r0, r3
 8000aae:	f005 fe37 	bl	8006720 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000ab8:	f7ff ff8e 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <HAL_FDCAN_MspInit+0xc0>)
 8000abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b2c <HAL_FDCAN_MspInit+0xc0>)
 8000ac2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_FDCAN_MspInit+0xc0>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_FDCAN_MspInit+0xc0>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	4a14      	ldr	r2, [pc, #80]	@ (8000b2c <HAL_FDCAN_MspInit+0xc0>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_FDCAN_MspInit+0xc0>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000af0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000afe:	2309      	movs	r3, #9
 8000b00:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0c:	f004 fd86 	bl	800561c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2015      	movs	r0, #21
 8000b16:	f004 f910 	bl	8004d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b1a:	2015      	movs	r0, #21
 8000b1c:	f004 f927 	bl	8004d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3768      	adds	r7, #104	@ 0x68
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40006400 	.word	0x40006400
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09a      	sub	sp, #104	@ 0x68
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2244      	movs	r2, #68	@ 0x44
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f008 fb4d 	bl	80091f0 <memset>
  if(huart->Instance==USART2)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_UART_MspInit+0xa8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d136      	bne.n	8000bce <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f005 fdd7 	bl	8006720 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b78:	f7ff ff2e 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b80:	4a16      	ldr	r2, [pc, #88]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b98:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000bac:	230c      	movs	r3, #12
 8000bae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bca:	f004 fd27 	bl	800561c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3768      	adds	r7, #104	@ 0x68
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <NMI_Handler+0x4>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f003 ff65 	bl	8004b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f004 ff66 	bl	8005b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <FDCAN1_IT0_IRQHandler+0x10>)
 8000c52:	f004 faf3 	bl	800523c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000120 	.word	0x20000120

08000c60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000c64:	2080      	movs	r0, #128	@ 0x80
 8000c66:	f004 ff55 	bl	8005b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <BSP_SPI1_Init+0x54>)
 8000c7c:	4a12      	ldr	r2, [pc, #72]	@ (8000cc8 <BSP_SPI1_Init+0x58>)
 8000c7e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <BSP_SPI1_Init+0x5c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	4911      	ldr	r1, [pc, #68]	@ (8000ccc <BSP_SPI1_Init+0x5c>)
 8000c88:	600a      	str	r2, [r1, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d114      	bne.n	8000cb8 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000c8e:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <BSP_SPI1_Init+0x54>)
 8000c90:	f006 fceb 	bl	800766a <HAL_SPI_GetState>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10e      	bne.n	8000cb8 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000c9a:	480a      	ldr	r0, [pc, #40]	@ (8000cc4 <BSP_SPI1_Init+0x54>)
 8000c9c:	f000 f8c2 	bl	8000e24 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d108      	bne.n	8000cb8 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000ca6:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <BSP_SPI1_Init+0x54>)
 8000ca8:	f000 f87a 	bl	8000da0 <MX_SPI1_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000cb2:	f06f 0307 	mvn.w	r3, #7
 8000cb6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000218 	.word	0x20000218
 8000cc8:	40013000 	.word	0x40013000
 8000ccc:	2000027c 	.word	0x2000027c

08000cd0 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000cd6:	f06f 0307 	mvn.w	r3, #7
 8000cda:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <BSP_SPI1_DeInit+0x48>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <BSP_SPI1_DeInit+0x48>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <BSP_SPI1_DeInit+0x48>)
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <BSP_SPI1_DeInit+0x48>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10a      	bne.n	8000d0c <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 8000cf6:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <BSP_SPI1_DeInit+0x4c>)
 8000cf8:	f000 f8e8 	bl	8000ecc <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8000cfc:	4807      	ldr	r0, [pc, #28]	@ (8000d1c <BSP_SPI1_DeInit+0x4c>)
 8000cfe:	f005 ffaa 	bl	8006c56 <HAL_SPI_DeInit>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000027c 	.word	0x2000027c
 8000d1c:	20000218 	.word	0x20000218

08000d20 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000d30:	887a      	ldrh	r2, [r7, #2]
 8000d32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <BSP_SPI1_Send+0x34>)
 8000d3a:	f005 ffc8 	bl	8006cce <HAL_SPI_Transmit>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000d44:	f06f 0305 	mvn.w	r3, #5
 8000d48:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000218 	.word	0x20000218

08000d58 <BSP_SPI1_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000d68:	887a      	ldrh	r2, [r7, #2]
 8000d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <BSP_SPI1_Recv+0x34>)
 8000d72:	f006 f921 	bl	8006fb8 <HAL_SPI_Receive>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <BSP_SPI1_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000d7c:	f06f 0305 	mvn.w	r3, #5
 8000d80:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000218 	.word	0x20000218

08000d90 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d94:	f003 fec8 	bl	8004b28 <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <MX_SPI1_Init+0x80>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000dc6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dda:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2230      	movs	r2, #48	@ 0x30
 8000de0:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2207      	movs	r2, #7
 8000df8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f005 fe7a 	bl	8006b00 <HAL_SPI_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40013000 	.word	0x40013000

08000e24 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <SPI1_MspInit+0xa0>)
 8000e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e30:	4a24      	ldr	r2, [pc, #144]	@ (8000ec4 <SPI1_MspInit+0xa0>)
 8000e32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e36:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <SPI1_MspInit+0xa0>)
 8000e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <SPI1_MspInit+0xa0>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec4 <SPI1_MspInit+0xa0>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <SPI1_MspInit+0xa0>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4814      	ldr	r0, [pc, #80]	@ (8000ec8 <SPI1_MspInit+0xa4>)
 8000e78:	f004 fbd0 	bl	800561c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <SPI1_MspInit+0xa4>)
 8000e98:	f004 fbc0 	bl	800561c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000eac:	2305      	movs	r3, #5
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <SPI1_MspInit+0xa4>)
 8000eb8:	f004 fbb0 	bl	800561c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	@ 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000400 	.word	0x48000400

08000ecc <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <SPI1_MspDeInit+0x34>)
 8000ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed8:	4a09      	ldr	r2, [pc, #36]	@ (8000f00 <SPI1_MspDeInit+0x34>)
 8000eda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ede:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	4808      	ldr	r0, [pc, #32]	@ (8000f04 <SPI1_MspDeInit+0x38>)
 8000ee4:	f004 fd1c 	bl	8005920 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4806      	ldr	r0, [pc, #24]	@ (8000f04 <SPI1_MspDeInit+0x38>)
 8000eec:	f004 fd18 	bl	8005920 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <SPI1_MspDeInit+0x38>)
 8000ef4:	f004 fd14 	bl	8005920 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000400 	.word	0x48000400

08000f08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
  }

  return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_isatty>:

int _isatty(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f008 f966 	bl	80092ac <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20008000 	.word	0x20008000
 800100c:	00000400 	.word	0x00000400
 8001010:	20000280 	.word	0x20000280
 8001014:	20000428 	.word	0x20000428

08001018 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	@ (8001074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800106a:	f008 f925 	bl	80092b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106e:	f7ff fabf 	bl	80005f0 <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   r0, =_estack
 8001074:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001080:	08009c58 	.word	0x08009c58
  ldr r2, =_sbss
 8001084:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001088:	20000424 	.word	0x20000424

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>
	...

08001090 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e051      	b.n	8001150 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7b1a      	ldrb	r2, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	699a      	ldr	r2, [r3, #24]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <LSM6DSO_RegisterBusIO+0xcc>)
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <LSM6DSO_RegisterBusIO+0xd0>)
 80010ee:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	69da      	ldr	r2, [r3, #28]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e020      	b.n	8001150 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4798      	blx	r3
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e016      	b.n	8001150 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d112      	bne.n	8001150 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10d      	bne.n	8001150 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001134:	230c      	movs	r3, #12
 8001136:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8001138:	7afb      	ldrb	r3, [r7, #11]
 800113a:	461a      	mov	r2, r3
 800113c:	2112      	movs	r1, #18
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 ff5d 	bl	8001ffe <LSM6DSO_Write_Reg>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001150:	68fb      	ldr	r3, [r7, #12]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	08002835 	.word	0x08002835
 8001160:	0800286b 	.word	0x0800286b

08001164 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d00b      	beq.n	800118c <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3320      	adds	r3, #32
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	4618      	mov	r0, r3
 800117c:	f002 f84e 	bl	800321c <lsm6dso_i3c_disable_set>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800118a:	e060      	b.n	800124e <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3320      	adds	r3, #32
 8001190:	2101      	movs	r1, #1
 8001192:	4618      	mov	r0, r3
 8001194:	f002 f81c 	bl	80031d0 <lsm6dso_auto_increment_set>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a2:	e054      	b.n	800124e <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3320      	adds	r3, #32
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 ff2c 	bl	8003008 <lsm6dso_block_data_update_set>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ba:	e048      	b.n	800124e <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3320      	adds	r3, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 f898 	bl	80032f8 <lsm6dso_fifo_mode_set>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d2:	e03c      	b.n	800124e <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2204      	movs	r2, #4
 80011d8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3320      	adds	r3, #32
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fbea 	bl	80029bc <lsm6dso_xl_data_rate_set>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f2:	e02c      	b.n	800124e <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3320      	adds	r3, #32
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fb80 	bl	8002900 <lsm6dso_xl_full_scale_set>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800120a:	e020      	b.n	800124e <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2204      	movs	r2, #4
 8001210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3320      	adds	r3, #32
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fd98 	bl	8002d50 <lsm6dso_gy_data_rate_set>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800122a:	e010      	b.n	800124e <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3320      	adds	r3, #32
 8001230:	2106      	movs	r1, #6
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fd24 	bl	8002c80 <lsm6dso_gy_full_scale_set>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001242:	e004      	b.n	800124e <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f888 	bl	8001374 <LSM6DSO_ACC_Disable>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800126e:	e015      	b.n	800129c <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 fc2e 	bl	8001ad2 <LSM6DSO_GYRO_Disable>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001280:	e00c      	b.n	800129c <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3320      	adds	r3, #32
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 ff7a 	bl	80031ae <lsm6dso_device_id_get>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012c4:	e000      	b.n	80012c8 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2201      	movs	r2, #1
 80012e4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2200      	movs	r2, #0
 80012ea:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2200      	movs	r2, #0
 80012f0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012f8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2210      	movs	r2, #16
 80012fe:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	@ (8001328 <LSM6DSO_GetCapabilities+0x58>)
 800130a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4a06      	ldr	r2, [pc, #24]	@ (8001328 <LSM6DSO_GetCapabilities+0x58>)
 8001310:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	45d02000 	.word	0x45d02000

0800132c <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e014      	b.n	800136c <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f103 0220 	add.w	r2, r3, #32
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800134e:	4619      	mov	r1, r3
 8001350:	4610      	mov	r0, r2
 8001352:	f001 fb33 	bl	80029bc <lsm6dso_xl_data_rate_set>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001360:	e004      	b.n	800136c <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e01f      	b.n	80013ca <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f103 0220 	add.w	r2, r3, #32
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3333      	adds	r3, #51	@ 0x33
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f001 fc0a 	bl	8002bb0 <lsm6dso_xl_data_rate_get>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013a6:	e010      	b.n	80013ca <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3320      	adds	r3, #32
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fb04 	bl	80029bc <lsm6dso_xl_data_rate_set>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013be:	e004      	b.n	80013ca <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3320      	adds	r3, #32
 80013e6:	f107 020b 	add.w	r2, r7, #11
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 faad 	bl	800294c <lsm6dso_xl_full_scale_get>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013fc:	e023      	b.n	8001446 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d81b      	bhi.n	800143c <LSM6DSO_ACC_GetSensitivity+0x68>
 8001404:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <LSM6DSO_ACC_GetSensitivity+0x38>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001435 	.word	0x08001435
 8001414:	08001425 	.word	0x08001425
 8001418:	0800142d 	.word	0x0800142d
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4a0c      	ldr	r2, [pc, #48]	@ (8001450 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8001420:	601a      	str	r2, [r3, #0]
      break;
 8001422:	e00f      	b.n	8001444 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8001428:	601a      	str	r2, [r3, #0]
      break;
 800142a:	e00b      	b.n	8001444 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8001430:	601a      	str	r2, [r3, #0]
      break;
 8001432:	e007      	b.n	8001444 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4a09      	ldr	r2, [pc, #36]	@ (800145c <LSM6DSO_ACC_GetSensitivity+0x88>)
 8001438:	601a      	str	r2, [r3, #0]
      break;
 800143a:	e003      	b.n	8001444 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001440:	60fb      	str	r3, [r7, #12]
      break;
 8001442:	bf00      	nop
  }

  return ret;
 8001444:	68fb      	ldr	r3, [r7, #12]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	3d79db23 	.word	0x3d79db23
 8001454:	3df9db23 	.word	0x3df9db23
 8001458:	3e79db23 	.word	0x3e79db23
 800145c:	3ef9db23 	.word	0x3ef9db23

08001460 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3320      	adds	r3, #32
 8001472:	f107 020b 	add.w	r2, r7, #11
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f001 fb99 	bl	8002bb0 <lsm6dso_xl_data_rate_get>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001488:	e054      	b.n	8001534 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800148a:	7afb      	ldrb	r3, [r7, #11]
 800148c:	2b0b      	cmp	r3, #11
 800148e:	d84c      	bhi.n	800152a <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8001490:	a201      	add	r2, pc, #4	@ (adr r2, 8001498 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014c9 	.word	0x080014c9
 800149c:	080014db 	.word	0x080014db
 80014a0:	080014e3 	.word	0x080014e3
 80014a4:	080014eb 	.word	0x080014eb
 80014a8:	080014f3 	.word	0x080014f3
 80014ac:	080014fb 	.word	0x080014fb
 80014b0:	08001503 	.word	0x08001503
 80014b4:	0800150b 	.word	0x0800150b
 80014b8:	08001513 	.word	0x08001513
 80014bc:	0800151b 	.word	0x0800151b
 80014c0:	08001523 	.word	0x08001523
 80014c4:	080014d3 	.word	0x080014d3
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
      break;
 80014d0:	e02f      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	4a19      	ldr	r2, [pc, #100]	@ (800153c <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80014d6:	601a      	str	r2, [r3, #0]
      break;
 80014d8:	e02b      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80014de:	601a      	str	r2, [r3, #0]
      break;
 80014e0:	e027      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80014e6:	601a      	str	r2, [r3, #0]
      break;
 80014e8:	e023      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4a16      	ldr	r2, [pc, #88]	@ (8001548 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80014ee:	601a      	str	r2, [r3, #0]
      break;
 80014f0:	e01f      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	4a15      	ldr	r2, [pc, #84]	@ (800154c <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80014f6:	601a      	str	r2, [r3, #0]
      break;
 80014f8:	e01b      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80014fe:	601a      	str	r2, [r3, #0]
      break;
 8001500:	e017      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	4a13      	ldr	r2, [pc, #76]	@ (8001554 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8001506:	601a      	str	r2, [r3, #0]
      break;
 8001508:	e013      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800150e:	601a      	str	r2, [r3, #0]
      break;
 8001510:	e00f      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	4a11      	ldr	r2, [pc, #68]	@ (800155c <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8001516:	601a      	str	r2, [r3, #0]
      break;
 8001518:	e00b      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4a10      	ldr	r2, [pc, #64]	@ (8001560 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800151e:	601a      	str	r2, [r3, #0]
      break;
 8001520:	e007      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	4a0f      	ldr	r2, [pc, #60]	@ (8001564 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8001526:	601a      	str	r2, [r3, #0]
      break;
 8001528:	e003      	b.n	8001532 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800152e:	60fb      	str	r3, [r7, #12]
      break;
 8001530:	bf00      	nop
  }

  return ret;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	3fcccccd 	.word	0x3fcccccd
 8001540:	41480000 	.word	0x41480000
 8001544:	41d00000 	.word	0x41d00000
 8001548:	42500000 	.word	0x42500000
 800154c:	42d00000 	.word	0x42d00000
 8001550:	43500000 	.word	0x43500000
 8001554:	43d08000 	.word	0x43d08000
 8001558:	44504000 	.word	0x44504000
 800155c:	44d06000 	.word	0x44d06000
 8001560:	45505000 	.word	0x45505000
 8001564:	45d05800 	.word	0x45d05800

08001568 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8001574:	2100      	movs	r1, #0
 8001576:	ed97 0a00 	vldr	s0, [r7]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f806 	bl	800158c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	ed87 0a02 	vstr	s0, [r7, #8]
 8001598:	460b      	mov	r3, r1
 800159a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	f000 80ea 	beq.w	8001780 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	f300 8163 	bgt.w	8001878 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d074      	beq.n	80016a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80015ba:	e15d      	b.n	8001878 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f103 0020 	add.w	r0, r3, #32
 80015c2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80015c6:	2301      	movs	r3, #1
 80015c8:	2114      	movs	r1, #20
 80015ca:	f001 f969 	bl	80028a0 <lsm6dso_read_reg>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015d8:	e16c      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80015da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d025      	beq.n	8001634 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d10b      	bne.n	800160a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3320      	adds	r3, #32
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 f9df 	bl	80029bc <lsm6dso_xl_data_rate_set>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001608:	e154      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800160a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800160e:	f36f 13c7 	bfc	r3, #7, #1
 8001612:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f103 0020 	add.w	r0, r3, #32
 800161c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001620:	2301      	movs	r3, #1
 8001622:	2114      	movs	r1, #20
 8001624:	f001 f954 	bl	80028d0 <lsm6dso_write_reg>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001632:	e13f      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f103 0020 	add.w	r0, r3, #32
 800163a:	f107 0220 	add.w	r2, r7, #32
 800163e:	2301      	movs	r3, #1
 8001640:	2115      	movs	r1, #21
 8001642:	f001 f92d 	bl	80028a0 <lsm6dso_read_reg>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001650:	e130      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8001652:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8001660:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001664:	f36f 1304 	bfc	r3, #4, #1
 8001668:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f103 0020 	add.w	r0, r3, #32
 8001672:	f107 0220 	add.w	r2, r7, #32
 8001676:	2301      	movs	r3, #1
 8001678:	2115      	movs	r1, #21
 800167a:	f001 f929 	bl	80028d0 <lsm6dso_write_reg>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001688:	e114      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800168a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800168e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	d400      	bmi.n	800169e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 800169c:	e0f0      	b.n	8001880 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800169e:	4b87      	ldr	r3, [pc, #540]	@ (80018bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016a2:	e0ed      	b.n	8001880 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f103 0020 	add.w	r0, r3, #32
 80016aa:	f107 021c 	add.w	r2, r7, #28
 80016ae:	2301      	movs	r3, #1
 80016b0:	2114      	movs	r1, #20
 80016b2:	f001 f8f5 	bl	80028a0 <lsm6dso_read_reg>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c0:	e0f8      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80016c2:	7f3b      	ldrb	r3, [r7, #28]
 80016c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d023      	beq.n	8001716 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10b      	bne.n	80016f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3320      	adds	r3, #32
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 f96c 	bl	80029bc <lsm6dso_xl_data_rate_set>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ee:	e0e1      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80016f0:	7f3b      	ldrb	r3, [r7, #28]
 80016f2:	f36f 13c7 	bfc	r3, #7, #1
 80016f6:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f103 0020 	add.w	r0, r3, #32
 80016fe:	f107 021c 	add.w	r2, r7, #28
 8001702:	2301      	movs	r3, #1
 8001704:	2114      	movs	r1, #20
 8001706:	f001 f8e3 	bl	80028d0 <lsm6dso_write_reg>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001714:	e0ce      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f103 0020 	add.w	r0, r3, #32
 800171c:	f107 0218 	add.w	r2, r7, #24
 8001720:	2301      	movs	r3, #1
 8001722:	2115      	movs	r1, #21
 8001724:	f001 f8bc 	bl	80028a0 <lsm6dso_read_reg>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001732:	e0bf      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8001734:	7e3b      	ldrb	r3, [r7, #24]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d112      	bne.n	8001766 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8001740:	7e3b      	ldrb	r3, [r7, #24]
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f103 0020 	add.w	r0, r3, #32
 800174e:	f107 0218 	add.w	r2, r7, #24
 8001752:	2301      	movs	r3, #1
 8001754:	2115      	movs	r1, #21
 8001756:	f001 f8bb 	bl	80028d0 <lsm6dso_write_reg>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001764:	e0a6      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8001766:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800176a:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80018c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800176e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	dc00      	bgt.n	800177a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8001778:	e082      	b.n	8001880 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800177a:	4b52      	ldr	r3, [pc, #328]	@ (80018c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 800177c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800177e:	e07f      	b.n	8001880 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f103 0020 	add.w	r0, r3, #32
 8001786:	f107 0210 	add.w	r2, r7, #16
 800178a:	2301      	movs	r3, #1
 800178c:	2115      	movs	r1, #21
 800178e:	f001 f887 	bl	80028a0 <lsm6dso_read_reg>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800179c:	e08a      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800179e:	7c3b      	ldrb	r3, [r7, #16]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d012      	beq.n	80017d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 80017aa:	7c3b      	ldrb	r3, [r7, #16]
 80017ac:	f36f 1304 	bfc	r3, #4, #1
 80017b0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f103 0020 	add.w	r0, r3, #32
 80017b8:	f107 0210 	add.w	r2, r7, #16
 80017bc:	2301      	movs	r3, #1
 80017be:	2115      	movs	r1, #21
 80017c0:	f001 f886 	bl	80028d0 <lsm6dso_write_reg>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ce:	e071      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f979 	bl	8001ad2 <LSM6DSO_GYRO_Disable>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ea:	e063      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f103 0020 	add.w	r0, r3, #32
 80017f2:	f107 0214 	add.w	r2, r7, #20
 80017f6:	2301      	movs	r3, #1
 80017f8:	2114      	movs	r1, #20
 80017fa:	f001 f851 	bl	80028a0 <lsm6dso_read_reg>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001808:	e054      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800180a:	7d3b      	ldrb	r3, [r7, #20]
 800180c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d123      	bne.n	800185e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10b      	bne.n	8001838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3320      	adds	r3, #32
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f001 f8c8 	bl	80029bc <lsm6dso_xl_data_rate_set>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001836:	e03d      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8001838:	7d3b      	ldrb	r3, [r7, #20]
 800183a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800183e:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f103 0020 	add.w	r0, r3, #32
 8001846:	f107 0214 	add.w	r2, r7, #20
 800184a:	2301      	movs	r3, #1
 800184c:	2114      	movs	r1, #20
 800184e:	f001 f83f 	bl	80028d0 <lsm6dso_write_reg>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800185c:	e02a      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800185e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001862:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80018c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8001866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	dc00      	bgt.n	8001872 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8001870:	e006      	b.n	8001880 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001876:	e003      	b.n	8001880 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800187e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8001880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001882:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001886:	d102      	bne.n	800188e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800188c:	e012      	b.n	80018b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001894:	2b01      	cmp	r3, #1
 8001896:	d106      	bne.n	80018a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8001898:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 fd93 	bl	80023c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80018a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80018a4:	e005      	b.n	80018b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80018a6:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fe24 	bl	80024f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80018b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 80018b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3730      	adds	r7, #48	@ 0x30
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	41480000 	.word	0x41480000
 80018c0:	43500000 	.word	0x43500000
 80018c4:	43500000 	.word	0x43500000

080018c8 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3320      	adds	r3, #32
 80018da:	f107 020b 	add.w	r2, r7, #11
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f833 	bl	800294c <lsm6dso_xl_full_scale_get>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f0:	e023      	b.n	800193a <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d81b      	bhi.n	8001930 <LSM6DSO_ACC_GetFullScale+0x68>
 80018f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <LSM6DSO_ACC_GetFullScale+0x38>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001911 	.word	0x08001911
 8001904:	08001929 	.word	0x08001929
 8001908:	08001919 	.word	0x08001919
 800190c:	08001921 	.word	0x08001921
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2202      	movs	r2, #2
 8001914:	601a      	str	r2, [r3, #0]
      break;
 8001916:	e00f      	b.n	8001938 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2204      	movs	r2, #4
 800191c:	601a      	str	r2, [r3, #0]
      break;
 800191e:	e00b      	b.n	8001938 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2208      	movs	r2, #8
 8001924:	601a      	str	r2, [r3, #0]
      break;
 8001926:	e007      	b.n	8001938 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2210      	movs	r2, #16
 800192c:	601a      	str	r2, [r3, #0]
      break;
 800192e:	e003      	b.n	8001938 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001934:	60fb      	str	r3, [r7, #12]
      break;
 8001936:	bf00      	nop
  }

  return ret;
 8001938:	68fb      	ldr	r3, [r7, #12]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop

08001944 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b02      	cmp	r3, #2
 8001952:	dd0b      	ble.n	800196c <LSM6DSO_ACC_SetFullScale+0x28>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b04      	cmp	r3, #4
 8001958:	dd06      	ble.n	8001968 <LSM6DSO_ACC_SetFullScale+0x24>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b08      	cmp	r3, #8
 800195e:	dc01      	bgt.n	8001964 <LSM6DSO_ACC_SetFullScale+0x20>
 8001960:	2303      	movs	r3, #3
 8001962:	e004      	b.n	800196e <LSM6DSO_ACC_SetFullScale+0x2a>
 8001964:	2301      	movs	r3, #1
 8001966:	e002      	b.n	800196e <LSM6DSO_ACC_SetFullScale+0x2a>
 8001968:	2302      	movs	r3, #2
 800196a:	e000      	b.n	800196e <LSM6DSO_ACC_SetFullScale+0x2a>
 800196c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 800196e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3320      	adds	r3, #32
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f000 ffc1 	bl	8002900 <lsm6dso_xl_full_scale_set>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001988:	e000      	b.n	800198c <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3320      	adds	r3, #32
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 fb9b 	bl	80030e4 <lsm6dso_acceleration_raw_get>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019b8:	e00c      	b.n	80019d4 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80019ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80019c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80019ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3320      	adds	r3, #32
 80019f0:	f107 0210 	add.w	r2, r7, #16
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fb74 	bl	80030e4 <lsm6dso_acceleration_raw_get>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a06:	e03c      	b.n	8001a82 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff fce0 	bl	80013d4 <LSM6DSO_ACC_GetSensitivity>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a1e:	e030      	b.n	8001a82 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001a20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a38:	ee17 2a90 	vmov	r2, s15
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001a40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a58:	ee17 2a90 	vmov	r2, s15
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001a60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a78:	ee17 2a90 	vmov	r2, s15
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e014      	b.n	8001aca <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f103 0220 	add.w	r2, r3, #32
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f001 f94e 	bl	8002d50 <lsm6dso_gy_data_rate_set>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001abe:	e004      	b.n	8001aca <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e01f      	b.n	8001b28 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f103 0220 	add.w	r2, r3, #32
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3334      	adds	r3, #52	@ 0x34
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f001 fa25 	bl	8002f44 <lsm6dso_gy_data_rate_get>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b04:	e010      	b.n	8001b28 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3320      	adds	r3, #32
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 f91f 	bl	8002d50 <lsm6dso_gy_data_rate_set>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b1c:	e004      	b.n	8001b28 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3320      	adds	r3, #32
 8001b42:	f107 020b 	add.w	r2, r7, #11
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 f8bf 	bl	8002ccc <lsm6dso_gy_full_scale_get>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b58:	e02d      	b.n	8001bb6 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d825      	bhi.n	8001bac <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8001b60:	a201      	add	r2, pc, #4	@ (adr r2, 8001b68 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b8d 	.word	0x08001b8d
 8001b6c:	08001b85 	.word	0x08001b85
 8001b70:	08001b95 	.word	0x08001b95
 8001b74:	08001bad 	.word	0x08001bad
 8001b78:	08001b9d 	.word	0x08001b9d
 8001b7c:	08001bad 	.word	0x08001bad
 8001b80:	08001ba5 	.word	0x08001ba5
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8001b88:	601a      	str	r2, [r3, #0]
      break;
 8001b8a:	e013      	b.n	8001bb4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8001b90:	601a      	str	r2, [r3, #0]
      break;
 8001b92:	e00f      	b.n	8001bb4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc8 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8001b98:	601a      	str	r2, [r3, #0]
      break;
 8001b9a:	e00b      	b.n	8001bb4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8001ba0:	601a      	str	r2, [r3, #0]
      break;
 8001ba2:	e007      	b.n	8001bb4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8001ba8:	601a      	str	r2, [r3, #0]
      break;
 8001baa:	e003      	b.n	8001bb4 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb0:	60fb      	str	r3, [r7, #12]
      break;
 8001bb2:	bf00      	nop
  }

  return ret;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	408c0000 	.word	0x408c0000
 8001bc4:	410c0000 	.word	0x410c0000
 8001bc8:	418c0000 	.word	0x418c0000
 8001bcc:	420c0000 	.word	0x420c0000
 8001bd0:	428c0000 	.word	0x428c0000

08001bd4 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3320      	adds	r3, #32
 8001be6:	f107 020b 	add.w	r2, r7, #11
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 f9a9 	bl	8002f44 <lsm6dso_gy_data_rate_get>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bfc:	e04e      	b.n	8001c9c <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	2b0a      	cmp	r3, #10
 8001c02:	d846      	bhi.n	8001c92 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8001c04:	a201      	add	r2, pc, #4	@ (adr r2, 8001c0c <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c39 	.word	0x08001c39
 8001c10:	08001c43 	.word	0x08001c43
 8001c14:	08001c4b 	.word	0x08001c4b
 8001c18:	08001c53 	.word	0x08001c53
 8001c1c:	08001c5b 	.word	0x08001c5b
 8001c20:	08001c63 	.word	0x08001c63
 8001c24:	08001c6b 	.word	0x08001c6b
 8001c28:	08001c73 	.word	0x08001c73
 8001c2c:	08001c7b 	.word	0x08001c7b
 8001c30:	08001c83 	.word	0x08001c83
 8001c34:	08001c8b 	.word	0x08001c8b
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
      break;
 8001c40:	e02b      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	4a17      	ldr	r2, [pc, #92]	@ (8001ca4 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8001c46:	601a      	str	r2, [r3, #0]
      break;
 8001c48:	e027      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	4a16      	ldr	r2, [pc, #88]	@ (8001ca8 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8001c4e:	601a      	str	r2, [r3, #0]
      break;
 8001c50:	e023      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8001c56:	601a      	str	r2, [r3, #0]
      break;
 8001c58:	e01f      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	4a14      	ldr	r2, [pc, #80]	@ (8001cb0 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8001c5e:	601a      	str	r2, [r3, #0]
      break;
 8001c60:	e01b      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	4a13      	ldr	r2, [pc, #76]	@ (8001cb4 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8001c66:	601a      	str	r2, [r3, #0]
      break;
 8001c68:	e017      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	4a12      	ldr	r2, [pc, #72]	@ (8001cb8 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8001c6e:	601a      	str	r2, [r3, #0]
      break;
 8001c70:	e013      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	4a11      	ldr	r2, [pc, #68]	@ (8001cbc <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8001c76:	601a      	str	r2, [r3, #0]
      break;
 8001c78:	e00f      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	4a10      	ldr	r2, [pc, #64]	@ (8001cc0 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8001c7e:	601a      	str	r2, [r3, #0]
      break;
 8001c80:	e00b      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8001c86:	601a      	str	r2, [r3, #0]
      break;
 8001c88:	e007      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc8 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8001c8e:	601a      	str	r2, [r3, #0]
      break;
 8001c90:	e003      	b.n	8001c9a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c96:	60fb      	str	r3, [r7, #12]
      break;
 8001c98:	bf00      	nop
  }

  return ret;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	41480000 	.word	0x41480000
 8001ca8:	41d00000 	.word	0x41d00000
 8001cac:	42500000 	.word	0x42500000
 8001cb0:	42d00000 	.word	0x42d00000
 8001cb4:	43500000 	.word	0x43500000
 8001cb8:	43d08000 	.word	0x43d08000
 8001cbc:	44504000 	.word	0x44504000
 8001cc0:	44d06000 	.word	0x44d06000
 8001cc4:	45505000 	.word	0x45505000
 8001cc8:	45d05800 	.word	0x45d05800

08001ccc <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	ed97 0a00 	vldr	s0, [r7]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f806 	bl	8001cf0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d028      	beq.n	8001d64 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8001d12:	e05c      	b.n	8001dce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f103 0020 	add.w	r0, r3, #32
 8001d1a:	f107 0214 	add.w	r2, r7, #20
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2116      	movs	r1, #22
 8001d22:	f000 fdbd 	bl	80028a0 <lsm6dso_read_reg>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d30:	e06c      	b.n	8001e0c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8001d32:	7d3b      	ldrb	r3, [r7, #20]
 8001d34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d04b      	beq.n	8001dd6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8001d3e:	7d3b      	ldrb	r3, [r7, #20]
 8001d40:	f36f 13c7 	bfc	r3, #7, #1
 8001d44:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f103 0020 	add.w	r0, r3, #32
 8001d4c:	f107 0214 	add.w	r2, r7, #20
 8001d50:	2301      	movs	r3, #1
 8001d52:	2116      	movs	r1, #22
 8001d54:	f000 fdbc 	bl	80028d0 <lsm6dso_write_reg>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d03b      	beq.n	8001dd6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d62:	e053      	b.n	8001e0c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f103 0020 	add.w	r0, r3, #32
 8001d6a:	f107 0210 	add.w	r2, r7, #16
 8001d6e:	2301      	movs	r3, #1
 8001d70:	2116      	movs	r1, #22
 8001d72:	f000 fd95 	bl	80028a0 <lsm6dso_read_reg>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d80:	e044      	b.n	8001e0c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8001d82:	7c3b      	ldrb	r3, [r7, #16]
 8001d84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d112      	bne.n	8001db4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8001d8e:	7c3b      	ldrb	r3, [r7, #16]
 8001d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d94:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f103 0020 	add.w	r0, r3, #32
 8001d9c:	f107 0210 	add.w	r2, r7, #16
 8001da0:	2301      	movs	r3, #1
 8001da2:	2116      	movs	r1, #22
 8001da4:	f000 fd94 	bl	80028d0 <lsm6dso_write_reg>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001db2:	e02b      	b.n	8001e0c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8001db4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001db8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001e14 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8001dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc4:	dc00      	bgt.n	8001dc8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8001dc6:	e007      	b.n	8001dd8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	e004      	b.n	8001dd8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dd2:	61fb      	str	r3, [r7, #28]
      break;
 8001dd4:	e000      	b.n	8001dd8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8001dd6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dde:	d102      	bne.n	8001de6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de4:	e012      	b.n	8001e0c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d106      	bne.n	8001dfe <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8001df0:	ed97 0a06 	vldr	s0, [r7, #24]
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fc0f 	bl	8002618 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8001dfa:	61f8      	str	r0, [r7, #28]
 8001dfc:	e005      	b.n	8001e0a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8001dfe:	ed97 0a06 	vldr	s0, [r7, #24]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fc94 	bl	8002730 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8001e08:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	43500000 	.word	0x43500000
 8001e18:	43500000 	.word	0x43500000

08001e1c <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3320      	adds	r3, #32
 8001e2e:	f107 020b 	add.w	r2, r7, #11
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 ff49 	bl	8002ccc <lsm6dso_gy_full_scale_get>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e44:	e030      	b.n	8001ea8 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d828      	bhi.n	8001e9e <LSM6DSO_GYRO_GetFullScale+0x82>
 8001e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e54 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001e79 	.word	0x08001e79
 8001e58:	08001e71 	.word	0x08001e71
 8001e5c:	08001e81 	.word	0x08001e81
 8001e60:	08001e9f 	.word	0x08001e9f
 8001e64:	08001e8b 	.word	0x08001e8b
 8001e68:	08001e9f 	.word	0x08001e9f
 8001e6c:	08001e95 	.word	0x08001e95
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	227d      	movs	r2, #125	@ 0x7d
 8001e74:	601a      	str	r2, [r3, #0]
      break;
 8001e76:	e016      	b.n	8001ea6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	22fa      	movs	r2, #250	@ 0xfa
 8001e7c:	601a      	str	r2, [r3, #0]
      break;
 8001e7e:	e012      	b.n	8001ea6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e86:	601a      	str	r2, [r3, #0]
      break;
 8001e88:	e00d      	b.n	8001ea6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e90:	601a      	str	r2, [r3, #0]
      break;
 8001e92:	e008      	b.n	8001ea6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001e9a:	601a      	str	r2, [r3, #0]
      break;
 8001e9c:	e003      	b.n	8001ea6 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ea2:	60fb      	str	r3, [r7, #12]
      break;
 8001ea4:	bf00      	nop
  }

  return ret;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ebe:	dd12      	ble.n	8001ee6 <LSM6DSO_GYRO_SetFullScale+0x36>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2bfa      	cmp	r3, #250	@ 0xfa
 8001ec4:	dd0d      	ble.n	8001ee2 <LSM6DSO_GYRO_SetFullScale+0x32>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ecc:	dd07      	ble.n	8001ede <LSM6DSO_GYRO_SetFullScale+0x2e>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ed4:	dc01      	bgt.n	8001eda <LSM6DSO_GYRO_SetFullScale+0x2a>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e006      	b.n	8001ee8 <LSM6DSO_GYRO_SetFullScale+0x38>
 8001eda:	2306      	movs	r3, #6
 8001edc:	e004      	b.n	8001ee8 <LSM6DSO_GYRO_SetFullScale+0x38>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e002      	b.n	8001ee8 <LSM6DSO_GYRO_SetFullScale+0x38>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <LSM6DSO_GYRO_SetFullScale+0x38>
 8001ee6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8001ee8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3320      	adds	r3, #32
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fec4 	bl	8002c80 <lsm6dso_gy_full_scale_set>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f02:	e000      	b.n	8001f06 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3320      	adds	r3, #32
 8001f1c:	f107 0208 	add.w	r2, r7, #8
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 f896 	bl	8003054 <lsm6dso_angular_rate_raw_get>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f32:	e00c      	b.n	8001f4e <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8001f34:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8001f3c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8001f44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3320      	adds	r3, #32
 8001f64:	f107 0210 	add.w	r2, r7, #16
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 f872 	bl	8003054 <lsm6dso_angular_rate_raw_get>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f7a:	e03c      	b.n	8001ff6 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fdd4 	bl	8001b30 <LSM6DSO_GYRO_GetSensitivity>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f92:	e030      	b.n	8001ff6 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001f94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fac:	ee17 2a90 	vmov	r2, s15
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001fb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fcc:	ee17 2a90 	vmov	r2, s15
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001fd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fec:	ee17 2a90 	vmov	r2, s15
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	70fb      	strb	r3, [r7, #3]
 800200a:	4613      	mov	r3, r2
 800200c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f103 0020 	add.w	r0, r3, #32
 8002014:	1cba      	adds	r2, r7, #2
 8002016:	78f9      	ldrb	r1, [r7, #3]
 8002018:	2301      	movs	r3, #1
 800201a:	f000 fc59 	bl	80028d0 <lsm6dso_write_reg>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002028:	e000      	b.n	800202c <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <LSM6DSO_ACC_Enable_6D_Orientation>:
  * @param  pObj the device pObj
  * @param  IntPin interrupt pin line to be used
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable_6D_Orientation(LSM6DSO_Object_t *pObj, LSM6DSO_SensorIntPin_t IntPin)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  lsm6dso_pin_int1_route_t val1;
  lsm6dso_pin_int2_route_t val2;

  /* Output Data Rate selection */
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSO_OK)
 8002044:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8002130 <LSM6DSO_ACC_Enable_6D_Orientation+0xfc>
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fa8d 	bl	8001568 <LSM6DSO_ACC_SetOutputDataRate>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <LSM6DSO_ACC_Enable_6D_Orientation+0x26>
  {
    return LSM6DSO_ERROR;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002058:	e065      	b.n	8002126 <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
  }

  /* Full scale selection */
  if (LSM6DSO_ACC_SetFullScale(pObj, 2) != LSM6DSO_OK)
 800205a:	2102      	movs	r1, #2
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff fc71 	bl	8001944 <LSM6DSO_ACC_SetFullScale>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <LSM6DSO_ACC_Enable_6D_Orientation+0x3a>
  {
    return LSM6DSO_ERROR;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800206c:	e05b      	b.n	8002126 <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
  }

  /* 6D orientation enabled. */
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_60) != LSM6DSO_OK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3320      	adds	r3, #32
 8002072:	2102      	movs	r1, #2
 8002074:	4618      	mov	r0, r3
 8002076:	f001 f919 	bl	80032ac <lsm6dso_6d_threshold_set>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <LSM6DSO_ACC_Enable_6D_Orientation+0x52>
  {
    return LSM6DSO_ERROR;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002084:	e04f      	b.n	8002126 <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
  }

  /* Enable 6D orientation event on either INT1 or INT2 pin */
  switch (IntPin)
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <LSM6DSO_ACC_Enable_6D_Orientation+0x5e>
 800208c:	2b01      	cmp	r3, #1
 800208e:	d021      	beq.n	80020d4 <LSM6DSO_ACC_Enable_6D_Orientation+0xa0>
 8002090:	e041      	b.n	8002116 <LSM6DSO_ACC_Enable_6D_Orientation+0xe2>
  {
    case LSM6DSO_INT1_PIN:
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3320      	adds	r3, #32
 8002096:	f107 0214 	add.w	r2, r7, #20
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f001 fd91 	bl	8003bc4 <lsm6dso_pin_int1_route_get>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <LSM6DSO_ACC_Enable_6D_Orientation+0x7a>
      {
        return LSM6DSO_ERROR;
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ac:	e03b      	b.n	8002126 <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }

      val1.six_d = PROPERTY_ENABLE;
 80020ae:	7d7b      	ldrb	r3, [r7, #21]
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	757b      	strb	r3, [r7, #21]

      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f103 0020 	add.w	r0, r3, #32
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020c4:	f001 f9d8 	bl	8003478 <lsm6dso_pin_int1_route_set>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d027      	beq.n	800211e <LSM6DSO_ACC_Enable_6D_Orientation+0xea>
      {
        return LSM6DSO_ERROR;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020d2:	e028      	b.n	8002126 <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }
      break;

    case LSM6DSO_INT2_PIN:
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3320      	adds	r3, #32
 80020d8:	f107 020c 	add.w	r2, r7, #12
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 fad2 	bl	8004688 <lsm6dso_pin_int2_route_get>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <LSM6DSO_ACC_Enable_6D_Orientation+0xbc>
      {
        return LSM6DSO_ERROR;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ee:	e01a      	b.n	8002126 <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }

      val2.six_d = PROPERTY_ENABLE;
 80020f0:	7b7b      	ldrb	r3, [r7, #13]
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	737b      	strb	r3, [r7, #13]

      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f103 0020 	add.w	r0, r3, #32
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	cb0c      	ldmia	r3, {r2, r3}
 8002104:	2100      	movs	r1, #0
 8002106:	f001 ff4d 	bl	8003fa4 <lsm6dso_pin_int2_route_set>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <LSM6DSO_ACC_Enable_6D_Orientation+0xee>
      {
        return LSM6DSO_ERROR;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002114:	e007      	b.n	8002126 <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }
      break;

    default:
      ret = LSM6DSO_ERROR;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800211a:	61fb      	str	r3, [r7, #28]
      break;
 800211c:	e002      	b.n	8002124 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      break;
 800211e:	bf00      	nop
 8002120:	e000      	b.n	8002124 <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      break;
 8002122:	bf00      	nop
  }

  return ret;
 8002124:	69fb      	ldr	r3, [r7, #28]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	43d08000 	.word	0x43d08000

08002134 <LSM6DSO_ACC_Get_Event_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of all hardware events
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_Event_Status(LSM6DSO_Object_t *pObj, LSM6DSO_Event_Status_t *Status)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  lsm6dso_md1_cfg_t md1_cfg;
  lsm6dso_md2_cfg_t md2_cfg;
  lsm6dso_emb_func_int1_t int1_ctrl;
  lsm6dso_emb_func_int2_t int2_ctrl;

  (void)memset((void *)Status, 0x0, sizeof(LSM6DSO_Event_Status_t));
 800213e:	2204      	movs	r2, #4
 8002140:	2100      	movs	r1, #0
 8002142:	6838      	ldr	r0, [r7, #0]
 8002144:	f007 f854 	bl	80091f0 <memset>

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != LSM6DSO_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f103 0020 	add.w	r0, r3, #32
 800214e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002152:	2301      	movs	r3, #1
 8002154:	211b      	movs	r1, #27
 8002156:	f000 fba3 	bl	80028a0 <lsm6dso_read_reg>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <LSM6DSO_ACC_Get_Event_Status+0x32>
  {
    return LSM6DSO_ERROR;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002164:	e12c      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_TAP_SRC, (uint8_t *)&tap_src, 1) != LSM6DSO_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f103 0020 	add.w	r0, r3, #32
 800216c:	f107 0220 	add.w	r2, r7, #32
 8002170:	2301      	movs	r3, #1
 8002172:	211c      	movs	r1, #28
 8002174:	f000 fb94 	bl	80028a0 <lsm6dso_read_reg>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <LSM6DSO_ACC_Get_Event_Status+0x50>
  {
    return LSM6DSO_ERROR;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002182:	e11d      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&d6d_src, 1) != LSM6DSO_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0020 	add.w	r0, r3, #32
 800218a:	f107 021c 	add.w	r2, r7, #28
 800218e:	2301      	movs	r3, #1
 8002190:	211d      	movs	r1, #29
 8002192:	f000 fb85 	bl	80028a0 <lsm6dso_read_reg>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <LSM6DSO_ACC_Get_Event_Status+0x6e>
  {
    return LSM6DSO_ERROR;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021a0:	e10e      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_EMBEDDED_FUNC_BANK) != LSM6DSO_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3320      	adds	r3, #32
 80021a6:	2102      	movs	r1, #2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 ffe3 	bl	8003174 <lsm6dso_mem_bank_set>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <LSM6DSO_ACC_Get_Event_Status+0x86>
  {
    return LSM6DSO_ERROR;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021b8:	e102      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_SRC, (uint8_t *)&func_src, 1) != LSM6DSO_OK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f103 0020 	add.w	r0, r3, #32
 80021c0:	f107 0218 	add.w	r2, r7, #24
 80021c4:	2301      	movs	r3, #1
 80021c6:	2164      	movs	r1, #100	@ 0x64
 80021c8:	f000 fb6a 	bl	80028a0 <lsm6dso_read_reg>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <LSM6DSO_ACC_Get_Event_Status+0xa4>
  {
    return LSM6DSO_ERROR;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021d6:	e0f3      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&int1_ctrl, 1) != LSM6DSO_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f103 0020 	add.w	r0, r3, #32
 80021de:	f107 020c 	add.w	r2, r7, #12
 80021e2:	2301      	movs	r3, #1
 80021e4:	210a      	movs	r1, #10
 80021e6:	f000 fb5b 	bl	80028a0 <lsm6dso_read_reg>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <LSM6DSO_ACC_Get_Event_Status+0xc2>
  {
    return LSM6DSO_ERROR;
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021f4:	e0e4      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&int2_ctrl, 1) != LSM6DSO_OK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f103 0020 	add.w	r0, r3, #32
 80021fc:	f107 0208 	add.w	r2, r7, #8
 8002200:	2301      	movs	r3, #1
 8002202:	210e      	movs	r1, #14
 8002204:	f000 fb4c 	bl	80028a0 <lsm6dso_read_reg>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <LSM6DSO_ACC_Get_Event_Status+0xe0>
  {
    return LSM6DSO_ERROR;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002212:	e0d5      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_USER_BANK) != 0)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3320      	adds	r3, #32
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f000 ffaa 	bl	8003174 <lsm6dso_mem_bank_set>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <LSM6DSO_ACC_Get_Event_Status+0xf8>
  {
    return LSM6DSO_ERROR;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800222a:	e0c9      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1) != LSM6DSO_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0020 	add.w	r0, r3, #32
 8002232:	f107 0214 	add.w	r2, r7, #20
 8002236:	2301      	movs	r3, #1
 8002238:	215e      	movs	r1, #94	@ 0x5e
 800223a:	f000 fb31 	bl	80028a0 <lsm6dso_read_reg>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <LSM6DSO_ACC_Get_Event_Status+0x116>
  {
    return LSM6DSO_ERROR;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002248:	e0ba      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1) != LSM6DSO_OK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f103 0020 	add.w	r0, r3, #32
 8002250:	f107 0210 	add.w	r2, r7, #16
 8002254:	2301      	movs	r3, #1
 8002256:	215f      	movs	r1, #95	@ 0x5f
 8002258:	f000 fb22 	bl	80028a0 <lsm6dso_read_reg>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <LSM6DSO_ACC_Get_Event_Status+0x134>
  {
    return LSM6DSO_ERROR;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002266:	e0ab      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_tilt_flag_data_ready_get(&(pObj->Ctx), &tilt_ia) != LSM6DSO_OK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3320      	adds	r3, #32
 800226c:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f001 f866 	bl	8003344 <lsm6dso_tilt_flag_data_ready_get>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <LSM6DSO_ACC_Get_Event_Status+0x150>
  {
    return LSM6DSO_ERROR;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002282:	e09d      	b.n	80023c0 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if ((md1_cfg.int1_ff == 1U) || (md2_cfg.int2_ff == 1U))
 8002284:	7d3b      	ldrb	r3, [r7, #20]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <LSM6DSO_ACC_Get_Event_Status+0x168>
 8002290:	7c3b      	ldrb	r3, [r7, #16]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00b      	beq.n	80022b4 <LSM6DSO_ACC_Get_Event_Status+0x180>
  {
    if (wake_up_src.ff_ia == 1U)
 800229c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <LSM6DSO_ACC_Get_Event_Status+0x180>
    {
      Status->FreeFallStatus = 1;
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	7813      	ldrb	r3, [r2, #0]
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_wu == 1U) || (md2_cfg.int2_wu == 1U))
 80022b4:	7d3b      	ldrb	r3, [r7, #20]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <LSM6DSO_ACC_Get_Event_Status+0x198>
 80022c0:	7c3b      	ldrb	r3, [r7, #16]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <LSM6DSO_ACC_Get_Event_Status+0x1b0>
  {
    if (wake_up_src.wu_ia == 1U)
 80022cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <LSM6DSO_ACC_Get_Event_Status+0x1b0>
    {
      Status->WakeUpStatus = 1;
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	7813      	ldrb	r3, [r2, #0]
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_single_tap == 1U) || (md2_cfg.int2_single_tap == 1U))
 80022e4:	7d3b      	ldrb	r3, [r7, #20]
 80022e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <LSM6DSO_ACC_Get_Event_Status+0x1c8>
 80022f0:	7c3b      	ldrb	r3, [r7, #16]
 80022f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00b      	beq.n	8002314 <LSM6DSO_ACC_Get_Event_Status+0x1e0>
  {
    if (tap_src.single_tap == 1U)
 80022fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <LSM6DSO_ACC_Get_Event_Status+0x1e0>
    {
      Status->TapStatus = 1;
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	7813      	ldrb	r3, [r2, #0]
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_double_tap == 1U) || (md2_cfg.int2_double_tap == 1U))
 8002314:	7d3b      	ldrb	r3, [r7, #20]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <LSM6DSO_ACC_Get_Event_Status+0x1f8>
 8002320:	7c3b      	ldrb	r3, [r7, #16]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <LSM6DSO_ACC_Get_Event_Status+0x210>
  {
    if (tap_src.double_tap == 1U)
 800232c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <LSM6DSO_ACC_Get_Event_Status+0x210>
    {
      Status->DoubleTapStatus = 1;
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	7813      	ldrb	r3, [r2, #0]
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_6d == 1U) || (md2_cfg.int2_6d == 1U))
 8002344:	7d3b      	ldrb	r3, [r7, #20]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <LSM6DSO_ACC_Get_Event_Status+0x228>
 8002350:	7c3b      	ldrb	r3, [r7, #16]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <LSM6DSO_ACC_Get_Event_Status+0x23e>
  {
    if (d6d_src.d6d_ia == 1U)
 800235c:	7f3b      	ldrb	r3, [r7, #28]
 800235e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <LSM6DSO_ACC_Get_Event_Status+0x23e>
    {
      Status->D6DOrientationStatus = 1;
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	7813      	ldrb	r3, [r2, #0]
 800236c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002370:	7013      	strb	r3, [r2, #0]
    }
  }

  if (int1_ctrl.int1_step_detector == 1U)
 8002372:	7b3b      	ldrb	r3, [r7, #12]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <LSM6DSO_ACC_Get_Event_Status+0x260>
  {
    if (func_src.step_detected == 1U)
 800237e:	7e3b      	ldrb	r3, [r7, #24]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <LSM6DSO_ACC_Get_Event_Status+0x260>
    {
      Status->StepStatus = 1;
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	7813      	ldrb	r3, [r2, #0]
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((int1_ctrl.int1_tilt == 1U) || (int2_ctrl.int2_tilt == 1U))
 8002394:	7b3b      	ldrb	r3, [r7, #12]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <LSM6DSO_ACC_Get_Event_Status+0x278>
 80023a0:	7a3b      	ldrb	r3, [r7, #8]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <LSM6DSO_ACC_Get_Event_Status+0x28a>
  {
    if (tilt_ia == 1U)
 80023ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d104      	bne.n	80023be <LSM6DSO_ACC_Get_Event_Status+0x28a>
    {
      Status->TiltStatus = 1;
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	7813      	ldrb	r3, [r2, #0]
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	7013      	strb	r3, [r2, #0]
    }
  }

  return LSM6DSO_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3728      	adds	r7, #40	@ 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80023d4:	edd7 7a00 	vldr	s15, [r7]
 80023d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80024d8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80023dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	d801      	bhi.n	80023ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80023e6:	230b      	movs	r3, #11
 80023e8:	e063      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80023ea:	edd7 7a00 	vldr	s15, [r7]
 80023ee:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80023f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fa:	d801      	bhi.n	8002400 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e058      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002400:	edd7 7a00 	vldr	s15, [r7]
 8002404:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8002408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	d801      	bhi.n	8002416 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002412:	2302      	movs	r3, #2
 8002414:	e04d      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002416:	edd7 7a00 	vldr	s15, [r7]
 800241a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80024dc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800241e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	d801      	bhi.n	800242c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002428:	2303      	movs	r3, #3
 800242a:	e042      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800242c:	edd7 7a00 	vldr	s15, [r7]
 8002430:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80024e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8002434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243c:	d801      	bhi.n	8002442 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800243e:	2304      	movs	r3, #4
 8002440:	e037      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002442:	edd7 7a00 	vldr	s15, [r7]
 8002446:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80024e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800244a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002452:	d801      	bhi.n	8002458 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002454:	2305      	movs	r3, #5
 8002456:	e02c      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002458:	edd7 7a00 	vldr	s15, [r7]
 800245c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80024e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8002460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	d801      	bhi.n	800246e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800246a:	2306      	movs	r3, #6
 800246c:	e021      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800246e:	edd7 7a00 	vldr	s15, [r7]
 8002472:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80024ec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8002476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247e:	d801      	bhi.n	8002484 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002480:	2307      	movs	r3, #7
 8002482:	e016      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002484:	edd7 7a00 	vldr	s15, [r7]
 8002488:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80024f0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800248c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002494:	d801      	bhi.n	800249a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8002496:	2308      	movs	r3, #8
 8002498:	e00b      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800249a:	edd7 7a00 	vldr	s15, [r7]
 800249e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80024f4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80024a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	d801      	bhi.n	80024b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80024ac:	2309      	movs	r3, #9
 80024ae:	e000      	b.n	80024b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80024b0:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80024b2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3320      	adds	r3, #32
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fa7d 	bl	80029bc <lsm6dso_xl_data_rate_set>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024cc:	e000      	b.n	80024d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	3fcccccd 	.word	0x3fcccccd
 80024dc:	42500000 	.word	0x42500000
 80024e0:	42d00000 	.word	0x42d00000
 80024e4:	43500000 	.word	0x43500000
 80024e8:	43d08000 	.word	0x43d08000
 80024ec:	44504000 	.word	0x44504000
 80024f0:	44d06000 	.word	0x44d06000
 80024f4:	45505000 	.word	0x45505000

080024f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8002504:	edd7 7a00 	vldr	s15, [r7]
 8002508:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80025f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 800250c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	d801      	bhi.n	800251a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002516:	230b      	movs	r3, #11
 8002518:	e063      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800251a:	edd7 7a00 	vldr	s15, [r7]
 800251e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	d801      	bhi.n	8002530 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 800252c:	2301      	movs	r3, #1
 800252e:	e058      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002530:	edd7 7a00 	vldr	s15, [r7]
 8002534:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8002538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002540:	d801      	bhi.n	8002546 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8002542:	2302      	movs	r3, #2
 8002544:	e04d      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002546:	edd7 7a00 	vldr	s15, [r7]
 800254a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80025fc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800254e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d801      	bhi.n	800255c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002558:	2303      	movs	r3, #3
 800255a:	e042      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800255c:	edd7 7a00 	vldr	s15, [r7]
 8002560:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002600 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	d801      	bhi.n	8002572 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800256e:	2304      	movs	r3, #4
 8002570:	e037      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002572:	edd7 7a00 	vldr	s15, [r7]
 8002576:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002604 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800257a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	d801      	bhi.n	8002588 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002584:	2305      	movs	r3, #5
 8002586:	e02c      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002588:	edd7 7a00 	vldr	s15, [r7]
 800258c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002608 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d801      	bhi.n	800259e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800259a:	2306      	movs	r3, #6
 800259c:	e021      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800259e:	edd7 7a00 	vldr	s15, [r7]
 80025a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800260c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80025a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	d801      	bhi.n	80025b4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80025b0:	2307      	movs	r3, #7
 80025b2:	e016      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80025b4:	edd7 7a00 	vldr	s15, [r7]
 80025b8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002610 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80025bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	d801      	bhi.n	80025ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80025c6:	2308      	movs	r3, #8
 80025c8:	e00b      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80025ca:	edd7 7a00 	vldr	s15, [r7]
 80025ce:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002614 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80025d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	d801      	bhi.n	80025e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80025dc:	2309      	movs	r3, #9
 80025de:	e000      	b.n	80025e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80025e0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	3fcccccd 	.word	0x3fcccccd
 80025fc:	42500000 	.word	0x42500000
 8002600:	42d00000 	.word	0x42d00000
 8002604:	43500000 	.word	0x43500000
 8002608:	43d08000 	.word	0x43d08000
 800260c:	44504000 	.word	0x44504000
 8002610:	44d06000 	.word	0x44d06000
 8002614:	45505000 	.word	0x45505000

08002618 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8002624:	edd7 7a00 	vldr	s15, [r7]
 8002628:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800262c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002634:	d801      	bhi.n	800263a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8002636:	2301      	movs	r3, #1
 8002638:	e058      	b.n	80026ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800263a:	edd7 7a00 	vldr	s15, [r7]
 800263e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8002642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	d801      	bhi.n	8002650 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800264c:	2302      	movs	r3, #2
 800264e:	e04d      	b.n	80026ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002650:	edd7 7a00 	vldr	s15, [r7]
 8002654:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002714 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8002658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	d801      	bhi.n	8002666 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8002662:	2303      	movs	r3, #3
 8002664:	e042      	b.n	80026ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002666:	edd7 7a00 	vldr	s15, [r7]
 800266a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002718 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800266e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	d801      	bhi.n	800267c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8002678:	2304      	movs	r3, #4
 800267a:	e037      	b.n	80026ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800267c:	edd7 7a00 	vldr	s15, [r7]
 8002680:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800271c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8002684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268c:	d801      	bhi.n	8002692 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800268e:	2305      	movs	r3, #5
 8002690:	e02c      	b.n	80026ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002692:	edd7 7a00 	vldr	s15, [r7]
 8002696:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002720 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800269a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	d801      	bhi.n	80026a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80026a4:	2306      	movs	r3, #6
 80026a6:	e021      	b.n	80026ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80026a8:	edd7 7a00 	vldr	s15, [r7]
 80026ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002724 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80026b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b8:	d801      	bhi.n	80026be <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80026ba:	2307      	movs	r3, #7
 80026bc:	e016      	b.n	80026ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80026be:	edd7 7a00 	vldr	s15, [r7]
 80026c2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002728 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80026c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ce:	d801      	bhi.n	80026d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80026d0:	2308      	movs	r3, #8
 80026d2:	e00b      	b.n	80026ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80026d4:	edd7 7a00 	vldr	s15, [r7]
 80026d8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800272c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80026dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e4:	d801      	bhi.n	80026ea <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80026e6:	2309      	movs	r3, #9
 80026e8:	e000      	b.n	80026ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80026ea:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80026ec:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3320      	adds	r3, #32
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fb2a 	bl	8002d50 <lsm6dso_gy_data_rate_set>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002706:	e000      	b.n	800270a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	42500000 	.word	0x42500000
 8002718:	42d00000 	.word	0x42d00000
 800271c:	43500000 	.word	0x43500000
 8002720:	43d08000 	.word	0x43d08000
 8002724:	44504000 	.word	0x44504000
 8002728:	44d06000 	.word	0x44d06000
 800272c:	45505000 	.word	0x45505000

08002730 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800273c:	edd7 7a00 	vldr	s15, [r7]
 8002740:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	d801      	bhi.n	8002752 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800274e:	2301      	movs	r3, #1
 8002750:	e058      	b.n	8002804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002752:	edd7 7a00 	vldr	s15, [r7]
 8002756:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800275a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	d801      	bhi.n	8002768 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8002764:	2302      	movs	r3, #2
 8002766:	e04d      	b.n	8002804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002768:	edd7 7a00 	vldr	s15, [r7]
 800276c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002818 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8002770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	d801      	bhi.n	800277e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800277a:	2303      	movs	r3, #3
 800277c:	e042      	b.n	8002804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800277e:	edd7 7a00 	vldr	s15, [r7]
 8002782:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800281c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8002786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	d801      	bhi.n	8002794 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8002790:	2304      	movs	r3, #4
 8002792:	e037      	b.n	8002804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002794:	edd7 7a00 	vldr	s15, [r7]
 8002798:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002820 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800279c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	d801      	bhi.n	80027aa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80027a6:	2305      	movs	r3, #5
 80027a8:	e02c      	b.n	8002804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80027aa:	edd7 7a00 	vldr	s15, [r7]
 80027ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002824 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80027b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	d801      	bhi.n	80027c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80027bc:	2306      	movs	r3, #6
 80027be:	e021      	b.n	8002804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80027c0:	edd7 7a00 	vldr	s15, [r7]
 80027c4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002828 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80027c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	d801      	bhi.n	80027d6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e016      	b.n	8002804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80027d6:	edd7 7a00 	vldr	s15, [r7]
 80027da:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800282c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80027de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e6:	d801      	bhi.n	80027ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80027e8:	2308      	movs	r3, #8
 80027ea:	e00b      	b.n	8002804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80027ec:	edd7 7a00 	vldr	s15, [r7]
 80027f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002830 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80027f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fc:	d801      	bhi.n	8002802 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80027fe:	2309      	movs	r3, #9
 8002800:	e000      	b.n	8002804 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002802:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	42500000 	.word	0x42500000
 800281c:	42d00000 	.word	0x42d00000
 8002820:	43500000 	.word	0x43500000
 8002824:	43d08000 	.word	0x43d08000
 8002828:	44504000 	.word	0x44504000
 800282c:	44d06000 	.word	0x44d06000
 8002830:	45505000 	.word	0x45505000

08002834 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	461a      	mov	r2, r3
 8002840:	460b      	mov	r3, r1
 8002842:	72fb      	strb	r3, [r7, #11]
 8002844:	4613      	mov	r3, r2
 8002846:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	695c      	ldr	r4, [r3, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	7b1b      	ldrb	r3, [r3, #12]
 8002854:	4618      	mov	r0, r3
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	b299      	uxth	r1, r3
 800285a:	893b      	ldrh	r3, [r7, #8]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	47a0      	blx	r4
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	bd90      	pop	{r4, r7, pc}

0800286a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800286a:	b590      	push	{r4, r7, lr}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	461a      	mov	r2, r3
 8002876:	460b      	mov	r3, r1
 8002878:	72fb      	strb	r3, [r7, #11]
 800287a:	4613      	mov	r3, r2
 800287c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	691c      	ldr	r4, [r3, #16]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	7b1b      	ldrb	r3, [r3, #12]
 800288a:	4618      	mov	r0, r3
 800288c:	7afb      	ldrb	r3, [r7, #11]
 800288e:	b299      	uxth	r1, r3
 8002890:	893b      	ldrh	r3, [r7, #8]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	47a0      	blx	r4
 8002896:	4603      	mov	r3, r0
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd90      	pop	{r4, r7, pc}

080028a0 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	461a      	mov	r2, r3
 80028ac:	460b      	mov	r3, r1
 80028ae:	72fb      	strb	r3, [r7, #11]
 80028b0:	4613      	mov	r3, r2
 80028b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685c      	ldr	r4, [r3, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68d8      	ldr	r0, [r3, #12]
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	7af9      	ldrb	r1, [r7, #11]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	47a0      	blx	r4
 80028c4:	6178      	str	r0, [r7, #20]

  return ret;
 80028c6:	697b      	ldr	r3, [r7, #20]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd90      	pop	{r4, r7, pc}

080028d0 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	461a      	mov	r2, r3
 80028dc:	460b      	mov	r3, r1
 80028de:	72fb      	strb	r3, [r7, #11]
 80028e0:	4613      	mov	r3, r2
 80028e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681c      	ldr	r4, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68d8      	ldr	r0, [r3, #12]
 80028ec:	893b      	ldrh	r3, [r7, #8]
 80028ee:	7af9      	ldrb	r1, [r7, #11]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	47a0      	blx	r4
 80028f4:	6178      	str	r0, [r7, #20]

  return ret;
 80028f6:	697b      	ldr	r3, [r7, #20]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd90      	pop	{r4, r7, pc}

08002900 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800290c:	f107 0208 	add.w	r2, r7, #8
 8002910:	2301      	movs	r3, #1
 8002912:	2110      	movs	r1, #16
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ffc3 	bl	80028a0 <lsm6dso_read_reg>
 800291a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10f      	bne.n	8002942 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	b2da      	uxtb	r2, r3
 800292a:	7a3b      	ldrb	r3, [r7, #8]
 800292c:	f362 0383 	bfi	r3, r2, #2, #2
 8002930:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002932:	f107 0208 	add.w	r2, r7, #8
 8002936:	2301      	movs	r3, #1
 8002938:	2110      	movs	r1, #16
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffc8 	bl	80028d0 <lsm6dso_write_reg>
 8002940:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002956:	f107 0208 	add.w	r2, r7, #8
 800295a:	2301      	movs	r3, #1
 800295c:	2110      	movs	r1, #16
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff9e 	bl	80028a0 <lsm6dso_read_reg>
 8002964:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8002966:	7a3b      	ldrb	r3, [r7, #8]
 8002968:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b03      	cmp	r3, #3
 8002970:	d81a      	bhi.n	80029a8 <lsm6dso_xl_full_scale_get+0x5c>
 8002972:	a201      	add	r2, pc, #4	@ (adr r2, 8002978 <lsm6dso_xl_full_scale_get+0x2c>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	08002989 	.word	0x08002989
 800297c:	08002991 	.word	0x08002991
 8002980:	08002999 	.word	0x08002999
 8002984:	080029a1 	.word	0x080029a1
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
      break;
 800298e:	e00f      	b.n	80029b0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
      break;
 8002996:	e00b      	b.n	80029b0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2202      	movs	r2, #2
 800299c:	701a      	strb	r2, [r3, #0]
      break;
 800299e:	e007      	b.n	80029b0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2203      	movs	r2, #3
 80029a4:	701a      	strb	r2, [r3, #0]
      break;
 80029a6:	e003      	b.n	80029b0 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
      break;
 80029ae:	bf00      	nop
  }

  return ret;
 80029b0:	68fb      	ldr	r3, [r7, #12]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop

080029bc <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fce1 	bl	800339a <lsm6dso_fsm_enable_get>
 80029d8:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <lsm6dso_xl_data_rate_set+0x28>
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	e0e0      	b.n	8002ba6 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80029e4:	7b3b      	ldrb	r3, [r7, #12]
 80029e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029ea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80029ec:	7b3b      	ldrb	r3, [r7, #12]
 80029ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80029f2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80029f8:	7b3b      	ldrb	r3, [r7, #12]
 80029fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80029fe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002a00:	4313      	orrs	r3, r2
 8002a02:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002a04:	7b3b      	ldrb	r3, [r7, #12]
 8002a06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002a0a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002a10:	7b3b      	ldrb	r3, [r7, #12]
 8002a12:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a16:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002a22:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002a24:	4313      	orrs	r3, r2
 8002a26:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002a28:	7b3b      	ldrb	r3, [r7, #12]
 8002a2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a2e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002a30:	4313      	orrs	r3, r2
 8002a32:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002a34:	7b3b      	ldrb	r3, [r7, #12]
 8002a36:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a3a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002a40:	7b7b      	ldrb	r3, [r7, #13]
 8002a42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a46:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002a4c:	7b7b      	ldrb	r3, [r7, #13]
 8002a4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002a52:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002a54:	4313      	orrs	r3, r2
 8002a56:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002a58:	7b7b      	ldrb	r3, [r7, #13]
 8002a5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a5e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002a60:	4313      	orrs	r3, r2
 8002a62:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002a64:	7b7b      	ldrb	r3, [r7, #13]
 8002a66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002a6a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002a70:	7b7b      	ldrb	r3, [r7, #13]
 8002a72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a76:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002a7c:	7b7b      	ldrb	r3, [r7, #13]
 8002a7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002a82:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002a88:	7b7b      	ldrb	r3, [r7, #13]
 8002a8a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a8e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002a90:	4313      	orrs	r3, r2
 8002a92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002a94:	7b7b      	ldrb	r3, [r7, #13]
 8002a96:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a9a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d164      	bne.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002aa4:	f107 030b 	add.w	r3, r7, #11
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fc96 	bl	80033dc <lsm6dso_fsm_data_rate_get>
 8002ab0:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <lsm6dso_xl_data_rate_set+0x100>
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	e074      	b.n	8002ba6 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8002abc:	7afb      	ldrb	r3, [r7, #11]
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d852      	bhi.n	8002b68 <lsm6dso_xl_data_rate_set+0x1ac>
 8002ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac8 <lsm6dso_xl_data_rate_set+0x10c>)
 8002ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac8:	08002ad9 	.word	0x08002ad9
 8002acc:	08002aeb 	.word	0x08002aeb
 8002ad0:	08002b09 	.word	0x08002b09
 8002ad4:	08002b33 	.word	0x08002b33
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d102      	bne.n	8002ae4 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002ae2:	e044      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	75fb      	strb	r3, [r7, #23]
        break;
 8002ae8:	e041      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002af0:	2302      	movs	r3, #2
 8002af2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002af4:	e03b      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002afc:	2302      	movs	r3, #2
 8002afe:	75fb      	strb	r3, [r7, #23]
        break;
 8002b00:	e035      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	75fb      	strb	r3, [r7, #23]
        break;
 8002b06:	e032      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002b12:	e02c      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d102      	bne.n	8002b20 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	75fb      	strb	r3, [r7, #23]
        break;
 8002b1e:	e026      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d102      	bne.n	8002b2c <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002b26:	2303      	movs	r3, #3
 8002b28:	75fb      	strb	r3, [r7, #23]
        break;
 8002b2a:	e020      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	75fb      	strb	r3, [r7, #23]
        break;
 8002b30:	e01d      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8002b3c:	e017      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d102      	bne.n	8002b4a <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002b44:	2304      	movs	r3, #4
 8002b46:	75fb      	strb	r3, [r7, #23]
        break;
 8002b48:	e011      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d102      	bne.n	8002b56 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002b50:	2304      	movs	r3, #4
 8002b52:	75fb      	strb	r3, [r7, #23]
        break;
 8002b54:	e00b      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d102      	bne.n	8002b62 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	75fb      	strb	r3, [r7, #23]
        break;
 8002b60:	e005      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	75fb      	strb	r3, [r7, #23]
        break;
 8002b66:	e002      	b.n	8002b6e <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	75fb      	strb	r3, [r7, #23]
        break;
 8002b6c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002b6e:	f107 0208 	add.w	r2, r7, #8
 8002b72:	2301      	movs	r3, #1
 8002b74:	2110      	movs	r1, #16
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff fe92 	bl	80028a0 <lsm6dso_read_reg>
 8002b7c:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	7a3b      	ldrb	r3, [r7, #8]
 8002b88:	f362 1307 	bfi	r3, r2, #4, #4
 8002b8c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002b8e:	f107 0208 	add.w	r2, r7, #8
 8002b92:	2301      	movs	r3, #1
 8002b94:	2110      	movs	r1, #16
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fe9a 	bl	80028d0 <lsm6dso_write_reg>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

  return ret;
 8002ba4:	693b      	ldr	r3, [r7, #16]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop

08002bb0 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002bba:	f107 0208 	add.w	r2, r7, #8
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff fe6c 	bl	80028a0 <lsm6dso_read_reg>
 8002bc8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8002bca:	7a3b      	ldrb	r3, [r7, #8]
 8002bcc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b0b      	cmp	r3, #11
 8002bd4:	d84a      	bhi.n	8002c6c <lsm6dso_xl_data_rate_get+0xbc>
 8002bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <lsm6dso_xl_data_rate_get+0x2c>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002c0d 	.word	0x08002c0d
 8002be0:	08002c15 	.word	0x08002c15
 8002be4:	08002c1d 	.word	0x08002c1d
 8002be8:	08002c25 	.word	0x08002c25
 8002bec:	08002c2d 	.word	0x08002c2d
 8002bf0:	08002c35 	.word	0x08002c35
 8002bf4:	08002c3d 	.word	0x08002c3d
 8002bf8:	08002c45 	.word	0x08002c45
 8002bfc:	08002c4d 	.word	0x08002c4d
 8002c00:	08002c55 	.word	0x08002c55
 8002c04:	08002c5d 	.word	0x08002c5d
 8002c08:	08002c65 	.word	0x08002c65
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
      break;
 8002c12:	e02f      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
      break;
 8002c1a:	e02b      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	701a      	strb	r2, [r3, #0]
      break;
 8002c22:	e027      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2203      	movs	r2, #3
 8002c28:	701a      	strb	r2, [r3, #0]
      break;
 8002c2a:	e023      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	701a      	strb	r2, [r3, #0]
      break;
 8002c32:	e01f      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2205      	movs	r2, #5
 8002c38:	701a      	strb	r2, [r3, #0]
      break;
 8002c3a:	e01b      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2206      	movs	r2, #6
 8002c40:	701a      	strb	r2, [r3, #0]
      break;
 8002c42:	e017      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2207      	movs	r2, #7
 8002c48:	701a      	strb	r2, [r3, #0]
      break;
 8002c4a:	e013      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2208      	movs	r2, #8
 8002c50:	701a      	strb	r2, [r3, #0]
      break;
 8002c52:	e00f      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2209      	movs	r2, #9
 8002c58:	701a      	strb	r2, [r3, #0]
      break;
 8002c5a:	e00b      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	220a      	movs	r2, #10
 8002c60:	701a      	strb	r2, [r3, #0]
      break;
 8002c62:	e007      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	220b      	movs	r2, #11
 8002c68:	701a      	strb	r2, [r3, #0]
      break;
 8002c6a:	e003      	b.n	8002c74 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
      break;
 8002c72:	bf00      	nop
  }

  return ret;
 8002c74:	68fb      	ldr	r3, [r7, #12]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop

08002c80 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002c8c:	f107 0208 	add.w	r2, r7, #8
 8002c90:	2301      	movs	r3, #1
 8002c92:	2111      	movs	r1, #17
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fe03 	bl	80028a0 <lsm6dso_read_reg>
 8002c9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	7a3b      	ldrb	r3, [r7, #8]
 8002cac:	f362 0343 	bfi	r3, r2, #1, #3
 8002cb0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002cb2:	f107 0208 	add.w	r2, r7, #8
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	2111      	movs	r1, #17
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fe08 	bl	80028d0 <lsm6dso_write_reg>
 8002cc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002cd6:	f107 0208 	add.w	r2, r7, #8
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2111      	movs	r1, #17
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fdde 	bl	80028a0 <lsm6dso_read_reg>
 8002ce4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8002ce6:	7a3b      	ldrb	r3, [r7, #8]
 8002ce8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d824      	bhi.n	8002d3c <lsm6dso_gy_full_scale_get+0x70>
 8002cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <lsm6dso_gy_full_scale_get+0x2c>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d15 	.word	0x08002d15
 8002cfc:	08002d1d 	.word	0x08002d1d
 8002d00:	08002d25 	.word	0x08002d25
 8002d04:	08002d3d 	.word	0x08002d3d
 8002d08:	08002d2d 	.word	0x08002d2d
 8002d0c:	08002d3d 	.word	0x08002d3d
 8002d10:	08002d35 	.word	0x08002d35
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
      break;
 8002d1a:	e013      	b.n	8002d44 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
      break;
 8002d22:	e00f      	b.n	8002d44 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
      break;
 8002d2a:	e00b      	b.n	8002d44 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	701a      	strb	r2, [r3, #0]
      break;
 8002d32:	e007      	b.n	8002d44 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2206      	movs	r2, #6
 8002d38:	701a      	strb	r2, [r3, #0]
      break;
 8002d3a:	e003      	b.n	8002d44 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
      break;
 8002d42:	bf00      	nop
  }

  return ret;
 8002d44:	68fb      	ldr	r3, [r7, #12]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop

08002d50 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fb17 	bl	800339a <lsm6dso_fsm_enable_get>
 8002d6c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <lsm6dso_gy_data_rate_set+0x28>
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	e0e0      	b.n	8002f3a <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002d78:	7b3b      	ldrb	r3, [r7, #12]
 8002d7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d7e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002d80:	7b3b      	ldrb	r3, [r7, #12]
 8002d82:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d86:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002d8c:	7b3b      	ldrb	r3, [r7, #12]
 8002d8e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d92:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002d98:	7b3b      	ldrb	r3, [r7, #12]
 8002d9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002d9e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8002da0:	4313      	orrs	r3, r2
 8002da2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002da4:	7b3b      	ldrb	r3, [r7, #12]
 8002da6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002daa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002db0:	7b3b      	ldrb	r3, [r7, #12]
 8002db2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002db6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8002db8:	4313      	orrs	r3, r2
 8002dba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002dbc:	7b3b      	ldrb	r3, [r7, #12]
 8002dbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002dc2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002dc8:	7b3b      	ldrb	r3, [r7, #12]
 8002dca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002dce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002dd4:	7b7b      	ldrb	r3, [r7, #13]
 8002dd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002dda:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002de0:	7b7b      	ldrb	r3, [r7, #13]
 8002de2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002de6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002dec:	7b7b      	ldrb	r3, [r7, #13]
 8002dee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002df2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8002df4:	4313      	orrs	r3, r2
 8002df6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002df8:	7b7b      	ldrb	r3, [r7, #13]
 8002dfa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002dfe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8002e00:	4313      	orrs	r3, r2
 8002e02:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002e04:	7b7b      	ldrb	r3, [r7, #13]
 8002e06:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e0a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002e10:	7b7b      	ldrb	r3, [r7, #13]
 8002e12:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002e16:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002e1c:	7b7b      	ldrb	r3, [r7, #13]
 8002e1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002e22:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002e28:	7b7b      	ldrb	r3, [r7, #13]
 8002e2a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e2e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d164      	bne.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002e38:	f107 030b 	add.w	r3, r7, #11
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 facc 	bl	80033dc <lsm6dso_fsm_data_rate_get>
 8002e44:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <lsm6dso_gy_data_rate_set+0x100>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	e074      	b.n	8002f3a <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8002e50:	7afb      	ldrb	r3, [r7, #11]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d852      	bhi.n	8002efc <lsm6dso_gy_data_rate_set+0x1ac>
 8002e56:	a201      	add	r2, pc, #4	@ (adr r2, 8002e5c <lsm6dso_gy_data_rate_set+0x10c>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e7f 	.word	0x08002e7f
 8002e64:	08002e9d 	.word	0x08002e9d
 8002e68:	08002ec7 	.word	0x08002ec7
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002e76:	e044      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	75fb      	strb	r3, [r7, #23]
        break;
 8002e7c:	e041      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002e84:	2302      	movs	r3, #2
 8002e86:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002e88:	e03b      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d102      	bne.n	8002e96 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002e90:	2302      	movs	r3, #2
 8002e92:	75fb      	strb	r3, [r7, #23]
        break;
 8002e94:	e035      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	75fb      	strb	r3, [r7, #23]
        break;
 8002e9a:	e032      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002ea6:	e02c      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d102      	bne.n	8002eb4 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	75fb      	strb	r3, [r7, #23]
        break;
 8002eb2:	e026      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d102      	bne.n	8002ec0 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	75fb      	strb	r3, [r7, #23]
        break;
 8002ebe:	e020      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	75fb      	strb	r3, [r7, #23]
        break;
 8002ec4:	e01d      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002ecc:	2304      	movs	r3, #4
 8002ece:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8002ed0:	e017      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	75fb      	strb	r3, [r7, #23]
        break;
 8002edc:	e011      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d102      	bne.n	8002eea <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	75fb      	strb	r3, [r7, #23]
        break;
 8002ee8:	e00b      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d102      	bne.n	8002ef6 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	75fb      	strb	r3, [r7, #23]
        break;
 8002ef4:	e005      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	75fb      	strb	r3, [r7, #23]
        break;
 8002efa:	e002      	b.n	8002f02 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	75fb      	strb	r3, [r7, #23]
        break;
 8002f00:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002f02:	f107 0208 	add.w	r2, r7, #8
 8002f06:	2301      	movs	r3, #1
 8002f08:	2111      	movs	r1, #17
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fcc8 	bl	80028a0 <lsm6dso_read_reg>
 8002f10:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	7a3b      	ldrb	r3, [r7, #8]
 8002f1c:	f362 1307 	bfi	r3, r2, #4, #4
 8002f20:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002f22:	f107 0208 	add.w	r2, r7, #8
 8002f26:	2301      	movs	r3, #1
 8002f28:	2111      	movs	r1, #17
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fcd0 	bl	80028d0 <lsm6dso_write_reg>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

  return ret;
 8002f38:	693b      	ldr	r3, [r7, #16]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop

08002f44 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002f4e:	f107 0208 	add.w	r2, r7, #8
 8002f52:	2301      	movs	r3, #1
 8002f54:	2111      	movs	r1, #17
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fca2 	bl	80028a0 <lsm6dso_read_reg>
 8002f5c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8002f5e:	7a3b      	ldrb	r3, [r7, #8]
 8002f60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b0a      	cmp	r3, #10
 8002f68:	d844      	bhi.n	8002ff4 <lsm6dso_gy_data_rate_get+0xb0>
 8002f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <lsm6dso_gy_data_rate_get+0x2c>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002f9d 	.word	0x08002f9d
 8002f74:	08002fa5 	.word	0x08002fa5
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	08002fb5 	.word	0x08002fb5
 8002f80:	08002fbd 	.word	0x08002fbd
 8002f84:	08002fc5 	.word	0x08002fc5
 8002f88:	08002fcd 	.word	0x08002fcd
 8002f8c:	08002fd5 	.word	0x08002fd5
 8002f90:	08002fdd 	.word	0x08002fdd
 8002f94:	08002fe5 	.word	0x08002fe5
 8002f98:	08002fed 	.word	0x08002fed
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
      break;
 8002fa2:	e02b      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
      break;
 8002faa:	e027      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	701a      	strb	r2, [r3, #0]
      break;
 8002fb2:	e023      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	701a      	strb	r2, [r3, #0]
      break;
 8002fba:	e01f      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	701a      	strb	r2, [r3, #0]
      break;
 8002fc2:	e01b      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2205      	movs	r2, #5
 8002fc8:	701a      	strb	r2, [r3, #0]
      break;
 8002fca:	e017      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2206      	movs	r2, #6
 8002fd0:	701a      	strb	r2, [r3, #0]
      break;
 8002fd2:	e013      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	701a      	strb	r2, [r3, #0]
      break;
 8002fda:	e00f      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	701a      	strb	r2, [r3, #0]
      break;
 8002fe2:	e00b      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2209      	movs	r2, #9
 8002fe8:	701a      	strb	r2, [r3, #0]
      break;
 8002fea:	e007      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	220a      	movs	r2, #10
 8002ff0:	701a      	strb	r2, [r3, #0]
      break;
 8002ff2:	e003      	b.n	8002ffc <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
      break;
 8002ffa:	bf00      	nop
  }

  return ret;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop

08003008 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003014:	f107 0208 	add.w	r2, r7, #8
 8003018:	2301      	movs	r3, #1
 800301a:	2112      	movs	r1, #18
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fc3f 	bl	80028a0 <lsm6dso_read_reg>
 8003022:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	7a3b      	ldrb	r3, [r7, #8]
 8003034:	f362 1386 	bfi	r3, r2, #6, #1
 8003038:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800303a:	f107 0208 	add.w	r2, r7, #8
 800303e:	2301      	movs	r3, #1
 8003040:	2112      	movs	r1, #18
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff fc44 	bl	80028d0 <lsm6dso_write_reg>
 8003048:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800304a:	68fb      	ldr	r3, [r7, #12]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800305e:	f107 020c 	add.w	r2, r7, #12
 8003062:	2306      	movs	r3, #6
 8003064:	2122      	movs	r1, #34	@ 0x22
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fc1a 	bl	80028a0 <lsm6dso_read_reg>
 800306c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800306e:	7b7b      	ldrb	r3, [r7, #13]
 8003070:	b21a      	sxth	r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307c:	b29b      	uxth	r3, r3
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	b29b      	uxth	r3, r3
 8003082:	7b3a      	ldrb	r2, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	b29b      	uxth	r3, r3
 8003088:	b21a      	sxth	r2, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	3302      	adds	r3, #2
 8003094:	b212      	sxth	r2, r2
 8003096:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	3302      	adds	r3, #2
 800309c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	7bba      	ldrb	r2, [r7, #14]
 80030a8:	4413      	add	r3, r2
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	3302      	adds	r3, #2
 80030b0:	b212      	sxth	r2, r2
 80030b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80030b4:	7c7a      	ldrb	r2, [r7, #17]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3304      	adds	r3, #4
 80030ba:	b212      	sxth	r2, r2
 80030bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	3304      	adds	r3, #4
 80030c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	7c3a      	ldrb	r2, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	3304      	adds	r3, #4
 80030d6:	b212      	sxth	r2, r2
 80030d8:	801a      	strh	r2, [r3, #0]

  return ret;
 80030da:	697b      	ldr	r3, [r7, #20]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80030ee:	f107 020c 	add.w	r2, r7, #12
 80030f2:	2306      	movs	r3, #6
 80030f4:	2128      	movs	r1, #40	@ 0x28
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff fbd2 	bl	80028a0 <lsm6dso_read_reg>
 80030fc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80030fe:	7b7b      	ldrb	r3, [r7, #13]
 8003100:	b21a      	sxth	r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310c:	b29b      	uxth	r3, r3
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	b29b      	uxth	r3, r3
 8003112:	7b3a      	ldrb	r2, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	b21a      	sxth	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	3302      	adds	r3, #2
 8003124:	b212      	sxth	r2, r2
 8003126:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	3302      	adds	r3, #2
 800312c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003130:	b29b      	uxth	r3, r3
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	b29b      	uxth	r3, r3
 8003136:	7bba      	ldrb	r2, [r7, #14]
 8003138:	4413      	add	r3, r2
 800313a:	b29a      	uxth	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	3302      	adds	r3, #2
 8003140:	b212      	sxth	r2, r2
 8003142:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003144:	7c7a      	ldrb	r2, [r7, #17]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	3304      	adds	r3, #4
 800314a:	b212      	sxth	r2, r2
 800314c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	3304      	adds	r3, #4
 8003152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003156:	b29b      	uxth	r3, r3
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	b29b      	uxth	r3, r3
 800315c:	7c3a      	ldrb	r2, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	b29a      	uxth	r2, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3304      	adds	r3, #4
 8003166:	b212      	sxth	r2, r2
 8003168:	801a      	strh	r2, [r3, #0]

  return ret;
 800316a:	697b      	ldr	r3, [r7, #20]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8003180:	2300      	movs	r3, #0
 8003182:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	b2da      	uxtb	r2, r3
 800318c:	7a3b      	ldrb	r3, [r7, #8]
 800318e:	f362 1387 	bfi	r3, r2, #6, #2
 8003192:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8003194:	f107 0208 	add.w	r2, r7, #8
 8003198:	2301      	movs	r3, #1
 800319a:	2101      	movs	r1, #1
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff fb97 	bl	80028d0 <lsm6dso_write_reg>
 80031a2:	60f8      	str	r0, [r7, #12]

  return ret;
 80031a4:	68fb      	ldr	r3, [r7, #12]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80031b8:	2301      	movs	r3, #1
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	210f      	movs	r1, #15
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fb6e 	bl	80028a0 <lsm6dso_read_reg>
 80031c4:	60f8      	str	r0, [r7, #12]

  return ret;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80031dc:	f107 0208 	add.w	r2, r7, #8
 80031e0:	2301      	movs	r3, #1
 80031e2:	2112      	movs	r1, #18
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fb5b 	bl	80028a0 <lsm6dso_read_reg>
 80031ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10f      	bne.n	8003212 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	7a3b      	ldrb	r3, [r7, #8]
 80031fc:	f362 0382 	bfi	r3, r2, #2, #1
 8003200:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003202:	f107 0208 	add.w	r2, r7, #8
 8003206:	2301      	movs	r3, #1
 8003208:	2112      	movs	r1, #18
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fb60 	bl	80028d0 <lsm6dso_write_reg>
 8003210:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8003228:	f107 020c 	add.w	r2, r7, #12
 800322c:	2301      	movs	r3, #1
 800322e:	2118      	movs	r1, #24
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fb35 	bl	80028a0 <lsm6dso_read_reg>
 8003236:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	09db      	lsrs	r3, r3, #7
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	b2da      	uxtb	r2, r3
 8003244:	7b3b      	ldrb	r3, [r7, #12]
 8003246:	f362 0341 	bfi	r3, r2, #1, #1
 800324a:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800324c:	f107 020c 	add.w	r2, r7, #12
 8003250:	2301      	movs	r3, #1
 8003252:	2118      	movs	r1, #24
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fb3b 	bl	80028d0 <lsm6dso_write_reg>
 800325a:	4602      	mov	r2, r0
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	4413      	add	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <lsm6dso_i3c_disable_set+0x50>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	e01b      	b.n	80032a4 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 800326c:	f107 0210 	add.w	r2, r7, #16
 8003270:	2301      	movs	r3, #1
 8003272:	2162      	movs	r1, #98	@ 0x62
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fb13 	bl	80028a0 <lsm6dso_read_reg>
 800327a:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	b2da      	uxtb	r2, r3
 8003284:	7c3b      	ldrb	r3, [r7, #16]
 8003286:	f362 03c4 	bfi	r3, r2, #3, #2
 800328a:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 800328c:	f107 0210 	add.w	r2, r7, #16
 8003290:	2301      	movs	r3, #1
 8003292:	2162      	movs	r1, #98	@ 0x62
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff fb1b 	bl	80028d0 <lsm6dso_write_reg>
 800329a:	4602      	mov	r2, r0
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	4413      	add	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  return ret;
 80032a2:	697b      	ldr	r3, [r7, #20]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <lsm6dso_6d_threshold_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_6d_threshold_set(stmdev_ctx_t *ctx,
                                 lsm6dso_sixd_ths_t val)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 80032b8:	f107 0208 	add.w	r2, r7, #8
 80032bc:	2301      	movs	r3, #1
 80032be:	2159      	movs	r1, #89	@ 0x59
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff faed 	bl	80028a0 <lsm6dso_read_reg>
 80032c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10f      	bne.n	80032ee <lsm6dso_6d_threshold_set+0x42>
  {
    reg.sixd_ths = (uint8_t)val;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	7a3b      	ldrb	r3, [r7, #8]
 80032d8:	f362 1346 	bfi	r3, r2, #5, #2
 80032dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 80032de:	f107 0208 	add.w	r2, r7, #8
 80032e2:	2301      	movs	r3, #1
 80032e4:	2159      	movs	r1, #89	@ 0x59
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff faf2 	bl	80028d0 <lsm6dso_write_reg>
 80032ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8003304:	f107 0208 	add.w	r2, r7, #8
 8003308:	2301      	movs	r3, #1
 800330a:	210a      	movs	r1, #10
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff fac7 	bl	80028a0 <lsm6dso_read_reg>
 8003312:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	b2da      	uxtb	r2, r3
 8003322:	7a3b      	ldrb	r3, [r7, #8]
 8003324:	f362 0302 	bfi	r3, r2, #0, #3
 8003328:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800332a:	f107 0208 	add.w	r2, r7, #8
 800332e:	2301      	movs	r3, #1
 8003330:	210a      	movs	r1, #10
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff facc 	bl	80028d0 <lsm6dso_write_reg>
 8003338:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800333a:	68fb      	ldr	r3, [r7, #12]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <lsm6dso_tilt_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_tilt_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_status_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800334e:	2102      	movs	r1, #2
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff ff0f 	bl	8003174 <lsm6dso_mem_bank_set>
 8003356:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <lsm6dso_tilt_flag_data_ready_get+0x1e>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	e017      	b.n	8003392 <lsm6dso_tilt_flag_data_ready_get+0x4e>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_STATUS, (uint8_t *)&reg, 1);
 8003362:	f107 0208 	add.w	r2, r7, #8
 8003366:	2301      	movs	r3, #1
 8003368:	2112      	movs	r1, #18
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fa98 	bl	80028a0 <lsm6dso_read_reg>
 8003370:	60f8      	str	r0, [r7, #12]
  *val = reg.is_tilt;
 8003372:	7a3b      	ldrb	r3, [r7, #8]
 8003374:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	701a      	strb	r2, [r3, #0]

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003380:	2100      	movs	r1, #0
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fef6 	bl	8003174 <lsm6dso_mem_bank_set>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  return ret;
 8003390:	68fb      	ldr	r3, [r7, #12]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80033a4:	2102      	movs	r1, #2
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff fee4 	bl	8003174 <lsm6dso_mem_bank_set>
 80033ac:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80033ae:	2302      	movs	r3, #2
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	2146      	movs	r1, #70	@ 0x46
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff fa73 	bl	80028a0 <lsm6dso_read_reg>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80033c2:	2100      	movs	r1, #0
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fed5 	bl	8003174 <lsm6dso_mem_bank_set>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  return ret;
 80033d2:	68fb      	ldr	r3, [r7, #12]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80033e6:	2102      	movs	r1, #2
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fec3 	bl	8003174 <lsm6dso_mem_bank_set>
 80033ee:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <lsm6dso_fsm_data_rate_get+0x1e>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	e03a      	b.n	8003470 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 80033fa:	f107 0208 	add.w	r2, r7, #8
 80033fe:	2301      	movs	r3, #1
 8003400:	215f      	movs	r1, #95	@ 0x5f
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fa4c 	bl	80028a0 <lsm6dso_read_reg>
 8003408:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d125      	bne.n	800345c <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8003410:	7a3b      	ldrb	r3, [r7, #8]
 8003412:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b03      	cmp	r3, #3
 800341a:	d81b      	bhi.n	8003454 <lsm6dso_fsm_data_rate_get+0x78>
 800341c:	a201      	add	r2, pc, #4	@ (adr r2, 8003424 <lsm6dso_fsm_data_rate_get+0x48>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003435 	.word	0x08003435
 8003428:	0800343d 	.word	0x0800343d
 800342c:	08003445 	.word	0x08003445
 8003430:	0800344d 	.word	0x0800344d
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
      break;
 800343a:	e010      	b.n	800345e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
      break;
 8003442:	e00c      	b.n	800345e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2202      	movs	r2, #2
 8003448:	701a      	strb	r2, [r3, #0]
      break;
 800344a:	e008      	b.n	800345e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2203      	movs	r2, #3
 8003450:	701a      	strb	r2, [r3, #0]
      break;
 8003452:	e004      	b.n	800345e <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
      break;
 800345a:	e000      	b.n	800345e <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 800345c:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800345e:	2100      	movs	r1, #0
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fe87 	bl	8003174 <lsm6dso_mem_bank_set>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  return ret;
 800346e:	68fb      	ldr	r3, [r7, #12]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b090      	sub	sp, #64	@ 0x40
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_pin_int2_route_t  pin_int2_route;
  lsm6dso_emb_func_int1_t   emb_func_int1;
  lsm6dso_fsm_int1_a_t      fsm_int1_a;
  lsm6dso_fsm_int1_b_t      fsm_int1_b;
  lsm6dso_int1_ctrl_t       int1_ctrl = {0};
 8003486:	2300      	movs	r3, #0
 8003488:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  /* INT1_CTRL */
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 800348c:	793b      	ldrb	r3, [r7, #4]
 800348e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003492:	b2da      	uxtb	r2, r3
 8003494:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003498:	f362 0300 	bfi	r3, r2, #0, #1
 800349c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 80034a0:	793b      	ldrb	r3, [r7, #4]
 80034a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80034ac:	f362 0341 	bfi	r3, r2, #1, #1
 80034b0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_boot      = val.boot;
 80034b4:	793b      	ldrb	r3, [r7, #4]
 80034b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80034c0:	f362 0382 	bfi	r3, r2, #2, #1
 80034c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 80034c8:	793b      	ldrb	r3, [r7, #4]
 80034ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80034d4:	f362 03c3 	bfi	r3, r2, #3, #1
 80034d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 80034dc:	793b      	ldrb	r3, [r7, #4]
 80034de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80034e8:	f362 1304 	bfi	r3, r2, #4, #1
 80034ec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 80034f0:	793b      	ldrb	r3, [r7, #4]
 80034f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80034fc:	f362 1345 	bfi	r3, r2, #5, #1
 8003500:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8003504:	793b      	ldrb	r3, [r7, #4]
 8003506:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800350a:	b2da      	uxtb	r2, r3
 800350c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003510:	f362 1386 	bfi	r3, r2, #6, #1
 8003514:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8003518:	797b      	ldrb	r3, [r7, #5]
 800351a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800351e:	b2da      	uxtb	r2, r3
 8003520:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003524:	f362 13c7 	bfi	r3, r2, #7, #1
 8003528:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800352c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003530:	2301      	movs	r3, #1
 8003532:	210d      	movs	r1, #13
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff f9cb 	bl	80028d0 <lsm6dso_write_reg>
 800353a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800353c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <lsm6dso_pin_int1_route_set+0xce>
 8003542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003544:	e33a      	b.n	8003bbc <lsm6dso_pin_int1_route_set+0x744>

  /* DRDY for temperature and/or timestamp */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003546:	f107 0210 	add.w	r2, r7, #16
 800354a:	2301      	movs	r3, #1
 800354c:	2113      	movs	r1, #19
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7ff f9a6 	bl	80028a0 <lsm6dso_read_reg>
 8003554:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8003556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <lsm6dso_pin_int1_route_set+0xe8>
 800355c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355e:	e32d      	b.n	8003bbc <lsm6dso_pin_int1_route_set+0x744>

  if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8003560:	793b      	ldrb	r3, [r7, #4]
 8003562:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003566:	b2da      	uxtb	r2, r3
 8003568:	797b      	ldrb	r3, [r7, #5]
 800356a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	4313      	orrs	r3, r2
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <lsm6dso_pin_int1_route_set+0x10a>
  {
    ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8003578:	7c3b      	ldrb	r3, [r7, #16]
 800357a:	f043 0320 	orr.w	r3, r3, #32
 800357e:	743b      	strb	r3, [r7, #16]
 8003580:	e003      	b.n	800358a <lsm6dso_pin_int1_route_set+0x112>
  }
  else
  {
    ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8003582:	7c3b      	ldrb	r3, [r7, #16]
 8003584:	f36f 1345 	bfc	r3, #5, #1
 8003588:	743b      	strb	r3, [r7, #16]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800358a:	f107 0210 	add.w	r2, r7, #16
 800358e:	2301      	movs	r3, #1
 8003590:	2113      	movs	r1, #19
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f7ff f99c 	bl	80028d0 <lsm6dso_write_reg>
 8003598:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800359a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <lsm6dso_pin_int1_route_set+0x12c>
 80035a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a2:	e30b      	b.n	8003bbc <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80035a4:	f107 0220 	add.w	r2, r7, #32
 80035a8:	2301      	movs	r3, #1
 80035aa:	210e      	movs	r1, #14
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff f977 	bl	80028a0 <lsm6dso_read_reg>
 80035b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  int2_ctrl.int2_drdy_temp = val.drdy_temp;
 80035b4:	793b      	ldrb	r3, [r7, #4]
 80035b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035c0:	f362 0382 	bfi	r3, r2, #2, #1
 80035c4:	f887 3020 	strb.w	r3, [r7, #32]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80035c8:	f107 0220 	add.w	r2, r7, #32
 80035cc:	2301      	movs	r3, #1
 80035ce:	210e      	movs	r1, #14
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff f97d 	bl	80028d0 <lsm6dso_write_reg>
 80035d6:	4602      	mov	r2, r0
 80035d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035da:	4413      	add	r3, r2
 80035dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80035de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <lsm6dso_pin_int1_route_set+0x170>
 80035e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e6:	e2e9      	b.n	8003bbc <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80035e8:	f107 0218 	add.w	r2, r7, #24
 80035ec:	2301      	movs	r3, #1
 80035ee:	215f      	movs	r1, #95	@ 0x5f
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff f955 	bl	80028a0 <lsm6dso_read_reg>
 80035f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  md2_cfg.int2_timestamp = val.timestamp;
 80035f8:	797b      	ldrb	r3, [r7, #5]
 80035fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	7e3b      	ldrb	r3, [r7, #24]
 8003602:	f362 0300 	bfi	r3, r2, #0, #1
 8003606:	763b      	strb	r3, [r7, #24]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8003608:	f107 0218 	add.w	r2, r7, #24
 800360c:	2301      	movs	r3, #1
 800360e:	215f      	movs	r1, #95	@ 0x5f
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff f95d 	bl	80028d0 <lsm6dso_write_reg>
 8003616:	4602      	mov	r2, r0
 8003618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361a:	4413      	add	r3, r2
 800361c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800361e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <lsm6dso_pin_int1_route_set+0x1b0>
 8003624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003626:	e2c9      	b.n	8003bbc <lsm6dso_pin_int1_route_set+0x744>

  /* emmbedded and FSM events */
  emb_func_int1.not_used_01 = 0;
 8003628:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800362c:	f36f 0302 	bfc	r3, #0, #3
 8003630:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 8003634:	79bb      	ldrb	r3, [r7, #6]
 8003636:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003640:	f362 03c3 	bfi	r3, r2, #3, #1
 8003644:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 8003648:	79bb      	ldrb	r3, [r7, #6]
 800364a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003654:	f362 1304 	bfi	r3, r2, #4, #1
 8003658:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 800365c:	79bb      	ldrb	r3, [r7, #6]
 800365e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003668:	f362 1345 	bfi	r3, r2, #5, #1
 800366c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.not_used_02 = 0;
 8003670:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003674:	f36f 1386 	bfc	r3, #6, #1
 8003678:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 800367c:	79bb      	ldrb	r3, [r7, #6]
 800367e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003682:	b2da      	uxtb	r2, r3
 8003684:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003688:	f362 13c7 	bfi	r3, r2, #7, #1
 800368c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8003690:	79bb      	ldrb	r3, [r7, #6]
 8003692:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800369c:	f362 0300 	bfi	r3, r2, #0, #1
 80036a0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 80036a4:	79bb      	ldrb	r3, [r7, #6]
 80036a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036b0:	f362 0341 	bfi	r3, r2, #1, #1
 80036b4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 80036b8:	79bb      	ldrb	r3, [r7, #6]
 80036ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036c4:	f362 0382 	bfi	r3, r2, #2, #1
 80036c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036d8:	f362 03c3 	bfi	r3, r2, #3, #1
 80036dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036ec:	f362 1304 	bfi	r3, r2, #4, #1
 80036f0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003700:	f362 1345 	bfi	r3, r2, #5, #1
 8003704:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800370e:	b2da      	uxtb	r2, r3
 8003710:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003714:	f362 1386 	bfi	r3, r2, #6, #1
 8003718:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003722:	b2da      	uxtb	r2, r3
 8003724:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003728:	f362 13c7 	bfi	r3, r2, #7, #1
 800372c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003736:	b2da      	uxtb	r2, r3
 8003738:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800373c:	f362 0300 	bfi	r3, r2, #0, #1
 8003740:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800374a:	b2da      	uxtb	r2, r3
 800374c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003750:	f362 0341 	bfi	r3, r2, #1, #1
 8003754:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800375e:	b2da      	uxtb	r2, r3
 8003760:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003764:	f362 0382 	bfi	r3, r2, #2, #1
 8003768:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 800376c:	7a3b      	ldrb	r3, [r7, #8]
 800376e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003778:	f362 03c3 	bfi	r3, r2, #3, #1
 800377c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8003780:	7a3b      	ldrb	r3, [r7, #8]
 8003782:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003786:	b2da      	uxtb	r2, r3
 8003788:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800378c:	f362 1304 	bfi	r3, r2, #4, #1
 8003790:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8003794:	7a3b      	ldrb	r3, [r7, #8]
 8003796:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800379a:	b2da      	uxtb	r2, r3
 800379c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037a0:	f362 1345 	bfi	r3, r2, #5, #1
 80037a4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 80037a8:	7a3b      	ldrb	r3, [r7, #8]
 80037aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037b4:	f362 1386 	bfi	r3, r2, #6, #1
 80037b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 80037bc:	7a3b      	ldrb	r3, [r7, #8]
 80037be:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037c8:	f362 13c7 	bfi	r3, r2, #7, #1
 80037cc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80037d0:	2102      	movs	r1, #2
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff fcce 	bl	8003174 <lsm6dso_mem_bank_set>
 80037d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80037da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <lsm6dso_pin_int1_route_set+0x36c>
 80037e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e2:	e1eb      	b.n	8003bbc <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 80037e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80037e8:	2301      	movs	r3, #1
 80037ea:	210a      	movs	r1, #10
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff f86f 	bl	80028d0 <lsm6dso_write_reg>
 80037f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 80037f4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80037f8:	2301      	movs	r3, #1
 80037fa:	210b      	movs	r1, #11
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff f867 	bl	80028d0 <lsm6dso_write_reg>
 8003802:	4602      	mov	r2, r0
 8003804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003806:	4413      	add	r3, r2
 8003808:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 800380a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800380e:	2301      	movs	r3, #1
 8003810:	210c      	movs	r1, #12
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7ff f85c 	bl	80028d0 <lsm6dso_write_reg>
 8003818:	4602      	mov	r2, r0
 800381a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800381c:	4413      	add	r3, r2
 800381e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003820:	2100      	movs	r1, #0
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff fca6 	bl	8003174 <lsm6dso_mem_bank_set>
 8003828:	4602      	mov	r2, r0
 800382a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382c:	4413      	add	r3, r2
 800382e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8003830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <lsm6dso_pin_int1_route_set+0x3c2>
 8003836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003838:	e1c0      	b.n	8003bbc <lsm6dso_pin_int1_route_set+0x744>

  /* MD1_CFG */
  md1_cfg.int1_shub         = val.sh_endop;
 800383a:	797b      	ldrb	r3, [r7, #5]
 800383c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003840:	b2da      	uxtb	r2, r3
 8003842:	7d3b      	ldrb	r3, [r7, #20]
 8003844:	f362 0300 	bfi	r3, r2, #0, #1
 8003848:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 800384a:	797b      	ldrb	r3, [r7, #5]
 800384c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003850:	b2da      	uxtb	r2, r3
 8003852:	7d3b      	ldrb	r3, [r7, #20]
 8003854:	f362 0382 	bfi	r3, r2, #2, #1
 8003858:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 800385a:	797b      	ldrb	r3, [r7, #5]
 800385c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003860:	b2da      	uxtb	r2, r3
 8003862:	7d3b      	ldrb	r3, [r7, #20]
 8003864:	f362 03c3 	bfi	r3, r2, #3, #1
 8003868:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 800386a:	797b      	ldrb	r3, [r7, #5]
 800386c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	7d3b      	ldrb	r3, [r7, #20]
 8003874:	f362 1304 	bfi	r3, r2, #4, #1
 8003878:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 800387a:	797b      	ldrb	r3, [r7, #5]
 800387c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003880:	b2da      	uxtb	r2, r3
 8003882:	7d3b      	ldrb	r3, [r7, #20]
 8003884:	f362 1345 	bfi	r3, r2, #5, #1
 8003888:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 800388a:	797b      	ldrb	r3, [r7, #5]
 800388c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003890:	b2da      	uxtb	r2, r3
 8003892:	7d3b      	ldrb	r3, [r7, #20]
 8003894:	f362 1386 	bfi	r3, r2, #6, #1
 8003898:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 800389a:	79bb      	ldrb	r3, [r7, #6]
 800389c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	7d3b      	ldrb	r3, [r7, #20]
 80038a4:	f362 13c7 	bfi	r3, r2, #7, #1
 80038a8:	753b      	strb	r3, [r7, #20]

  if ((emb_func_int1.int1_fsm_lc
 80038aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80038ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80038b2:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_sig_mot
 80038b4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80038b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4313      	orrs	r3, r2
 80038c0:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_step_detector
 80038c2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80038c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	4313      	orrs	r3, r2
 80038ce:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_tilt
 80038d0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80038d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm1
 80038de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm2
 80038ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4313      	orrs	r3, r2
 80038f8:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm3
 80038fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003902:	b2db      	uxtb	r3, r3
 8003904:	4313      	orrs	r3, r2
 8003906:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm4
 8003908:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800390c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	4313      	orrs	r3, r2
 8003914:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm5
 8003916:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800391a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4313      	orrs	r3, r2
 8003922:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm6
 8003924:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003928:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4313      	orrs	r3, r2
 8003930:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm7
 8003932:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003936:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4313      	orrs	r3, r2
 800393e:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm8
 8003940:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003944:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4313      	orrs	r3, r2
 800394c:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm9
 800394e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003952:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	4313      	orrs	r3, r2
 800395a:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm10
 800395c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003960:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4313      	orrs	r3, r2
 8003968:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm11
 800396a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800396e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4313      	orrs	r3, r2
 8003976:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm12
 8003978:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800397c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4313      	orrs	r3, r2
 8003984:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm13
 8003986:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800398a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4313      	orrs	r3, r2
 8003992:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm14
 8003994:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003998:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	4313      	orrs	r3, r2
 80039a0:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm15
 80039a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	4313      	orrs	r3, r2
 80039ae:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 80039b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4313      	orrs	r3, r2
 80039bc:	b2db      	uxtb	r3, r3
  if ((emb_func_int1.int1_fsm_lc
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <lsm6dso_pin_int1_route_set+0x554>
  {
    md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 80039c2:	7d3b      	ldrb	r3, [r7, #20]
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	753b      	strb	r3, [r7, #20]
 80039ca:	e003      	b.n	80039d4 <lsm6dso_pin_int1_route_set+0x55c>
  }
  else
  {
    md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 80039cc:	7d3b      	ldrb	r3, [r7, #20]
 80039ce:	f36f 0341 	bfc	r3, #1, #1
 80039d2:	753b      	strb	r3, [r7, #20]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80039d4:	f107 0214 	add.w	r2, r7, #20
 80039d8:	2301      	movs	r3, #1
 80039da:	215e      	movs	r1, #94	@ 0x5e
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7fe ff77 	bl	80028d0 <lsm6dso_write_reg>
 80039e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80039e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <lsm6dso_pin_int1_route_set+0x576>
 80039ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ec:	e0e6      	b.n	8003bbc <lsm6dso_pin_int1_route_set+0x744>

  /* set interrupts_enable = 1 in TAP_CFG2 if it is the case */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 80039ee:	f107 021c 	add.w	r2, r7, #28
 80039f2:	2301      	movs	r3, #1
 80039f4:	2158      	movs	r1, #88	@ 0x58
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7fe ff52 	bl	80028a0 <lsm6dso_read_reg>
 80039fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 80039fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a02:	461a      	mov	r2, r3
 8003a04:	2100      	movs	r1, #0
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fe3e 	bl	8004688 <lsm6dso_pin_int2_route_get>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a10:	4413      	add	r3, r2
 8003a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8003a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <lsm6dso_pin_int1_route_set+0x5a6>
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1c:	e0ce      	b.n	8003bbc <lsm6dso_pin_int1_route_set+0x744>

  if ((pin_int2_route.fifo_bdr
 8003a1e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003a22:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a26:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_g
 8003a28:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003a2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	4313      	orrs	r3, r2
 8003a34:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_temp
 8003a36:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003a3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_xl
 8003a44:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003a48:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_full
 8003a52:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003a56:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_ovr
 8003a60:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003a64:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_th
 8003a6e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003a72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	b2da      	uxtb	r2, r3
       | pin_int2_route.six_d
 8003a7c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003a80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	4313      	orrs	r3, r2
 8003a88:	b2da      	uxtb	r2, r3
       | pin_int2_route.double_tap
 8003a8a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003a8e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b2da      	uxtb	r2, r3
       | pin_int2_route.free_fall
 8003a98:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003a9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	b2da      	uxtb	r2, r3
       | pin_int2_route.wake_up
 8003aa6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003aaa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	b2da      	uxtb	r2, r3
       | pin_int2_route.single_tap
 8003ab4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003ab8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	b2da      	uxtb	r2, r3
       | pin_int2_route.sleep_change
 8003ac2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003ac6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b2da      	uxtb	r2, r3
       | int1_ctrl.den_drdy_flag
 8003ad0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ad4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	4313      	orrs	r3, r2
 8003adc:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_boot
 8003ade:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ae2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_cnt_bdr
 8003aec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003af0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_g
 8003afa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003afe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4313      	orrs	r3, r2
 8003b06:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_xl
 8003b08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	4313      	orrs	r3, r2
 8003b14:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_full
 8003b16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	4313      	orrs	r3, r2
 8003b22:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_ovr
 8003b24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_th
 8003b32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b36:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_shub
 8003b40:	7d3b      	ldrb	r3, [r7, #20]
 8003b42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_6d
 8003b4c:	7d3b      	ldrb	r3, [r7, #20]
 8003b4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	4313      	orrs	r3, r2
 8003b56:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_double_tap
 8003b58:	7d3b      	ldrb	r3, [r7, #20]
 8003b5a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_ff
 8003b64:	7d3b      	ldrb	r3, [r7, #20]
 8003b66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_wu
 8003b70:	7d3b      	ldrb	r3, [r7, #20]
 8003b72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_single_tap
 8003b7c:	7d3b      	ldrb	r3, [r7, #20]
 8003b7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	4313      	orrs	r3, r2
 8003b86:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 8003b88:	7d3b      	ldrb	r3, [r7, #20]
 8003b8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	4313      	orrs	r3, r2
 8003b92:	b2db      	uxtb	r3, r3
  if ((pin_int2_route.fifo_bdr
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <lsm6dso_pin_int1_route_set+0x72a>
  {
    tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8003b98:	7f3b      	ldrb	r3, [r7, #28]
 8003b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b9e:	773b      	strb	r3, [r7, #28]
 8003ba0:	e003      	b.n	8003baa <lsm6dso_pin_int1_route_set+0x732>
  }
  else
  {
    tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8003ba2:	7f3b      	ldrb	r3, [r7, #28]
 8003ba4:	f36f 13c7 	bfc	r3, #7, #1
 8003ba8:	773b      	strb	r3, [r7, #28]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8003baa:	f107 021c 	add.w	r2, r7, #28
 8003bae:	2301      	movs	r3, #1
 8003bb0:	2158      	movs	r1, #88	@ 0x58
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7fe fe8c 	bl	80028d0 <lsm6dso_write_reg>
 8003bb8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  return ret;
 8003bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3740      	adds	r7, #64	@ 0x40
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <lsm6dso_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t *val)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	@ 0x30
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  lsm6dso_md2_cfg_t         md2_cfg;
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff facf 	bl	8003174 <lsm6dso_mem_bank_set>
 8003bd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <lsm6dso_pin_int1_route_get+0x1e>
 8003bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be0:	e1dc      	b.n	8003f9c <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 8003be2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003be6:	2301      	movs	r3, #1
 8003be8:	210a      	movs	r1, #10
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe fe58 	bl	80028a0 <lsm6dso_read_reg>
 8003bf0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 8003bf2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	210b      	movs	r1, #11
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fe fe50 	bl	80028a0 <lsm6dso_read_reg>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c04:	4413      	add	r3, r2
 8003c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8003c08:	f107 0220 	add.w	r2, r7, #32
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	210c      	movs	r1, #12
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fe fe45 	bl	80028a0 <lsm6dso_read_reg>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	4413      	add	r3, r2
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003c1e:	2100      	movs	r1, #0
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff faa7 	bl	8003174 <lsm6dso_mem_bank_set>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2a:	4413      	add	r3, r2
 8003c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <lsm6dso_pin_int1_route_get+0x74>
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	e1b1      	b.n	8003f9c <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003c38:	f107 021c 	add.w	r2, r7, #28
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	210d      	movs	r1, #13
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fe fe2d 	bl	80028a0 <lsm6dso_read_reg>
 8003c46:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <lsm6dso_pin_int1_route_get+0x8e>
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	e1a4      	b.n	8003f9c <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003c52:	f107 0210 	add.w	r2, r7, #16
 8003c56:	2301      	movs	r3, #1
 8003c58:	215e      	movs	r1, #94	@ 0x5e
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fe fe20 	bl	80028a0 <lsm6dso_read_reg>
 8003c60:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <lsm6dso_pin_int1_route_get+0xa8>
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6a:	e197      	b.n	8003f9c <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003c6c:	f107 020c 	add.w	r2, r7, #12
 8003c70:	2301      	movs	r3, #1
 8003c72:	2113      	movs	r1, #19
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fe fe13 	bl	80028a0 <lsm6dso_read_reg>
 8003c7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8003c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <lsm6dso_pin_int1_route_get+0xc2>
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	e18a      	b.n	8003f9c <lsm6dso_pin_int1_route_get+0x3d8>

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 8003c86:	7b3b      	ldrb	r3, [r7, #12]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d025      	beq.n	8003cde <lsm6dso_pin_int1_route_get+0x11a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8003c92:	f107 0218 	add.w	r2, r7, #24
 8003c96:	2301      	movs	r3, #1
 8003c98:	210e      	movs	r1, #14
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fe fe00 	bl	80028a0 <lsm6dso_read_reg>
 8003ca0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8003ca2:	7e3b      	ldrb	r3, [r7, #24]
 8003ca4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ca8:	b2d9      	uxtb	r1, r3
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	7813      	ldrb	r3, [r2, #0]
 8003cae:	f361 0382 	bfi	r3, r1, #2, #1
 8003cb2:	7013      	strb	r3, [r2, #0]

    ret += lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8003cb4:	f107 0214 	add.w	r2, r7, #20
 8003cb8:	2301      	movs	r3, #1
 8003cba:	215f      	movs	r1, #95	@ 0x5f
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fe fdef 	bl	80028a0 <lsm6dso_read_reg>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	4413      	add	r3, r2
 8003cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    val->timestamp = md2_cfg.int2_timestamp;
 8003cca:	7d3b      	ldrb	r3, [r7, #20]
 8003ccc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cd0:	b2d9      	uxtb	r1, r3
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	7853      	ldrb	r3, [r2, #1]
 8003cd6:	f361 0382 	bfi	r3, r1, #2, #1
 8003cda:	7053      	strb	r3, [r2, #1]
 8003cdc:	e009      	b.n	8003cf2 <lsm6dso_pin_int1_route_get+0x12e>
  }
  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	7813      	ldrb	r3, [r2, #0]
 8003ce2:	f36f 0382 	bfc	r3, #2, #1
 8003ce6:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	7853      	ldrb	r3, [r2, #1]
 8003cec:	f36f 0382 	bfc	r3, #2, #1
 8003cf0:	7053      	strb	r3, [r2, #1]
  }
  if (ret != 0) { return ret; }
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <lsm6dso_pin_int1_route_get+0x138>
 8003cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfa:	e14f      	b.n	8003f9c <lsm6dso_pin_int1_route_get+0x3d8>

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8003cfc:	7f3b      	ldrb	r3, [r7, #28]
 8003cfe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d02:	b2d9      	uxtb	r1, r3
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	7813      	ldrb	r3, [r2, #0]
 8003d08:	f361 0300 	bfi	r3, r1, #0, #1
 8003d0c:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 8003d0e:	7f3b      	ldrb	r3, [r7, #28]
 8003d10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d14:	b2d9      	uxtb	r1, r3
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	7813      	ldrb	r3, [r2, #0]
 8003d1a:	f361 0341 	bfi	r3, r1, #1, #1
 8003d1e:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 8003d20:	7f3b      	ldrb	r3, [r7, #28]
 8003d22:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d26:	b2d9      	uxtb	r1, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	7813      	ldrb	r3, [r2, #0]
 8003d2c:	f361 03c3 	bfi	r3, r1, #3, #1
 8003d30:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 8003d32:	7f3b      	ldrb	r3, [r7, #28]
 8003d34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d38:	b2d9      	uxtb	r1, r3
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	7813      	ldrb	r3, [r2, #0]
 8003d3e:	f361 1304 	bfi	r3, r1, #4, #1
 8003d42:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 8003d44:	7f3b      	ldrb	r3, [r7, #28]
 8003d46:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d4a:	b2d9      	uxtb	r1, r3
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	7813      	ldrb	r3, [r2, #0]
 8003d50:	f361 1345 	bfi	r3, r1, #5, #1
 8003d54:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 8003d56:	7f3b      	ldrb	r3, [r7, #28]
 8003d58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d5c:	b2d9      	uxtb	r1, r3
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	7813      	ldrb	r3, [r2, #0]
 8003d62:	f361 1386 	bfi	r3, r1, #6, #1
 8003d66:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 8003d68:	7f3b      	ldrb	r3, [r7, #28]
 8003d6a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d6e:	b2d9      	uxtb	r1, r3
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	7813      	ldrb	r3, [r2, #0]
 8003d74:	f361 13c7 	bfi	r3, r1, #7, #1
 8003d78:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 8003d7a:	7f3b      	ldrb	r3, [r7, #28]
 8003d7c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d80:	b2d9      	uxtb	r1, r3
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	7853      	ldrb	r3, [r2, #1]
 8003d86:	f361 0300 	bfi	r3, r1, #0, #1
 8003d8a:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 8003d8c:	7c3b      	ldrb	r3, [r7, #16]
 8003d8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d92:	b2d9      	uxtb	r1, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	7853      	ldrb	r3, [r2, #1]
 8003d98:	f361 0341 	bfi	r3, r1, #1, #1
 8003d9c:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 8003d9e:	7c3b      	ldrb	r3, [r7, #16]
 8003da0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003da4:	b2d9      	uxtb	r1, r3
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	7853      	ldrb	r3, [r2, #1]
 8003daa:	f361 03c3 	bfi	r3, r1, #3, #1
 8003dae:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 8003db0:	7c3b      	ldrb	r3, [r7, #16]
 8003db2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003db6:	b2d9      	uxtb	r1, r3
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	7853      	ldrb	r3, [r2, #1]
 8003dbc:	f361 1304 	bfi	r3, r1, #4, #1
 8003dc0:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 8003dc2:	7c3b      	ldrb	r3, [r7, #16]
 8003dc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003dc8:	b2d9      	uxtb	r1, r3
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	7853      	ldrb	r3, [r2, #1]
 8003dce:	f361 1345 	bfi	r3, r1, #5, #1
 8003dd2:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 8003dd4:	7c3b      	ldrb	r3, [r7, #16]
 8003dd6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003dda:	b2d9      	uxtb	r1, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	7853      	ldrb	r3, [r2, #1]
 8003de0:	f361 1386 	bfi	r3, r1, #6, #1
 8003de4:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 8003de6:	7c3b      	ldrb	r3, [r7, #16]
 8003de8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003dec:	b2d9      	uxtb	r1, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	7853      	ldrb	r3, [r2, #1]
 8003df2:	f361 13c7 	bfi	r3, r1, #7, #1
 8003df6:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 8003df8:	7c3b      	ldrb	r3, [r7, #16]
 8003dfa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003dfe:	b2d9      	uxtb	r1, r3
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	7893      	ldrb	r3, [r2, #2]
 8003e04:	f361 0300 	bfi	r3, r1, #0, #1
 8003e08:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 8003e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e12:	b2d9      	uxtb	r1, r3
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	7893      	ldrb	r3, [r2, #2]
 8003e18:	f361 0341 	bfi	r3, r1, #1, #1
 8003e1c:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 8003e1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e22:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e26:	b2d9      	uxtb	r1, r3
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	7893      	ldrb	r3, [r2, #2]
 8003e2c:	f361 0382 	bfi	r3, r1, #2, #1
 8003e30:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 8003e32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e36:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e3a:	b2d9      	uxtb	r1, r3
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	7893      	ldrb	r3, [r2, #2]
 8003e40:	f361 03c3 	bfi	r3, r1, #3, #1
 8003e44:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 8003e46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e4a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e4e:	b2d9      	uxtb	r1, r3
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	7893      	ldrb	r3, [r2, #2]
 8003e54:	f361 1304 	bfi	r3, r1, #4, #1
 8003e58:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 8003e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e62:	b2d9      	uxtb	r1, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	7893      	ldrb	r3, [r2, #2]
 8003e68:	f361 1345 	bfi	r3, r1, #5, #1
 8003e6c:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 8003e6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e76:	b2d9      	uxtb	r1, r3
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	7893      	ldrb	r3, [r2, #2]
 8003e7c:	f361 1386 	bfi	r3, r1, #6, #1
 8003e80:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 8003e82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e8a:	b2d9      	uxtb	r1, r3
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	7893      	ldrb	r3, [r2, #2]
 8003e90:	f361 13c7 	bfi	r3, r1, #7, #1
 8003e94:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 8003e96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e9e:	b2d9      	uxtb	r1, r3
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	78d3      	ldrb	r3, [r2, #3]
 8003ea4:	f361 0300 	bfi	r3, r1, #0, #1
 8003ea8:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 8003eaa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003eae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003eb2:	b2d9      	uxtb	r1, r3
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	78d3      	ldrb	r3, [r2, #3]
 8003eb8:	f361 0341 	bfi	r3, r1, #1, #1
 8003ebc:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 8003ebe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ec2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ec6:	b2d9      	uxtb	r1, r3
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	78d3      	ldrb	r3, [r2, #3]
 8003ecc:	f361 0382 	bfi	r3, r1, #2, #1
 8003ed0:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 8003ed2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ed6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003eda:	b2d9      	uxtb	r1, r3
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	78d3      	ldrb	r3, [r2, #3]
 8003ee0:	f361 03c3 	bfi	r3, r1, #3, #1
 8003ee4:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 8003ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003eea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003eee:	b2d9      	uxtb	r1, r3
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	78d3      	ldrb	r3, [r2, #3]
 8003ef4:	f361 1304 	bfi	r3, r1, #4, #1
 8003ef8:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 8003efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003efe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f02:	b2d9      	uxtb	r1, r3
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	78d3      	ldrb	r3, [r2, #3]
 8003f08:	f361 1345 	bfi	r3, r1, #5, #1
 8003f0c:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 8003f0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f12:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003f16:	b2d9      	uxtb	r1, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	78d3      	ldrb	r3, [r2, #3]
 8003f1c:	f361 1386 	bfi	r3, r1, #6, #1
 8003f20:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 8003f22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f2a:	b2d9      	uxtb	r1, r3
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	78d3      	ldrb	r3, [r2, #3]
 8003f30:	f361 13c7 	bfi	r3, r1, #7, #1
 8003f34:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 8003f36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f3e:	b2d9      	uxtb	r1, r3
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	7913      	ldrb	r3, [r2, #4]
 8003f44:	f361 0300 	bfi	r3, r1, #0, #1
 8003f48:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 8003f4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f4e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003f52:	b2d9      	uxtb	r1, r3
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	7913      	ldrb	r3, [r2, #4]
 8003f58:	f361 0341 	bfi	r3, r1, #1, #1
 8003f5c:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 8003f5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f62:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003f66:	b2d9      	uxtb	r1, r3
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	7913      	ldrb	r3, [r2, #4]
 8003f6c:	f361 0382 	bfi	r3, r1, #2, #1
 8003f70:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 8003f72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f76:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003f7a:	b2d9      	uxtb	r1, r3
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	7913      	ldrb	r3, [r2, #4]
 8003f80:	f361 03c3 	bfi	r3, r1, #3, #1
 8003f84:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 8003f86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003f8e:	b2d9      	uxtb	r1, r3
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	7913      	ldrb	r3, [r2, #4]
 8003f94:	f361 1304 	bfi	r3, r1, #4, #1
 8003f98:	7113      	strb	r3, [r2, #4]

  return ret;
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3730      	adds	r7, #48	@ 0x30
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <lsm6dso_pin_int2_route_set>:
  *
  */
int32_t lsm6dso_pin_int2_route_set(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t val)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b090      	sub	sp, #64	@ 0x40
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	4639      	mov	r1, r7
 8003fb0:	e881 000c 	stmia.w	r1, {r2, r3}
  lsm6dso_tap_cfg2_t       tap_cfg2;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                  ret;
  ret = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (aux_ctx != NULL)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01f      	beq.n	8003ffe <lsm6dso_pin_int2_route_set+0x5a>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 8003fbe:	f107 0214 	add.w	r2, r7, #20
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	216f      	movs	r1, #111	@ 0x6f
 8003fc6:	68b8      	ldr	r0, [r7, #8]
 8003fc8:	f7fe fc6a 	bl	80028a0 <lsm6dso_read_reg>
 8003fcc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    int_ois.int2_drdy_ois = val.drdy_ois;
 8003fce:	783b      	ldrb	r3, [r7, #0]
 8003fd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	7d3b      	ldrb	r3, [r7, #20]
 8003fd8:	f362 13c7 	bfi	r3, r2, #7, #1
 8003fdc:	753b      	strb	r3, [r7, #20]
    ret += lsm6dso_write_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 8003fde:	f107 0214 	add.w	r2, r7, #20
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	216f      	movs	r1, #111	@ 0x6f
 8003fe6:	68b8      	ldr	r0, [r7, #8]
 8003fe8:	f7fe fc72 	bl	80028d0 <lsm6dso_write_reg>
 8003fec:	4602      	mov	r2, r0
 8003fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff0:	4413      	add	r3, r2
 8003ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <lsm6dso_pin_int2_route_set+0x5a>
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ffc:	e340      	b.n	8004680 <lsm6dso_pin_int2_route_set+0x6dc>
  }

  if (ctx != NULL)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 833c 	beq.w	800467e <lsm6dso_pin_int2_route_set+0x6da>
  {
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 8004006:	783b      	ldrb	r3, [r7, #0]
 8004008:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800400c:	b2da      	uxtb	r2, r3
 800400e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004012:	f362 0300 	bfi	r3, r2, #0, #1
 8004016:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_g    = val.drdy_g;
 800401a:	783b      	ldrb	r3, [r7, #0]
 800401c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004020:	b2da      	uxtb	r2, r3
 8004022:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004026:	f362 0341 	bfi	r3, r2, #1, #1
 800402a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 800402e:	783b      	ldrb	r3, [r7, #0]
 8004030:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004034:	b2da      	uxtb	r2, r3
 8004036:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800403a:	f362 0382 	bfi	r3, r2, #2, #1
 800403e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_th   = val.fifo_th;
 8004042:	783b      	ldrb	r3, [r7, #0]
 8004044:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004048:	b2da      	uxtb	r2, r3
 800404a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800404e:	f362 03c3 	bfi	r3, r2, #3, #1
 8004052:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 8004056:	783b      	ldrb	r3, [r7, #0]
 8004058:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800405c:	b2da      	uxtb	r2, r3
 800405e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004062:	f362 1304 	bfi	r3, r2, #4, #1
 8004066:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_full = val.fifo_full;
 800406a:	783b      	ldrb	r3, [r7, #0]
 800406c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004070:	b2da      	uxtb	r2, r3
 8004072:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004076:	f362 1345 	bfi	r3, r2, #5, #1
 800407a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
 800407e:	783b      	ldrb	r3, [r7, #0]
 8004080:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004084:	b2da      	uxtb	r2, r3
 8004086:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800408a:	f362 1386 	bfi	r3, r2, #6, #1
 800408e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.not_used_01    = 0;
 8004092:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004096:	f36f 13c7 	bfc	r3, #7, #1
 800409a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 800409e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80040a2:	2301      	movs	r3, #1
 80040a4:	210e      	movs	r1, #14
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7fe fc12 	bl	80028d0 <lsm6dso_write_reg>
 80040ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 80040ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <lsm6dso_pin_int2_route_set+0x114>
 80040b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b6:	e2e3      	b.n	8004680 <lsm6dso_pin_int2_route_set+0x6dc>

    md2_cfg.int2_timestamp    = val.timestamp;
 80040b8:	787b      	ldrb	r3, [r7, #1]
 80040ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	7f3b      	ldrb	r3, [r7, #28]
 80040c2:	f362 0300 	bfi	r3, r2, #0, #1
 80040c6:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_6d           = val.six_d;
 80040c8:	787b      	ldrb	r3, [r7, #1]
 80040ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	7f3b      	ldrb	r3, [r7, #28]
 80040d2:	f362 0382 	bfi	r3, r2, #2, #1
 80040d6:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_double_tap   = val.double_tap;
 80040d8:	787b      	ldrb	r3, [r7, #1]
 80040da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	7f3b      	ldrb	r3, [r7, #28]
 80040e2:	f362 03c3 	bfi	r3, r2, #3, #1
 80040e6:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_ff           = val.free_fall;
 80040e8:	787b      	ldrb	r3, [r7, #1]
 80040ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	7f3b      	ldrb	r3, [r7, #28]
 80040f2:	f362 1304 	bfi	r3, r2, #4, #1
 80040f6:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_wu           = val.wake_up;
 80040f8:	787b      	ldrb	r3, [r7, #1]
 80040fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	7f3b      	ldrb	r3, [r7, #28]
 8004102:	f362 1345 	bfi	r3, r2, #5, #1
 8004106:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_single_tap   = val.single_tap;
 8004108:	787b      	ldrb	r3, [r7, #1]
 800410a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	7f3b      	ldrb	r3, [r7, #28]
 8004112:	f362 1386 	bfi	r3, r2, #6, #1
 8004116:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_sleep_change = val.sleep_change;
 8004118:	787b      	ldrb	r3, [r7, #1]
 800411a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	7f3b      	ldrb	r3, [r7, #28]
 8004122:	f362 13c7 	bfi	r3, r2, #7, #1
 8004126:	773b      	strb	r3, [r7, #28]
    emb_func_int2.not_used_01 = 0;
 8004128:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800412c:	f36f 0302 	bfc	r3, #0, #3
 8004130:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2. int2_step_detector = val.step_detector;
 8004134:	787b      	ldrb	r3, [r7, #1]
 8004136:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800413a:	b2da      	uxtb	r2, r3
 800413c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004140:	f362 03c3 	bfi	r3, r2, #3, #1
 8004144:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_tilt           = val.tilt;
 8004148:	78bb      	ldrb	r3, [r7, #2]
 800414a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800414e:	b2da      	uxtb	r2, r3
 8004150:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004154:	f362 1304 	bfi	r3, r2, #4, #1
 8004158:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_sig_mot        = val.sig_mot;
 800415c:	78bb      	ldrb	r3, [r7, #2]
 800415e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004162:	b2da      	uxtb	r2, r3
 8004164:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004168:	f362 1345 	bfi	r3, r2, #5, #1
 800416c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.not_used_02 = 0;
 8004170:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004174:	f36f 1386 	bfc	r3, #6, #1
 8004178:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_fsm_lc         = val.fsm_lc;
 800417c:	78bb      	ldrb	r3, [r7, #2]
 800417e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004188:	f362 13c7 	bfi	r3, r2, #7, #1
 800418c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    fsm_int2_a.int2_fsm1 = val.fsm1;
 8004190:	78bb      	ldrb	r3, [r7, #2]
 8004192:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004196:	b2da      	uxtb	r2, r3
 8004198:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800419c:	f362 0300 	bfi	r3, r2, #0, #1
 80041a0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm2 = val.fsm2;
 80041a4:	78bb      	ldrb	r3, [r7, #2]
 80041a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80041b0:	f362 0341 	bfi	r3, r2, #1, #1
 80041b4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm3 = val.fsm3;
 80041b8:	78bb      	ldrb	r3, [r7, #2]
 80041ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80041c4:	f362 0382 	bfi	r3, r2, #2, #1
 80041c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm4 = val.fsm4;
 80041cc:	78bb      	ldrb	r3, [r7, #2]
 80041ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80041d8:	f362 03c3 	bfi	r3, r2, #3, #1
 80041dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm5 = val.fsm5;
 80041e0:	78bb      	ldrb	r3, [r7, #2]
 80041e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80041ec:	f362 1304 	bfi	r3, r2, #4, #1
 80041f0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm6 = val.fsm6;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004200:	f362 1345 	bfi	r3, r2, #5, #1
 8004204:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm7 = val.fsm7;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004214:	f362 1386 	bfi	r3, r2, #6, #1
 8004218:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm8 = val.fsm8;
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004228:	f362 13c7 	bfi	r3, r2, #7, #1
 800422c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800423c:	f362 0300 	bfi	r3, r2, #0, #1
 8004240:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm10 = val.fsm10;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800424a:	b2da      	uxtb	r2, r3
 800424c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004250:	f362 0341 	bfi	r3, r2, #1, #1
 8004254:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm11 = val.fsm11;
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800425e:	b2da      	uxtb	r2, r3
 8004260:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004264:	f362 0382 	bfi	r3, r2, #2, #1
 8004268:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm12 = val.fsm12;
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004272:	b2da      	uxtb	r2, r3
 8004274:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004278:	f362 03c3 	bfi	r3, r2, #3, #1
 800427c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm13 = val.fsm13;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004286:	b2da      	uxtb	r2, r3
 8004288:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800428c:	f362 1304 	bfi	r3, r2, #4, #1
 8004290:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm14 = val.fsm14;
 8004294:	793b      	ldrb	r3, [r7, #4]
 8004296:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042a0:	f362 1345 	bfi	r3, r2, #5, #1
 80042a4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm15 = val.fsm15;
 80042a8:	793b      	ldrb	r3, [r7, #4]
 80042aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042b4:	f362 1386 	bfi	r3, r2, #6, #1
 80042b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm16 = val.fsm16;
 80042bc:	793b      	ldrb	r3, [r7, #4]
 80042be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042c8:	f362 13c7 	bfi	r3, r2, #7, #1
 80042cc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80042d0:	f107 0218 	add.w	r2, r7, #24
 80042d4:	2301      	movs	r3, #1
 80042d6:	2113      	movs	r1, #19
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7fe fae1 	bl	80028a0 <lsm6dso_read_reg>
 80042de:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 80042e0:	783b      	ldrb	r3, [r7, #0]
 80042e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	787b      	ldrb	r3, [r7, #1]
 80042ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	4313      	orrs	r3, r2
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <lsm6dso_pin_int2_route_set+0x35c>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 80042f8:	7e3b      	ldrb	r3, [r7, #24]
 80042fa:	f36f 1345 	bfc	r3, #5, #1
 80042fe:	763b      	strb	r3, [r7, #24]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004300:	f107 0218 	add.w	r2, r7, #24
 8004304:	2301      	movs	r3, #1
 8004306:	2113      	movs	r1, #19
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7fe fae1 	bl	80028d0 <lsm6dso_write_reg>
 800430e:	4602      	mov	r2, r0
 8004310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004312:	4413      	add	r3, r2
 8004314:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8004316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <lsm6dso_pin_int2_route_set+0x37c>
 800431c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431e:	e1af      	b.n	8004680 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004320:	2102      	movs	r1, #2
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7fe ff26 	bl	8003174 <lsm6dso_mem_bank_set>
 8004328:	63f8      	str	r0, [r7, #60]	@ 0x3c

    ret += lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&emb_func_int2, 1);
 800432a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800432e:	2301      	movs	r3, #1
 8004330:	210e      	movs	r1, #14
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7fe facc 	bl	80028d0 <lsm6dso_write_reg>
 8004338:	4602      	mov	r2, r0
 800433a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433c:	4413      	add	r3, r2
 800433e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_A, (uint8_t *)&fsm_int2_a, 1);
 8004340:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004344:	2301      	movs	r3, #1
 8004346:	210f      	movs	r1, #15
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7fe fac1 	bl	80028d0 <lsm6dso_write_reg>
 800434e:	4602      	mov	r2, r0
 8004350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004352:	4413      	add	r3, r2
 8004354:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_B, (uint8_t *)&fsm_int2_b, 1);
 8004356:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800435a:	2301      	movs	r3, #1
 800435c:	2110      	movs	r1, #16
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7fe fab6 	bl	80028d0 <lsm6dso_write_reg>
 8004364:	4602      	mov	r2, r0
 8004366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004368:	4413      	add	r3, r2
 800436a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800436c:	2100      	movs	r1, #0
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7fe ff00 	bl	8003174 <lsm6dso_mem_bank_set>
 8004374:	4602      	mov	r2, r0
 8004376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004378:	4413      	add	r3, r2
 800437a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 800437c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <lsm6dso_pin_int2_route_set+0x3e2>
 8004382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004384:	e17c      	b.n	8004680 <lsm6dso_pin_int2_route_set+0x6dc>

    if ((emb_func_int2.int2_fsm_lc
 8004386:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800438a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800438e:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_sig_mot
 8004390:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004394:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_step_detector
 800439e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80043a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	4313      	orrs	r3, r2
 80043aa:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_tilt
 80043ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80043b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4313      	orrs	r3, r2
 80043b8:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm1
 80043ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm2
 80043c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	4313      	orrs	r3, r2
 80043d4:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm3
 80043d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm4
 80043e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	4313      	orrs	r3, r2
 80043f0:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm5
 80043f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm6
 8004400:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004404:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4313      	orrs	r3, r2
 800440c:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm7
 800440e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004412:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4313      	orrs	r3, r2
 800441a:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm8
 800441c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004420:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	4313      	orrs	r3, r2
 8004428:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm9
 800442a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800442e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	4313      	orrs	r3, r2
 8004436:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm10
 8004438:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800443c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004440:	b2db      	uxtb	r3, r3
 8004442:	4313      	orrs	r3, r2
 8004444:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm11
 8004446:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800444a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	4313      	orrs	r3, r2
 8004452:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm12
 8004454:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004458:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	4313      	orrs	r3, r2
 8004460:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm13
 8004462:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004466:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4313      	orrs	r3, r2
 800446e:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm14
 8004470:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004474:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	4313      	orrs	r3, r2
 800447c:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm15
 800447e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004482:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm16) != PROPERTY_DISABLE)
 800448c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004490:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	b2db      	uxtb	r3, r3
    if ((emb_func_int2.int2_fsm_lc
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <lsm6dso_pin_int2_route_set+0x504>
    {
      md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 800449e:	7f3b      	ldrb	r3, [r7, #28]
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	773b      	strb	r3, [r7, #28]
 80044a6:	e003      	b.n	80044b0 <lsm6dso_pin_int2_route_set+0x50c>
    }
    else
    {
      md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 80044a8:	7f3b      	ldrb	r3, [r7, #28]
 80044aa:	f36f 0341 	bfc	r3, #1, #1
 80044ae:	773b      	strb	r3, [r7, #28]
    }

    ret = lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80044b0:	f107 021c 	add.w	r2, r7, #28
 80044b4:	2301      	movs	r3, #1
 80044b6:	215f      	movs	r1, #95	@ 0x5f
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7fe fa09 	bl	80028d0 <lsm6dso_write_reg>
 80044be:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 80044c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <lsm6dso_pin_int2_route_set+0x526>
 80044c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c8:	e0da      	b.n	8004680 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 80044ca:	f107 0220 	add.w	r2, r7, #32
 80044ce:	2301      	movs	r3, #1
 80044d0:	2158      	movs	r1, #88	@ 0x58
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7fe f9e4 	bl	80028a0 <lsm6dso_read_reg>
 80044d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    ret += lsm6dso_pin_int1_route_get(ctx, &pin_int1_route);
 80044da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80044de:	4619      	mov	r1, r3
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fb6f 	bl	8003bc4 <lsm6dso_pin_int1_route_get>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ea:	4413      	add	r3, r2
 80044ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if ((val.fifo_bdr
 80044ee:	783b      	ldrb	r3, [r7, #0]
 80044f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80044f4:	b2da      	uxtb	r2, r3
         | val.drdy_g
 80044f6:	783b      	ldrb	r3, [r7, #0]
 80044f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	b2da      	uxtb	r2, r3
         | val.drdy_temp
 8004502:	783b      	ldrb	r3, [r7, #0]
 8004504:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	4313      	orrs	r3, r2
 800450c:	b2da      	uxtb	r2, r3
         | val.drdy_xl
 800450e:	783b      	ldrb	r3, [r7, #0]
 8004510:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004514:	b2db      	uxtb	r3, r3
 8004516:	4313      	orrs	r3, r2
 8004518:	b2da      	uxtb	r2, r3
         | val.fifo_full
 800451a:	783b      	ldrb	r3, [r7, #0]
 800451c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004520:	b2db      	uxtb	r3, r3
 8004522:	4313      	orrs	r3, r2
 8004524:	b2da      	uxtb	r2, r3
         | val.fifo_ovr
 8004526:	783b      	ldrb	r3, [r7, #0]
 8004528:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4313      	orrs	r3, r2
 8004530:	b2da      	uxtb	r2, r3
         | val.fifo_th
 8004532:	783b      	ldrb	r3, [r7, #0]
 8004534:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	4313      	orrs	r3, r2
 800453c:	b2da      	uxtb	r2, r3
         | val.six_d
 800453e:	787b      	ldrb	r3, [r7, #1]
 8004540:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	4313      	orrs	r3, r2
 8004548:	b2da      	uxtb	r2, r3
         | val.double_tap
 800454a:	787b      	ldrb	r3, [r7, #1]
 800454c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4313      	orrs	r3, r2
 8004554:	b2da      	uxtb	r2, r3
         | val.free_fall
 8004556:	787b      	ldrb	r3, [r7, #1]
 8004558:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800455c:	b2db      	uxtb	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	b2da      	uxtb	r2, r3
         | val.wake_up
 8004562:	787b      	ldrb	r3, [r7, #1]
 8004564:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	4313      	orrs	r3, r2
 800456c:	b2da      	uxtb	r2, r3
         | val.single_tap
 800456e:	787b      	ldrb	r3, [r7, #1]
 8004570:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004574:	b2db      	uxtb	r3, r3
 8004576:	4313      	orrs	r3, r2
 8004578:	b2da      	uxtb	r2, r3
         | val.sleep_change
 800457a:	787b      	ldrb	r3, [r7, #1]
 800457c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	4313      	orrs	r3, r2
 8004584:	b2da      	uxtb	r2, r3
         | pin_int1_route.den_flag
 8004586:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800458a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	4313      	orrs	r3, r2
 8004592:	b2da      	uxtb	r2, r3
         | pin_int1_route.boot
 8004594:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004598:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_bdr
 80045a2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80045a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	4313      	orrs	r3, r2
 80045ae:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_g
 80045b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80045b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	4313      	orrs	r3, r2
 80045bc:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_xl
 80045be:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80045c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_full
 80045cc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80045d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	4313      	orrs	r3, r2
 80045d8:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_ovr
 80045da:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80045de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	4313      	orrs	r3, r2
 80045e6:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_th
 80045e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80045ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	4313      	orrs	r3, r2
 80045f4:	b2da      	uxtb	r2, r3
         | pin_int1_route.six_d
 80045f6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80045fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	4313      	orrs	r3, r2
 8004602:	b2da      	uxtb	r2, r3
         | pin_int1_route.double_tap
 8004604:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004608:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	4313      	orrs	r3, r2
 8004610:	b2da      	uxtb	r2, r3
         | pin_int1_route.free_fall
 8004612:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004616:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4313      	orrs	r3, r2
 800461e:	b2da      	uxtb	r2, r3
         | pin_int1_route.wake_up
 8004620:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004624:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	b2da      	uxtb	r2, r3
         | pin_int1_route.single_tap
 800462e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004632:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	4313      	orrs	r3, r2
 800463a:	b2da      	uxtb	r2, r3
         | pin_int1_route.sleep_change) != PROPERTY_DISABLE)
 800463c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004640:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004644:	b2db      	uxtb	r3, r3
 8004646:	4313      	orrs	r3, r2
 8004648:	b2db      	uxtb	r3, r3
    if ((val.fifo_bdr
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <lsm6dso_pin_int2_route_set+0x6b8>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800464e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004656:	f887 3020 	strb.w	r3, [r7, #32]
 800465a:	e005      	b.n	8004668 <lsm6dso_pin_int2_route_set+0x6c4>
    }
    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800465c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004660:	f36f 13c7 	bfc	r3, #7, #1
 8004664:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8004668:	f107 0220 	add.w	r2, r7, #32
 800466c:	2301      	movs	r3, #1
 800466e:	2158      	movs	r1, #88	@ 0x58
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7fe f92d 	bl	80028d0 <lsm6dso_write_reg>
 8004676:	4602      	mov	r2, r0
 8004678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467a:	4413      	add	r3, r2
 800467c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return ret;
 800467e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004680:	4618      	mov	r0, r3
 8004682:	3740      	adds	r7, #64	@ 0x40
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08c      	sub	sp, #48	@ 0x30
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (aux_ctx != NULL)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 800469e:	f107 0210 	add.w	r2, r7, #16
 80046a2:	2301      	movs	r3, #1
 80046a4:	216f      	movs	r1, #111	@ 0x6f
 80046a6:	68b8      	ldr	r0, [r7, #8]
 80046a8:	f7fe f8fa 	bl	80028a0 <lsm6dso_read_reg>
 80046ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 80046ae:	7c3b      	ldrb	r3, [r7, #16]
 80046b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046b4:	b2d9      	uxtb	r1, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	7813      	ldrb	r3, [r2, #0]
 80046ba:	f361 0300 	bfi	r3, r1, #0, #1
 80046be:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 81c7 	beq.w	8004a56 <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 80046c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80046ce:	2102      	movs	r1, #2
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7fe fd4f 	bl	8003174 <lsm6dso_mem_bank_set>
 80046d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 80046d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d107      	bne.n	80046ee <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 80046de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80046e2:	2301      	movs	r3, #1
 80046e4:	210e      	movs	r1, #14
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7fe f8da 	bl	80028a0 <lsm6dso_read_reg>
 80046ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 80046ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d107      	bne.n	8004704 <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 80046f4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80046f8:	2301      	movs	r3, #1
 80046fa:	210f      	movs	r1, #15
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7fe f8cf 	bl	80028a0 <lsm6dso_read_reg>
 8004702:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8004704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d107      	bne.n	800471a <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 800470a:	f107 0220 	add.w	r2, r7, #32
 800470e:	2301      	movs	r3, #1
 8004710:	2110      	movs	r1, #16
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7fe f8c4 	bl	80028a0 <lsm6dso_read_reg>
 8004718:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 800471a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004720:	2100      	movs	r1, #0
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7fe fd26 	bl	8003174 <lsm6dso_mem_bank_set>
 8004728:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 800472a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8004730:	f107 021c 	add.w	r2, r7, #28
 8004734:	2301      	movs	r3, #1
 8004736:	210e      	movs	r1, #14
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7fe f8b1 	bl	80028a0 <lsm6dso_read_reg>
 800473e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 8004746:	f107 0218 	add.w	r2, r7, #24
 800474a:	2301      	movs	r3, #1
 800474c:	215f      	movs	r1, #95	@ 0x5f
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7fe f8a6 	bl	80028a0 <lsm6dso_read_reg>
 8004754:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 8004756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800475c:	f107 0214 	add.w	r2, r7, #20
 8004760:	2301      	movs	r3, #1
 8004762:	2113      	movs	r1, #19
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7fe f89b 	bl	80028a0 <lsm6dso_read_reg>
 800476a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 800476c:	7d3b      	ldrb	r3, [r7, #20]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d128      	bne.n	80047ca <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 8004778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d110      	bne.n	80047a0 <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 800477e:	f107 021c 	add.w	r2, r7, #28
 8004782:	2301      	movs	r3, #1
 8004784:	210e      	movs	r1, #14
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7fe f88a 	bl	80028a0 <lsm6dso_read_reg>
 800478c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800478e:	7f3b      	ldrb	r3, [r7, #28]
 8004790:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004794:	b2d9      	uxtb	r1, r3
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	7813      	ldrb	r3, [r2, #0]
 800479a:	f361 03c3 	bfi	r3, r1, #3, #1
 800479e:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 80047a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11b      	bne.n	80047de <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80047a6:	f107 0218 	add.w	r2, r7, #24
 80047aa:	2301      	movs	r3, #1
 80047ac:	215f      	movs	r1, #95	@ 0x5f
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7fe f876 	bl	80028a0 <lsm6dso_read_reg>
 80047b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 80047b6:	7e3b      	ldrb	r3, [r7, #24]
 80047b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047bc:	b2d9      	uxtb	r1, r3
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	7853      	ldrb	r3, [r2, #1]
 80047c2:	f361 0300 	bfi	r3, r1, #0, #1
 80047c6:	7053      	strb	r3, [r2, #1]
 80047c8:	e009      	b.n	80047de <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	7813      	ldrb	r3, [r2, #0]
 80047ce:	f36f 03c3 	bfc	r3, #3, #1
 80047d2:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	7853      	ldrb	r3, [r2, #1]
 80047d8:	f36f 0300 	bfc	r3, #0, #1
 80047dc:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 80047de:	7f3b      	ldrb	r3, [r7, #28]
 80047e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047e4:	b2d9      	uxtb	r1, r3
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	7813      	ldrb	r3, [r2, #0]
 80047ea:	f361 0341 	bfi	r3, r1, #1, #1
 80047ee:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 80047f0:	7f3b      	ldrb	r3, [r7, #28]
 80047f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80047f6:	b2d9      	uxtb	r1, r3
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	7813      	ldrb	r3, [r2, #0]
 80047fc:	f361 0382 	bfi	r3, r1, #2, #1
 8004800:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8004802:	7f3b      	ldrb	r3, [r7, #28]
 8004804:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004808:	b2d9      	uxtb	r1, r3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	7813      	ldrb	r3, [r2, #0]
 800480e:	f361 03c3 	bfi	r3, r1, #3, #1
 8004812:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 8004814:	7f3b      	ldrb	r3, [r7, #28]
 8004816:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800481a:	b2d9      	uxtb	r1, r3
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	7813      	ldrb	r3, [r2, #0]
 8004820:	f361 1304 	bfi	r3, r1, #4, #1
 8004824:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 8004826:	7f3b      	ldrb	r3, [r7, #28]
 8004828:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800482c:	b2d9      	uxtb	r1, r3
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	7813      	ldrb	r3, [r2, #0]
 8004832:	f361 1345 	bfi	r3, r1, #5, #1
 8004836:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 8004838:	7f3b      	ldrb	r3, [r7, #28]
 800483a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800483e:	b2d9      	uxtb	r1, r3
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	7813      	ldrb	r3, [r2, #0]
 8004844:	f361 1386 	bfi	r3, r1, #6, #1
 8004848:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 800484a:	7f3b      	ldrb	r3, [r7, #28]
 800484c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004850:	b2d9      	uxtb	r1, r3
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	7813      	ldrb	r3, [r2, #0]
 8004856:	f361 13c7 	bfi	r3, r1, #7, #1
 800485a:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 800485c:	7e3b      	ldrb	r3, [r7, #24]
 800485e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004862:	b2d9      	uxtb	r1, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	7853      	ldrb	r3, [r2, #1]
 8004868:	f361 0300 	bfi	r3, r1, #0, #1
 800486c:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 800486e:	7e3b      	ldrb	r3, [r7, #24]
 8004870:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004874:	b2d9      	uxtb	r1, r3
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	7853      	ldrb	r3, [r2, #1]
 800487a:	f361 0341 	bfi	r3, r1, #1, #1
 800487e:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 8004880:	7e3b      	ldrb	r3, [r7, #24]
 8004882:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004886:	b2d9      	uxtb	r1, r3
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	7853      	ldrb	r3, [r2, #1]
 800488c:	f361 0382 	bfi	r3, r1, #2, #1
 8004890:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 8004892:	7e3b      	ldrb	r3, [r7, #24]
 8004894:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004898:	b2d9      	uxtb	r1, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	7853      	ldrb	r3, [r2, #1]
 800489e:	f361 03c3 	bfi	r3, r1, #3, #1
 80048a2:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 80048a4:	7e3b      	ldrb	r3, [r7, #24]
 80048a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048aa:	b2d9      	uxtb	r1, r3
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	7853      	ldrb	r3, [r2, #1]
 80048b0:	f361 1304 	bfi	r3, r1, #4, #1
 80048b4:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 80048b6:	7e3b      	ldrb	r3, [r7, #24]
 80048b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80048bc:	b2d9      	uxtb	r1, r3
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	7853      	ldrb	r3, [r2, #1]
 80048c2:	f361 1345 	bfi	r3, r1, #5, #1
 80048c6:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 80048c8:	7e3b      	ldrb	r3, [r7, #24]
 80048ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048ce:	b2d9      	uxtb	r1, r3
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	7853      	ldrb	r3, [r2, #1]
 80048d4:	f361 1386 	bfi	r3, r1, #6, #1
 80048d8:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 80048da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80048e2:	b2d9      	uxtb	r1, r3
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	7853      	ldrb	r3, [r2, #1]
 80048e8:	f361 13c7 	bfi	r3, r1, #7, #1
 80048ec:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 80048ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048f6:	b2d9      	uxtb	r1, r3
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	7893      	ldrb	r3, [r2, #2]
 80048fc:	f361 0300 	bfi	r3, r1, #0, #1
 8004900:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 8004902:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004906:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800490a:	b2d9      	uxtb	r1, r3
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	7893      	ldrb	r3, [r2, #2]
 8004910:	f361 0382 	bfi	r3, r1, #2, #1
 8004914:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 8004916:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800491a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800491e:	b2d9      	uxtb	r1, r3
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	7893      	ldrb	r3, [r2, #2]
 8004924:	f361 03c3 	bfi	r3, r1, #3, #1
 8004928:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 800492a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800492e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004932:	b2d9      	uxtb	r1, r3
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	7893      	ldrb	r3, [r2, #2]
 8004938:	f361 1304 	bfi	r3, r1, #4, #1
 800493c:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 800493e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004942:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004946:	b2d9      	uxtb	r1, r3
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	7893      	ldrb	r3, [r2, #2]
 800494c:	f361 1345 	bfi	r3, r1, #5, #1
 8004950:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 8004952:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004956:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800495a:	b2d9      	uxtb	r1, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	7893      	ldrb	r3, [r2, #2]
 8004960:	f361 1386 	bfi	r3, r1, #6, #1
 8004964:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 8004966:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800496a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800496e:	b2d9      	uxtb	r1, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	7893      	ldrb	r3, [r2, #2]
 8004974:	f361 13c7 	bfi	r3, r1, #7, #1
 8004978:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 800497a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800497e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004982:	b2d9      	uxtb	r1, r3
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	78d3      	ldrb	r3, [r2, #3]
 8004988:	f361 0300 	bfi	r3, r1, #0, #1
 800498c:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 800498e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004992:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004996:	b2d9      	uxtb	r1, r3
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	78d3      	ldrb	r3, [r2, #3]
 800499c:	f361 0341 	bfi	r3, r1, #1, #1
 80049a0:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 80049a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049aa:	b2d9      	uxtb	r1, r3
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	78d3      	ldrb	r3, [r2, #3]
 80049b0:	f361 0382 	bfi	r3, r1, #2, #1
 80049b4:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 80049b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80049be:	b2d9      	uxtb	r1, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	78d3      	ldrb	r3, [r2, #3]
 80049c4:	f361 03c3 	bfi	r3, r1, #3, #1
 80049c8:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 80049ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80049d2:	b2d9      	uxtb	r1, r3
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	78d3      	ldrb	r3, [r2, #3]
 80049d8:	f361 1304 	bfi	r3, r1, #4, #1
 80049dc:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 80049de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80049e6:	b2d9      	uxtb	r1, r3
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	78d3      	ldrb	r3, [r2, #3]
 80049ec:	f361 1345 	bfi	r3, r1, #5, #1
 80049f0:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 80049f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80049fa:	b2d9      	uxtb	r1, r3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	78d3      	ldrb	r3, [r2, #3]
 8004a00:	f361 1386 	bfi	r3, r1, #6, #1
 8004a04:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 8004a06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a0e:	b2d9      	uxtb	r1, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	78d3      	ldrb	r3, [r2, #3]
 8004a14:	f361 13c7 	bfi	r3, r1, #7, #1
 8004a18:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 8004a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004a22:	b2d9      	uxtb	r1, r3
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	7913      	ldrb	r3, [r2, #4]
 8004a28:	f361 0300 	bfi	r3, r1, #0, #1
 8004a2c:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 8004a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a32:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a36:	b2d9      	uxtb	r1, r3
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	7913      	ldrb	r3, [r2, #4]
 8004a3c:	f361 0341 	bfi	r3, r1, #1, #1
 8004a40:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 8004a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a46:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a4a:	b2d9      	uxtb	r1, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	7913      	ldrb	r3, [r2, #4]
 8004a50:	f361 0382 	bfi	r3, r1, #2, #1
 8004a54:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 8004a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3730      	adds	r7, #48	@ 0x30
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a6a:	2003      	movs	r0, #3
 8004a6c:	f000 f95a 	bl	8004d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a70:	2000      	movs	r0, #0
 8004a72:	f000 f80d 	bl	8004a90 <HAL_InitTick>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	71fb      	strb	r3, [r7, #7]
 8004a80:	e001      	b.n	8004a86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a82:	f7fb ffaf 	bl	80009e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a86:	79fb      	ldrb	r3, [r7, #7]

}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a9c:	4b16      	ldr	r3, [pc, #88]	@ (8004af8 <HAL_InitTick+0x68>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d022      	beq.n	8004aea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004aa4:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <HAL_InitTick+0x6c>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <HAL_InitTick+0x68>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f966 	bl	8004d8a <HAL_SYSTICK_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	d809      	bhi.n	8004ade <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004aca:	2200      	movs	r2, #0
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ad2:	f000 f932 	bl	8004d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8004b00 <HAL_InitTick+0x70>)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e007      	b.n	8004aee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
 8004ae2:	e004      	b.n	8004aee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
 8004ae8:	e001      	b.n	8004aee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000060 	.word	0x20000060
 8004afc:	20000000 	.word	0x20000000
 8004b00:	2000005c 	.word	0x2000005c

08004b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b08:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <HAL_IncTick+0x1c>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_IncTick+0x20>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4413      	add	r3, r2
 8004b12:	4a03      	ldr	r2, [pc, #12]	@ (8004b20 <HAL_IncTick+0x1c>)
 8004b14:	6013      	str	r3, [r2, #0]
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	20000284 	.word	0x20000284
 8004b24:	20000060 	.word	0x20000060

08004b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b2c:	4b03      	ldr	r3, [pc, #12]	@ (8004b3c <HAL_GetTick+0x14>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20000284 	.word	0x20000284

08004b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b48:	f7ff ffee 	bl	8004b28 <HAL_GetTick>
 8004b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b58:	d004      	beq.n	8004b64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b5a:	4b09      	ldr	r3, [pc, #36]	@ (8004b80 <HAL_Delay+0x40>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b64:	bf00      	nop
 8004b66:	f7ff ffdf 	bl	8004b28 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d8f7      	bhi.n	8004b66 <HAL_Delay+0x26>
  {
  }
}
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000060 	.word	0x20000060

08004b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bb6:	4a04      	ldr	r2, [pc, #16]	@ (8004bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	60d3      	str	r3, [r2, #12]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd0:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <__NVIC_GetPriorityGrouping+0x18>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	0a1b      	lsrs	r3, r3, #8
 8004bd6:	f003 0307 	and.w	r3, r3, #7
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	db0b      	blt.n	8004c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	f003 021f 	and.w	r2, r3, #31
 8004c00:	4907      	ldr	r1, [pc, #28]	@ (8004c20 <__NVIC_EnableIRQ+0x38>)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2001      	movs	r0, #1
 8004c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	e000e100 	.word	0xe000e100

08004c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	6039      	str	r1, [r7, #0]
 8004c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	db0a      	blt.n	8004c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	490c      	ldr	r1, [pc, #48]	@ (8004c70 <__NVIC_SetPriority+0x4c>)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	0112      	lsls	r2, r2, #4
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	440b      	add	r3, r1
 8004c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c4c:	e00a      	b.n	8004c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	4908      	ldr	r1, [pc, #32]	@ (8004c74 <__NVIC_SetPriority+0x50>)
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	3b04      	subs	r3, #4
 8004c5c:	0112      	lsls	r2, r2, #4
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	440b      	add	r3, r1
 8004c62:	761a      	strb	r2, [r3, #24]
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	e000e100 	.word	0xe000e100
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b089      	sub	sp, #36	@ 0x24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f1c3 0307 	rsb	r3, r3, #7
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	bf28      	it	cs
 8004c96:	2304      	movcs	r3, #4
 8004c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	2b06      	cmp	r3, #6
 8004ca0:	d902      	bls.n	8004ca8 <NVIC_EncodePriority+0x30>
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3b03      	subs	r3, #3
 8004ca6:	e000      	b.n	8004caa <NVIC_EncodePriority+0x32>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	43da      	mvns	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	401a      	ands	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cca:	43d9      	mvns	r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd0:	4313      	orrs	r3, r2
         );
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3724      	adds	r7, #36	@ 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cf0:	d301      	bcc.n	8004cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e00f      	b.n	8004d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8004d20 <SysTick_Config+0x40>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cfe:	210f      	movs	r1, #15
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d04:	f7ff ff8e 	bl	8004c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <SysTick_Config+0x40>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <SysTick_Config+0x40>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010

08004d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ff29 	bl	8004b84 <__NVIC_SetPriorityGrouping>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	4603      	mov	r3, r0
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d48:	f7ff ff40 	bl	8004bcc <__NVIC_GetPriorityGrouping>
 8004d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	6978      	ldr	r0, [r7, #20]
 8004d54:	f7ff ff90 	bl	8004c78 <NVIC_EncodePriority>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5e:	4611      	mov	r1, r2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff5f 	bl	8004c24 <__NVIC_SetPriority>
}
 8004d66:	bf00      	nop
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	4603      	mov	r3, r0
 8004d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff ff33 	bl	8004be8 <__NVIC_EnableIRQ>
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff ffa4 	bl	8004ce0 <SysTick_Config>
 8004d98:	4603      	mov	r3, r0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e054      	b.n	8004e60 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7f5b      	ldrb	r3, [r3, #29]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d105      	bne.n	8004dcc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fb fe30 	bl	8000a2c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	791b      	ldrb	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10c      	bne.n	8004df4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a22      	ldr	r2, [pc, #136]	@ (8004e68 <HAL_CRC_Init+0xc4>)
 8004de0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0218 	bic.w	r2, r2, #24
 8004df0:	609a      	str	r2, [r3, #8]
 8004df2:	e00c      	b.n	8004e0e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6899      	ldr	r1, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f834 	bl	8004e6c <HAL_CRCEx_Polynomial_Set>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e028      	b.n	8004e60 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	795b      	ldrb	r3, [r3, #5]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d105      	bne.n	8004e22 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e1e:	611a      	str	r2, [r3, #16]
 8004e20:	e004      	b.n	8004e2c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6912      	ldr	r2, [r2, #16]
 8004e2a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695a      	ldr	r2, [r3, #20]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	04c11db7 	.word	0x04c11db7

08004e6c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004e7c:	231f      	movs	r3, #31
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
 8004e8e:	e063      	b.n	8004f58 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e90:	bf00      	nop
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1e5a      	subs	r2, r3, #1
 8004e96:	613a      	str	r2, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <HAL_CRCEx_Polynomial_Set+0x44>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b18      	cmp	r3, #24
 8004eb4:	d846      	bhi.n	8004f44 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <HAL_CRCEx_Polynomial_Set+0x50>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004f4b 	.word	0x08004f4b
 8004ec0:	08004f45 	.word	0x08004f45
 8004ec4:	08004f45 	.word	0x08004f45
 8004ec8:	08004f45 	.word	0x08004f45
 8004ecc:	08004f45 	.word	0x08004f45
 8004ed0:	08004f45 	.word	0x08004f45
 8004ed4:	08004f45 	.word	0x08004f45
 8004ed8:	08004f45 	.word	0x08004f45
 8004edc:	08004f39 	.word	0x08004f39
 8004ee0:	08004f45 	.word	0x08004f45
 8004ee4:	08004f45 	.word	0x08004f45
 8004ee8:	08004f45 	.word	0x08004f45
 8004eec:	08004f45 	.word	0x08004f45
 8004ef0:	08004f45 	.word	0x08004f45
 8004ef4:	08004f45 	.word	0x08004f45
 8004ef8:	08004f45 	.word	0x08004f45
 8004efc:	08004f2d 	.word	0x08004f2d
 8004f00:	08004f45 	.word	0x08004f45
 8004f04:	08004f45 	.word	0x08004f45
 8004f08:	08004f45 	.word	0x08004f45
 8004f0c:	08004f45 	.word	0x08004f45
 8004f10:	08004f45 	.word	0x08004f45
 8004f14:	08004f45 	.word	0x08004f45
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f21 	.word	0x08004f21
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b06      	cmp	r3, #6
 8004f24:	d913      	bls.n	8004f4e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004f2a:	e010      	b.n	8004f4e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b07      	cmp	r3, #7
 8004f30:	d90f      	bls.n	8004f52 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004f36:	e00c      	b.n	8004f52 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	2b0f      	cmp	r3, #15
 8004f3c:	d90b      	bls.n	8004f56 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004f42:	e008      	b.n	8004f56 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
        break;
 8004f48:	e006      	b.n	8004f58 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e004      	b.n	8004f58 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004f4e:	bf00      	nop
 8004f50:	e002      	b.n	8004f58 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004f52:	bf00      	nop
 8004f54:	e000      	b.n	8004f58 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004f56:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 0118 	bic.w	r1, r3, #24
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e147      	b.n	800522a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fb fd5c 	bl	8000a6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0210 	bic.w	r2, r2, #16
 8004fc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fc4:	f7ff fdb0 	bl	8004b28 <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004fca:	e012      	b.n	8004ff2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004fcc:	f7ff fdac 	bl	8004b28 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b0a      	cmp	r3, #10
 8004fd8:	d90b      	bls.n	8004ff2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e11b      	b.n	800522a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d0e5      	beq.n	8004fcc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005010:	f7ff fd8a 	bl	8004b28 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005016:	e012      	b.n	800503e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005018:	f7ff fd86 	bl	8004b28 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b0a      	cmp	r3, #10
 8005024:	d90b      	bls.n	800503e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502a:	f043 0201 	orr.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2203      	movs	r2, #3
 8005036:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e0f5      	b.n	800522a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0e5      	beq.n	8005018 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0202 	orr.w	r2, r2, #2
 800505a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a74      	ldr	r2, [pc, #464]	@ (8005234 <HAL_FDCAN_Init+0x2ac>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d103      	bne.n	800506e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005066:	4a74      	ldr	r2, [pc, #464]	@ (8005238 <HAL_FDCAN_Init+0x2b0>)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7c1b      	ldrb	r3, [r3, #16]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d108      	bne.n	8005088 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005084:	619a      	str	r2, [r3, #24]
 8005086:	e007      	b.n	8005098 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005096:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	7c5b      	ldrb	r3, [r3, #17]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d108      	bne.n	80050b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ae:	619a      	str	r2, [r3, #24]
 80050b0:	e007      	b.n	80050c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699a      	ldr	r2, [r3, #24]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	7c9b      	ldrb	r3, [r3, #18]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d108      	bne.n	80050dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050d8:	619a      	str	r2, [r3, #24]
 80050da:	e007      	b.n	80050ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005110:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0210 	bic.w	r2, r2, #16
 8005120:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d108      	bne.n	800513c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0204 	orr.w	r2, r2, #4
 8005138:	619a      	str	r2, [r3, #24]
 800513a:	e02c      	b.n	8005196 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d028      	beq.n	8005196 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d01c      	beq.n	8005186 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800515a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0210 	orr.w	r2, r2, #16
 800516a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d110      	bne.n	8005196 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0220 	orr.w	r2, r2, #32
 8005182:	619a      	str	r2, [r3, #24]
 8005184:	e007      	b.n	8005196 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0220 	orr.w	r2, r2, #32
 8005194:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	3b01      	subs	r3, #1
 800519c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80051be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ca:	d115      	bne.n	80051f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	3b01      	subs	r3, #1
 80051d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80051da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e0:	3b01      	subs	r3, #1
 80051e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80051e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	3b01      	subs	r3, #1
 80051ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80051f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80051f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f9ae 	bl	8005570 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40006400 	.word	0x40006400
 8005238:	40006500 	.word	0x40006500

0800523c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	@ 0x30
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800524e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005258:	4013      	ands	r3, r2
 800525a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005270:	4013      	ands	r3, r2
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005288:	4013      	ands	r3, r2
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005292:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005296:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529e:	6a3a      	ldr	r2, [r7, #32]
 80052a0:	4013      	ands	r3, r2
 80052a2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052aa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80052ae:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	4013      	ands	r3, r2
 80052ba:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ca:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d006      	beq.n	80052ee <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2240      	movs	r2, #64	@ 0x40
 80052e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f921 	bl	8005530 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d019      	beq.n	800532c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d014      	beq.n	800532c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800530a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005322:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005324:	6939      	ldr	r1, [r7, #16]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f8e3 	bl	80054f2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005338:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800533a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f8a2 	bl	8005486 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800534e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8a2 	bl	800549c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005364:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005366:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8a2 	bl	80054b2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00c      	beq.n	8005392 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800538a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f89b 	bl	80054c8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005398:	2b00      	cmp	r3, #0
 800539a:	d018      	beq.n	80053ce <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d013      	beq.n	80053ce <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80053ae:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4013      	ands	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2280      	movs	r2, #128	@ 0x80
 80053c4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f887 	bl	80054dc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80053ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f88b 	bl	8005508 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00c      	beq.n	8005416 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800540e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f883 	bl	800551c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00f      	beq.n	8005440 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005432:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005438:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800544e:	69f9      	ldr	r1, [r7, #28]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f881 	bl	8005558 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a3a      	ldr	r2, [r7, #32]
 8005462:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f863 	bl	8005544 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800547e:	bf00      	nop
 8005480:	3730      	adds	r7, #48	@ 0x30
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005578:	4b27      	ldr	r3, [pc, #156]	@ (8005618 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800557a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800558a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005592:	041a      	lsls	r2, r3, #16
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b8:	061a      	lsls	r2, r3, #24
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e005      	b.n	80055fe <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3304      	adds	r3, #4
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	429a      	cmp	r2, r3
 8005608:	d3f3      	bcc.n	80055f2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	4000a400 	.word	0x4000a400

0800561c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800562a:	e15a      	b.n	80058e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	2101      	movs	r1, #1
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	fa01 f303 	lsl.w	r3, r1, r3
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 814c 	beq.w	80058dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d005      	beq.n	800565c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005658:	2b02      	cmp	r3, #2
 800565a:	d130      	bne.n	80056be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2203      	movs	r2, #3
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4013      	ands	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005692:	2201      	movs	r2, #1
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43db      	mvns	r3, r3
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4013      	ands	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	f003 0201 	and.w	r2, r3, #1
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d017      	beq.n	80056fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	2203      	movs	r2, #3
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43db      	mvns	r3, r3
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4013      	ands	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d123      	bne.n	800574e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	08da      	lsrs	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3208      	adds	r2, #8
 800570e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005712:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	220f      	movs	r2, #15
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43db      	mvns	r3, r3
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4013      	ands	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	08da      	lsrs	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3208      	adds	r2, #8
 8005748:	6939      	ldr	r1, [r7, #16]
 800574a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	2203      	movs	r2, #3
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	43db      	mvns	r3, r3
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4013      	ands	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f003 0203 	and.w	r2, r3, #3
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80a6 	beq.w	80058dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005790:	4b5b      	ldr	r3, [pc, #364]	@ (8005900 <HAL_GPIO_Init+0x2e4>)
 8005792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005794:	4a5a      	ldr	r2, [pc, #360]	@ (8005900 <HAL_GPIO_Init+0x2e4>)
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	6613      	str	r3, [r2, #96]	@ 0x60
 800579c:	4b58      	ldr	r3, [pc, #352]	@ (8005900 <HAL_GPIO_Init+0x2e4>)
 800579e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057a8:	4a56      	ldr	r2, [pc, #344]	@ (8005904 <HAL_GPIO_Init+0x2e8>)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	089b      	lsrs	r3, r3, #2
 80057ae:	3302      	adds	r3, #2
 80057b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	220f      	movs	r2, #15
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057d2:	d01f      	beq.n	8005814 <HAL_GPIO_Init+0x1f8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d019      	beq.n	8005810 <HAL_GPIO_Init+0x1f4>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a4b      	ldr	r2, [pc, #300]	@ (800590c <HAL_GPIO_Init+0x2f0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d013      	beq.n	800580c <HAL_GPIO_Init+0x1f0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005910 <HAL_GPIO_Init+0x2f4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00d      	beq.n	8005808 <HAL_GPIO_Init+0x1ec>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a49      	ldr	r2, [pc, #292]	@ (8005914 <HAL_GPIO_Init+0x2f8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <HAL_GPIO_Init+0x1e8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a48      	ldr	r2, [pc, #288]	@ (8005918 <HAL_GPIO_Init+0x2fc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d101      	bne.n	8005800 <HAL_GPIO_Init+0x1e4>
 80057fc:	2305      	movs	r3, #5
 80057fe:	e00a      	b.n	8005816 <HAL_GPIO_Init+0x1fa>
 8005800:	2306      	movs	r3, #6
 8005802:	e008      	b.n	8005816 <HAL_GPIO_Init+0x1fa>
 8005804:	2304      	movs	r3, #4
 8005806:	e006      	b.n	8005816 <HAL_GPIO_Init+0x1fa>
 8005808:	2303      	movs	r3, #3
 800580a:	e004      	b.n	8005816 <HAL_GPIO_Init+0x1fa>
 800580c:	2302      	movs	r3, #2
 800580e:	e002      	b.n	8005816 <HAL_GPIO_Init+0x1fa>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <HAL_GPIO_Init+0x1fa>
 8005814:	2300      	movs	r3, #0
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	f002 0203 	and.w	r2, r2, #3
 800581c:	0092      	lsls	r2, r2, #2
 800581e:	4093      	lsls	r3, r2
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005826:	4937      	ldr	r1, [pc, #220]	@ (8005904 <HAL_GPIO_Init+0x2e8>)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	089b      	lsrs	r3, r3, #2
 800582c:	3302      	adds	r3, #2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005834:	4b39      	ldr	r3, [pc, #228]	@ (800591c <HAL_GPIO_Init+0x300>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	43db      	mvns	r3, r3
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005858:	4a30      	ldr	r2, [pc, #192]	@ (800591c <HAL_GPIO_Init+0x300>)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800585e:	4b2f      	ldr	r3, [pc, #188]	@ (800591c <HAL_GPIO_Init+0x300>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	43db      	mvns	r3, r3
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4013      	ands	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005882:	4a26      	ldr	r2, [pc, #152]	@ (800591c <HAL_GPIO_Init+0x300>)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005888:	4b24      	ldr	r3, [pc, #144]	@ (800591c <HAL_GPIO_Init+0x300>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	43db      	mvns	r3, r3
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4013      	ands	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058ac:	4a1b      	ldr	r2, [pc, #108]	@ (800591c <HAL_GPIO_Init+0x300>)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80058b2:	4b1a      	ldr	r3, [pc, #104]	@ (800591c <HAL_GPIO_Init+0x300>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	43db      	mvns	r3, r3
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4013      	ands	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058d6:	4a11      	ldr	r2, [pc, #68]	@ (800591c <HAL_GPIO_Init+0x300>)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3301      	adds	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f47f ae9d 	bne.w	800562c <HAL_GPIO_Init+0x10>
  }
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40021000 	.word	0x40021000
 8005904:	40010000 	.word	0x40010000
 8005908:	48000400 	.word	0x48000400
 800590c:	48000800 	.word	0x48000800
 8005910:	48000c00 	.word	0x48000c00
 8005914:	48001000 	.word	0x48001000
 8005918:	48001400 	.word	0x48001400
 800591c:	40010400 	.word	0x40010400

08005920 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800592e:	e0bd      	b.n	8005aac <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005930:	2201      	movs	r2, #1
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	4013      	ands	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80b0 	beq.w	8005aa6 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8005946:	4a60      	ldr	r2, [pc, #384]	@ (8005ac8 <HAL_GPIO_DeInit+0x1a8>)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	089b      	lsrs	r3, r3, #2
 800594c:	3302      	adds	r3, #2
 800594e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005952:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	220f      	movs	r2, #15
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4013      	ands	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800596e:	d01f      	beq.n	80059b0 <HAL_GPIO_DeInit+0x90>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a56      	ldr	r2, [pc, #344]	@ (8005acc <HAL_GPIO_DeInit+0x1ac>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d019      	beq.n	80059ac <HAL_GPIO_DeInit+0x8c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a55      	ldr	r2, [pc, #340]	@ (8005ad0 <HAL_GPIO_DeInit+0x1b0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_GPIO_DeInit+0x88>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a54      	ldr	r2, [pc, #336]	@ (8005ad4 <HAL_GPIO_DeInit+0x1b4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00d      	beq.n	80059a4 <HAL_GPIO_DeInit+0x84>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a53      	ldr	r2, [pc, #332]	@ (8005ad8 <HAL_GPIO_DeInit+0x1b8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <HAL_GPIO_DeInit+0x80>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a52      	ldr	r2, [pc, #328]	@ (8005adc <HAL_GPIO_DeInit+0x1bc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <HAL_GPIO_DeInit+0x7c>
 8005998:	2305      	movs	r3, #5
 800599a:	e00a      	b.n	80059b2 <HAL_GPIO_DeInit+0x92>
 800599c:	2306      	movs	r3, #6
 800599e:	e008      	b.n	80059b2 <HAL_GPIO_DeInit+0x92>
 80059a0:	2304      	movs	r3, #4
 80059a2:	e006      	b.n	80059b2 <HAL_GPIO_DeInit+0x92>
 80059a4:	2303      	movs	r3, #3
 80059a6:	e004      	b.n	80059b2 <HAL_GPIO_DeInit+0x92>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e002      	b.n	80059b2 <HAL_GPIO_DeInit+0x92>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <HAL_GPIO_DeInit+0x92>
 80059b0:	2300      	movs	r3, #0
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	f002 0203 	and.w	r2, r2, #3
 80059b8:	0092      	lsls	r2, r2, #2
 80059ba:	4093      	lsls	r3, r2
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d132      	bne.n	8005a28 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80059c2:	4b47      	ldr	r3, [pc, #284]	@ (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	4945      	ldr	r1, [pc, #276]	@ (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80059d0:	4b43      	ldr	r3, [pc, #268]	@ (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	43db      	mvns	r3, r3
 80059d8:	4941      	ldr	r1, [pc, #260]	@ (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059da:	4013      	ands	r3, r2
 80059dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80059de:	4b40      	ldr	r3, [pc, #256]	@ (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	493e      	ldr	r1, [pc, #248]	@ (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80059ec:	4b3c      	ldr	r3, [pc, #240]	@ (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	43db      	mvns	r3, r3
 80059f4:	493a      	ldr	r1, [pc, #232]	@ (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	220f      	movs	r2, #15
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ac8 <HAL_GPIO_DeInit+0x1a8>)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	089b      	lsrs	r3, r3, #2
 8005a10:	3302      	adds	r3, #2
 8005a12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	43da      	mvns	r2, r3
 8005a1a:	482b      	ldr	r0, [pc, #172]	@ (8005ac8 <HAL_GPIO_DeInit+0x1a8>)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	089b      	lsrs	r3, r3, #2
 8005a20:	400a      	ands	r2, r1
 8005a22:	3302      	adds	r3, #2
 8005a24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	2103      	movs	r1, #3
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	08da      	lsrs	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3208      	adds	r2, #8
 8005a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	220f      	movs	r2, #15
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	08d2      	lsrs	r2, r2, #3
 8005a5c:	4019      	ands	r1, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3208      	adds	r2, #8
 8005a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	2103      	movs	r1, #3
 8005a70:	fa01 f303 	lsl.w	r3, r1, r3
 8005a74:	43db      	mvns	r3, r3
 8005a76:	401a      	ands	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	2101      	movs	r1, #1
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	fa01 f303 	lsl.w	r3, r1, r3
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	401a      	ands	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	2103      	movs	r1, #3
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	401a      	ands	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f47f af3b 	bne.w	8005930 <HAL_GPIO_DeInit+0x10>
  }
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	48000400 	.word	0x48000400
 8005ad0:	48000800 	.word	0x48000800
 8005ad4:	48000c00 	.word	0x48000c00
 8005ad8:	48001000 	.word	0x48001000
 8005adc:	48001400 	.word	0x48001400
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	807b      	strh	r3, [r7, #2]
 8005af0:	4613      	mov	r3, r2
 8005af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005af4:	787b      	ldrb	r3, [r7, #1]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005afa:	887a      	ldrh	r2, [r7, #2]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b00:	e002      	b.n	8005b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b02:	887a      	ldrh	r2, [r7, #2]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b1e:	4b08      	ldr	r3, [pc, #32]	@ (8005b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b20:	695a      	ldr	r2, [r3, #20]
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d006      	beq.n	8005b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b2a:	4a05      	ldr	r2, [pc, #20]	@ (8005b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f806 	bl	8005b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40010400 	.word	0x40010400

08005b44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d141      	bne.n	8005bee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b76:	d131      	bne.n	8005bdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b78:	4b47      	ldr	r3, [pc, #284]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b7e:	4a46      	ldr	r2, [pc, #280]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b88:	4b43      	ldr	r3, [pc, #268]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b90:	4a41      	ldr	r2, [pc, #260]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b98:	4b40      	ldr	r3, [pc, #256]	@ (8005c9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2232      	movs	r2, #50	@ 0x32
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ca0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	0c9b      	lsrs	r3, r3, #18
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bae:	e002      	b.n	8005bb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bb6:	4b38      	ldr	r3, [pc, #224]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc2:	d102      	bne.n	8005bca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f2      	bne.n	8005bb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bca:	4b33      	ldr	r3, [pc, #204]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd6:	d158      	bne.n	8005c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e057      	b.n	8005c8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005be2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005bec:	e04d      	b.n	8005c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bf4:	d141      	bne.n	8005c7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bf6:	4b28      	ldr	r3, [pc, #160]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c02:	d131      	bne.n	8005c68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c04:	4b24      	ldr	r3, [pc, #144]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c0a:	4a23      	ldr	r2, [pc, #140]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c14:	4b20      	ldr	r3, [pc, #128]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c24:	4b1d      	ldr	r3, [pc, #116]	@ (8005c9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2232      	movs	r2, #50	@ 0x32
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	0c9b      	lsrs	r3, r3, #18
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c3a:	e002      	b.n	8005c42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c42:	4b15      	ldr	r3, [pc, #84]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4e:	d102      	bne.n	8005c56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f2      	bne.n	8005c3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c56:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c62:	d112      	bne.n	8005c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e011      	b.n	8005c8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c68:	4b0b      	ldr	r3, [pc, #44]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c78:	e007      	b.n	8005c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c7a:	4b07      	ldr	r3, [pc, #28]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c82:	4a05      	ldr	r2, [pc, #20]	@ (8005c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40007000 	.word	0x40007000
 8005c9c:	20000000 	.word	0x20000000
 8005ca0:	431bde83 	.word	0x431bde83

08005ca4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005ca8:	4b05      	ldr	r3, [pc, #20]	@ (8005cc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4a04      	ldr	r2, [pc, #16]	@ (8005cc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cb2:	6093      	str	r3, [r2, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40007000 	.word	0x40007000

08005cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e2fe      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d075      	beq.n	8005dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce2:	4b97      	ldr	r3, [pc, #604]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
 8005cea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cec:	4b94      	ldr	r3, [pc, #592]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b0c      	cmp	r3, #12
 8005cfa:	d102      	bne.n	8005d02 <HAL_RCC_OscConfig+0x3e>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d002      	beq.n	8005d08 <HAL_RCC_OscConfig+0x44>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d10b      	bne.n	8005d20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d08:	4b8d      	ldr	r3, [pc, #564]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d05b      	beq.n	8005dcc <HAL_RCC_OscConfig+0x108>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d157      	bne.n	8005dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e2d9      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d28:	d106      	bne.n	8005d38 <HAL_RCC_OscConfig+0x74>
 8005d2a:	4b85      	ldr	r3, [pc, #532]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a84      	ldr	r2, [pc, #528]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	e01d      	b.n	8005d74 <HAL_RCC_OscConfig+0xb0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCC_OscConfig+0x98>
 8005d42:	4b7f      	ldr	r3, [pc, #508]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a7e      	ldr	r2, [pc, #504]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a7b      	ldr	r2, [pc, #492]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e00b      	b.n	8005d74 <HAL_RCC_OscConfig+0xb0>
 8005d5c:	4b78      	ldr	r3, [pc, #480]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a77      	ldr	r2, [pc, #476]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	4b75      	ldr	r3, [pc, #468]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a74      	ldr	r2, [pc, #464]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d013      	beq.n	8005da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fe fed4 	bl	8004b28 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d84:	f7fe fed0 	bl	8004b28 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b64      	cmp	r3, #100	@ 0x64
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e29e      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d96:	4b6a      	ldr	r3, [pc, #424]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0f0      	beq.n	8005d84 <HAL_RCC_OscConfig+0xc0>
 8005da2:	e014      	b.n	8005dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da4:	f7fe fec0 	bl	8004b28 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dac:	f7fe febc 	bl	8004b28 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b64      	cmp	r3, #100	@ 0x64
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e28a      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dbe:	4b60      	ldr	r3, [pc, #384]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1f0      	bne.n	8005dac <HAL_RCC_OscConfig+0xe8>
 8005dca:	e000      	b.n	8005dce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d075      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dda:	4b59      	ldr	r3, [pc, #356]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 030c 	and.w	r3, r3, #12
 8005de2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005de4:	4b56      	ldr	r3, [pc, #344]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b0c      	cmp	r3, #12
 8005df2:	d102      	bne.n	8005dfa <HAL_RCC_OscConfig+0x136>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d002      	beq.n	8005e00 <HAL_RCC_OscConfig+0x13c>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d11f      	bne.n	8005e40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e00:	4b4f      	ldr	r3, [pc, #316]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_RCC_OscConfig+0x154>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e25d      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e18:	4b49      	ldr	r3, [pc, #292]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	061b      	lsls	r3, r3, #24
 8005e26:	4946      	ldr	r1, [pc, #280]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e2c:	4b45      	ldr	r3, [pc, #276]	@ (8005f44 <HAL_RCC_OscConfig+0x280>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fe2d 	bl	8004a90 <HAL_InitTick>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d043      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e249      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d023      	beq.n	8005e90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e48:	4b3d      	ldr	r3, [pc, #244]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e54:	f7fe fe68 	bl	8004b28 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e5c:	f7fe fe64 	bl	8004b28 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e232      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e6e:	4b34      	ldr	r3, [pc, #208]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f0      	beq.n	8005e5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7a:	4b31      	ldr	r3, [pc, #196]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	061b      	lsls	r3, r3, #24
 8005e88:	492d      	ldr	r1, [pc, #180]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	604b      	str	r3, [r1, #4]
 8005e8e:	e01a      	b.n	8005ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e90:	4b2b      	ldr	r3, [pc, #172]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2a      	ldr	r2, [pc, #168]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005e96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9c:	f7fe fe44 	bl	8004b28 <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea2:	e008      	b.n	8005eb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea4:	f7fe fe40 	bl	8004b28 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e20e      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eb6:	4b22      	ldr	r3, [pc, #136]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f0      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x1e0>
 8005ec2:	e000      	b.n	8005ec6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ec4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d041      	beq.n	8005f56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01c      	beq.n	8005f14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eda:	4b19      	ldr	r3, [pc, #100]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ee0:	4a17      	ldr	r2, [pc, #92]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eea:	f7fe fe1d 	bl	8004b28 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef2:	f7fe fe19 	bl	8004b28 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e1e7      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f04:	4b0e      	ldr	r3, [pc, #56]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0ef      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x22e>
 8005f12:	e020      	b.n	8005f56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f14:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f1a:	4a09      	ldr	r2, [pc, #36]	@ (8005f40 <HAL_RCC_OscConfig+0x27c>)
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f24:	f7fe fe00 	bl	8004b28 <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f2a:	e00d      	b.n	8005f48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f2c:	f7fe fdfc 	bl	8004b28 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d906      	bls.n	8005f48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e1ca      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
 8005f3e:	bf00      	nop
 8005f40:	40021000 	.word	0x40021000
 8005f44:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f48:	4b8c      	ldr	r3, [pc, #560]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1ea      	bne.n	8005f2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80a6 	beq.w	80060b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f64:	2300      	movs	r3, #0
 8005f66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f68:	4b84      	ldr	r3, [pc, #528]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_RCC_OscConfig+0x2b4>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <HAL_RCC_OscConfig+0x2b6>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00d      	beq.n	8005f9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8005f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f82:	4a7e      	ldr	r2, [pc, #504]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8005f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f8a:	4b7c      	ldr	r3, [pc, #496]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f96:	2301      	movs	r3, #1
 8005f98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f9a:	4b79      	ldr	r3, [pc, #484]	@ (8006180 <HAL_RCC_OscConfig+0x4bc>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d118      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fa6:	4b76      	ldr	r3, [pc, #472]	@ (8006180 <HAL_RCC_OscConfig+0x4bc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a75      	ldr	r2, [pc, #468]	@ (8006180 <HAL_RCC_OscConfig+0x4bc>)
 8005fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb2:	f7fe fdb9 	bl	8004b28 <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fba:	f7fe fdb5 	bl	8004b28 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e183      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8006180 <HAL_RCC_OscConfig+0x4bc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0f0      	beq.n	8005fba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d108      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x32e>
 8005fe0:	4b66      	ldr	r3, [pc, #408]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe6:	4a65      	ldr	r2, [pc, #404]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ff0:	e024      	b.n	800603c <HAL_RCC_OscConfig+0x378>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d110      	bne.n	800601c <HAL_RCC_OscConfig+0x358>
 8005ffa:	4b60      	ldr	r3, [pc, #384]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006000:	4a5e      	ldr	r2, [pc, #376]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006002:	f043 0304 	orr.w	r3, r3, #4
 8006006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800600a:	4b5c      	ldr	r3, [pc, #368]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 800600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006010:	4a5a      	ldr	r2, [pc, #360]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800601a:	e00f      	b.n	800603c <HAL_RCC_OscConfig+0x378>
 800601c:	4b57      	ldr	r3, [pc, #348]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006022:	4a56      	ldr	r2, [pc, #344]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800602c:	4b53      	ldr	r3, [pc, #332]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 800602e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006032:	4a52      	ldr	r2, [pc, #328]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006034:	f023 0304 	bic.w	r3, r3, #4
 8006038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d016      	beq.n	8006072 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006044:	f7fe fd70 	bl	8004b28 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800604a:	e00a      	b.n	8006062 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800604c:	f7fe fd6c 	bl	8004b28 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e138      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006062:	4b46      	ldr	r3, [pc, #280]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0ed      	beq.n	800604c <HAL_RCC_OscConfig+0x388>
 8006070:	e015      	b.n	800609e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006072:	f7fe fd59 	bl	8004b28 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006078:	e00a      	b.n	8006090 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607a:	f7fe fd55 	bl	8004b28 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e121      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006090:	4b3a      	ldr	r3, [pc, #232]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1ed      	bne.n	800607a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800609e:	7ffb      	ldrb	r3, [r7, #31]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d105      	bne.n	80060b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a4:	4b35      	ldr	r3, [pc, #212]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 80060a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a8:	4a34      	ldr	r2, [pc, #208]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 80060aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d03c      	beq.n	8006136 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01c      	beq.n	80060fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060c4:	4b2d      	ldr	r3, [pc, #180]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 80060c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060ca:	4a2c      	ldr	r2, [pc, #176]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d4:	f7fe fd28 	bl	8004b28 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060dc:	f7fe fd24 	bl	8004b28 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0f2      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060ee:	4b23      	ldr	r3, [pc, #140]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 80060f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0ef      	beq.n	80060dc <HAL_RCC_OscConfig+0x418>
 80060fc:	e01b      	b.n	8006136 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060fe:	4b1f      	ldr	r3, [pc, #124]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006100:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006104:	4a1d      	ldr	r2, [pc, #116]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610e:	f7fe fd0b 	bl	8004b28 <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006116:	f7fe fd07 	bl	8004b28 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e0d5      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006128:	4b14      	ldr	r3, [pc, #80]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 800612a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1ef      	bne.n	8006116 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80c9 	beq.w	80062d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006140:	4b0e      	ldr	r3, [pc, #56]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 030c 	and.w	r3, r3, #12
 8006148:	2b0c      	cmp	r3, #12
 800614a:	f000 8083 	beq.w	8006254 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d15e      	bne.n	8006214 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006156:	4b09      	ldr	r3, [pc, #36]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a08      	ldr	r2, [pc, #32]	@ (800617c <HAL_RCC_OscConfig+0x4b8>)
 800615c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fe fce1 	bl	8004b28 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006168:	e00c      	b.n	8006184 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800616a:	f7fe fcdd 	bl	8004b28 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d905      	bls.n	8006184 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e0ab      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
 800617c:	40021000 	.word	0x40021000
 8006180:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006184:	4b55      	ldr	r3, [pc, #340]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1ec      	bne.n	800616a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006190:	4b52      	ldr	r3, [pc, #328]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	4b52      	ldr	r3, [pc, #328]	@ (80062e0 <HAL_RCC_OscConfig+0x61c>)
 8006196:	4013      	ands	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6a11      	ldr	r1, [r2, #32]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061a0:	3a01      	subs	r2, #1
 80061a2:	0112      	lsls	r2, r2, #4
 80061a4:	4311      	orrs	r1, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80061aa:	0212      	lsls	r2, r2, #8
 80061ac:	4311      	orrs	r1, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061b2:	0852      	lsrs	r2, r2, #1
 80061b4:	3a01      	subs	r2, #1
 80061b6:	0552      	lsls	r2, r2, #21
 80061b8:	4311      	orrs	r1, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061be:	0852      	lsrs	r2, r2, #1
 80061c0:	3a01      	subs	r2, #1
 80061c2:	0652      	lsls	r2, r2, #25
 80061c4:	4311      	orrs	r1, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061ca:	06d2      	lsls	r2, r2, #27
 80061cc:	430a      	orrs	r2, r1
 80061ce:	4943      	ldr	r1, [pc, #268]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d4:	4b41      	ldr	r3, [pc, #260]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a40      	ldr	r2, [pc, #256]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 80061da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061e0:	4b3e      	ldr	r3, [pc, #248]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4a3d      	ldr	r2, [pc, #244]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 80061e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fe fc9c 	bl	8004b28 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f4:	f7fe fc98 	bl	8004b28 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e066      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006206:	4b35      	ldr	r3, [pc, #212]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0x530>
 8006212:	e05e      	b.n	80062d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006214:	4b31      	ldr	r3, [pc, #196]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a30      	ldr	r2, [pc, #192]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 800621a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800621e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006220:	f7fe fc82 	bl	8004b28 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006228:	f7fe fc7e 	bl	8004b28 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e04c      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800623a:	4b28      	ldr	r3, [pc, #160]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f0      	bne.n	8006228 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006246:	4b25      	ldr	r3, [pc, #148]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	4924      	ldr	r1, [pc, #144]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 800624c:	4b25      	ldr	r3, [pc, #148]	@ (80062e4 <HAL_RCC_OscConfig+0x620>)
 800624e:	4013      	ands	r3, r2
 8006250:	60cb      	str	r3, [r1, #12]
 8006252:	e03e      	b.n	80062d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e039      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006260:	4b1e      	ldr	r3, [pc, #120]	@ (80062dc <HAL_RCC_OscConfig+0x618>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f003 0203 	and.w	r2, r3, #3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	429a      	cmp	r2, r3
 8006272:	d12c      	bne.n	80062ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	3b01      	subs	r3, #1
 8006280:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006282:	429a      	cmp	r2, r3
 8006284:	d123      	bne.n	80062ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006292:	429a      	cmp	r2, r3
 8006294:	d11b      	bne.n	80062ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d113      	bne.n	80062ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b0:	085b      	lsrs	r3, r3, #1
 80062b2:	3b01      	subs	r3, #1
 80062b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d109      	bne.n	80062ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	3b01      	subs	r3, #1
 80062c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d001      	beq.n	80062d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40021000 	.word	0x40021000
 80062e0:	019f800c 	.word	0x019f800c
 80062e4:	feeefffc 	.word	0xfeeefffc

080062e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e11e      	b.n	800653e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006300:	4b91      	ldr	r3, [pc, #580]	@ (8006548 <HAL_RCC_ClockConfig+0x260>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d910      	bls.n	8006330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630e:	4b8e      	ldr	r3, [pc, #568]	@ (8006548 <HAL_RCC_ClockConfig+0x260>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f023 020f 	bic.w	r2, r3, #15
 8006316:	498c      	ldr	r1, [pc, #560]	@ (8006548 <HAL_RCC_ClockConfig+0x260>)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	4313      	orrs	r3, r2
 800631c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800631e:	4b8a      	ldr	r3, [pc, #552]	@ (8006548 <HAL_RCC_ClockConfig+0x260>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d001      	beq.n	8006330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e106      	b.n	800653e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d073      	beq.n	8006424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d129      	bne.n	8006398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006344:	4b81      	ldr	r3, [pc, #516]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0f4      	b.n	800653e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006354:	f000 f99e 	bl	8006694 <RCC_GetSysClockFreqFromPLLSource>
 8006358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4a7c      	ldr	r2, [pc, #496]	@ (8006550 <HAL_RCC_ClockConfig+0x268>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d93f      	bls.n	80063e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006362:	4b7a      	ldr	r3, [pc, #488]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006376:	2b00      	cmp	r3, #0
 8006378:	d033      	beq.n	80063e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800637e:	2b00      	cmp	r3, #0
 8006380:	d12f      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006382:	4b72      	ldr	r3, [pc, #456]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800638a:	4a70      	ldr	r2, [pc, #448]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 800638c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006392:	2380      	movs	r3, #128	@ 0x80
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e024      	b.n	80063e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b02      	cmp	r3, #2
 800639e:	d107      	bne.n	80063b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063a0:	4b6a      	ldr	r3, [pc, #424]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0c6      	b.n	800653e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063b0:	4b66      	ldr	r3, [pc, #408]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0be      	b.n	800653e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80063c0:	f000 f8ce 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 80063c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4a61      	ldr	r2, [pc, #388]	@ (8006550 <HAL_RCC_ClockConfig+0x268>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d909      	bls.n	80063e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063ce:	4b5f      	ldr	r3, [pc, #380]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063d6:	4a5d      	ldr	r2, [pc, #372]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 80063d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80063de:	2380      	movs	r3, #128	@ 0x80
 80063e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063e2:	4b5a      	ldr	r3, [pc, #360]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f023 0203 	bic.w	r2, r3, #3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	4957      	ldr	r1, [pc, #348]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f4:	f7fe fb98 	bl	8004b28 <HAL_GetTick>
 80063f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fa:	e00a      	b.n	8006412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063fc:	f7fe fb94 	bl	8004b28 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800640a:	4293      	cmp	r3, r2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e095      	b.n	800653e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006412:	4b4e      	ldr	r3, [pc, #312]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 020c 	and.w	r2, r3, #12
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	429a      	cmp	r2, r3
 8006422:	d1eb      	bne.n	80063fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d023      	beq.n	8006478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800643c:	4b43      	ldr	r3, [pc, #268]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4a42      	ldr	r2, [pc, #264]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006442:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006454:	4b3d      	ldr	r3, [pc, #244]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800645c:	4a3b      	ldr	r2, [pc, #236]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 800645e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006464:	4b39      	ldr	r3, [pc, #228]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	4936      	ldr	r1, [pc, #216]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006472:	4313      	orrs	r3, r2
 8006474:	608b      	str	r3, [r1, #8]
 8006476:	e008      	b.n	800648a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b80      	cmp	r3, #128	@ 0x80
 800647c:	d105      	bne.n	800648a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800647e:	4b33      	ldr	r3, [pc, #204]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	4a32      	ldr	r2, [pc, #200]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006484:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800648a:	4b2f      	ldr	r3, [pc, #188]	@ (8006548 <HAL_RCC_ClockConfig+0x260>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d21d      	bcs.n	80064d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006498:	4b2b      	ldr	r3, [pc, #172]	@ (8006548 <HAL_RCC_ClockConfig+0x260>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f023 020f 	bic.w	r2, r3, #15
 80064a0:	4929      	ldr	r1, [pc, #164]	@ (8006548 <HAL_RCC_ClockConfig+0x260>)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064a8:	f7fe fb3e 	bl	8004b28 <HAL_GetTick>
 80064ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ae:	e00a      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b0:	f7fe fb3a 	bl	8004b28 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064be:	4293      	cmp	r3, r2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e03b      	b.n	800653e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c6:	4b20      	ldr	r3, [pc, #128]	@ (8006548 <HAL_RCC_ClockConfig+0x260>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d1ed      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e0:	4b1a      	ldr	r3, [pc, #104]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4917      	ldr	r1, [pc, #92]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064fe:	4b13      	ldr	r3, [pc, #76]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	490f      	ldr	r1, [pc, #60]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 800650e:	4313      	orrs	r3, r2
 8006510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006512:	f000 f825 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 8006516:	4602      	mov	r2, r0
 8006518:	4b0c      	ldr	r3, [pc, #48]	@ (800654c <HAL_RCC_ClockConfig+0x264>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	490c      	ldr	r1, [pc, #48]	@ (8006554 <HAL_RCC_ClockConfig+0x26c>)
 8006524:	5ccb      	ldrb	r3, [r1, r3]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	fa22 f303 	lsr.w	r3, r2, r3
 800652e:	4a0a      	ldr	r2, [pc, #40]	@ (8006558 <HAL_RCC_ClockConfig+0x270>)
 8006530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006532:	4b0a      	ldr	r3, [pc, #40]	@ (800655c <HAL_RCC_ClockConfig+0x274>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe faaa 	bl	8004a90 <HAL_InitTick>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40022000 	.word	0x40022000
 800654c:	40021000 	.word	0x40021000
 8006550:	04c4b400 	.word	0x04c4b400
 8006554:	08009bd4 	.word	0x08009bd4
 8006558:	20000000 	.word	0x20000000
 800655c:	2000005c 	.word	0x2000005c

08006560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006566:	4b2c      	ldr	r3, [pc, #176]	@ (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
 800656e:	2b04      	cmp	r3, #4
 8006570:	d102      	bne.n	8006578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006572:	4b2a      	ldr	r3, [pc, #168]	@ (800661c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	e047      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006578:	4b27      	ldr	r3, [pc, #156]	@ (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	2b08      	cmp	r3, #8
 8006582:	d102      	bne.n	800658a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006584:	4b26      	ldr	r3, [pc, #152]	@ (8006620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	e03e      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800658a:	4b23      	ldr	r3, [pc, #140]	@ (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
 8006592:	2b0c      	cmp	r3, #12
 8006594:	d136      	bne.n	8006604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006596:	4b20      	ldr	r3, [pc, #128]	@ (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	3301      	adds	r3, #1
 80065ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d10c      	bne.n	80065ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065bc:	4a16      	ldr	r2, [pc, #88]	@ (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065be:	68d2      	ldr	r2, [r2, #12]
 80065c0:	0a12      	lsrs	r2, r2, #8
 80065c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	617b      	str	r3, [r7, #20]
      break;
 80065cc:	e00c      	b.n	80065e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065ce:	4a13      	ldr	r2, [pc, #76]	@ (800661c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d6:	4a10      	ldr	r2, [pc, #64]	@ (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065d8:	68d2      	ldr	r2, [r2, #12]
 80065da:	0a12      	lsrs	r2, r2, #8
 80065dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
 80065e4:	617b      	str	r3, [r7, #20]
      break;
 80065e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	0e5b      	lsrs	r3, r3, #25
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	3301      	adds	r3, #1
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	e001      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006608:	693b      	ldr	r3, [r7, #16]
}
 800660a:	4618      	mov	r0, r3
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40021000 	.word	0x40021000
 800661c:	00f42400 	.word	0x00f42400
 8006620:	007a1200 	.word	0x007a1200

08006624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006628:	4b03      	ldr	r3, [pc, #12]	@ (8006638 <HAL_RCC_GetHCLKFreq+0x14>)
 800662a:	681b      	ldr	r3, [r3, #0]
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000000 	.word	0x20000000

0800663c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006640:	f7ff fff0 	bl	8006624 <HAL_RCC_GetHCLKFreq>
 8006644:	4602      	mov	r2, r0
 8006646:	4b06      	ldr	r3, [pc, #24]	@ (8006660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	0a1b      	lsrs	r3, r3, #8
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	4904      	ldr	r1, [pc, #16]	@ (8006664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006652:	5ccb      	ldrb	r3, [r1, r3]
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40021000 	.word	0x40021000
 8006664:	08009be4 	.word	0x08009be4

08006668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800666c:	f7ff ffda 	bl	8006624 <HAL_RCC_GetHCLKFreq>
 8006670:	4602      	mov	r2, r0
 8006672:	4b06      	ldr	r3, [pc, #24]	@ (800668c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	0adb      	lsrs	r3, r3, #11
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	4904      	ldr	r1, [pc, #16]	@ (8006690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800667e:	5ccb      	ldrb	r3, [r1, r3]
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000
 8006690:	08009be4 	.word	0x08009be4

08006694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800669a:	4b1e      	ldr	r3, [pc, #120]	@ (8006714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	091b      	lsrs	r3, r3, #4
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	3301      	adds	r3, #1
 80066b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d10c      	bne.n	80066d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066b8:	4a17      	ldr	r2, [pc, #92]	@ (8006718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c0:	4a14      	ldr	r2, [pc, #80]	@ (8006714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066c2:	68d2      	ldr	r2, [r2, #12]
 80066c4:	0a12      	lsrs	r2, r2, #8
 80066c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066ca:	fb02 f303 	mul.w	r3, r2, r3
 80066ce:	617b      	str	r3, [r7, #20]
    break;
 80066d0:	e00c      	b.n	80066ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066d2:	4a12      	ldr	r2, [pc, #72]	@ (800671c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066da:	4a0e      	ldr	r2, [pc, #56]	@ (8006714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	0a12      	lsrs	r2, r2, #8
 80066e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066e4:	fb02 f303 	mul.w	r3, r2, r3
 80066e8:	617b      	str	r3, [r7, #20]
    break;
 80066ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066ec:	4b09      	ldr	r3, [pc, #36]	@ (8006714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	0e5b      	lsrs	r3, r3, #25
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	3301      	adds	r3, #1
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006706:	687b      	ldr	r3, [r7, #4]
}
 8006708:	4618      	mov	r0, r3
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	40021000 	.word	0x40021000
 8006718:	007a1200 	.word	0x007a1200
 800671c:	00f42400 	.word	0x00f42400

08006720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006728:	2300      	movs	r3, #0
 800672a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800672c:	2300      	movs	r3, #0
 800672e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8098 	beq.w	800686e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800673e:	2300      	movs	r3, #0
 8006740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006742:	4b43      	ldr	r3, [pc, #268]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10d      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800674e:	4b40      	ldr	r3, [pc, #256]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006752:	4a3f      	ldr	r2, [pc, #252]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006758:	6593      	str	r3, [r2, #88]	@ 0x58
 800675a:	4b3d      	ldr	r3, [pc, #244]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800675c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006766:	2301      	movs	r3, #1
 8006768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800676a:	4b3a      	ldr	r3, [pc, #232]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a39      	ldr	r2, [pc, #228]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006776:	f7fe f9d7 	bl	8004b28 <HAL_GetTick>
 800677a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800677c:	e009      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800677e:	f7fe f9d3 	bl	8004b28 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d902      	bls.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	74fb      	strb	r3, [r7, #19]
        break;
 8006790:	e005      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006792:	4b30      	ldr	r3, [pc, #192]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0ef      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800679e:	7cfb      	ldrb	r3, [r7, #19]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d159      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01e      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d019      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067c0:	4b23      	ldr	r3, [pc, #140]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067cc:	4b20      	ldr	r3, [pc, #128]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80067ec:	4a18      	ldr	r2, [pc, #96]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d016      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fe:	f7fe f993 	bl	8004b28 <HAL_GetTick>
 8006802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006804:	e00b      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006806:	f7fe f98f 	bl	8004b28 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006814:	4293      	cmp	r3, r2
 8006816:	d902      	bls.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	74fb      	strb	r3, [r7, #19]
            break;
 800681c:	e006      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800681e:	4b0c      	ldr	r3, [pc, #48]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0ec      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800682c:	7cfb      	ldrb	r3, [r7, #19]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006832:	4b07      	ldr	r3, [pc, #28]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006838:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006840:	4903      	ldr	r1, [pc, #12]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006848:	e008      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800684a:	7cfb      	ldrb	r3, [r7, #19]
 800684c:	74bb      	strb	r3, [r7, #18]
 800684e:	e005      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006850:	40021000 	.word	0x40021000
 8006854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006858:	7cfb      	ldrb	r3, [r7, #19]
 800685a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800685c:	7c7b      	ldrb	r3, [r7, #17]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d105      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006862:	4ba6      	ldr	r3, [pc, #664]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006866:	4aa5      	ldr	r2, [pc, #660]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800686c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800687a:	4ba0      	ldr	r3, [pc, #640]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006880:	f023 0203 	bic.w	r2, r3, #3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	499c      	ldr	r1, [pc, #624]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800689c:	4b97      	ldr	r3, [pc, #604]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800689e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a2:	f023 020c 	bic.w	r2, r3, #12
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	4994      	ldr	r1, [pc, #592]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068be:	4b8f      	ldr	r3, [pc, #572]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	498b      	ldr	r1, [pc, #556]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068e0:	4b86      	ldr	r3, [pc, #536]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	4983      	ldr	r1, [pc, #524]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006902:	4b7e      	ldr	r3, [pc, #504]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006908:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	497a      	ldr	r1, [pc, #488]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006924:	4b75      	ldr	r3, [pc, #468]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	4972      	ldr	r1, [pc, #456]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006946:	4b6d      	ldr	r3, [pc, #436]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	4969      	ldr	r1, [pc, #420]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006968:	4b64      	ldr	r3, [pc, #400]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	4961      	ldr	r1, [pc, #388]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800698a:	4b5c      	ldr	r3, [pc, #368]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006990:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	4958      	ldr	r1, [pc, #352]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d015      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069ac:	4b53      	ldr	r3, [pc, #332]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ba:	4950      	ldr	r1, [pc, #320]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ca:	d105      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069cc:	4b4b      	ldr	r3, [pc, #300]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	4a4a      	ldr	r2, [pc, #296]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d015      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069e4:	4b45      	ldr	r3, [pc, #276]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	4942      	ldr	r1, [pc, #264]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a02:	d105      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a04:	4b3d      	ldr	r3, [pc, #244]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4a3c      	ldr	r2, [pc, #240]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a0e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d015      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a1c:	4b37      	ldr	r3, [pc, #220]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2a:	4934      	ldr	r1, [pc, #208]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a3a:	d105      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4a2e      	ldr	r2, [pc, #184]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a54:	4b29      	ldr	r3, [pc, #164]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a62:	4926      	ldr	r1, [pc, #152]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a72:	d105      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a74:	4b21      	ldr	r3, [pc, #132]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4a20      	ldr	r2, [pc, #128]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d015      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9a:	4918      	ldr	r1, [pc, #96]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aaa:	d105      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aac:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	4a12      	ldr	r2, [pc, #72]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ab6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d015      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad2:	490a      	ldr	r1, [pc, #40]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ade:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ae2:	d105      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ae4:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a04      	ldr	r2, [pc, #16]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006af0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000

08006b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e09d      	b.n	8006c4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d108      	bne.n	8006b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b22:	d009      	beq.n	8006b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	61da      	str	r2, [r3, #28]
 8006b2a:	e005      	b.n	8006b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f8a7 	bl	8006ca6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b78:	d902      	bls.n	8006b80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	e002      	b.n	8006b86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006b8e:	d007      	beq.n	8006ba0 <HAL_SPI_Init+0xa0>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b98:	d002      	beq.n	8006ba0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be2:	ea42 0103 	orr.w	r1, r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	0c1b      	lsrs	r3, r3, #16
 8006bfc:	f003 0204 	and.w	r2, r3, #4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c1c:	ea42 0103 	orr.w	r1, r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e01a      	b.n	8006c9e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f81a 	bl	8006cba <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b088      	sub	sp, #32
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_SPI_Transmit+0x22>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e15f      	b.n	8006fb0 <HAL_SPI_Transmit+0x2e2>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cf8:	f7fd ff16 	bl	8004b28 <HAL_GetTick>
 8006cfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d002      	beq.n	8006d14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d0e:	2302      	movs	r3, #2
 8006d10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d12:	e148      	b.n	8006fa6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <HAL_SPI_Transmit+0x52>
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d24:	e13f      	b.n	8006fa6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2203      	movs	r2, #3
 8006d2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	88fa      	ldrh	r2, [r7, #6]
 8006d3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	88fa      	ldrh	r2, [r7, #6]
 8006d44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d70:	d10f      	bne.n	8006d92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9c:	2b40      	cmp	r3, #64	@ 0x40
 8006d9e:	d007      	beq.n	8006db0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006db8:	d94f      	bls.n	8006e5a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <HAL_SPI_Transmit+0xfa>
 8006dc2:	8afb      	ldrh	r3, [r7, #22]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d142      	bne.n	8006e4e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dcc:	881a      	ldrh	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd8:	1c9a      	adds	r2, r3, #2
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dec:	e02f      	b.n	8006e4e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d112      	bne.n	8006e22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	881a      	ldrh	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	1c9a      	adds	r2, r3, #2
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e20:	e015      	b.n	8006e4e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e22:	f7fd fe81 	bl	8004b28 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d803      	bhi.n	8006e3a <HAL_SPI_Transmit+0x16c>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e38:	d102      	bne.n	8006e40 <HAL_SPI_Transmit+0x172>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d106      	bne.n	8006e4e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006e4c:	e0ab      	b.n	8006fa6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1ca      	bne.n	8006dee <HAL_SPI_Transmit+0x120>
 8006e58:	e080      	b.n	8006f5c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_SPI_Transmit+0x19a>
 8006e62:	8afb      	ldrh	r3, [r7, #22]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d174      	bne.n	8006f52 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d912      	bls.n	8006e98 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	881a      	ldrh	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	1c9a      	adds	r2, r3, #2
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b02      	subs	r3, #2
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e96:	e05c      	b.n	8006f52 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ebe:	e048      	b.n	8006f52 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d12b      	bne.n	8006f26 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d912      	bls.n	8006efe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006edc:	881a      	ldrh	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	1c9a      	adds	r2, r3, #2
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b02      	subs	r3, #2
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006efc:	e029      	b.n	8006f52 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	330c      	adds	r3, #12
 8006f08:	7812      	ldrb	r2, [r2, #0]
 8006f0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f24:	e015      	b.n	8006f52 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f26:	f7fd fdff 	bl	8004b28 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d803      	bhi.n	8006f3e <HAL_SPI_Transmit+0x270>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f3c:	d102      	bne.n	8006f44 <HAL_SPI_Transmit+0x276>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006f50:	e029      	b.n	8006fa6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1b1      	bne.n	8006ec0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 fd07 	bl	8007974 <SPI_EndRxTxTransaction>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e003      	b.n	8006fa6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006fae:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d002      	beq.n	8006fde <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fdc:	e11a      	b.n	8007214 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fe6:	d112      	bne.n	800700e <HAL_SPI_Receive+0x56>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10e      	bne.n	800700e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f90e 	bl	8007226 <HAL_SPI_TransmitReceive>
 800700a:	4603      	mov	r3, r0
 800700c:	e107      	b.n	800721e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_SPI_Receive+0x64>
 8007018:	2302      	movs	r3, #2
 800701a:	e100      	b.n	800721e <HAL_SPI_Receive+0x266>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007024:	f7fd fd80 	bl	8004b28 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_SPI_Receive+0x7e>
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]
    goto error;
 800703a:	e0eb      	b.n	8007214 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2204      	movs	r2, #4
 8007040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007086:	d908      	bls.n	800709a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007096:	605a      	str	r2, [r3, #4]
 8007098:	e007      	b.n	80070aa <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070a8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b2:	d10f      	bne.n	80070d4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070d2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070de:	2b40      	cmp	r3, #64	@ 0x40
 80070e0:	d007      	beq.n	80070f2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070fa:	d86f      	bhi.n	80071dc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070fc:	e034      	b.n	8007168 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b01      	cmp	r3, #1
 800710a:	d117      	bne.n	800713c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f103 020c 	add.w	r2, r3, #12
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	7812      	ldrb	r2, [r2, #0]
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800713a:	e015      	b.n	8007168 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800713c:	f7fd fcf4 	bl	8004b28 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d803      	bhi.n	8007154 <HAL_SPI_Receive+0x19c>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007152:	d102      	bne.n	800715a <HAL_SPI_Receive+0x1a2>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007166:	e055      	b.n	8007214 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800716e:	b29b      	uxth	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1c4      	bne.n	80070fe <HAL_SPI_Receive+0x146>
 8007174:	e038      	b.n	80071e8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d115      	bne.n	80071b0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718e:	b292      	uxth	r2, r2
 8007190:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007196:	1c9a      	adds	r2, r3, #2
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80071ae:	e015      	b.n	80071dc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071b0:	f7fd fcba 	bl	8004b28 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d803      	bhi.n	80071c8 <HAL_SPI_Receive+0x210>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071c6:	d102      	bne.n	80071ce <HAL_SPI_Receive+0x216>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80071da:	e01b      	b.n	8007214 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1c6      	bne.n	8007176 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fb69 	bl	80078c4 <SPI_EndRxTransaction>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
 800720a:	e003      	b.n	8007214 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b08a      	sub	sp, #40	@ 0x28
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	607a      	str	r2, [r7, #4]
 8007232:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007234:	2301      	movs	r3, #1
 8007236:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_SPI_TransmitReceive+0x26>
 8007248:	2302      	movs	r3, #2
 800724a:	e20a      	b.n	8007662 <HAL_SPI_TransmitReceive+0x43c>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007254:	f7fd fc68 	bl	8004b28 <HAL_GetTick>
 8007258:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007260:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007268:	887b      	ldrh	r3, [r7, #2]
 800726a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800726c:	887b      	ldrh	r3, [r7, #2]
 800726e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007270:	7efb      	ldrb	r3, [r7, #27]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d00e      	beq.n	8007294 <HAL_SPI_TransmitReceive+0x6e>
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800727c:	d106      	bne.n	800728c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <HAL_SPI_TransmitReceive+0x66>
 8007286:	7efb      	ldrb	r3, [r7, #27]
 8007288:	2b04      	cmp	r3, #4
 800728a:	d003      	beq.n	8007294 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800728c:	2302      	movs	r3, #2
 800728e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007292:	e1e0      	b.n	8007656 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <HAL_SPI_TransmitReceive+0x80>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_SPI_TransmitReceive+0x80>
 80072a0:	887b      	ldrh	r3, [r7, #2]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80072ac:	e1d3      	b.n	8007656 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d003      	beq.n	80072c2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2205      	movs	r2, #5
 80072be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	887a      	ldrh	r2, [r7, #2]
 80072d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	887a      	ldrh	r2, [r7, #2]
 80072da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	887a      	ldrh	r2, [r7, #2]
 80072e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	887a      	ldrh	r2, [r7, #2]
 80072ee:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007304:	d802      	bhi.n	800730c <HAL_SPI_TransmitReceive+0xe6>
 8007306:	8a3b      	ldrh	r3, [r7, #16]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d908      	bls.n	800731e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800731a:	605a      	str	r2, [r3, #4]
 800731c:	e007      	b.n	800732e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800732c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007338:	2b40      	cmp	r3, #64	@ 0x40
 800733a:	d007      	beq.n	800734c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800734a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007354:	f240 8081 	bls.w	800745a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_SPI_TransmitReceive+0x140>
 8007360:	8a7b      	ldrh	r3, [r7, #18]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d16d      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	881a      	ldrh	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007376:	1c9a      	adds	r2, r3, #2
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800738a:	e05a      	b.n	8007442 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b02      	cmp	r3, #2
 8007398:	d11b      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x1ac>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d016      	beq.n	80073d2 <HAL_SPI_TransmitReceive+0x1ac>
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d113      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ae:	881a      	ldrh	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	1c9a      	adds	r2, r3, #2
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d11c      	bne.n	800741a <HAL_SPI_TransmitReceive+0x1f4>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d016      	beq.n	800741a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	b292      	uxth	r2, r2
 80073f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	1c9a      	adds	r2, r3, #2
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800740a:	b29b      	uxth	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007416:	2301      	movs	r3, #1
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800741a:	f7fd fb85 	bl	8004b28 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007426:	429a      	cmp	r2, r3
 8007428:	d80b      	bhi.n	8007442 <HAL_SPI_TransmitReceive+0x21c>
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007430:	d007      	beq.n	8007442 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007440:	e109      	b.n	8007656 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d19f      	bne.n	800738c <HAL_SPI_TransmitReceive+0x166>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007452:	b29b      	uxth	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d199      	bne.n	800738c <HAL_SPI_TransmitReceive+0x166>
 8007458:	e0e3      	b.n	8007622 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_SPI_TransmitReceive+0x244>
 8007462:	8a7b      	ldrh	r3, [r7, #18]
 8007464:	2b01      	cmp	r3, #1
 8007466:	f040 80cf 	bne.w	8007608 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800746e:	b29b      	uxth	r3, r3
 8007470:	2b01      	cmp	r3, #1
 8007472:	d912      	bls.n	800749a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007478:	881a      	ldrh	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007484:	1c9a      	adds	r2, r3, #2
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b02      	subs	r3, #2
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007498:	e0b6      	b.n	8007608 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	7812      	ldrb	r2, [r2, #0]
 80074a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074c0:	e0a2      	b.n	8007608 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d134      	bne.n	800753a <HAL_SPI_TransmitReceive+0x314>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d02f      	beq.n	800753a <HAL_SPI_TransmitReceive+0x314>
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d12c      	bne.n	800753a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d912      	bls.n	8007510 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fa:	1c9a      	adds	r2, r3, #2
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b02      	subs	r3, #2
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800750e:	e012      	b.n	8007536 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b01      	cmp	r3, #1
 8007546:	d148      	bne.n	80075da <HAL_SPI_TransmitReceive+0x3b4>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d042      	beq.n	80075da <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	d923      	bls.n	80075a8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	b292      	uxth	r2, r2
 800756c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007572:	1c9a      	adds	r2, r3, #2
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b02      	subs	r3, #2
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b01      	cmp	r3, #1
 8007594:	d81f      	bhi.n	80075d6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	e016      	b.n	80075d6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f103 020c 	add.w	r2, r3, #12
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b4:	7812      	ldrb	r2, [r2, #0]
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075d6:	2301      	movs	r3, #1
 80075d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075da:	f7fd faa5 	bl	8004b28 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d803      	bhi.n	80075f2 <HAL_SPI_TransmitReceive+0x3cc>
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075f0:	d102      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x3d2>
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d107      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007606:	e026      	b.n	8007656 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	f47f af57 	bne.w	80074c2 <HAL_SPI_TransmitReceive+0x29c>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	f47f af50 	bne.w	80074c2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f9a4 	bl	8007974 <SPI_EndRxTxTransaction>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764c:	e003      	b.n	8007656 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800765e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007662:	4618      	mov	r0, r3
 8007664:	3728      	adds	r7, #40	@ 0x28
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007678:	b2db      	uxtb	r3, r3
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	4613      	mov	r3, r2
 8007696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007698:	f7fd fa46 	bl	8004b28 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a0:	1a9b      	subs	r3, r3, r2
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4413      	add	r3, r2
 80076a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076a8:	f7fd fa3e 	bl	8004b28 <HAL_GetTick>
 80076ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076ae:	4b39      	ldr	r3, [pc, #228]	@ (8007794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	015b      	lsls	r3, r3, #5
 80076b4:	0d1b      	lsrs	r3, r3, #20
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	fb02 f303 	mul.w	r3, r2, r3
 80076bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076be:	e054      	b.n	800776a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076c6:	d050      	beq.n	800776a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076c8:	f7fd fa2e 	bl	8004b28 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d902      	bls.n	80076de <SPI_WaitFlagStateUntilTimeout+0x56>
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d13d      	bne.n	800775a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076f6:	d111      	bne.n	800771c <SPI_WaitFlagStateUntilTimeout+0x94>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007700:	d004      	beq.n	800770c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800770a:	d107      	bne.n	800771c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800771a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007724:	d10f      	bne.n	8007746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e017      	b.n	800778a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	3b01      	subs	r3, #1
 8007768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4013      	ands	r3, r2
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	bf0c      	ite	eq
 800777a:	2301      	moveq	r3, #1
 800777c:	2300      	movne	r3, #0
 800777e:	b2db      	uxtb	r3, r3
 8007780:	461a      	mov	r2, r3
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	429a      	cmp	r2, r3
 8007786:	d19b      	bne.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3720      	adds	r7, #32
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000000 	.word	0x20000000

08007798 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08a      	sub	sp, #40	@ 0x28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80077aa:	f7fd f9bd 	bl	8004b28 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	4413      	add	r3, r2
 80077b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80077ba:	f7fd f9b5 	bl	8004b28 <HAL_GetTick>
 80077be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077c8:	4b3d      	ldr	r3, [pc, #244]	@ (80078c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	00da      	lsls	r2, r3, #3
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	0d1b      	lsrs	r3, r3, #20
 80077d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077da:	fb02 f303 	mul.w	r3, r2, r3
 80077de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80077e0:	e060      	b.n	80078a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80077e8:	d107      	bne.n	80077fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007800:	d050      	beq.n	80078a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007802:	f7fd f991 	bl	8004b28 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780e:	429a      	cmp	r2, r3
 8007810:	d902      	bls.n	8007818 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007814:	2b00      	cmp	r3, #0
 8007816:	d13d      	bne.n	8007894 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007826:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007830:	d111      	bne.n	8007856 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800783a:	d004      	beq.n	8007846 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007844:	d107      	bne.n	8007856 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007854:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800785e:	d10f      	bne.n	8007880 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800787e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e010      	b.n	80078b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	4013      	ands	r3, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d196      	bne.n	80077e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3728      	adds	r7, #40	@ 0x28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000000 	.word	0x20000000

080078c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078d8:	d111      	bne.n	80078fe <SPI_EndRxTransaction+0x3a>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078e2:	d004      	beq.n	80078ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ec:	d107      	bne.n	80078fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	2180      	movs	r1, #128	@ 0x80
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7ff febd 	bl	8007688 <SPI_WaitFlagStateUntilTimeout>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007918:	f043 0220 	orr.w	r2, r3, #32
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e023      	b.n	800796c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800792c:	d11d      	bne.n	800796a <SPI_EndRxTransaction+0xa6>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007936:	d004      	beq.n	8007942 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007940:	d113      	bne.n	800796a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2200      	movs	r2, #0
 800794a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff ff22 	bl	8007798 <SPI_WaitFifoStateUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d007      	beq.n	800796a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800795e:	f043 0220 	orr.w	r2, r3, #32
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e000      	b.n	800796c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af02      	add	r7, sp, #8
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2200      	movs	r2, #0
 8007988:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff ff03 	bl	8007798 <SPI_WaitFifoStateUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d007      	beq.n	80079a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800799c:	f043 0220 	orr.w	r2, r3, #32
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e027      	b.n	80079f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	2180      	movs	r1, #128	@ 0x80
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f7ff fe68 	bl	8007688 <SPI_WaitFlagStateUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079c2:	f043 0220 	orr.w	r2, r3, #32
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e014      	b.n	80079f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f7ff fedc 	bl	8007798 <SPI_WaitFifoStateUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d007      	beq.n	80079f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079ea:	f043 0220 	orr.w	r2, r3, #32
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e000      	b.n	80079f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e042      	b.n	8007a98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d106      	bne.n	8007a2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7f9 f883 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2224      	movs	r2, #36	@ 0x24
 8007a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0201 	bic.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb82 	bl	8008154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f8b3 	bl	8007bbc <UART_SetConfig>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e01b      	b.n	8007a98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0201 	orr.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc01 	bl	8008298 <UART_CheckIdleState>
 8007a96:	4603      	mov	r3, r0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08a      	sub	sp, #40	@ 0x28
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d17b      	bne.n	8007bb2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <HAL_UART_Transmit+0x26>
 8007ac0:	88fb      	ldrh	r3, [r7, #6]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e074      	b.n	8007bb4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2221      	movs	r2, #33	@ 0x21
 8007ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ada:	f7fd f825 	bl	8004b28 <HAL_GetTick>
 8007ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007af8:	d108      	bne.n	8007b0c <HAL_UART_Transmit+0x6c>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d104      	bne.n	8007b0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	e003      	b.n	8007b14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b14:	e030      	b.n	8007b78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2180      	movs	r1, #128	@ 0x80
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 fc63 	bl	80083ec <UART_WaitOnFlagUntilTimeout>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e03d      	b.n	8007bb4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	3302      	adds	r3, #2
 8007b52:	61bb      	str	r3, [r7, #24]
 8007b54:	e007      	b.n	8007b66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	781a      	ldrb	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	3301      	adds	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1c8      	bne.n	8007b16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2140      	movs	r1, #64	@ 0x40
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fc2c 	bl	80083ec <UART_WaitOnFlagUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e006      	b.n	8007bb4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e000      	b.n	8007bb4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007bb2:	2302      	movs	r3, #2
  }
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3720      	adds	r7, #32
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bc0:	b08c      	sub	sp, #48	@ 0x30
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4bab      	ldr	r3, [pc, #684]	@ (8007e98 <UART_SetConfig+0x2dc>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4aa0      	ldr	r2, [pc, #640]	@ (8007e9c <UART_SetConfig+0x2e0>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c24:	4313      	orrs	r3, r2
 8007c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007c32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	6812      	ldr	r2, [r2, #0]
 8007c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c46:	f023 010f 	bic.w	r1, r3, #15
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a91      	ldr	r2, [pc, #580]	@ (8007ea0 <UART_SetConfig+0x2e4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d125      	bne.n	8007cac <UART_SetConfig+0xf0>
 8007c60:	4b90      	ldr	r3, [pc, #576]	@ (8007ea4 <UART_SetConfig+0x2e8>)
 8007c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c66:	f003 0303 	and.w	r3, r3, #3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d81a      	bhi.n	8007ca4 <UART_SetConfig+0xe8>
 8007c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c74 <UART_SetConfig+0xb8>)
 8007c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c74:	08007c85 	.word	0x08007c85
 8007c78:	08007c95 	.word	0x08007c95
 8007c7c:	08007c8d 	.word	0x08007c8d
 8007c80:	08007c9d 	.word	0x08007c9d
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c8a:	e0d6      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c92:	e0d2      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007c94:	2304      	movs	r3, #4
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c9a:	e0ce      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007c9c:	2308      	movs	r3, #8
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ca2:	e0ca      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007caa:	e0c6      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a7d      	ldr	r2, [pc, #500]	@ (8007ea8 <UART_SetConfig+0x2ec>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d138      	bne.n	8007d28 <UART_SetConfig+0x16c>
 8007cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ea4 <UART_SetConfig+0x2e8>)
 8007cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cbc:	f003 030c 	and.w	r3, r3, #12
 8007cc0:	2b0c      	cmp	r3, #12
 8007cc2:	d82d      	bhi.n	8007d20 <UART_SetConfig+0x164>
 8007cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007ccc <UART_SetConfig+0x110>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007d01 	.word	0x08007d01
 8007cd0:	08007d21 	.word	0x08007d21
 8007cd4:	08007d21 	.word	0x08007d21
 8007cd8:	08007d21 	.word	0x08007d21
 8007cdc:	08007d11 	.word	0x08007d11
 8007ce0:	08007d21 	.word	0x08007d21
 8007ce4:	08007d21 	.word	0x08007d21
 8007ce8:	08007d21 	.word	0x08007d21
 8007cec:	08007d09 	.word	0x08007d09
 8007cf0:	08007d21 	.word	0x08007d21
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	08007d21 	.word	0x08007d21
 8007cfc:	08007d19 	.word	0x08007d19
 8007d00:	2300      	movs	r3, #0
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d06:	e098      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d0e:	e094      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d10:	2304      	movs	r3, #4
 8007d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d16:	e090      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d18:	2308      	movs	r3, #8
 8007d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d1e:	e08c      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d20:	2310      	movs	r3, #16
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d26:	e088      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a5f      	ldr	r2, [pc, #380]	@ (8007eac <UART_SetConfig+0x2f0>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d125      	bne.n	8007d7e <UART_SetConfig+0x1c2>
 8007d32:	4b5c      	ldr	r3, [pc, #368]	@ (8007ea4 <UART_SetConfig+0x2e8>)
 8007d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d3c:	2b30      	cmp	r3, #48	@ 0x30
 8007d3e:	d016      	beq.n	8007d6e <UART_SetConfig+0x1b2>
 8007d40:	2b30      	cmp	r3, #48	@ 0x30
 8007d42:	d818      	bhi.n	8007d76 <UART_SetConfig+0x1ba>
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d00a      	beq.n	8007d5e <UART_SetConfig+0x1a2>
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d814      	bhi.n	8007d76 <UART_SetConfig+0x1ba>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <UART_SetConfig+0x19a>
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d008      	beq.n	8007d66 <UART_SetConfig+0x1aa>
 8007d54:	e00f      	b.n	8007d76 <UART_SetConfig+0x1ba>
 8007d56:	2300      	movs	r3, #0
 8007d58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d5c:	e06d      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d64:	e069      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d66:	2304      	movs	r3, #4
 8007d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d6c:	e065      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d6e:	2308      	movs	r3, #8
 8007d70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d74:	e061      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d76:	2310      	movs	r3, #16
 8007d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d7c:	e05d      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a4b      	ldr	r2, [pc, #300]	@ (8007eb0 <UART_SetConfig+0x2f4>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d125      	bne.n	8007dd4 <UART_SetConfig+0x218>
 8007d88:	4b46      	ldr	r3, [pc, #280]	@ (8007ea4 <UART_SetConfig+0x2e8>)
 8007d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d92:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d94:	d016      	beq.n	8007dc4 <UART_SetConfig+0x208>
 8007d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d98:	d818      	bhi.n	8007dcc <UART_SetConfig+0x210>
 8007d9a:	2b80      	cmp	r3, #128	@ 0x80
 8007d9c:	d00a      	beq.n	8007db4 <UART_SetConfig+0x1f8>
 8007d9e:	2b80      	cmp	r3, #128	@ 0x80
 8007da0:	d814      	bhi.n	8007dcc <UART_SetConfig+0x210>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <UART_SetConfig+0x1f0>
 8007da6:	2b40      	cmp	r3, #64	@ 0x40
 8007da8:	d008      	beq.n	8007dbc <UART_SetConfig+0x200>
 8007daa:	e00f      	b.n	8007dcc <UART_SetConfig+0x210>
 8007dac:	2300      	movs	r3, #0
 8007dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db2:	e042      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007db4:	2302      	movs	r3, #2
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dba:	e03e      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007dbc:	2304      	movs	r3, #4
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc2:	e03a      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dca:	e036      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd2:	e032      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a30      	ldr	r2, [pc, #192]	@ (8007e9c <UART_SetConfig+0x2e0>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d12a      	bne.n	8007e34 <UART_SetConfig+0x278>
 8007dde:	4b31      	ldr	r3, [pc, #196]	@ (8007ea4 <UART_SetConfig+0x2e8>)
 8007de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007de8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dec:	d01a      	beq.n	8007e24 <UART_SetConfig+0x268>
 8007dee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007df2:	d81b      	bhi.n	8007e2c <UART_SetConfig+0x270>
 8007df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007df8:	d00c      	beq.n	8007e14 <UART_SetConfig+0x258>
 8007dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dfe:	d815      	bhi.n	8007e2c <UART_SetConfig+0x270>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <UART_SetConfig+0x250>
 8007e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e08:	d008      	beq.n	8007e1c <UART_SetConfig+0x260>
 8007e0a:	e00f      	b.n	8007e2c <UART_SetConfig+0x270>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e12:	e012      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007e14:	2302      	movs	r3, #2
 8007e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e1a:	e00e      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e22:	e00a      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007e24:	2308      	movs	r3, #8
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e2a:	e006      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e32:	e002      	b.n	8007e3a <UART_SetConfig+0x27e>
 8007e34:	2310      	movs	r3, #16
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a17      	ldr	r2, [pc, #92]	@ (8007e9c <UART_SetConfig+0x2e0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	f040 80a8 	bne.w	8007f96 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d834      	bhi.n	8007eb8 <UART_SetConfig+0x2fc>
 8007e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <UART_SetConfig+0x298>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e79 	.word	0x08007e79
 8007e58:	08007eb9 	.word	0x08007eb9
 8007e5c:	08007e81 	.word	0x08007e81
 8007e60:	08007eb9 	.word	0x08007eb9
 8007e64:	08007e87 	.word	0x08007e87
 8007e68:	08007eb9 	.word	0x08007eb9
 8007e6c:	08007eb9 	.word	0x08007eb9
 8007e70:	08007eb9 	.word	0x08007eb9
 8007e74:	08007e8f 	.word	0x08007e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e78:	f7fe fbe0 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8007e7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e7e:	e021      	b.n	8007ec4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e80:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb4 <UART_SetConfig+0x2f8>)
 8007e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e84:	e01e      	b.n	8007ec4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e86:	f7fe fb6b 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 8007e8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e8c:	e01a      	b.n	8007ec4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e94:	e016      	b.n	8007ec4 <UART_SetConfig+0x308>
 8007e96:	bf00      	nop
 8007e98:	cfff69f3 	.word	0xcfff69f3
 8007e9c:	40008000 	.word	0x40008000
 8007ea0:	40013800 	.word	0x40013800
 8007ea4:	40021000 	.word	0x40021000
 8007ea8:	40004400 	.word	0x40004400
 8007eac:	40004800 	.word	0x40004800
 8007eb0:	40004c00 	.word	0x40004c00
 8007eb4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ec2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 812a 	beq.w	8008120 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	4a9e      	ldr	r2, [pc, #632]	@ (800814c <UART_SetConfig+0x590>)
 8007ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	4413      	add	r3, r2
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d305      	bcc.n	8007efc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d903      	bls.n	8007f04 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f02:	e10d      	b.n	8008120 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	2200      	movs	r2, #0
 8007f08:	60bb      	str	r3, [r7, #8]
 8007f0a:	60fa      	str	r2, [r7, #12]
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f10:	4a8e      	ldr	r2, [pc, #568]	@ (800814c <UART_SetConfig+0x590>)
 8007f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2200      	movs	r2, #0
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	607a      	str	r2, [r7, #4]
 8007f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f26:	f7f8 f9cb 	bl	80002c0 <__aeabi_uldivmod>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4619      	mov	r1, r3
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	020b      	lsls	r3, r1, #8
 8007f3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f40:	0202      	lsls	r2, r0, #8
 8007f42:	6979      	ldr	r1, [r7, #20]
 8007f44:	6849      	ldr	r1, [r1, #4]
 8007f46:	0849      	lsrs	r1, r1, #1
 8007f48:	2000      	movs	r0, #0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	eb12 0804 	adds.w	r8, r2, r4
 8007f52:	eb43 0905 	adc.w	r9, r3, r5
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	469a      	mov	sl, r3
 8007f5e:	4693      	mov	fp, r2
 8007f60:	4652      	mov	r2, sl
 8007f62:	465b      	mov	r3, fp
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 f9aa 	bl	80002c0 <__aeabi_uldivmod>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4613      	mov	r3, r2
 8007f72:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f7a:	d308      	bcc.n	8007f8e <UART_SetConfig+0x3d2>
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f82:	d204      	bcs.n	8007f8e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6a3a      	ldr	r2, [r7, #32]
 8007f8a:	60da      	str	r2, [r3, #12]
 8007f8c:	e0c8      	b.n	8008120 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f94:	e0c4      	b.n	8008120 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f9e:	d167      	bne.n	8008070 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007fa0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fa4:	2b08      	cmp	r3, #8
 8007fa6:	d828      	bhi.n	8007ffa <UART_SetConfig+0x43e>
 8007fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb0 <UART_SetConfig+0x3f4>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08007fd5 	.word	0x08007fd5
 8007fb4:	08007fdd 	.word	0x08007fdd
 8007fb8:	08007fe5 	.word	0x08007fe5
 8007fbc:	08007ffb 	.word	0x08007ffb
 8007fc0:	08007feb 	.word	0x08007feb
 8007fc4:	08007ffb 	.word	0x08007ffb
 8007fc8:	08007ffb 	.word	0x08007ffb
 8007fcc:	08007ffb 	.word	0x08007ffb
 8007fd0:	08007ff3 	.word	0x08007ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fd4:	f7fe fb32 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8007fd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fda:	e014      	b.n	8008006 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fdc:	f7fe fb44 	bl	8006668 <HAL_RCC_GetPCLK2Freq>
 8007fe0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fe2:	e010      	b.n	8008006 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8008150 <UART_SetConfig+0x594>)
 8007fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fe8:	e00d      	b.n	8008006 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fea:	f7fe fab9 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 8007fee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ff0:	e009      	b.n	8008006 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ff8:	e005      	b.n	8008006 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 8089 	beq.w	8008120 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008012:	4a4e      	ldr	r2, [pc, #312]	@ (800814c <UART_SetConfig+0x590>)
 8008014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008018:	461a      	mov	r2, r3
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008020:	005a      	lsls	r2, r3, #1
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	441a      	add	r2, r3
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008032:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	2b0f      	cmp	r3, #15
 8008038:	d916      	bls.n	8008068 <UART_SetConfig+0x4ac>
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008040:	d212      	bcs.n	8008068 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	b29b      	uxth	r3, r3
 8008046:	f023 030f 	bic.w	r3, r3, #15
 800804a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	b29b      	uxth	r3, r3
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	b29a      	uxth	r2, r3
 8008058:	8bfb      	ldrh	r3, [r7, #30]
 800805a:	4313      	orrs	r3, r2
 800805c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	8bfa      	ldrh	r2, [r7, #30]
 8008064:	60da      	str	r2, [r3, #12]
 8008066:	e05b      	b.n	8008120 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800806e:	e057      	b.n	8008120 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008070:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008074:	2b08      	cmp	r3, #8
 8008076:	d828      	bhi.n	80080ca <UART_SetConfig+0x50e>
 8008078:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <UART_SetConfig+0x4c4>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	080080a5 	.word	0x080080a5
 8008084:	080080ad 	.word	0x080080ad
 8008088:	080080b5 	.word	0x080080b5
 800808c:	080080cb 	.word	0x080080cb
 8008090:	080080bb 	.word	0x080080bb
 8008094:	080080cb 	.word	0x080080cb
 8008098:	080080cb 	.word	0x080080cb
 800809c:	080080cb 	.word	0x080080cb
 80080a0:	080080c3 	.word	0x080080c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080a4:	f7fe faca 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 80080a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080aa:	e014      	b.n	80080d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080ac:	f7fe fadc 	bl	8006668 <HAL_RCC_GetPCLK2Freq>
 80080b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080b2:	e010      	b.n	80080d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080b4:	4b26      	ldr	r3, [pc, #152]	@ (8008150 <UART_SetConfig+0x594>)
 80080b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080b8:	e00d      	b.n	80080d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ba:	f7fe fa51 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 80080be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080c0:	e009      	b.n	80080d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080c8:	e005      	b.n	80080d6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080d4:	bf00      	nop
    }

    if (pclk != 0U)
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d021      	beq.n	8008120 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e0:	4a1a      	ldr	r2, [pc, #104]	@ (800814c <UART_SetConfig+0x590>)
 80080e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	085b      	lsrs	r3, r3, #1
 80080f4:	441a      	add	r2, r3
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	2b0f      	cmp	r3, #15
 8008104:	d909      	bls.n	800811a <UART_SetConfig+0x55e>
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800810c:	d205      	bcs.n	800811a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	b29a      	uxth	r2, r3
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60da      	str	r2, [r3, #12]
 8008118:	e002      	b.n	8008120 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2201      	movs	r2, #1
 8008124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2201      	movs	r2, #1
 800812c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2200      	movs	r2, #0
 8008134:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2200      	movs	r2, #0
 800813a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800813c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008140:	4618      	mov	r0, r3
 8008142:	3730      	adds	r7, #48	@ 0x30
 8008144:	46bd      	mov	sp, r7
 8008146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800814a:	bf00      	nop
 800814c:	08009bec 	.word	0x08009bec
 8008150:	00f42400 	.word	0x00f42400

08008154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00a      	beq.n	800817e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e8:	f003 0310 	and.w	r3, r3, #16
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00a      	beq.n	8008206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01a      	beq.n	800826a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008252:	d10a      	bne.n	800826a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	605a      	str	r2, [r3, #4]
  }
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b098      	sub	sp, #96	@ 0x60
 800829c:	af02      	add	r7, sp, #8
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082a8:	f7fc fc3e 	bl	8004b28 <HAL_GetTick>
 80082ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d12f      	bne.n	800831c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082c4:	2200      	movs	r2, #0
 80082c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f88e 	bl	80083ec <UART_WaitOnFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d022      	beq.n	800831c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80082f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e063      	b.n	80083e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0304 	and.w	r3, r3, #4
 8008326:	2b04      	cmp	r3, #4
 8008328:	d149      	bne.n	80083be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800832a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008332:	2200      	movs	r2, #0
 8008334:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f857 	bl	80083ec <UART_WaitOnFlagUntilTimeout>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d03c      	beq.n	80083be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	623b      	str	r3, [r7, #32]
   return(result);
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008362:	633b      	str	r3, [r7, #48]	@ 0x30
 8008364:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e6      	bne.n	8008344 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3308      	adds	r3, #8
 800837c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	60fb      	str	r3, [r7, #12]
   return(result);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f023 0301 	bic.w	r3, r3, #1
 800838c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3308      	adds	r3, #8
 8008394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008396:	61fa      	str	r2, [r7, #28]
 8008398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	69b9      	ldr	r1, [r7, #24]
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	617b      	str	r3, [r7, #20]
   return(result);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e5      	bne.n	8008376 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e012      	b.n	80083e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3758      	adds	r7, #88	@ 0x58
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	4613      	mov	r3, r2
 80083fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083fc:	e04f      	b.n	800849e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008404:	d04b      	beq.n	800849e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008406:	f7fc fb8f 	bl	8004b28 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	429a      	cmp	r2, r3
 8008414:	d302      	bcc.n	800841c <UART_WaitOnFlagUntilTimeout+0x30>
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e04e      	b.n	80084be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0304 	and.w	r3, r3, #4
 800842a:	2b00      	cmp	r3, #0
 800842c:	d037      	beq.n	800849e <UART_WaitOnFlagUntilTimeout+0xb2>
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b80      	cmp	r3, #128	@ 0x80
 8008432:	d034      	beq.n	800849e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b40      	cmp	r3, #64	@ 0x40
 8008438:	d031      	beq.n	800849e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b08      	cmp	r3, #8
 8008446:	d110      	bne.n	800846a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2208      	movs	r2, #8
 800844e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 f838 	bl	80084c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2208      	movs	r2, #8
 800845a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e029      	b.n	80084be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008478:	d111      	bne.n	800849e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f81e 	bl	80084c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2220      	movs	r2, #32
 800848e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e00f      	b.n	80084be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69da      	ldr	r2, [r3, #28]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	4013      	ands	r3, r2
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	bf0c      	ite	eq
 80084ae:	2301      	moveq	r3, #1
 80084b0:	2300      	movne	r3, #0
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	461a      	mov	r2, r3
 80084b6:	79fb      	ldrb	r3, [r7, #7]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d0a0      	beq.n	80083fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b095      	sub	sp, #84	@ 0x54
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80084ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3308      	adds	r3, #8
 8008506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008516:	f023 0301 	bic.w	r3, r3, #1
 800851a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3308      	adds	r3, #8
 8008522:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008524:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008526:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800852a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e3      	bne.n	8008500 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800853c:	2b01      	cmp	r3, #1
 800853e:	d118      	bne.n	8008572 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	60bb      	str	r3, [r7, #8]
   return(result);
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f023 0310 	bic.w	r3, r3, #16
 8008554:	647b      	str	r3, [r7, #68]	@ 0x44
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6979      	ldr	r1, [r7, #20]
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	613b      	str	r3, [r7, #16]
   return(result);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008586:	bf00      	nop
 8008588:	3754      	adds	r7, #84	@ 0x54
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008592:	b480      	push	{r7}
 8008594:	b085      	sub	sp, #20
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d101      	bne.n	80085a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80085a4:	2302      	movs	r3, #2
 80085a6:	e027      	b.n	80085f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2224      	movs	r2, #36	@ 0x24
 80085b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0201 	bic.w	r2, r2, #1
 80085ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008618:	2302      	movs	r3, #2
 800861a:	e02d      	b.n	8008678 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2224      	movs	r2, #36	@ 0x24
 8008628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0201 	bic.w	r2, r2, #1
 8008642:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f84f 	bl	80086fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008694:	2302      	movs	r3, #2
 8008696:	e02d      	b.n	80086f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2224      	movs	r2, #36	@ 0x24
 80086a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0201 	bic.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f811 	bl	80086fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008708:	2b00      	cmp	r3, #0
 800870a:	d108      	bne.n	800871e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800871c:	e031      	b.n	8008782 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800871e:	2308      	movs	r3, #8
 8008720:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008722:	2308      	movs	r3, #8
 8008724:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	0e5b      	lsrs	r3, r3, #25
 800872e:	b2db      	uxtb	r3, r3
 8008730:	f003 0307 	and.w	r3, r3, #7
 8008734:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	0f5b      	lsrs	r3, r3, #29
 800873e:	b2db      	uxtb	r3, r3
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	7b3a      	ldrb	r2, [r7, #12]
 800874a:	4911      	ldr	r1, [pc, #68]	@ (8008790 <UARTEx_SetNbDataToProcess+0x94>)
 800874c:	5c8a      	ldrb	r2, [r1, r2]
 800874e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008752:	7b3a      	ldrb	r2, [r7, #12]
 8008754:	490f      	ldr	r1, [pc, #60]	@ (8008794 <UARTEx_SetNbDataToProcess+0x98>)
 8008756:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008758:	fb93 f3f2 	sdiv	r3, r3, r2
 800875c:	b29a      	uxth	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	7b7a      	ldrb	r2, [r7, #13]
 8008768:	4909      	ldr	r1, [pc, #36]	@ (8008790 <UARTEx_SetNbDataToProcess+0x94>)
 800876a:	5c8a      	ldrb	r2, [r1, r2]
 800876c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008770:	7b7a      	ldrb	r2, [r7, #13]
 8008772:	4908      	ldr	r1, [pc, #32]	@ (8008794 <UARTEx_SetNbDataToProcess+0x98>)
 8008774:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008776:	fb93 f3f2 	sdiv	r3, r3, r2
 800877a:	b29a      	uxth	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	08009c04 	.word	0x08009c04
 8008794:	08009c0c 	.word	0x08009c0c

08008798 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08e      	sub	sp, #56	@ 0x38
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 80087a6:	2301      	movs	r3, #1
 80087a8:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d131      	bne.n	8008818 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80087b4:	6838      	ldr	r0, [r7, #0]
 80087b6:	f000 f8bb 	bl	8008930 <LSM6DSO_0_Probe>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 80087c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087c4:	e064      	b.n	8008890 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80087c6:	4a34      	ldr	r2, [pc, #208]	@ (8008898 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	4932      	ldr	r1, [pc, #200]	@ (800889c <CUSTOM_MOTION_SENSOR_Init+0x104>)
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80087d8:	f107 010c 	add.w	r1, r7, #12
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80087e6:	f06f 0306 	mvn.w	r3, #6
 80087ea:	e051      	b.n	8008890 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 80087ec:	7b3b      	ldrb	r3, [r7, #12]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d103      	bne.n	80087fa <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	f043 0302 	orr.w	r3, r3, #2
 80087f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 80087fa:	7b7b      	ldrb	r3, [r7, #13]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d103      	bne.n	8008808 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d108      	bne.n	8008820 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800880e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008810:	f043 0304 	orr.w	r3, r3, #4
 8008814:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008816:	e003      	b.n	8008820 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008818:	f06f 0301 	mvn.w	r3, #1
 800881c:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800881e:	e000      	b.n	8008822 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 8008820:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8008828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800882a:	e031      	b.n	8008890 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800882c:	2300      	movs	r3, #0
 800882e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008830:	e02a      	b.n	8008888 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008836:	4013      	ands	r3, r2
 8008838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800883a:	429a      	cmp	r2, r3
 800883c:	d11e      	bne.n	800887c <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800883e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	4013      	ands	r3, r2
 8008844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008846:	429a      	cmp	r2, r3
 8008848:	d118      	bne.n	800887c <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800884a:	4a15      	ldr	r2, [pc, #84]	@ (80088a0 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 800884c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008852:	4814      	ldr	r0, [pc, #80]	@ (80088a4 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	4413      	add	r3, r2
 800885c:	440b      	add	r3, r1
 800885e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	490d      	ldr	r1, [pc, #52]	@ (800889c <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008876:	f06f 0304 	mvn.w	r3, #4
 800887a:	e009      	b.n	8008890 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8008882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008884:	3301      	adds	r3, #1
 8008886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	2b02      	cmp	r3, #2
 800888c:	d9d1      	bls.n	8008832 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800888e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008890:	4618      	mov	r0, r3
 8008892:	3738      	adds	r7, #56	@ 0x38
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000298 	.word	0x20000298
 800889c:	20000288 	.word	0x20000288
 80088a0:	20000064 	.word	0x20000064
 80088a4:	2000028c 	.word	0x2000028c

080088a8 <CUSTOM_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_Axes_t *Axes)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <CUSTOM_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80088ba:	f06f 0301 	mvn.w	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e029      	b.n	8008916 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80088c2:	4a17      	ldr	r2, [pc, #92]	@ (8008920 <CUSTOM_MOTION_SENSOR_GetAxes+0x78>)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	4013      	ands	r3, r2
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d11d      	bne.n	8008910 <CUSTOM_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80088d4:	4a13      	ldr	r2, [pc, #76]	@ (8008924 <CUSTOM_MOTION_SENSOR_GetAxes+0x7c>)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088dc:	4812      	ldr	r0, [pc, #72]	@ (8008928 <CUSTOM_MOTION_SENSOR_GetAxes+0x80>)
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4613      	mov	r3, r2
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	4413      	add	r3, r2
 80088e6:	440b      	add	r3, r1
 80088e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	490f      	ldr	r1, [pc, #60]	@ (800892c <CUSTOM_MOTION_SENSOR_GetAxes+0x84>)
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <CUSTOM_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008902:	f06f 0304 	mvn.w	r3, #4
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	e005      	b.n	8008916 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800890a:	2300      	movs	r3, #0
 800890c:	617b      	str	r3, [r7, #20]
 800890e:	e002      	b.n	8008916 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008910:	f06f 0301 	mvn.w	r3, #1
 8008914:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008916:	697b      	ldr	r3, [r7, #20]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	2000029c 	.word	0x2000029c
 8008924:	20000064 	.word	0x20000064
 8008928:	2000028c 	.word	0x2000028c
 800892c:	20000288 	.word	0x20000288

08008930 <LSM6DSO_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b094      	sub	sp, #80	@ 0x50
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008938:	2300      	movs	r3, #0
 800893a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800893c:	2301      	movs	r3, #1
 800893e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = 0x0;
 8008940:	2300      	movs	r3, #0
 8008942:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = CUSTOM_LSM6DSO_0_Init;
 8008946:	4b4b      	ldr	r3, [pc, #300]	@ (8008a74 <LSM6DSO_0_Probe+0x144>)
 8008948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = CUSTOM_LSM6DSO_0_DeInit;
 800894a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a78 <LSM6DSO_0_Probe+0x148>)
 800894c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = CUSTOM_LSM6DSO_0_ReadReg;
 800894e:	4b4b      	ldr	r3, [pc, #300]	@ (8008a7c <LSM6DSO_0_Probe+0x14c>)
 8008950:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = CUSTOM_LSM6DSO_0_WriteReg;
 8008952:	4b4b      	ldr	r3, [pc, #300]	@ (8008a80 <LSM6DSO_0_Probe+0x150>)
 8008954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 8008956:	4b4b      	ldr	r3, [pc, #300]	@ (8008a84 <LSM6DSO_0_Probe+0x154>)
 8008958:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = HAL_Delay;
 800895a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a88 <LSM6DSO_0_Probe+0x158>)
 800895c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800895e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008962:	4619      	mov	r1, r3
 8008964:	4849      	ldr	r0, [pc, #292]	@ (8008a8c <LSM6DSO_0_Probe+0x15c>)
 8008966:	f7f8 fb93 	bl	8001090 <LSM6DSO_RegisterBusIO>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008970:	f06f 0306 	mvn.w	r3, #6
 8008974:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008976:	e077      	b.n	8008a68 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8008978:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800897c:	4619      	mov	r1, r3
 800897e:	4843      	ldr	r0, [pc, #268]	@ (8008a8c <LSM6DSO_0_Probe+0x15c>)
 8008980:	f7f8 fc90 	bl	80012a4 <LSM6DSO_ReadID>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800898a:	f06f 0306 	mvn.w	r3, #6
 800898e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008990:	e06a      	b.n	8008a68 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != (uint8_t)LSM6DSO_ID)
 8008992:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008996:	2b6c      	cmp	r3, #108	@ 0x6c
 8008998:	d003      	beq.n	80089a2 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800899a:	f06f 0306 	mvn.w	r3, #6
 800899e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089a0:	e062      	b.n	8008a68 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80089a2:	f107 030c 	add.w	r3, r7, #12
 80089a6:	4619      	mov	r1, r3
 80089a8:	4838      	ldr	r0, [pc, #224]	@ (8008a8c <LSM6DSO_0_Probe+0x15c>)
 80089aa:	f7f8 fc91 	bl	80012d0 <LSM6DSO_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80089ae:	7b7b      	ldrb	r3, [r7, #13]
 80089b0:	461a      	mov	r2, r3
 80089b2:	7b3b      	ldrb	r3, [r7, #12]
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	431a      	orrs	r2, r3
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4313      	orrs	r3, r2
 80089be:	4a34      	ldr	r2, [pc, #208]	@ (8008a90 <LSM6DSO_0_Probe+0x160>)
 80089c0:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSO_0] = &lsm6dso_obj_0;
 80089c2:	4b34      	ldr	r3, [pc, #208]	@ (8008a94 <LSM6DSO_0_Probe+0x164>)
 80089c4:	4a31      	ldr	r2, [pc, #196]	@ (8008a8c <LSM6DSO_0_Probe+0x15c>)
 80089c6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80089c8:	4b33      	ldr	r3, [pc, #204]	@ (8008a98 <LSM6DSO_0_Probe+0x168>)
 80089ca:	4a34      	ldr	r2, [pc, #208]	@ (8008a9c <LSM6DSO_0_Probe+0x16c>)
 80089cc:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80089ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d11d      	bne.n	8008a10 <LSM6DSO_0_Probe+0xe0>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d018      	beq.n	8008a10 <LSM6DSO_0_Probe+0xe0>
 80089de:	7b7b      	ldrb	r3, [r7, #13]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d115      	bne.n	8008a10 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80089e4:	4b2e      	ldr	r3, [pc, #184]	@ (8008aa0 <LSM6DSO_0_Probe+0x170>)
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4a2e      	ldr	r2, [pc, #184]	@ (8008aa4 <LSM6DSO_0_Probe+0x174>)
 80089ea:	492f      	ldr	r1, [pc, #188]	@ (8008aa8 <LSM6DSO_0_Probe+0x178>)
 80089ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                     void *)&LSM6DSO_GYRO_Driver;

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 80089f0:	4b29      	ldr	r3, [pc, #164]	@ (8008a98 <LSM6DSO_0_Probe+0x168>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a27      	ldr	r2, [pc, #156]	@ (8008a94 <LSM6DSO_0_Probe+0x164>)
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	4610      	mov	r0, r2
 80089fc:	4798      	blx	r3
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a04:	f06f 0304 	mvn.w	r3, #4
 8008a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a0a:	e001      	b.n	8008a10 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d11d      	bne.n	8008a52 <LSM6DSO_0_Probe+0x122>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d018      	beq.n	8008a52 <LSM6DSO_0_Probe+0x122>
 8008a20:	7b3b      	ldrb	r3, [r7, #12]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d115      	bne.n	8008a52 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008a26:	4b1e      	ldr	r3, [pc, #120]	@ (8008aa0 <LSM6DSO_0_Probe+0x170>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008aa4 <LSM6DSO_0_Probe+0x174>)
 8008a2c:	491f      	ldr	r1, [pc, #124]	@ (8008aac <LSM6DSO_0_Probe+0x17c>)
 8008a2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 8008a32:	4b19      	ldr	r3, [pc, #100]	@ (8008a98 <LSM6DSO_0_Probe+0x168>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a16      	ldr	r2, [pc, #88]	@ (8008a94 <LSM6DSO_0_Probe+0x164>)
 8008a3a:	6812      	ldr	r2, [r2, #0]
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a46:	f06f 0304 	mvn.w	r3, #4
 8008a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a4c:	e001      	b.n	8008a52 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d107      	bne.n	8008a68 <LSM6DSO_0_Probe+0x138>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a62:	f06f 0304 	mvn.w	r3, #4
 8008a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8008a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3750      	adds	r7, #80	@ 0x50
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	08008ab1 	.word	0x08008ab1
 8008a78:	08008ad5 	.word	0x08008ad5
 8008a7c:	08008b69 	.word	0x08008b69
 8008a80:	08008af9 	.word	0x08008af9
 8008a84:	08000d91 	.word	0x08000d91
 8008a88:	08004b41 	.word	0x08004b41
 8008a8c:	200002a0 	.word	0x200002a0
 8008a90:	2000029c 	.word	0x2000029c
 8008a94:	20000288 	.word	0x20000288
 8008a98:	20000298 	.word	0x20000298
 8008a9c:	20000004 	.word	0x20000004
 8008aa0:	20000064 	.word	0x20000064
 8008aa4:	2000028c 	.word	0x2000028c
 8008aa8:	20000038 	.word	0x20000038
 8008aac:	20000014 	.word	0x20000014

08008ab0 <CUSTOM_LSM6DSO_0_Init>:
/**
  * @brief  Initialize SPI bus for LSM6DSO
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_Init(void)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008ab6:	f06f 0305 	mvn.w	r3, #5
 8008aba:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSO_0_SPI_Init() == BSP_ERROR_NONE)
 8008abc:	f7f8 f8d8 	bl	8000c70 <BSP_SPI1_Init>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <CUSTOM_LSM6DSO_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8008aca:	687b      	ldr	r3, [r7, #4]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <CUSTOM_LSM6DSO_0_DeInit>:
/**
  * @brief  DeInitialize SPI bus for LSM6DSO
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_DeInit(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008ada:	f06f 0305 	mvn.w	r3, #5
 8008ade:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSO_0_SPI_DeInit() == BSP_ERROR_NONE)
 8008ae0:	f7f8 f8f6 	bl	8000cd0 <BSP_SPI1_DeInit>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <CUSTOM_LSM6DSO_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8008aea:	2300      	movs	r3, #0
 8008aec:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8008aee:	687b      	ldr	r3, [r7, #4]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <CUSTOM_LSM6DSO_0_WriteReg>:
  * @param  pdata the pointer to the data to be written
  * @param  len the length of the data to be written
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60ba      	str	r2, [r7, #8]
 8008b00:	461a      	mov	r2, r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	81fb      	strh	r3, [r7, #14]
 8008b06:	460b      	mov	r3, r1
 8008b08:	81bb      	strh	r3, [r7, #12]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8008b12:	89bb      	ldrh	r3, [r7, #12]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_RESET);
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2102      	movs	r1, #2
 8008b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008b20:	f7fc ffe0 	bl	8005ae4 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSO_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8008b24:	f107 0313 	add.w	r3, r7, #19
 8008b28:	2101      	movs	r1, #1
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f8 f8f8 	bl	8000d20 <BSP_SPI1_Send>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <CUSTOM_LSM6DSO_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008b36:	f06f 0305 	mvn.w	r3, #5
 8008b3a:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSO_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 8008b3c:	88fb      	ldrh	r3, [r7, #6]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	68b8      	ldr	r0, [r7, #8]
 8008b42:	f7f8 f8ed 	bl	8000d20 <BSP_SPI1_Send>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <CUSTOM_LSM6DSO_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008b4c:	f06f 0305 	mvn.w	r3, #5
 8008b50:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_SET);
 8008b52:	2201      	movs	r2, #1
 8008b54:	2102      	movs	r1, #2
 8008b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008b5a:	f7fc ffc3 	bl	8005ae4 <HAL_GPIO_WritePin>

  return ret;
 8008b5e:	697b      	ldr	r3, [r7, #20]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <CUSTOM_LSM6DSO_0_ReadReg>:
  * @param  pdata the pointer to the data to be read
  * @param  len the length of the data to be read
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60ba      	str	r2, [r7, #8]
 8008b70:	461a      	mov	r2, r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	81fb      	strh	r3, [r7, #14]
 8008b76:	460b      	mov	r3, r1
 8008b78:	81bb      	strh	r3, [r7, #12]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8008b82:	89bb      	ldrh	r3, [r7, #12]
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 8008b88:	7cfb      	ldrb	r3, [r7, #19]
 8008b8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_RESET);
 8008b92:	2200      	movs	r2, #0
 8008b94:	2102      	movs	r1, #2
 8008b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008b9a:	f7fc ffa3 	bl	8005ae4 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSO_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8008b9e:	f107 0313 	add.w	r3, r7, #19
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7f8 f8bb 	bl	8000d20 <BSP_SPI1_Send>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <CUSTOM_LSM6DSO_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008bb0:	f06f 0305 	mvn.w	r3, #5
 8008bb4:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSO_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	68b8      	ldr	r0, [r7, #8]
 8008bbc:	f7f8 f8cc 	bl	8000d58 <BSP_SPI1_Recv>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <CUSTOM_LSM6DSO_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008bc6:	f06f 0305 	mvn.w	r3, #5
 8008bca:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_SET);
 8008bcc:	2201      	movs	r2, #1
 8008bce:	2102      	movs	r1, #2
 8008bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008bd4:	f7fc ff86 	bl	8005ae4 <HAL_GPIO_WritePin>

  return ret;
 8008bd8:	697b      	ldr	r3, [r7, #20]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <CUSTOM_MOTION_SENSOR_Get_Event_Status>:
  * @param  Instance the device instance
  * @param  Status the pointer to the status of all hardware events
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Get_Event_Status(uint32_t Instance, CUSTOM_MOTION_SENSOR_Event_Status_t *Status)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d111      	bne.n	8008c18 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      if (LSM6DSO_ACC_Get_Event_Status(MotionCompObj[Instance], (LSM6DSO_Event_Status_t *)(void *)Status) != BSP_ERROR_NONE)
 8008bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8008c2c <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x48>)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f9 fa98 	bl	8002134 <LSM6DSO_ACC_Get_Event_Status>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c0a:	f06f 0304 	mvn.w	r3, #4
 8008c0e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008c10:	e006      	b.n	8008c20 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x3c>
        ret = BSP_ERROR_NONE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60fb      	str	r3, [r7, #12]
      break;
 8008c16:	e003      	b.n	8008c20 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008c18:	f06f 0301 	mvn.w	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
      break;
 8008c1e:	bf00      	nop
  }

  return ret;
 8008c20:	68fb      	ldr	r3, [r7, #12]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000288 	.word	0x20000288

08008c30 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation>:
  * @param  Instance the device instance
  * @param  IntPin the interrupt pin to be used
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Enable_6D_Orientation(uint32_t Instance, CUSTOM_MOTION_SENSOR_IntPin_t IntPin)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d112      	bne.n	8008c68 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x38>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_6D_Orientation(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 8008c42:	4a0e      	ldr	r2, [pc, #56]	@ (8008c7c <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x4c>)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7f9 f9f0 	bl	8002034 <LSM6DSO_ACC_Enable_6D_Orientation>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c5a:	f06f 0304 	mvn.w	r3, #4
 8008c5e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008c60:	e006      	b.n	8008c70 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x40>
        ret = BSP_ERROR_NONE;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60fb      	str	r3, [r7, #12]
      break;
 8008c66:	e003      	b.n	8008c70 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008c68:	f06f 0301 	mvn.w	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]
      break;
 8008c6e:	bf00      	nop
  }

  return ret;
 8008c70:	68fb      	ldr	r3, [r7, #12]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000288 	.word	0x20000288

08008c80 <sbrk_aligned>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	4e0f      	ldr	r6, [pc, #60]	@ (8008cc0 <sbrk_aligned+0x40>)
 8008c84:	460c      	mov	r4, r1
 8008c86:	6831      	ldr	r1, [r6, #0]
 8008c88:	4605      	mov	r5, r0
 8008c8a:	b911      	cbnz	r1, 8008c92 <sbrk_aligned+0x12>
 8008c8c:	f000 faec 	bl	8009268 <_sbrk_r>
 8008c90:	6030      	str	r0, [r6, #0]
 8008c92:	4621      	mov	r1, r4
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 fae7 	bl	8009268 <_sbrk_r>
 8008c9a:	1c43      	adds	r3, r0, #1
 8008c9c:	d103      	bne.n	8008ca6 <sbrk_aligned+0x26>
 8008c9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
 8008ca6:	1cc4      	adds	r4, r0, #3
 8008ca8:	f024 0403 	bic.w	r4, r4, #3
 8008cac:	42a0      	cmp	r0, r4
 8008cae:	d0f8      	beq.n	8008ca2 <sbrk_aligned+0x22>
 8008cb0:	1a21      	subs	r1, r4, r0
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 fad8 	bl	8009268 <_sbrk_r>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d1f2      	bne.n	8008ca2 <sbrk_aligned+0x22>
 8008cbc:	e7ef      	b.n	8008c9e <sbrk_aligned+0x1e>
 8008cbe:	bf00      	nop
 8008cc0:	200002d8 	.word	0x200002d8

08008cc4 <_malloc_r>:
 8008cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc8:	1ccd      	adds	r5, r1, #3
 8008cca:	f025 0503 	bic.w	r5, r5, #3
 8008cce:	3508      	adds	r5, #8
 8008cd0:	2d0c      	cmp	r5, #12
 8008cd2:	bf38      	it	cc
 8008cd4:	250c      	movcc	r5, #12
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	4606      	mov	r6, r0
 8008cda:	db01      	blt.n	8008ce0 <_malloc_r+0x1c>
 8008cdc:	42a9      	cmp	r1, r5
 8008cde:	d904      	bls.n	8008cea <_malloc_r+0x26>
 8008ce0:	230c      	movs	r3, #12
 8008ce2:	6033      	str	r3, [r6, #0]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008dc0 <_malloc_r+0xfc>
 8008cee:	f000 f869 	bl	8008dc4 <__malloc_lock>
 8008cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8008cf6:	461c      	mov	r4, r3
 8008cf8:	bb44      	cbnz	r4, 8008d4c <_malloc_r+0x88>
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f7ff ffbf 	bl	8008c80 <sbrk_aligned>
 8008d02:	1c43      	adds	r3, r0, #1
 8008d04:	4604      	mov	r4, r0
 8008d06:	d158      	bne.n	8008dba <_malloc_r+0xf6>
 8008d08:	f8d8 4000 	ldr.w	r4, [r8]
 8008d0c:	4627      	mov	r7, r4
 8008d0e:	2f00      	cmp	r7, #0
 8008d10:	d143      	bne.n	8008d9a <_malloc_r+0xd6>
 8008d12:	2c00      	cmp	r4, #0
 8008d14:	d04b      	beq.n	8008dae <_malloc_r+0xea>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	4639      	mov	r1, r7
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	eb04 0903 	add.w	r9, r4, r3
 8008d20:	f000 faa2 	bl	8009268 <_sbrk_r>
 8008d24:	4581      	cmp	r9, r0
 8008d26:	d142      	bne.n	8008dae <_malloc_r+0xea>
 8008d28:	6821      	ldr	r1, [r4, #0]
 8008d2a:	1a6d      	subs	r5, r5, r1
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f7ff ffa6 	bl	8008c80 <sbrk_aligned>
 8008d34:	3001      	adds	r0, #1
 8008d36:	d03a      	beq.n	8008dae <_malloc_r+0xea>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	442b      	add	r3, r5
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	bb62      	cbnz	r2, 8008da0 <_malloc_r+0xdc>
 8008d46:	f8c8 7000 	str.w	r7, [r8]
 8008d4a:	e00f      	b.n	8008d6c <_malloc_r+0xa8>
 8008d4c:	6822      	ldr	r2, [r4, #0]
 8008d4e:	1b52      	subs	r2, r2, r5
 8008d50:	d420      	bmi.n	8008d94 <_malloc_r+0xd0>
 8008d52:	2a0b      	cmp	r2, #11
 8008d54:	d917      	bls.n	8008d86 <_malloc_r+0xc2>
 8008d56:	1961      	adds	r1, r4, r5
 8008d58:	42a3      	cmp	r3, r4
 8008d5a:	6025      	str	r5, [r4, #0]
 8008d5c:	bf18      	it	ne
 8008d5e:	6059      	strne	r1, [r3, #4]
 8008d60:	6863      	ldr	r3, [r4, #4]
 8008d62:	bf08      	it	eq
 8008d64:	f8c8 1000 	streq.w	r1, [r8]
 8008d68:	5162      	str	r2, [r4, r5]
 8008d6a:	604b      	str	r3, [r1, #4]
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f000 f82f 	bl	8008dd0 <__malloc_unlock>
 8008d72:	f104 000b 	add.w	r0, r4, #11
 8008d76:	1d23      	adds	r3, r4, #4
 8008d78:	f020 0007 	bic.w	r0, r0, #7
 8008d7c:	1ac2      	subs	r2, r0, r3
 8008d7e:	bf1c      	itt	ne
 8008d80:	1a1b      	subne	r3, r3, r0
 8008d82:	50a3      	strne	r3, [r4, r2]
 8008d84:	e7af      	b.n	8008ce6 <_malloc_r+0x22>
 8008d86:	6862      	ldr	r2, [r4, #4]
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	bf0c      	ite	eq
 8008d8c:	f8c8 2000 	streq.w	r2, [r8]
 8008d90:	605a      	strne	r2, [r3, #4]
 8008d92:	e7eb      	b.n	8008d6c <_malloc_r+0xa8>
 8008d94:	4623      	mov	r3, r4
 8008d96:	6864      	ldr	r4, [r4, #4]
 8008d98:	e7ae      	b.n	8008cf8 <_malloc_r+0x34>
 8008d9a:	463c      	mov	r4, r7
 8008d9c:	687f      	ldr	r7, [r7, #4]
 8008d9e:	e7b6      	b.n	8008d0e <_malloc_r+0x4a>
 8008da0:	461a      	mov	r2, r3
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	d1fb      	bne.n	8008da0 <_malloc_r+0xdc>
 8008da8:	2300      	movs	r3, #0
 8008daa:	6053      	str	r3, [r2, #4]
 8008dac:	e7de      	b.n	8008d6c <_malloc_r+0xa8>
 8008dae:	230c      	movs	r3, #12
 8008db0:	6033      	str	r3, [r6, #0]
 8008db2:	4630      	mov	r0, r6
 8008db4:	f000 f80c 	bl	8008dd0 <__malloc_unlock>
 8008db8:	e794      	b.n	8008ce4 <_malloc_r+0x20>
 8008dba:	6005      	str	r5, [r0, #0]
 8008dbc:	e7d6      	b.n	8008d6c <_malloc_r+0xa8>
 8008dbe:	bf00      	nop
 8008dc0:	200002dc 	.word	0x200002dc

08008dc4 <__malloc_lock>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	@ (8008dcc <__malloc_lock+0x8>)
 8008dc6:	f000 ba9c 	b.w	8009302 <__retarget_lock_acquire_recursive>
 8008dca:	bf00      	nop
 8008dcc:	20000420 	.word	0x20000420

08008dd0 <__malloc_unlock>:
 8008dd0:	4801      	ldr	r0, [pc, #4]	@ (8008dd8 <__malloc_unlock+0x8>)
 8008dd2:	f000 ba97 	b.w	8009304 <__retarget_lock_release_recursive>
 8008dd6:	bf00      	nop
 8008dd8:	20000420 	.word	0x20000420

08008ddc <std>:
 8008ddc:	2300      	movs	r3, #0
 8008dde:	b510      	push	{r4, lr}
 8008de0:	4604      	mov	r4, r0
 8008de2:	e9c0 3300 	strd	r3, r3, [r0]
 8008de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dea:	6083      	str	r3, [r0, #8]
 8008dec:	8181      	strh	r1, [r0, #12]
 8008dee:	6643      	str	r3, [r0, #100]	@ 0x64
 8008df0:	81c2      	strh	r2, [r0, #14]
 8008df2:	6183      	str	r3, [r0, #24]
 8008df4:	4619      	mov	r1, r3
 8008df6:	2208      	movs	r2, #8
 8008df8:	305c      	adds	r0, #92	@ 0x5c
 8008dfa:	f000 f9f9 	bl	80091f0 <memset>
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <std+0x58>)
 8008e00:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e02:	4b0d      	ldr	r3, [pc, #52]	@ (8008e38 <std+0x5c>)
 8008e04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e06:	4b0d      	ldr	r3, [pc, #52]	@ (8008e3c <std+0x60>)
 8008e08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e40 <std+0x64>)
 8008e0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e44 <std+0x68>)
 8008e10:	6224      	str	r4, [r4, #32]
 8008e12:	429c      	cmp	r4, r3
 8008e14:	d006      	beq.n	8008e24 <std+0x48>
 8008e16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e1a:	4294      	cmp	r4, r2
 8008e1c:	d002      	beq.n	8008e24 <std+0x48>
 8008e1e:	33d0      	adds	r3, #208	@ 0xd0
 8008e20:	429c      	cmp	r4, r3
 8008e22:	d105      	bne.n	8008e30 <std+0x54>
 8008e24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e2c:	f000 ba68 	b.w	8009300 <__retarget_lock_init_recursive>
 8008e30:	bd10      	pop	{r4, pc}
 8008e32:	bf00      	nop
 8008e34:	08009041 	.word	0x08009041
 8008e38:	08009063 	.word	0x08009063
 8008e3c:	0800909b 	.word	0x0800909b
 8008e40:	080090bf 	.word	0x080090bf
 8008e44:	200002e0 	.word	0x200002e0

08008e48 <stdio_exit_handler>:
 8008e48:	4a02      	ldr	r2, [pc, #8]	@ (8008e54 <stdio_exit_handler+0xc>)
 8008e4a:	4903      	ldr	r1, [pc, #12]	@ (8008e58 <stdio_exit_handler+0x10>)
 8008e4c:	4803      	ldr	r0, [pc, #12]	@ (8008e5c <stdio_exit_handler+0x14>)
 8008e4e:	f000 b869 	b.w	8008f24 <_fwalk_sglue>
 8008e52:	bf00      	nop
 8008e54:	20000084 	.word	0x20000084
 8008e58:	08009a45 	.word	0x08009a45
 8008e5c:	20000094 	.word	0x20000094

08008e60 <cleanup_stdio>:
 8008e60:	6841      	ldr	r1, [r0, #4]
 8008e62:	4b0c      	ldr	r3, [pc, #48]	@ (8008e94 <cleanup_stdio+0x34>)
 8008e64:	4299      	cmp	r1, r3
 8008e66:	b510      	push	{r4, lr}
 8008e68:	4604      	mov	r4, r0
 8008e6a:	d001      	beq.n	8008e70 <cleanup_stdio+0x10>
 8008e6c:	f000 fdea 	bl	8009a44 <_fflush_r>
 8008e70:	68a1      	ldr	r1, [r4, #8]
 8008e72:	4b09      	ldr	r3, [pc, #36]	@ (8008e98 <cleanup_stdio+0x38>)
 8008e74:	4299      	cmp	r1, r3
 8008e76:	d002      	beq.n	8008e7e <cleanup_stdio+0x1e>
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 fde3 	bl	8009a44 <_fflush_r>
 8008e7e:	68e1      	ldr	r1, [r4, #12]
 8008e80:	4b06      	ldr	r3, [pc, #24]	@ (8008e9c <cleanup_stdio+0x3c>)
 8008e82:	4299      	cmp	r1, r3
 8008e84:	d004      	beq.n	8008e90 <cleanup_stdio+0x30>
 8008e86:	4620      	mov	r0, r4
 8008e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e8c:	f000 bdda 	b.w	8009a44 <_fflush_r>
 8008e90:	bd10      	pop	{r4, pc}
 8008e92:	bf00      	nop
 8008e94:	200002e0 	.word	0x200002e0
 8008e98:	20000348 	.word	0x20000348
 8008e9c:	200003b0 	.word	0x200003b0

08008ea0 <global_stdio_init.part.0>:
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed0 <global_stdio_init.part.0+0x30>)
 8008ea4:	4c0b      	ldr	r4, [pc, #44]	@ (8008ed4 <global_stdio_init.part.0+0x34>)
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ed8 <global_stdio_init.part.0+0x38>)
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	4620      	mov	r0, r4
 8008eac:	2200      	movs	r2, #0
 8008eae:	2104      	movs	r1, #4
 8008eb0:	f7ff ff94 	bl	8008ddc <std>
 8008eb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008eb8:	2201      	movs	r2, #1
 8008eba:	2109      	movs	r1, #9
 8008ebc:	f7ff ff8e 	bl	8008ddc <std>
 8008ec0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eca:	2112      	movs	r1, #18
 8008ecc:	f7ff bf86 	b.w	8008ddc <std>
 8008ed0:	20000418 	.word	0x20000418
 8008ed4:	200002e0 	.word	0x200002e0
 8008ed8:	08008e49 	.word	0x08008e49

08008edc <__sfp_lock_acquire>:
 8008edc:	4801      	ldr	r0, [pc, #4]	@ (8008ee4 <__sfp_lock_acquire+0x8>)
 8008ede:	f000 ba10 	b.w	8009302 <__retarget_lock_acquire_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	20000421 	.word	0x20000421

08008ee8 <__sfp_lock_release>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	@ (8008ef0 <__sfp_lock_release+0x8>)
 8008eea:	f000 ba0b 	b.w	8009304 <__retarget_lock_release_recursive>
 8008eee:	bf00      	nop
 8008ef0:	20000421 	.word	0x20000421

08008ef4 <__sinit>:
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	f7ff fff0 	bl	8008edc <__sfp_lock_acquire>
 8008efc:	6a23      	ldr	r3, [r4, #32]
 8008efe:	b11b      	cbz	r3, 8008f08 <__sinit+0x14>
 8008f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f04:	f7ff bff0 	b.w	8008ee8 <__sfp_lock_release>
 8008f08:	4b04      	ldr	r3, [pc, #16]	@ (8008f1c <__sinit+0x28>)
 8008f0a:	6223      	str	r3, [r4, #32]
 8008f0c:	4b04      	ldr	r3, [pc, #16]	@ (8008f20 <__sinit+0x2c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f5      	bne.n	8008f00 <__sinit+0xc>
 8008f14:	f7ff ffc4 	bl	8008ea0 <global_stdio_init.part.0>
 8008f18:	e7f2      	b.n	8008f00 <__sinit+0xc>
 8008f1a:	bf00      	nop
 8008f1c:	08008e61 	.word	0x08008e61
 8008f20:	20000418 	.word	0x20000418

08008f24 <_fwalk_sglue>:
 8008f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f28:	4607      	mov	r7, r0
 8008f2a:	4688      	mov	r8, r1
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	2600      	movs	r6, #0
 8008f30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f34:	f1b9 0901 	subs.w	r9, r9, #1
 8008f38:	d505      	bpl.n	8008f46 <_fwalk_sglue+0x22>
 8008f3a:	6824      	ldr	r4, [r4, #0]
 8008f3c:	2c00      	cmp	r4, #0
 8008f3e:	d1f7      	bne.n	8008f30 <_fwalk_sglue+0xc>
 8008f40:	4630      	mov	r0, r6
 8008f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f46:	89ab      	ldrh	r3, [r5, #12]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d907      	bls.n	8008f5c <_fwalk_sglue+0x38>
 8008f4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f50:	3301      	adds	r3, #1
 8008f52:	d003      	beq.n	8008f5c <_fwalk_sglue+0x38>
 8008f54:	4629      	mov	r1, r5
 8008f56:	4638      	mov	r0, r7
 8008f58:	47c0      	blx	r8
 8008f5a:	4306      	orrs	r6, r0
 8008f5c:	3568      	adds	r5, #104	@ 0x68
 8008f5e:	e7e9      	b.n	8008f34 <_fwalk_sglue+0x10>

08008f60 <iprintf>:
 8008f60:	b40f      	push	{r0, r1, r2, r3}
 8008f62:	b507      	push	{r0, r1, r2, lr}
 8008f64:	4906      	ldr	r1, [pc, #24]	@ (8008f80 <iprintf+0x20>)
 8008f66:	ab04      	add	r3, sp, #16
 8008f68:	6808      	ldr	r0, [r1, #0]
 8008f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f6e:	6881      	ldr	r1, [r0, #8]
 8008f70:	9301      	str	r3, [sp, #4]
 8008f72:	f000 fa3d 	bl	80093f0 <_vfiprintf_r>
 8008f76:	b003      	add	sp, #12
 8008f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f7c:	b004      	add	sp, #16
 8008f7e:	4770      	bx	lr
 8008f80:	20000090 	.word	0x20000090

08008f84 <_puts_r>:
 8008f84:	6a03      	ldr	r3, [r0, #32]
 8008f86:	b570      	push	{r4, r5, r6, lr}
 8008f88:	6884      	ldr	r4, [r0, #8]
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	460e      	mov	r6, r1
 8008f8e:	b90b      	cbnz	r3, 8008f94 <_puts_r+0x10>
 8008f90:	f7ff ffb0 	bl	8008ef4 <__sinit>
 8008f94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f96:	07db      	lsls	r3, r3, #31
 8008f98:	d405      	bmi.n	8008fa6 <_puts_r+0x22>
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	0598      	lsls	r0, r3, #22
 8008f9e:	d402      	bmi.n	8008fa6 <_puts_r+0x22>
 8008fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fa2:	f000 f9ae 	bl	8009302 <__retarget_lock_acquire_recursive>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	0719      	lsls	r1, r3, #28
 8008faa:	d502      	bpl.n	8008fb2 <_puts_r+0x2e>
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d135      	bne.n	800901e <_puts_r+0x9a>
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f000 f8c5 	bl	8009144 <__swsetup_r>
 8008fba:	b380      	cbz	r0, 800901e <_puts_r+0x9a>
 8008fbc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008fc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fc2:	07da      	lsls	r2, r3, #31
 8008fc4:	d405      	bmi.n	8008fd2 <_puts_r+0x4e>
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	059b      	lsls	r3, r3, #22
 8008fca:	d402      	bmi.n	8008fd2 <_puts_r+0x4e>
 8008fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fce:	f000 f999 	bl	8009304 <__retarget_lock_release_recursive>
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	bd70      	pop	{r4, r5, r6, pc}
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da04      	bge.n	8008fe4 <_puts_r+0x60>
 8008fda:	69a2      	ldr	r2, [r4, #24]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	dc17      	bgt.n	8009010 <_puts_r+0x8c>
 8008fe0:	290a      	cmp	r1, #10
 8008fe2:	d015      	beq.n	8009010 <_puts_r+0x8c>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	6022      	str	r2, [r4, #0]
 8008fea:	7019      	strb	r1, [r3, #0]
 8008fec:	68a3      	ldr	r3, [r4, #8]
 8008fee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	60a3      	str	r3, [r4, #8]
 8008ff6:	2900      	cmp	r1, #0
 8008ff8:	d1ed      	bne.n	8008fd6 <_puts_r+0x52>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	da11      	bge.n	8009022 <_puts_r+0x9e>
 8008ffe:	4622      	mov	r2, r4
 8009000:	210a      	movs	r1, #10
 8009002:	4628      	mov	r0, r5
 8009004:	f000 f85f 	bl	80090c6 <__swbuf_r>
 8009008:	3001      	adds	r0, #1
 800900a:	d0d7      	beq.n	8008fbc <_puts_r+0x38>
 800900c:	250a      	movs	r5, #10
 800900e:	e7d7      	b.n	8008fc0 <_puts_r+0x3c>
 8009010:	4622      	mov	r2, r4
 8009012:	4628      	mov	r0, r5
 8009014:	f000 f857 	bl	80090c6 <__swbuf_r>
 8009018:	3001      	adds	r0, #1
 800901a:	d1e7      	bne.n	8008fec <_puts_r+0x68>
 800901c:	e7ce      	b.n	8008fbc <_puts_r+0x38>
 800901e:	3e01      	subs	r6, #1
 8009020:	e7e4      	b.n	8008fec <_puts_r+0x68>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	6022      	str	r2, [r4, #0]
 8009028:	220a      	movs	r2, #10
 800902a:	701a      	strb	r2, [r3, #0]
 800902c:	e7ee      	b.n	800900c <_puts_r+0x88>
	...

08009030 <puts>:
 8009030:	4b02      	ldr	r3, [pc, #8]	@ (800903c <puts+0xc>)
 8009032:	4601      	mov	r1, r0
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	f7ff bfa5 	b.w	8008f84 <_puts_r>
 800903a:	bf00      	nop
 800903c:	20000090 	.word	0x20000090

08009040 <__sread>:
 8009040:	b510      	push	{r4, lr}
 8009042:	460c      	mov	r4, r1
 8009044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009048:	f000 f8fc 	bl	8009244 <_read_r>
 800904c:	2800      	cmp	r0, #0
 800904e:	bfab      	itete	ge
 8009050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009052:	89a3      	ldrhlt	r3, [r4, #12]
 8009054:	181b      	addge	r3, r3, r0
 8009056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800905a:	bfac      	ite	ge
 800905c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800905e:	81a3      	strhlt	r3, [r4, #12]
 8009060:	bd10      	pop	{r4, pc}

08009062 <__swrite>:
 8009062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009066:	461f      	mov	r7, r3
 8009068:	898b      	ldrh	r3, [r1, #12]
 800906a:	05db      	lsls	r3, r3, #23
 800906c:	4605      	mov	r5, r0
 800906e:	460c      	mov	r4, r1
 8009070:	4616      	mov	r6, r2
 8009072:	d505      	bpl.n	8009080 <__swrite+0x1e>
 8009074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009078:	2302      	movs	r3, #2
 800907a:	2200      	movs	r2, #0
 800907c:	f000 f8d0 	bl	8009220 <_lseek_r>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009086:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	4632      	mov	r2, r6
 800908e:	463b      	mov	r3, r7
 8009090:	4628      	mov	r0, r5
 8009092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009096:	f000 b8f7 	b.w	8009288 <_write_r>

0800909a <__sseek>:
 800909a:	b510      	push	{r4, lr}
 800909c:	460c      	mov	r4, r1
 800909e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a2:	f000 f8bd 	bl	8009220 <_lseek_r>
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	bf15      	itete	ne
 80090ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090b6:	81a3      	strheq	r3, [r4, #12]
 80090b8:	bf18      	it	ne
 80090ba:	81a3      	strhne	r3, [r4, #12]
 80090bc:	bd10      	pop	{r4, pc}

080090be <__sclose>:
 80090be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c2:	f000 b89d 	b.w	8009200 <_close_r>

080090c6 <__swbuf_r>:
 80090c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c8:	460e      	mov	r6, r1
 80090ca:	4614      	mov	r4, r2
 80090cc:	4605      	mov	r5, r0
 80090ce:	b118      	cbz	r0, 80090d8 <__swbuf_r+0x12>
 80090d0:	6a03      	ldr	r3, [r0, #32]
 80090d2:	b90b      	cbnz	r3, 80090d8 <__swbuf_r+0x12>
 80090d4:	f7ff ff0e 	bl	8008ef4 <__sinit>
 80090d8:	69a3      	ldr	r3, [r4, #24]
 80090da:	60a3      	str	r3, [r4, #8]
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	071a      	lsls	r2, r3, #28
 80090e0:	d501      	bpl.n	80090e6 <__swbuf_r+0x20>
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	b943      	cbnz	r3, 80090f8 <__swbuf_r+0x32>
 80090e6:	4621      	mov	r1, r4
 80090e8:	4628      	mov	r0, r5
 80090ea:	f000 f82b 	bl	8009144 <__swsetup_r>
 80090ee:	b118      	cbz	r0, 80090f8 <__swbuf_r+0x32>
 80090f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80090f4:	4638      	mov	r0, r7
 80090f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	6922      	ldr	r2, [r4, #16]
 80090fc:	1a98      	subs	r0, r3, r2
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	b2f6      	uxtb	r6, r6
 8009102:	4283      	cmp	r3, r0
 8009104:	4637      	mov	r7, r6
 8009106:	dc05      	bgt.n	8009114 <__swbuf_r+0x4e>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 fc9a 	bl	8009a44 <_fflush_r>
 8009110:	2800      	cmp	r0, #0
 8009112:	d1ed      	bne.n	80090f0 <__swbuf_r+0x2a>
 8009114:	68a3      	ldr	r3, [r4, #8]
 8009116:	3b01      	subs	r3, #1
 8009118:	60a3      	str	r3, [r4, #8]
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	6022      	str	r2, [r4, #0]
 8009120:	701e      	strb	r6, [r3, #0]
 8009122:	6962      	ldr	r2, [r4, #20]
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	429a      	cmp	r2, r3
 8009128:	d004      	beq.n	8009134 <__swbuf_r+0x6e>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	07db      	lsls	r3, r3, #31
 800912e:	d5e1      	bpl.n	80090f4 <__swbuf_r+0x2e>
 8009130:	2e0a      	cmp	r6, #10
 8009132:	d1df      	bne.n	80090f4 <__swbuf_r+0x2e>
 8009134:	4621      	mov	r1, r4
 8009136:	4628      	mov	r0, r5
 8009138:	f000 fc84 	bl	8009a44 <_fflush_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	d0d9      	beq.n	80090f4 <__swbuf_r+0x2e>
 8009140:	e7d6      	b.n	80090f0 <__swbuf_r+0x2a>
	...

08009144 <__swsetup_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4b29      	ldr	r3, [pc, #164]	@ (80091ec <__swsetup_r+0xa8>)
 8009148:	4605      	mov	r5, r0
 800914a:	6818      	ldr	r0, [r3, #0]
 800914c:	460c      	mov	r4, r1
 800914e:	b118      	cbz	r0, 8009158 <__swsetup_r+0x14>
 8009150:	6a03      	ldr	r3, [r0, #32]
 8009152:	b90b      	cbnz	r3, 8009158 <__swsetup_r+0x14>
 8009154:	f7ff fece 	bl	8008ef4 <__sinit>
 8009158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915c:	0719      	lsls	r1, r3, #28
 800915e:	d422      	bmi.n	80091a6 <__swsetup_r+0x62>
 8009160:	06da      	lsls	r2, r3, #27
 8009162:	d407      	bmi.n	8009174 <__swsetup_r+0x30>
 8009164:	2209      	movs	r2, #9
 8009166:	602a      	str	r2, [r5, #0]
 8009168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800916c:	81a3      	strh	r3, [r4, #12]
 800916e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009172:	e033      	b.n	80091dc <__swsetup_r+0x98>
 8009174:	0758      	lsls	r0, r3, #29
 8009176:	d512      	bpl.n	800919e <__swsetup_r+0x5a>
 8009178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800917a:	b141      	cbz	r1, 800918e <__swsetup_r+0x4a>
 800917c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009180:	4299      	cmp	r1, r3
 8009182:	d002      	beq.n	800918a <__swsetup_r+0x46>
 8009184:	4628      	mov	r0, r5
 8009186:	f000 f8bf 	bl	8009308 <_free_r>
 800918a:	2300      	movs	r3, #0
 800918c:	6363      	str	r3, [r4, #52]	@ 0x34
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009194:	81a3      	strh	r3, [r4, #12]
 8009196:	2300      	movs	r3, #0
 8009198:	6063      	str	r3, [r4, #4]
 800919a:	6923      	ldr	r3, [r4, #16]
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	f043 0308 	orr.w	r3, r3, #8
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	b94b      	cbnz	r3, 80091be <__swsetup_r+0x7a>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091b4:	d003      	beq.n	80091be <__swsetup_r+0x7a>
 80091b6:	4621      	mov	r1, r4
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 fc91 	bl	8009ae0 <__smakebuf_r>
 80091be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c2:	f013 0201 	ands.w	r2, r3, #1
 80091c6:	d00a      	beq.n	80091de <__swsetup_r+0x9a>
 80091c8:	2200      	movs	r2, #0
 80091ca:	60a2      	str	r2, [r4, #8]
 80091cc:	6962      	ldr	r2, [r4, #20]
 80091ce:	4252      	negs	r2, r2
 80091d0:	61a2      	str	r2, [r4, #24]
 80091d2:	6922      	ldr	r2, [r4, #16]
 80091d4:	b942      	cbnz	r2, 80091e8 <__swsetup_r+0xa4>
 80091d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091da:	d1c5      	bne.n	8009168 <__swsetup_r+0x24>
 80091dc:	bd38      	pop	{r3, r4, r5, pc}
 80091de:	0799      	lsls	r1, r3, #30
 80091e0:	bf58      	it	pl
 80091e2:	6962      	ldrpl	r2, [r4, #20]
 80091e4:	60a2      	str	r2, [r4, #8]
 80091e6:	e7f4      	b.n	80091d2 <__swsetup_r+0x8e>
 80091e8:	2000      	movs	r0, #0
 80091ea:	e7f7      	b.n	80091dc <__swsetup_r+0x98>
 80091ec:	20000090 	.word	0x20000090

080091f0 <memset>:
 80091f0:	4402      	add	r2, r0
 80091f2:	4603      	mov	r3, r0
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d100      	bne.n	80091fa <memset+0xa>
 80091f8:	4770      	bx	lr
 80091fa:	f803 1b01 	strb.w	r1, [r3], #1
 80091fe:	e7f9      	b.n	80091f4 <memset+0x4>

08009200 <_close_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d06      	ldr	r5, [pc, #24]	@ (800921c <_close_r+0x1c>)
 8009204:	2300      	movs	r3, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	f7f7 fe99 	bl	8000f42 <_close>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_close_r+0x1a>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_close_r+0x1a>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	2000041c 	.word	0x2000041c

08009220 <_lseek_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d07      	ldr	r5, [pc, #28]	@ (8009240 <_lseek_r+0x20>)
 8009224:	4604      	mov	r4, r0
 8009226:	4608      	mov	r0, r1
 8009228:	4611      	mov	r1, r2
 800922a:	2200      	movs	r2, #0
 800922c:	602a      	str	r2, [r5, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	f7f7 feae 	bl	8000f90 <_lseek>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d102      	bne.n	800923e <_lseek_r+0x1e>
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	b103      	cbz	r3, 800923e <_lseek_r+0x1e>
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	2000041c 	.word	0x2000041c

08009244 <_read_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d07      	ldr	r5, [pc, #28]	@ (8009264 <_read_r+0x20>)
 8009248:	4604      	mov	r4, r0
 800924a:	4608      	mov	r0, r1
 800924c:	4611      	mov	r1, r2
 800924e:	2200      	movs	r2, #0
 8009250:	602a      	str	r2, [r5, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f7f7 fe58 	bl	8000f08 <_read>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_read_r+0x1e>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_read_r+0x1e>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	2000041c 	.word	0x2000041c

08009268 <_sbrk_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d06      	ldr	r5, [pc, #24]	@ (8009284 <_sbrk_r+0x1c>)
 800926c:	2300      	movs	r3, #0
 800926e:	4604      	mov	r4, r0
 8009270:	4608      	mov	r0, r1
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	f7f7 fe9a 	bl	8000fac <_sbrk>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_sbrk_r+0x1a>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_sbrk_r+0x1a>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	2000041c 	.word	0x2000041c

08009288 <_write_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d07      	ldr	r5, [pc, #28]	@ (80092a8 <_write_r+0x20>)
 800928c:	4604      	mov	r4, r0
 800928e:	4608      	mov	r0, r1
 8009290:	4611      	mov	r1, r2
 8009292:	2200      	movs	r2, #0
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	f7f7 f98a 	bl	80005b0 <_write>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_write_r+0x1e>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_write_r+0x1e>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	2000041c 	.word	0x2000041c

080092ac <__errno>:
 80092ac:	4b01      	ldr	r3, [pc, #4]	@ (80092b4 <__errno+0x8>)
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	20000090 	.word	0x20000090

080092b8 <__libc_init_array>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4d0d      	ldr	r5, [pc, #52]	@ (80092f0 <__libc_init_array+0x38>)
 80092bc:	4c0d      	ldr	r4, [pc, #52]	@ (80092f4 <__libc_init_array+0x3c>)
 80092be:	1b64      	subs	r4, r4, r5
 80092c0:	10a4      	asrs	r4, r4, #2
 80092c2:	2600      	movs	r6, #0
 80092c4:	42a6      	cmp	r6, r4
 80092c6:	d109      	bne.n	80092dc <__libc_init_array+0x24>
 80092c8:	4d0b      	ldr	r5, [pc, #44]	@ (80092f8 <__libc_init_array+0x40>)
 80092ca:	4c0c      	ldr	r4, [pc, #48]	@ (80092fc <__libc_init_array+0x44>)
 80092cc:	f000 fc66 	bl	8009b9c <_init>
 80092d0:	1b64      	subs	r4, r4, r5
 80092d2:	10a4      	asrs	r4, r4, #2
 80092d4:	2600      	movs	r6, #0
 80092d6:	42a6      	cmp	r6, r4
 80092d8:	d105      	bne.n	80092e6 <__libc_init_array+0x2e>
 80092da:	bd70      	pop	{r4, r5, r6, pc}
 80092dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80092e0:	4798      	blx	r3
 80092e2:	3601      	adds	r6, #1
 80092e4:	e7ee      	b.n	80092c4 <__libc_init_array+0xc>
 80092e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ea:	4798      	blx	r3
 80092ec:	3601      	adds	r6, #1
 80092ee:	e7f2      	b.n	80092d6 <__libc_init_array+0x1e>
 80092f0:	08009c50 	.word	0x08009c50
 80092f4:	08009c50 	.word	0x08009c50
 80092f8:	08009c50 	.word	0x08009c50
 80092fc:	08009c54 	.word	0x08009c54

08009300 <__retarget_lock_init_recursive>:
 8009300:	4770      	bx	lr

08009302 <__retarget_lock_acquire_recursive>:
 8009302:	4770      	bx	lr

08009304 <__retarget_lock_release_recursive>:
 8009304:	4770      	bx	lr
	...

08009308 <_free_r>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	4605      	mov	r5, r0
 800930c:	2900      	cmp	r1, #0
 800930e:	d041      	beq.n	8009394 <_free_r+0x8c>
 8009310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009314:	1f0c      	subs	r4, r1, #4
 8009316:	2b00      	cmp	r3, #0
 8009318:	bfb8      	it	lt
 800931a:	18e4      	addlt	r4, r4, r3
 800931c:	f7ff fd52 	bl	8008dc4 <__malloc_lock>
 8009320:	4a1d      	ldr	r2, [pc, #116]	@ (8009398 <_free_r+0x90>)
 8009322:	6813      	ldr	r3, [r2, #0]
 8009324:	b933      	cbnz	r3, 8009334 <_free_r+0x2c>
 8009326:	6063      	str	r3, [r4, #4]
 8009328:	6014      	str	r4, [r2, #0]
 800932a:	4628      	mov	r0, r5
 800932c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009330:	f7ff bd4e 	b.w	8008dd0 <__malloc_unlock>
 8009334:	42a3      	cmp	r3, r4
 8009336:	d908      	bls.n	800934a <_free_r+0x42>
 8009338:	6820      	ldr	r0, [r4, #0]
 800933a:	1821      	adds	r1, r4, r0
 800933c:	428b      	cmp	r3, r1
 800933e:	bf01      	itttt	eq
 8009340:	6819      	ldreq	r1, [r3, #0]
 8009342:	685b      	ldreq	r3, [r3, #4]
 8009344:	1809      	addeq	r1, r1, r0
 8009346:	6021      	streq	r1, [r4, #0]
 8009348:	e7ed      	b.n	8009326 <_free_r+0x1e>
 800934a:	461a      	mov	r2, r3
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	b10b      	cbz	r3, 8009354 <_free_r+0x4c>
 8009350:	42a3      	cmp	r3, r4
 8009352:	d9fa      	bls.n	800934a <_free_r+0x42>
 8009354:	6811      	ldr	r1, [r2, #0]
 8009356:	1850      	adds	r0, r2, r1
 8009358:	42a0      	cmp	r0, r4
 800935a:	d10b      	bne.n	8009374 <_free_r+0x6c>
 800935c:	6820      	ldr	r0, [r4, #0]
 800935e:	4401      	add	r1, r0
 8009360:	1850      	adds	r0, r2, r1
 8009362:	4283      	cmp	r3, r0
 8009364:	6011      	str	r1, [r2, #0]
 8009366:	d1e0      	bne.n	800932a <_free_r+0x22>
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	6053      	str	r3, [r2, #4]
 800936e:	4408      	add	r0, r1
 8009370:	6010      	str	r0, [r2, #0]
 8009372:	e7da      	b.n	800932a <_free_r+0x22>
 8009374:	d902      	bls.n	800937c <_free_r+0x74>
 8009376:	230c      	movs	r3, #12
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	e7d6      	b.n	800932a <_free_r+0x22>
 800937c:	6820      	ldr	r0, [r4, #0]
 800937e:	1821      	adds	r1, r4, r0
 8009380:	428b      	cmp	r3, r1
 8009382:	bf04      	itt	eq
 8009384:	6819      	ldreq	r1, [r3, #0]
 8009386:	685b      	ldreq	r3, [r3, #4]
 8009388:	6063      	str	r3, [r4, #4]
 800938a:	bf04      	itt	eq
 800938c:	1809      	addeq	r1, r1, r0
 800938e:	6021      	streq	r1, [r4, #0]
 8009390:	6054      	str	r4, [r2, #4]
 8009392:	e7ca      	b.n	800932a <_free_r+0x22>
 8009394:	bd38      	pop	{r3, r4, r5, pc}
 8009396:	bf00      	nop
 8009398:	200002dc 	.word	0x200002dc

0800939c <__sfputc_r>:
 800939c:	6893      	ldr	r3, [r2, #8]
 800939e:	3b01      	subs	r3, #1
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	b410      	push	{r4}
 80093a4:	6093      	str	r3, [r2, #8]
 80093a6:	da08      	bge.n	80093ba <__sfputc_r+0x1e>
 80093a8:	6994      	ldr	r4, [r2, #24]
 80093aa:	42a3      	cmp	r3, r4
 80093ac:	db01      	blt.n	80093b2 <__sfputc_r+0x16>
 80093ae:	290a      	cmp	r1, #10
 80093b0:	d103      	bne.n	80093ba <__sfputc_r+0x1e>
 80093b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093b6:	f7ff be86 	b.w	80090c6 <__swbuf_r>
 80093ba:	6813      	ldr	r3, [r2, #0]
 80093bc:	1c58      	adds	r0, r3, #1
 80093be:	6010      	str	r0, [r2, #0]
 80093c0:	7019      	strb	r1, [r3, #0]
 80093c2:	4608      	mov	r0, r1
 80093c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <__sfputs_r>:
 80093ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093cc:	4606      	mov	r6, r0
 80093ce:	460f      	mov	r7, r1
 80093d0:	4614      	mov	r4, r2
 80093d2:	18d5      	adds	r5, r2, r3
 80093d4:	42ac      	cmp	r4, r5
 80093d6:	d101      	bne.n	80093dc <__sfputs_r+0x12>
 80093d8:	2000      	movs	r0, #0
 80093da:	e007      	b.n	80093ec <__sfputs_r+0x22>
 80093dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e0:	463a      	mov	r2, r7
 80093e2:	4630      	mov	r0, r6
 80093e4:	f7ff ffda 	bl	800939c <__sfputc_r>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d1f3      	bne.n	80093d4 <__sfputs_r+0xa>
 80093ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093f0 <_vfiprintf_r>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	460d      	mov	r5, r1
 80093f6:	b09d      	sub	sp, #116	@ 0x74
 80093f8:	4614      	mov	r4, r2
 80093fa:	4698      	mov	r8, r3
 80093fc:	4606      	mov	r6, r0
 80093fe:	b118      	cbz	r0, 8009408 <_vfiprintf_r+0x18>
 8009400:	6a03      	ldr	r3, [r0, #32]
 8009402:	b90b      	cbnz	r3, 8009408 <_vfiprintf_r+0x18>
 8009404:	f7ff fd76 	bl	8008ef4 <__sinit>
 8009408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800940a:	07d9      	lsls	r1, r3, #31
 800940c:	d405      	bmi.n	800941a <_vfiprintf_r+0x2a>
 800940e:	89ab      	ldrh	r3, [r5, #12]
 8009410:	059a      	lsls	r2, r3, #22
 8009412:	d402      	bmi.n	800941a <_vfiprintf_r+0x2a>
 8009414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009416:	f7ff ff74 	bl	8009302 <__retarget_lock_acquire_recursive>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	071b      	lsls	r3, r3, #28
 800941e:	d501      	bpl.n	8009424 <_vfiprintf_r+0x34>
 8009420:	692b      	ldr	r3, [r5, #16]
 8009422:	b99b      	cbnz	r3, 800944c <_vfiprintf_r+0x5c>
 8009424:	4629      	mov	r1, r5
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff fe8c 	bl	8009144 <__swsetup_r>
 800942c:	b170      	cbz	r0, 800944c <_vfiprintf_r+0x5c>
 800942e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009430:	07dc      	lsls	r4, r3, #31
 8009432:	d504      	bpl.n	800943e <_vfiprintf_r+0x4e>
 8009434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009438:	b01d      	add	sp, #116	@ 0x74
 800943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943e:	89ab      	ldrh	r3, [r5, #12]
 8009440:	0598      	lsls	r0, r3, #22
 8009442:	d4f7      	bmi.n	8009434 <_vfiprintf_r+0x44>
 8009444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009446:	f7ff ff5d 	bl	8009304 <__retarget_lock_release_recursive>
 800944a:	e7f3      	b.n	8009434 <_vfiprintf_r+0x44>
 800944c:	2300      	movs	r3, #0
 800944e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009450:	2320      	movs	r3, #32
 8009452:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009456:	f8cd 800c 	str.w	r8, [sp, #12]
 800945a:	2330      	movs	r3, #48	@ 0x30
 800945c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800960c <_vfiprintf_r+0x21c>
 8009460:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009464:	f04f 0901 	mov.w	r9, #1
 8009468:	4623      	mov	r3, r4
 800946a:	469a      	mov	sl, r3
 800946c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009470:	b10a      	cbz	r2, 8009476 <_vfiprintf_r+0x86>
 8009472:	2a25      	cmp	r2, #37	@ 0x25
 8009474:	d1f9      	bne.n	800946a <_vfiprintf_r+0x7a>
 8009476:	ebba 0b04 	subs.w	fp, sl, r4
 800947a:	d00b      	beq.n	8009494 <_vfiprintf_r+0xa4>
 800947c:	465b      	mov	r3, fp
 800947e:	4622      	mov	r2, r4
 8009480:	4629      	mov	r1, r5
 8009482:	4630      	mov	r0, r6
 8009484:	f7ff ffa1 	bl	80093ca <__sfputs_r>
 8009488:	3001      	adds	r0, #1
 800948a:	f000 80a7 	beq.w	80095dc <_vfiprintf_r+0x1ec>
 800948e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009490:	445a      	add	r2, fp
 8009492:	9209      	str	r2, [sp, #36]	@ 0x24
 8009494:	f89a 3000 	ldrb.w	r3, [sl]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 809f 	beq.w	80095dc <_vfiprintf_r+0x1ec>
 800949e:	2300      	movs	r3, #0
 80094a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094a8:	f10a 0a01 	add.w	sl, sl, #1
 80094ac:	9304      	str	r3, [sp, #16]
 80094ae:	9307      	str	r3, [sp, #28]
 80094b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80094b6:	4654      	mov	r4, sl
 80094b8:	2205      	movs	r2, #5
 80094ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094be:	4853      	ldr	r0, [pc, #332]	@ (800960c <_vfiprintf_r+0x21c>)
 80094c0:	f7f6 feae 	bl	8000220 <memchr>
 80094c4:	9a04      	ldr	r2, [sp, #16]
 80094c6:	b9d8      	cbnz	r0, 8009500 <_vfiprintf_r+0x110>
 80094c8:	06d1      	lsls	r1, r2, #27
 80094ca:	bf44      	itt	mi
 80094cc:	2320      	movmi	r3, #32
 80094ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094d2:	0713      	lsls	r3, r2, #28
 80094d4:	bf44      	itt	mi
 80094d6:	232b      	movmi	r3, #43	@ 0x2b
 80094d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094dc:	f89a 3000 	ldrb.w	r3, [sl]
 80094e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80094e2:	d015      	beq.n	8009510 <_vfiprintf_r+0x120>
 80094e4:	9a07      	ldr	r2, [sp, #28]
 80094e6:	4654      	mov	r4, sl
 80094e8:	2000      	movs	r0, #0
 80094ea:	f04f 0c0a 	mov.w	ip, #10
 80094ee:	4621      	mov	r1, r4
 80094f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094f4:	3b30      	subs	r3, #48	@ 0x30
 80094f6:	2b09      	cmp	r3, #9
 80094f8:	d94b      	bls.n	8009592 <_vfiprintf_r+0x1a2>
 80094fa:	b1b0      	cbz	r0, 800952a <_vfiprintf_r+0x13a>
 80094fc:	9207      	str	r2, [sp, #28]
 80094fe:	e014      	b.n	800952a <_vfiprintf_r+0x13a>
 8009500:	eba0 0308 	sub.w	r3, r0, r8
 8009504:	fa09 f303 	lsl.w	r3, r9, r3
 8009508:	4313      	orrs	r3, r2
 800950a:	9304      	str	r3, [sp, #16]
 800950c:	46a2      	mov	sl, r4
 800950e:	e7d2      	b.n	80094b6 <_vfiprintf_r+0xc6>
 8009510:	9b03      	ldr	r3, [sp, #12]
 8009512:	1d19      	adds	r1, r3, #4
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	9103      	str	r1, [sp, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	bfbb      	ittet	lt
 800951c:	425b      	neglt	r3, r3
 800951e:	f042 0202 	orrlt.w	r2, r2, #2
 8009522:	9307      	strge	r3, [sp, #28]
 8009524:	9307      	strlt	r3, [sp, #28]
 8009526:	bfb8      	it	lt
 8009528:	9204      	strlt	r2, [sp, #16]
 800952a:	7823      	ldrb	r3, [r4, #0]
 800952c:	2b2e      	cmp	r3, #46	@ 0x2e
 800952e:	d10a      	bne.n	8009546 <_vfiprintf_r+0x156>
 8009530:	7863      	ldrb	r3, [r4, #1]
 8009532:	2b2a      	cmp	r3, #42	@ 0x2a
 8009534:	d132      	bne.n	800959c <_vfiprintf_r+0x1ac>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	1d1a      	adds	r2, r3, #4
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	9203      	str	r2, [sp, #12]
 800953e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009542:	3402      	adds	r4, #2
 8009544:	9305      	str	r3, [sp, #20]
 8009546:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800961c <_vfiprintf_r+0x22c>
 800954a:	7821      	ldrb	r1, [r4, #0]
 800954c:	2203      	movs	r2, #3
 800954e:	4650      	mov	r0, sl
 8009550:	f7f6 fe66 	bl	8000220 <memchr>
 8009554:	b138      	cbz	r0, 8009566 <_vfiprintf_r+0x176>
 8009556:	9b04      	ldr	r3, [sp, #16]
 8009558:	eba0 000a 	sub.w	r0, r0, sl
 800955c:	2240      	movs	r2, #64	@ 0x40
 800955e:	4082      	lsls	r2, r0
 8009560:	4313      	orrs	r3, r2
 8009562:	3401      	adds	r4, #1
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956a:	4829      	ldr	r0, [pc, #164]	@ (8009610 <_vfiprintf_r+0x220>)
 800956c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009570:	2206      	movs	r2, #6
 8009572:	f7f6 fe55 	bl	8000220 <memchr>
 8009576:	2800      	cmp	r0, #0
 8009578:	d03f      	beq.n	80095fa <_vfiprintf_r+0x20a>
 800957a:	4b26      	ldr	r3, [pc, #152]	@ (8009614 <_vfiprintf_r+0x224>)
 800957c:	bb1b      	cbnz	r3, 80095c6 <_vfiprintf_r+0x1d6>
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	3307      	adds	r3, #7
 8009582:	f023 0307 	bic.w	r3, r3, #7
 8009586:	3308      	adds	r3, #8
 8009588:	9303      	str	r3, [sp, #12]
 800958a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800958c:	443b      	add	r3, r7
 800958e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009590:	e76a      	b.n	8009468 <_vfiprintf_r+0x78>
 8009592:	fb0c 3202 	mla	r2, ip, r2, r3
 8009596:	460c      	mov	r4, r1
 8009598:	2001      	movs	r0, #1
 800959a:	e7a8      	b.n	80094ee <_vfiprintf_r+0xfe>
 800959c:	2300      	movs	r3, #0
 800959e:	3401      	adds	r4, #1
 80095a0:	9305      	str	r3, [sp, #20]
 80095a2:	4619      	mov	r1, r3
 80095a4:	f04f 0c0a 	mov.w	ip, #10
 80095a8:	4620      	mov	r0, r4
 80095aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ae:	3a30      	subs	r2, #48	@ 0x30
 80095b0:	2a09      	cmp	r2, #9
 80095b2:	d903      	bls.n	80095bc <_vfiprintf_r+0x1cc>
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0c6      	beq.n	8009546 <_vfiprintf_r+0x156>
 80095b8:	9105      	str	r1, [sp, #20]
 80095ba:	e7c4      	b.n	8009546 <_vfiprintf_r+0x156>
 80095bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80095c0:	4604      	mov	r4, r0
 80095c2:	2301      	movs	r3, #1
 80095c4:	e7f0      	b.n	80095a8 <_vfiprintf_r+0x1b8>
 80095c6:	ab03      	add	r3, sp, #12
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	462a      	mov	r2, r5
 80095cc:	4b12      	ldr	r3, [pc, #72]	@ (8009618 <_vfiprintf_r+0x228>)
 80095ce:	a904      	add	r1, sp, #16
 80095d0:	4630      	mov	r0, r6
 80095d2:	f3af 8000 	nop.w
 80095d6:	4607      	mov	r7, r0
 80095d8:	1c78      	adds	r0, r7, #1
 80095da:	d1d6      	bne.n	800958a <_vfiprintf_r+0x19a>
 80095dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095de:	07d9      	lsls	r1, r3, #31
 80095e0:	d405      	bmi.n	80095ee <_vfiprintf_r+0x1fe>
 80095e2:	89ab      	ldrh	r3, [r5, #12]
 80095e4:	059a      	lsls	r2, r3, #22
 80095e6:	d402      	bmi.n	80095ee <_vfiprintf_r+0x1fe>
 80095e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ea:	f7ff fe8b 	bl	8009304 <__retarget_lock_release_recursive>
 80095ee:	89ab      	ldrh	r3, [r5, #12]
 80095f0:	065b      	lsls	r3, r3, #25
 80095f2:	f53f af1f 	bmi.w	8009434 <_vfiprintf_r+0x44>
 80095f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095f8:	e71e      	b.n	8009438 <_vfiprintf_r+0x48>
 80095fa:	ab03      	add	r3, sp, #12
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	462a      	mov	r2, r5
 8009600:	4b05      	ldr	r3, [pc, #20]	@ (8009618 <_vfiprintf_r+0x228>)
 8009602:	a904      	add	r1, sp, #16
 8009604:	4630      	mov	r0, r6
 8009606:	f000 f879 	bl	80096fc <_printf_i>
 800960a:	e7e4      	b.n	80095d6 <_vfiprintf_r+0x1e6>
 800960c:	08009c14 	.word	0x08009c14
 8009610:	08009c1e 	.word	0x08009c1e
 8009614:	00000000 	.word	0x00000000
 8009618:	080093cb 	.word	0x080093cb
 800961c:	08009c1a 	.word	0x08009c1a

08009620 <_printf_common>:
 8009620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	4616      	mov	r6, r2
 8009626:	4698      	mov	r8, r3
 8009628:	688a      	ldr	r2, [r1, #8]
 800962a:	690b      	ldr	r3, [r1, #16]
 800962c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009630:	4293      	cmp	r3, r2
 8009632:	bfb8      	it	lt
 8009634:	4613      	movlt	r3, r2
 8009636:	6033      	str	r3, [r6, #0]
 8009638:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800963c:	4607      	mov	r7, r0
 800963e:	460c      	mov	r4, r1
 8009640:	b10a      	cbz	r2, 8009646 <_printf_common+0x26>
 8009642:	3301      	adds	r3, #1
 8009644:	6033      	str	r3, [r6, #0]
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	0699      	lsls	r1, r3, #26
 800964a:	bf42      	ittt	mi
 800964c:	6833      	ldrmi	r3, [r6, #0]
 800964e:	3302      	addmi	r3, #2
 8009650:	6033      	strmi	r3, [r6, #0]
 8009652:	6825      	ldr	r5, [r4, #0]
 8009654:	f015 0506 	ands.w	r5, r5, #6
 8009658:	d106      	bne.n	8009668 <_printf_common+0x48>
 800965a:	f104 0a19 	add.w	sl, r4, #25
 800965e:	68e3      	ldr	r3, [r4, #12]
 8009660:	6832      	ldr	r2, [r6, #0]
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	42ab      	cmp	r3, r5
 8009666:	dc26      	bgt.n	80096b6 <_printf_common+0x96>
 8009668:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800966c:	6822      	ldr	r2, [r4, #0]
 800966e:	3b00      	subs	r3, #0
 8009670:	bf18      	it	ne
 8009672:	2301      	movne	r3, #1
 8009674:	0692      	lsls	r2, r2, #26
 8009676:	d42b      	bmi.n	80096d0 <_printf_common+0xb0>
 8009678:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800967c:	4641      	mov	r1, r8
 800967e:	4638      	mov	r0, r7
 8009680:	47c8      	blx	r9
 8009682:	3001      	adds	r0, #1
 8009684:	d01e      	beq.n	80096c4 <_printf_common+0xa4>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	6922      	ldr	r2, [r4, #16]
 800968a:	f003 0306 	and.w	r3, r3, #6
 800968e:	2b04      	cmp	r3, #4
 8009690:	bf02      	ittt	eq
 8009692:	68e5      	ldreq	r5, [r4, #12]
 8009694:	6833      	ldreq	r3, [r6, #0]
 8009696:	1aed      	subeq	r5, r5, r3
 8009698:	68a3      	ldr	r3, [r4, #8]
 800969a:	bf0c      	ite	eq
 800969c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096a0:	2500      	movne	r5, #0
 80096a2:	4293      	cmp	r3, r2
 80096a4:	bfc4      	itt	gt
 80096a6:	1a9b      	subgt	r3, r3, r2
 80096a8:	18ed      	addgt	r5, r5, r3
 80096aa:	2600      	movs	r6, #0
 80096ac:	341a      	adds	r4, #26
 80096ae:	42b5      	cmp	r5, r6
 80096b0:	d11a      	bne.n	80096e8 <_printf_common+0xc8>
 80096b2:	2000      	movs	r0, #0
 80096b4:	e008      	b.n	80096c8 <_printf_common+0xa8>
 80096b6:	2301      	movs	r3, #1
 80096b8:	4652      	mov	r2, sl
 80096ba:	4641      	mov	r1, r8
 80096bc:	4638      	mov	r0, r7
 80096be:	47c8      	blx	r9
 80096c0:	3001      	adds	r0, #1
 80096c2:	d103      	bne.n	80096cc <_printf_common+0xac>
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096cc:	3501      	adds	r5, #1
 80096ce:	e7c6      	b.n	800965e <_printf_common+0x3e>
 80096d0:	18e1      	adds	r1, r4, r3
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	2030      	movs	r0, #48	@ 0x30
 80096d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096da:	4422      	add	r2, r4
 80096dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096e4:	3302      	adds	r3, #2
 80096e6:	e7c7      	b.n	8009678 <_printf_common+0x58>
 80096e8:	2301      	movs	r3, #1
 80096ea:	4622      	mov	r2, r4
 80096ec:	4641      	mov	r1, r8
 80096ee:	4638      	mov	r0, r7
 80096f0:	47c8      	blx	r9
 80096f2:	3001      	adds	r0, #1
 80096f4:	d0e6      	beq.n	80096c4 <_printf_common+0xa4>
 80096f6:	3601      	adds	r6, #1
 80096f8:	e7d9      	b.n	80096ae <_printf_common+0x8e>
	...

080096fc <_printf_i>:
 80096fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009700:	7e0f      	ldrb	r7, [r1, #24]
 8009702:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009704:	2f78      	cmp	r7, #120	@ 0x78
 8009706:	4691      	mov	r9, r2
 8009708:	4680      	mov	r8, r0
 800970a:	460c      	mov	r4, r1
 800970c:	469a      	mov	sl, r3
 800970e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009712:	d807      	bhi.n	8009724 <_printf_i+0x28>
 8009714:	2f62      	cmp	r7, #98	@ 0x62
 8009716:	d80a      	bhi.n	800972e <_printf_i+0x32>
 8009718:	2f00      	cmp	r7, #0
 800971a:	f000 80d2 	beq.w	80098c2 <_printf_i+0x1c6>
 800971e:	2f58      	cmp	r7, #88	@ 0x58
 8009720:	f000 80b9 	beq.w	8009896 <_printf_i+0x19a>
 8009724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009728:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800972c:	e03a      	b.n	80097a4 <_printf_i+0xa8>
 800972e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009732:	2b15      	cmp	r3, #21
 8009734:	d8f6      	bhi.n	8009724 <_printf_i+0x28>
 8009736:	a101      	add	r1, pc, #4	@ (adr r1, 800973c <_printf_i+0x40>)
 8009738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800973c:	08009795 	.word	0x08009795
 8009740:	080097a9 	.word	0x080097a9
 8009744:	08009725 	.word	0x08009725
 8009748:	08009725 	.word	0x08009725
 800974c:	08009725 	.word	0x08009725
 8009750:	08009725 	.word	0x08009725
 8009754:	080097a9 	.word	0x080097a9
 8009758:	08009725 	.word	0x08009725
 800975c:	08009725 	.word	0x08009725
 8009760:	08009725 	.word	0x08009725
 8009764:	08009725 	.word	0x08009725
 8009768:	080098a9 	.word	0x080098a9
 800976c:	080097d3 	.word	0x080097d3
 8009770:	08009863 	.word	0x08009863
 8009774:	08009725 	.word	0x08009725
 8009778:	08009725 	.word	0x08009725
 800977c:	080098cb 	.word	0x080098cb
 8009780:	08009725 	.word	0x08009725
 8009784:	080097d3 	.word	0x080097d3
 8009788:	08009725 	.word	0x08009725
 800978c:	08009725 	.word	0x08009725
 8009790:	0800986b 	.word	0x0800986b
 8009794:	6833      	ldr	r3, [r6, #0]
 8009796:	1d1a      	adds	r2, r3, #4
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6032      	str	r2, [r6, #0]
 800979c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097a4:	2301      	movs	r3, #1
 80097a6:	e09d      	b.n	80098e4 <_printf_i+0x1e8>
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	6820      	ldr	r0, [r4, #0]
 80097ac:	1d19      	adds	r1, r3, #4
 80097ae:	6031      	str	r1, [r6, #0]
 80097b0:	0606      	lsls	r6, r0, #24
 80097b2:	d501      	bpl.n	80097b8 <_printf_i+0xbc>
 80097b4:	681d      	ldr	r5, [r3, #0]
 80097b6:	e003      	b.n	80097c0 <_printf_i+0xc4>
 80097b8:	0645      	lsls	r5, r0, #25
 80097ba:	d5fb      	bpl.n	80097b4 <_printf_i+0xb8>
 80097bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097c0:	2d00      	cmp	r5, #0
 80097c2:	da03      	bge.n	80097cc <_printf_i+0xd0>
 80097c4:	232d      	movs	r3, #45	@ 0x2d
 80097c6:	426d      	negs	r5, r5
 80097c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097cc:	4859      	ldr	r0, [pc, #356]	@ (8009934 <_printf_i+0x238>)
 80097ce:	230a      	movs	r3, #10
 80097d0:	e011      	b.n	80097f6 <_printf_i+0xfa>
 80097d2:	6821      	ldr	r1, [r4, #0]
 80097d4:	6833      	ldr	r3, [r6, #0]
 80097d6:	0608      	lsls	r0, r1, #24
 80097d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80097dc:	d402      	bmi.n	80097e4 <_printf_i+0xe8>
 80097de:	0649      	lsls	r1, r1, #25
 80097e0:	bf48      	it	mi
 80097e2:	b2ad      	uxthmi	r5, r5
 80097e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80097e6:	4853      	ldr	r0, [pc, #332]	@ (8009934 <_printf_i+0x238>)
 80097e8:	6033      	str	r3, [r6, #0]
 80097ea:	bf14      	ite	ne
 80097ec:	230a      	movne	r3, #10
 80097ee:	2308      	moveq	r3, #8
 80097f0:	2100      	movs	r1, #0
 80097f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097f6:	6866      	ldr	r6, [r4, #4]
 80097f8:	60a6      	str	r6, [r4, #8]
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	bfa2      	ittt	ge
 80097fe:	6821      	ldrge	r1, [r4, #0]
 8009800:	f021 0104 	bicge.w	r1, r1, #4
 8009804:	6021      	strge	r1, [r4, #0]
 8009806:	b90d      	cbnz	r5, 800980c <_printf_i+0x110>
 8009808:	2e00      	cmp	r6, #0
 800980a:	d04b      	beq.n	80098a4 <_printf_i+0x1a8>
 800980c:	4616      	mov	r6, r2
 800980e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009812:	fb03 5711 	mls	r7, r3, r1, r5
 8009816:	5dc7      	ldrb	r7, [r0, r7]
 8009818:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800981c:	462f      	mov	r7, r5
 800981e:	42bb      	cmp	r3, r7
 8009820:	460d      	mov	r5, r1
 8009822:	d9f4      	bls.n	800980e <_printf_i+0x112>
 8009824:	2b08      	cmp	r3, #8
 8009826:	d10b      	bne.n	8009840 <_printf_i+0x144>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	07df      	lsls	r7, r3, #31
 800982c:	d508      	bpl.n	8009840 <_printf_i+0x144>
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	6861      	ldr	r1, [r4, #4]
 8009832:	4299      	cmp	r1, r3
 8009834:	bfde      	ittt	le
 8009836:	2330      	movle	r3, #48	@ 0x30
 8009838:	f806 3c01 	strble.w	r3, [r6, #-1]
 800983c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009840:	1b92      	subs	r2, r2, r6
 8009842:	6122      	str	r2, [r4, #16]
 8009844:	f8cd a000 	str.w	sl, [sp]
 8009848:	464b      	mov	r3, r9
 800984a:	aa03      	add	r2, sp, #12
 800984c:	4621      	mov	r1, r4
 800984e:	4640      	mov	r0, r8
 8009850:	f7ff fee6 	bl	8009620 <_printf_common>
 8009854:	3001      	adds	r0, #1
 8009856:	d14a      	bne.n	80098ee <_printf_i+0x1f2>
 8009858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800985c:	b004      	add	sp, #16
 800985e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	f043 0320 	orr.w	r3, r3, #32
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	4833      	ldr	r0, [pc, #204]	@ (8009938 <_printf_i+0x23c>)
 800986c:	2778      	movs	r7, #120	@ 0x78
 800986e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	6831      	ldr	r1, [r6, #0]
 8009876:	061f      	lsls	r7, r3, #24
 8009878:	f851 5b04 	ldr.w	r5, [r1], #4
 800987c:	d402      	bmi.n	8009884 <_printf_i+0x188>
 800987e:	065f      	lsls	r7, r3, #25
 8009880:	bf48      	it	mi
 8009882:	b2ad      	uxthmi	r5, r5
 8009884:	6031      	str	r1, [r6, #0]
 8009886:	07d9      	lsls	r1, r3, #31
 8009888:	bf44      	itt	mi
 800988a:	f043 0320 	orrmi.w	r3, r3, #32
 800988e:	6023      	strmi	r3, [r4, #0]
 8009890:	b11d      	cbz	r5, 800989a <_printf_i+0x19e>
 8009892:	2310      	movs	r3, #16
 8009894:	e7ac      	b.n	80097f0 <_printf_i+0xf4>
 8009896:	4827      	ldr	r0, [pc, #156]	@ (8009934 <_printf_i+0x238>)
 8009898:	e7e9      	b.n	800986e <_printf_i+0x172>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	f023 0320 	bic.w	r3, r3, #32
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	e7f6      	b.n	8009892 <_printf_i+0x196>
 80098a4:	4616      	mov	r6, r2
 80098a6:	e7bd      	b.n	8009824 <_printf_i+0x128>
 80098a8:	6833      	ldr	r3, [r6, #0]
 80098aa:	6825      	ldr	r5, [r4, #0]
 80098ac:	6961      	ldr	r1, [r4, #20]
 80098ae:	1d18      	adds	r0, r3, #4
 80098b0:	6030      	str	r0, [r6, #0]
 80098b2:	062e      	lsls	r6, r5, #24
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	d501      	bpl.n	80098bc <_printf_i+0x1c0>
 80098b8:	6019      	str	r1, [r3, #0]
 80098ba:	e002      	b.n	80098c2 <_printf_i+0x1c6>
 80098bc:	0668      	lsls	r0, r5, #25
 80098be:	d5fb      	bpl.n	80098b8 <_printf_i+0x1bc>
 80098c0:	8019      	strh	r1, [r3, #0]
 80098c2:	2300      	movs	r3, #0
 80098c4:	6123      	str	r3, [r4, #16]
 80098c6:	4616      	mov	r6, r2
 80098c8:	e7bc      	b.n	8009844 <_printf_i+0x148>
 80098ca:	6833      	ldr	r3, [r6, #0]
 80098cc:	1d1a      	adds	r2, r3, #4
 80098ce:	6032      	str	r2, [r6, #0]
 80098d0:	681e      	ldr	r6, [r3, #0]
 80098d2:	6862      	ldr	r2, [r4, #4]
 80098d4:	2100      	movs	r1, #0
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7f6 fca2 	bl	8000220 <memchr>
 80098dc:	b108      	cbz	r0, 80098e2 <_printf_i+0x1e6>
 80098de:	1b80      	subs	r0, r0, r6
 80098e0:	6060      	str	r0, [r4, #4]
 80098e2:	6863      	ldr	r3, [r4, #4]
 80098e4:	6123      	str	r3, [r4, #16]
 80098e6:	2300      	movs	r3, #0
 80098e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098ec:	e7aa      	b.n	8009844 <_printf_i+0x148>
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	4632      	mov	r2, r6
 80098f2:	4649      	mov	r1, r9
 80098f4:	4640      	mov	r0, r8
 80098f6:	47d0      	blx	sl
 80098f8:	3001      	adds	r0, #1
 80098fa:	d0ad      	beq.n	8009858 <_printf_i+0x15c>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	079b      	lsls	r3, r3, #30
 8009900:	d413      	bmi.n	800992a <_printf_i+0x22e>
 8009902:	68e0      	ldr	r0, [r4, #12]
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	4298      	cmp	r0, r3
 8009908:	bfb8      	it	lt
 800990a:	4618      	movlt	r0, r3
 800990c:	e7a6      	b.n	800985c <_printf_i+0x160>
 800990e:	2301      	movs	r3, #1
 8009910:	4632      	mov	r2, r6
 8009912:	4649      	mov	r1, r9
 8009914:	4640      	mov	r0, r8
 8009916:	47d0      	blx	sl
 8009918:	3001      	adds	r0, #1
 800991a:	d09d      	beq.n	8009858 <_printf_i+0x15c>
 800991c:	3501      	adds	r5, #1
 800991e:	68e3      	ldr	r3, [r4, #12]
 8009920:	9903      	ldr	r1, [sp, #12]
 8009922:	1a5b      	subs	r3, r3, r1
 8009924:	42ab      	cmp	r3, r5
 8009926:	dcf2      	bgt.n	800990e <_printf_i+0x212>
 8009928:	e7eb      	b.n	8009902 <_printf_i+0x206>
 800992a:	2500      	movs	r5, #0
 800992c:	f104 0619 	add.w	r6, r4, #25
 8009930:	e7f5      	b.n	800991e <_printf_i+0x222>
 8009932:	bf00      	nop
 8009934:	08009c25 	.word	0x08009c25
 8009938:	08009c36 	.word	0x08009c36

0800993c <__sflush_r>:
 800993c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009944:	0716      	lsls	r6, r2, #28
 8009946:	4605      	mov	r5, r0
 8009948:	460c      	mov	r4, r1
 800994a:	d454      	bmi.n	80099f6 <__sflush_r+0xba>
 800994c:	684b      	ldr	r3, [r1, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	dc02      	bgt.n	8009958 <__sflush_r+0x1c>
 8009952:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009954:	2b00      	cmp	r3, #0
 8009956:	dd48      	ble.n	80099ea <__sflush_r+0xae>
 8009958:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800995a:	2e00      	cmp	r6, #0
 800995c:	d045      	beq.n	80099ea <__sflush_r+0xae>
 800995e:	2300      	movs	r3, #0
 8009960:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009964:	682f      	ldr	r7, [r5, #0]
 8009966:	6a21      	ldr	r1, [r4, #32]
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	d030      	beq.n	80099ce <__sflush_r+0x92>
 800996c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	0759      	lsls	r1, r3, #29
 8009972:	d505      	bpl.n	8009980 <__sflush_r+0x44>
 8009974:	6863      	ldr	r3, [r4, #4]
 8009976:	1ad2      	subs	r2, r2, r3
 8009978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800997a:	b10b      	cbz	r3, 8009980 <__sflush_r+0x44>
 800997c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800997e:	1ad2      	subs	r2, r2, r3
 8009980:	2300      	movs	r3, #0
 8009982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009984:	6a21      	ldr	r1, [r4, #32]
 8009986:	4628      	mov	r0, r5
 8009988:	47b0      	blx	r6
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	d106      	bne.n	800999e <__sflush_r+0x62>
 8009990:	6829      	ldr	r1, [r5, #0]
 8009992:	291d      	cmp	r1, #29
 8009994:	d82b      	bhi.n	80099ee <__sflush_r+0xb2>
 8009996:	4a2a      	ldr	r2, [pc, #168]	@ (8009a40 <__sflush_r+0x104>)
 8009998:	410a      	asrs	r2, r1
 800999a:	07d6      	lsls	r6, r2, #31
 800999c:	d427      	bmi.n	80099ee <__sflush_r+0xb2>
 800999e:	2200      	movs	r2, #0
 80099a0:	6062      	str	r2, [r4, #4]
 80099a2:	04d9      	lsls	r1, r3, #19
 80099a4:	6922      	ldr	r2, [r4, #16]
 80099a6:	6022      	str	r2, [r4, #0]
 80099a8:	d504      	bpl.n	80099b4 <__sflush_r+0x78>
 80099aa:	1c42      	adds	r2, r0, #1
 80099ac:	d101      	bne.n	80099b2 <__sflush_r+0x76>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	b903      	cbnz	r3, 80099b4 <__sflush_r+0x78>
 80099b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80099b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099b6:	602f      	str	r7, [r5, #0]
 80099b8:	b1b9      	cbz	r1, 80099ea <__sflush_r+0xae>
 80099ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099be:	4299      	cmp	r1, r3
 80099c0:	d002      	beq.n	80099c8 <__sflush_r+0x8c>
 80099c2:	4628      	mov	r0, r5
 80099c4:	f7ff fca0 	bl	8009308 <_free_r>
 80099c8:	2300      	movs	r3, #0
 80099ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80099cc:	e00d      	b.n	80099ea <__sflush_r+0xae>
 80099ce:	2301      	movs	r3, #1
 80099d0:	4628      	mov	r0, r5
 80099d2:	47b0      	blx	r6
 80099d4:	4602      	mov	r2, r0
 80099d6:	1c50      	adds	r0, r2, #1
 80099d8:	d1c9      	bne.n	800996e <__sflush_r+0x32>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0c6      	beq.n	800996e <__sflush_r+0x32>
 80099e0:	2b1d      	cmp	r3, #29
 80099e2:	d001      	beq.n	80099e8 <__sflush_r+0xac>
 80099e4:	2b16      	cmp	r3, #22
 80099e6:	d11e      	bne.n	8009a26 <__sflush_r+0xea>
 80099e8:	602f      	str	r7, [r5, #0]
 80099ea:	2000      	movs	r0, #0
 80099ec:	e022      	b.n	8009a34 <__sflush_r+0xf8>
 80099ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099f2:	b21b      	sxth	r3, r3
 80099f4:	e01b      	b.n	8009a2e <__sflush_r+0xf2>
 80099f6:	690f      	ldr	r7, [r1, #16]
 80099f8:	2f00      	cmp	r7, #0
 80099fa:	d0f6      	beq.n	80099ea <__sflush_r+0xae>
 80099fc:	0793      	lsls	r3, r2, #30
 80099fe:	680e      	ldr	r6, [r1, #0]
 8009a00:	bf08      	it	eq
 8009a02:	694b      	ldreq	r3, [r1, #20]
 8009a04:	600f      	str	r7, [r1, #0]
 8009a06:	bf18      	it	ne
 8009a08:	2300      	movne	r3, #0
 8009a0a:	eba6 0807 	sub.w	r8, r6, r7
 8009a0e:	608b      	str	r3, [r1, #8]
 8009a10:	f1b8 0f00 	cmp.w	r8, #0
 8009a14:	dde9      	ble.n	80099ea <__sflush_r+0xae>
 8009a16:	6a21      	ldr	r1, [r4, #32]
 8009a18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a1a:	4643      	mov	r3, r8
 8009a1c:	463a      	mov	r2, r7
 8009a1e:	4628      	mov	r0, r5
 8009a20:	47b0      	blx	r6
 8009a22:	2800      	cmp	r0, #0
 8009a24:	dc08      	bgt.n	8009a38 <__sflush_r+0xfc>
 8009a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a2e:	81a3      	strh	r3, [r4, #12]
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a38:	4407      	add	r7, r0
 8009a3a:	eba8 0800 	sub.w	r8, r8, r0
 8009a3e:	e7e7      	b.n	8009a10 <__sflush_r+0xd4>
 8009a40:	dfbffffe 	.word	0xdfbffffe

08009a44 <_fflush_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	690b      	ldr	r3, [r1, #16]
 8009a48:	4605      	mov	r5, r0
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	b913      	cbnz	r3, 8009a54 <_fflush_r+0x10>
 8009a4e:	2500      	movs	r5, #0
 8009a50:	4628      	mov	r0, r5
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	b118      	cbz	r0, 8009a5e <_fflush_r+0x1a>
 8009a56:	6a03      	ldr	r3, [r0, #32]
 8009a58:	b90b      	cbnz	r3, 8009a5e <_fflush_r+0x1a>
 8009a5a:	f7ff fa4b 	bl	8008ef4 <__sinit>
 8009a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0f3      	beq.n	8009a4e <_fflush_r+0xa>
 8009a66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a68:	07d0      	lsls	r0, r2, #31
 8009a6a:	d404      	bmi.n	8009a76 <_fflush_r+0x32>
 8009a6c:	0599      	lsls	r1, r3, #22
 8009a6e:	d402      	bmi.n	8009a76 <_fflush_r+0x32>
 8009a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a72:	f7ff fc46 	bl	8009302 <__retarget_lock_acquire_recursive>
 8009a76:	4628      	mov	r0, r5
 8009a78:	4621      	mov	r1, r4
 8009a7a:	f7ff ff5f 	bl	800993c <__sflush_r>
 8009a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a80:	07da      	lsls	r2, r3, #31
 8009a82:	4605      	mov	r5, r0
 8009a84:	d4e4      	bmi.n	8009a50 <_fflush_r+0xc>
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	059b      	lsls	r3, r3, #22
 8009a8a:	d4e1      	bmi.n	8009a50 <_fflush_r+0xc>
 8009a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a8e:	f7ff fc39 	bl	8009304 <__retarget_lock_release_recursive>
 8009a92:	e7dd      	b.n	8009a50 <_fflush_r+0xc>

08009a94 <__swhatbuf_r>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	460c      	mov	r4, r1
 8009a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	b096      	sub	sp, #88	@ 0x58
 8009aa0:	4615      	mov	r5, r2
 8009aa2:	461e      	mov	r6, r3
 8009aa4:	da0d      	bge.n	8009ac2 <__swhatbuf_r+0x2e>
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009aac:	f04f 0100 	mov.w	r1, #0
 8009ab0:	bf14      	ite	ne
 8009ab2:	2340      	movne	r3, #64	@ 0x40
 8009ab4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ab8:	2000      	movs	r0, #0
 8009aba:	6031      	str	r1, [r6, #0]
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	b016      	add	sp, #88	@ 0x58
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	466a      	mov	r2, sp
 8009ac4:	f000 f848 	bl	8009b58 <_fstat_r>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	dbec      	blt.n	8009aa6 <__swhatbuf_r+0x12>
 8009acc:	9901      	ldr	r1, [sp, #4]
 8009ace:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ad2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ad6:	4259      	negs	r1, r3
 8009ad8:	4159      	adcs	r1, r3
 8009ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ade:	e7eb      	b.n	8009ab8 <__swhatbuf_r+0x24>

08009ae0 <__smakebuf_r>:
 8009ae0:	898b      	ldrh	r3, [r1, #12]
 8009ae2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ae4:	079d      	lsls	r5, r3, #30
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	460c      	mov	r4, r1
 8009aea:	d507      	bpl.n	8009afc <__smakebuf_r+0x1c>
 8009aec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	6123      	str	r3, [r4, #16]
 8009af4:	2301      	movs	r3, #1
 8009af6:	6163      	str	r3, [r4, #20]
 8009af8:	b003      	add	sp, #12
 8009afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afc:	ab01      	add	r3, sp, #4
 8009afe:	466a      	mov	r2, sp
 8009b00:	f7ff ffc8 	bl	8009a94 <__swhatbuf_r>
 8009b04:	9f00      	ldr	r7, [sp, #0]
 8009b06:	4605      	mov	r5, r0
 8009b08:	4639      	mov	r1, r7
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7ff f8da 	bl	8008cc4 <_malloc_r>
 8009b10:	b948      	cbnz	r0, 8009b26 <__smakebuf_r+0x46>
 8009b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b16:	059a      	lsls	r2, r3, #22
 8009b18:	d4ee      	bmi.n	8009af8 <__smakebuf_r+0x18>
 8009b1a:	f023 0303 	bic.w	r3, r3, #3
 8009b1e:	f043 0302 	orr.w	r3, r3, #2
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	e7e2      	b.n	8009aec <__smakebuf_r+0xc>
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	6020      	str	r0, [r4, #0]
 8009b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b36:	b15b      	cbz	r3, 8009b50 <__smakebuf_r+0x70>
 8009b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f000 f81d 	bl	8009b7c <_isatty_r>
 8009b42:	b128      	cbz	r0, 8009b50 <__smakebuf_r+0x70>
 8009b44:	89a3      	ldrh	r3, [r4, #12]
 8009b46:	f023 0303 	bic.w	r3, r3, #3
 8009b4a:	f043 0301 	orr.w	r3, r3, #1
 8009b4e:	81a3      	strh	r3, [r4, #12]
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	431d      	orrs	r5, r3
 8009b54:	81a5      	strh	r5, [r4, #12]
 8009b56:	e7cf      	b.n	8009af8 <__smakebuf_r+0x18>

08009b58 <_fstat_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	@ (8009b78 <_fstat_r+0x20>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	4611      	mov	r1, r2
 8009b64:	602b      	str	r3, [r5, #0]
 8009b66:	f7f7 f9f8 	bl	8000f5a <_fstat>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d102      	bne.n	8009b74 <_fstat_r+0x1c>
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	b103      	cbz	r3, 8009b74 <_fstat_r+0x1c>
 8009b72:	6023      	str	r3, [r4, #0]
 8009b74:	bd38      	pop	{r3, r4, r5, pc}
 8009b76:	bf00      	nop
 8009b78:	2000041c 	.word	0x2000041c

08009b7c <_isatty_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d06      	ldr	r5, [pc, #24]	@ (8009b98 <_isatty_r+0x1c>)
 8009b80:	2300      	movs	r3, #0
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7f7 f9f7 	bl	8000f7a <_isatty>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_isatty_r+0x1a>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_isatty_r+0x1a>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	2000041c 	.word	0x2000041c

08009b9c <_init>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr

08009ba8 <_fini>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	bf00      	nop
 8009bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bae:	bc08      	pop	{r3}
 8009bb0:	469e      	mov	lr, r3
 8009bb2:	4770      	bx	lr
