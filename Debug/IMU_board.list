
IMU_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b53c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800b714  0800b714  0000c714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8f8  0800b8f8  0000d0d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8f8  0800b8f8  0000c8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b900  0800b900  0000d0d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b900  0800b900  0000c900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800b908  0800b908  0000c908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  0800b910  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  200000d4  0800b9e4  0000d0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800b9e4  0000d52c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003025c  00000000  00000000  0000d104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d2  00000000  00000000  0003d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a8  00000000  00000000  00041738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001922  00000000  00000000  000437e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002467e  00000000  00000000  00045102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f715  00000000  00000000  00069780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db0da  00000000  00000000  00088e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163f6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ffc  00000000  00000000  00163fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0016cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000d4 	.word	0x200000d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b6fc 	.word	0x0800b6fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d8 	.word	0x200000d8
 8000214:	0800b6fc 	.word	0x0800b6fc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include <string.h>
#include <ChampiCan.h>


ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	4a15      	ldr	r2, [pc, #84]	@ (8000da4 <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x60>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	2224      	movs	r2, #36	@ 0x24
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f00a fc44 	bl	800b5f0 <memset>

	handle_fdcan_ = handle_fdcan;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24
	tx_header_.MessageMarker = 0;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	0800b824 	.word	0x0800b824

08000da8 <_ZN9ChampiCanC1Ev>:

ChampiCan::ChampiCan() = default;
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <_ZN9ChampiCanC1Ev+0x2c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	2224      	movs	r2, #36	@ 0x24
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00a fc13 	bl	800b5f0 <memset>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	0800b824 	.word	0x0800b824

08000dd8 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 fd5d 	bl	80078a4 <HAL_FDCAN_Start>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	bf14      	ite	ne
 8000df0:	2301      	movne	r3, #1
 8000df2:	2300      	moveq	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e011      	b.n	8000e22 <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f006 fdca 	bl	80079a0 <HAL_FDCAN_ActivateNotification>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf14      	ite	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	2300      	moveq	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_ZN9ChampiCan10send_frameEmPhm>:
    {
        ret = 1;
    }
    return ret;
}
int ChampiCan::send_frame(uint32_t id, uint8_t *frame_data, uint32_t size) {
 8000e2a:	b590      	push	{r4, r7, lr}
 8000e2c:	b087      	sub	sp, #28
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	603b      	str	r3, [r7, #0]
	tx_header_.Identifier = id;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	609a      	str	r2, [r3, #8]
	tx_header_.DataLength = size;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	615a      	str	r2, [r3, #20]

    // D'abord, on attend que la FIFO ne soit plus pleine. J'ai eu des problèmes en essayant d'envoyer 5 frames d'un coup.
    // En regardant la doc, j'ai vu que la fifo est de 4 en effet. TODO à approfondir.
    // Je mets un timeout de 50ms. C'est petit exprès pour voir si on a encore des problèmes après.
    uint32_t ret = HAL_FDCAN_GetTxFifoFreeLevel(handle_fdcan_);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 fd97 	bl	800797c <HAL_FDCAN_GetTxFifoFreeLevel>
 8000e4e:	6178      	str	r0, [r7, #20]
    uint32_t start_waiting = HAL_GetTick();
 8000e50:	f006 f99e 	bl	8007190 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]
    while (start_waiting + 50 > HAL_GetTick() && ret == 0) {
 8000e56:	e005      	b.n	8000e64 <_ZN9ChampiCan10send_frameEmPhm+0x3a>
        ret = HAL_FDCAN_GetTxFifoFreeLevel(handle_fdcan_);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 fd8d 	bl	800797c <HAL_FDCAN_GetTxFifoFreeLevel>
 8000e62:	6178      	str	r0, [r7, #20]
    while (start_waiting + 50 > HAL_GetTick() && ret == 0) {
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000e6a:	f006 f991 	bl	8007190 <HAL_GetTick>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	429c      	cmp	r4, r3
 8000e72:	d904      	bls.n	8000e7e <_ZN9ChampiCan10send_frameEmPhm+0x54>
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <_ZN9ChampiCan10send_frameEmPhm+0x54>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <_ZN9ChampiCan10send_frameEmPhm+0x56>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1e9      	bne.n	8000e58 <_ZN9ChampiCan10send_frameEmPhm+0x2e>
    }

    return HAL_FDCAN_AddMessageToTxFifoQ(handle_fdcan_, &tx_header_, frame_data);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6858      	ldr	r0, [r3, #4]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3308      	adds	r3, #8
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f006 fd30 	bl	80078f4 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd90      	pop	{r4, r7, pc}
	...

08000ea0 <_ZN9ChampiCan8send_msgEmPhm>:

int ChampiCan::send_msg(uint32_t id, uint8_t *msg, uint32_t msg_size) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]

	static uint16_t msg_number = 0;

	if (msg_size > 512) {
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000eb4:	d901      	bls.n	8000eba <_ZN9ChampiCan8send_msgEmPhm+0x1a>
		return 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e084      	b.n	8000fc4 <_ZN9ChampiCan8send_msgEmPhm+0x124>
	}

	uint8_t frame_data[8] = {0};
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
	uint16_t nb_frames = (uint16_t) msg_size / 6 + (msg_size % 6 > 0 ? 1 : 0);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4a41      	ldr	r2, [pc, #260]	@ (8000fcc <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	b298      	uxth	r0, r3
 8000ed0:	6839      	ldr	r1, [r7, #0]
 8000ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fcc <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000ed4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ed8:	089a      	lsrs	r2, r3, #2
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	1aca      	subs	r2, r1, r3
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	d001      	beq.n	8000eec <_ZN9ChampiCan8send_msgEmPhm+0x4c>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <_ZN9ChampiCan8send_msgEmPhm+0x4e>
 8000eec:	2300      	movs	r3, #0
 8000eee:	4403      	add	r3, r0
 8000ef0:	83fb      	strh	r3, [r7, #30]

	for(uint16_t i=0; i<nb_frames; i++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000ef6:	e053      	b.n	8000fa0 <_ZN9ChampiCan8send_msgEmPhm+0x100>

		// Frame descriptor
		uint16_t frame_descriptor = msg_number << 12 | (nb_frames << 6) | i;
 8000ef8:	4b35      	ldr	r3, [pc, #212]	@ (8000fd0 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	031b      	lsls	r3, r3, #12
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	8bfb      	ldrh	r3, [r7, #30]
 8000f02:	019b      	lsls	r3, r3, #6
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	827b      	strh	r3, [r7, #18]
		memcpy(frame_data, (char*)&frame_descriptor, 2);
 8000f16:	8a7b      	ldrh	r3, [r7, #18]
 8000f18:	82bb      	strh	r3, [r7, #20]

		// Data size
		int num_bytes_frame = 6;
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	623b      	str	r3, [r7, #32]
		if(i==nb_frames-1) {
 8000f1e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f20:	8bfb      	ldrh	r3, [r7, #30]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d10a      	bne.n	8000f3e <_ZN9ChampiCan8send_msgEmPhm+0x9e>
			num_bytes_frame = msg_size % 6;
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000f2c:	fba3 2301 	umull	r2, r3, r3, r1
 8000f30:	089a      	lsrs	r2, r3, #2
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	1aca      	subs	r2, r1, r3
 8000f3c:	623a      	str	r2, [r7, #32]
		}

		// Data
		memcpy(frame_data+2, msg + i*6, num_bytes_frame);
 8000f3e:	f107 0014 	add.w	r0, r7, #20
 8000f42:	3002      	adds	r0, #2
 8000f44:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	461a      	mov	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	6a3a      	ldr	r2, [r7, #32]
 8000f56:	4619      	mov	r1, r3
 8000f58:	f00a fb78 	bl	800b64c <memcpy>

		// Send
		if(send_frame(id, frame_data, num_bytes_frame+2) != 0) {
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	f107 0214 	add.w	r2, r7, #20
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff ff5f 	bl	8000e2a <_ZN9ChampiCan10send_frameEmPhm>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf14      	ite	ne
 8000f72:	2301      	movne	r3, #1
 8000f74:	2300      	moveq	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00e      	beq.n	8000f9a <_ZN9ChampiCan8send_msgEmPhm+0xfa>
			msg_number = (msg_number + 1) % 4;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	425a      	negs	r2, r3
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	bf58      	it	pl
 8000f8e:	4253      	negpl	r3, r2
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000f94:	801a      	strh	r2, [r3, #0]
			return 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e014      	b.n	8000fc4 <_ZN9ChampiCan8send_msgEmPhm+0x124>
	for(uint16_t i=0; i<nb_frames; i++) {
 8000f9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000fa0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000fa2:	8bfb      	ldrh	r3, [r7, #30]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3a7      	bcc.n	8000ef8 <_ZN9ChampiCan8send_msgEmPhm+0x58>
		}
	}
    msg_number = (msg_number + 1) % 4;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	425a      	negs	r2, r3
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	f002 0203 	and.w	r2, r2, #3
 8000fb8:	bf58      	it	pl
 8000fba:	4253      	negpl	r3, r2
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000fc0:	801a      	strh	r2, [r3, #0]
    return 0;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3728      	adds	r7, #40	@ 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	aaaaaaab 	.word	0xaaaaaaab
 8000fd0:	200000f0 	.word	0x200000f0

08000fd4 <_ZN9ChampiCanD1Ev>:


ChampiCan::~ChampiCan() = default;
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <_ZN9ChampiCanD1Ev+0x1c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	0800b824 	.word	0x0800b824

08000ff4 <_ZN9ChampiCanD0Ev>:
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ffe9 	bl	8000fd4 <_ZN9ChampiCanD1Ev>
 8001002:	212c      	movs	r1, #44	@ 0x2c
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f00a fadb 	bl	800b5c0 <_ZdlPvj>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_ZN11ChampiStateC1Ev>:
 *      Author: arusso
 */

#include <ChampiState.h>

ChampiState::ChampiState() = default;
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	4a07      	ldr	r2, [pc, #28]	@ (800103c <_ZN11ChampiStateC1Ev+0x28>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3324      	adds	r3, #36	@ 0x24
 8001026:	2278      	movs	r2, #120	@ 0x78
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f00a fae0 	bl	800b5f0 <memset>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	0800b834 	.word	0x0800b834

08001040 <_ZN11ChampiStateC1EP9ChampiCanm>:

ChampiState::ChampiState(ChampiCan *champi_can_interface, uint32_t tx_period_ms) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <_ZN11ChampiStateC1EP9ChampiCanm+0x58>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3324      	adds	r3, #36	@ 0x24
 8001056:	2278      	movs	r2, #120	@ 0x78
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00a fac8 	bl	800b5f0 <memset>
    status_msg_ = msgs_can_Status_init_zero;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3304      	adds	r3, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
    status_msg_.has_status = true;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	731a      	strb	r2, [r3, #12]
    status_msg_.has_error = true;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2201      	movs	r2, #1
 800107a:	739a      	strb	r2, [r3, #14]
    champi_can_interface_ = champi_can_interface;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	619a      	str	r2, [r3, #24]
    tx_period_ms_ = tx_period_ms;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	61da      	str	r2, [r3, #28]
    last_tx_time_ms_ = 0;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
}
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	0800b834 	.word	0x0800b834

0800109c <_ZN11ChampiStateD1Ev>:

ChampiState::~ChampiState() = default;
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <_ZN11ChampiStateD1Ev+0x1c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	0800b834 	.word	0x0800b834

080010bc <_ZN11ChampiStateD0Ev>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ffe9 	bl	800109c <_ZN11ChampiStateD1Ev>
 80010ca:	219c      	movs	r1, #156	@ 0x9c
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f00a fa77 	bl	800b5c0 <_ZdlPvj>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType>:


void ChampiState::report_status(msgs_can_Status_StatusType status, msgs_can_Status_ErrorType error) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
 80010e8:	4613      	mov	r3, r2
 80010ea:	70bb      	strb	r3, [r7, #2]

    // If it's different from the current status, we sent to the CAN right away (for not loosing time to report error)
    if(status_msg_.status != status || status_msg_.error != error) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7b5b      	ldrb	r3, [r3, #13]
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d104      	bne.n	8001100 <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType+0x24>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7bdb      	ldrb	r3, [r3, #15]
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d008      	beq.n	8001112 <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType+0x36>
        status_msg_.status = status;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	735a      	strb	r2, [r3, #13]
        status_msg_.error = error;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	78ba      	ldrb	r2, [r7, #2]
 800110a:	73da      	strb	r2, [r3, #15]

        send_status();
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f805 	bl	800111c <_ZN11ChampiState11send_statusEv>

        // TODO on pourra ajouter le logging ici plus tard !
    }
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <_ZN11ChampiState11send_statusEv>:
 *
 * Ici, on ne check pas les erreurs d'envoi. Ca permet d'essayer d'envoyer le status si on est dans l'état d'erreur.
 * De toute façon, s'il y a un problème d'envoi, on envoie assez de messages ailleurs pour s'en rendre compte
 * vite.
 */
void ChampiState::send_status() {
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

    // Init stream TODO can we do that only once ?
    pb_ostream_t stream = pb_ostream_from_buffer(tx_buffer_, sizeof(tx_buffer_));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	2278      	movs	r2, #120	@ 0x78
 8001130:	4618      	mov	r0, r3
 8001132:	f000 ff4f 	bl	8001fd4 <pb_ostream_from_buffer>

    // Encode message
    pb_encode(&stream, msgs_can_Status_fields, &status_msg_);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	1d1a      	adds	r2, r3, #4
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4909      	ldr	r1, [pc, #36]	@ (8001164 <_ZN11ChampiState11send_statusEv+0x48>)
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fbb4 	bl	80028ae <pb_encode>
    size_t message_length = stream.bytes_written;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	61fb      	str	r3, [r7, #28]

    // Send message
    champi_can_interface_->send_msg(CAN_ID_IMU_STATUS, tx_buffer_, message_length); // TODO make the ID configurable
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6998      	ldr	r0, [r3, #24]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2121      	movs	r1, #33	@ 0x21
 8001158:	f7ff fea2 	bl	8000ea0 <_ZN9ChampiCan8send_msgEmPhm>
}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800b858 	.word	0x0800b858

08001168 <_ZN11ChampiState9spin_onceEv>:

void ChampiState::spin_once() {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

    // 1st time: Init and return
    if(last_tx_time_ms_ == 0) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <_ZN11ChampiState9spin_onceEv+0x1c>
        last_tx_time_ms_ = HAL_GetTick();
 8001178:	f006 f80a 	bl	8007190 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	621a      	str	r2, [r3, #32]
        return;
 8001182:	e010      	b.n	80011a6 <_ZN11ChampiState9spin_onceEv+0x3e>
    }

    // Send status if needed
    uint32_t current_time_ms = HAL_GetTick();
 8001184:	f006 f804 	bl	8007190 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]
    if(current_time_ms - last_tx_time_ms_ > tx_period_ms_) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	1ad2      	subs	r2, r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	429a      	cmp	r2, r3
 8001198:	d905      	bls.n	80011a6 <_ZN11ChampiState9spin_onceEv+0x3e>
        send_status();
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffbe 	bl	800111c <_ZN11ChampiState11send_statusEv>
        last_tx_time_ms_ = current_time_ms;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	621a      	str	r2, [r3, #32]
    }
}
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011b0:	f3bf 8f4f 	dsb	sy
}
 80011b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <__NVIC_SystemReset+0x24>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011be:	4904      	ldr	r1, [pc, #16]	@ (80011d0 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <__NVIC_SystemReset+0x28>)
 80011c2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011c6:	f3bf 8f4f 	dsb	sy
}
 80011ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <__NVIC_SystemReset+0x20>
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	05fa0004 	.word	0x05fa0004

080011d8 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_>:

/**
 * @brief Function to send the current velocity of the robot on the CAN bus.
 * @param vel : the current velocity of the robot
 */
void transmit_imu_data(CUSTOM_MOTION_SENSOR_Axes_t data_acc, CUSTOM_MOTION_SENSOR_Axes_t data_gyro) {
 80011d8:	b082      	sub	sp, #8
 80011da:	b590      	push	{r4, r7, lr}
 80011dc:	b099      	sub	sp, #100	@ 0x64
 80011de:	af00      	add	r7, sp, #0
 80011e0:	1d3c      	adds	r4, r7, #4
 80011e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011e6:	677b      	str	r3, [r7, #116]	@ 0x74

    // Init message
    msgs_can_ImuData imu_proto = msgs_can_ImuData_init_zero;
 80011e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ec:	2230      	movs	r2, #48	@ 0x30
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a f9fd 	bl	800b5f0 <memset>
    pb_ostream_t stream = pb_ostream_from_buffer(buffer_encode_imu_data, sizeof(buffer_encode_imu_data));
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	223c      	movs	r2, #60	@ 0x3c
 80011fc:	4978      	ldr	r1, [pc, #480]	@ (80013e0 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x208>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fee8 	bl	8001fd4 <pb_ostream_from_buffer>

    // Fill message (convert mg to m/s^2 and mdps to rad/s)
    imu_proto.acc_x = (float)(data_acc.x * 9.81 / 1000.);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f958 	bl	80004bc <__aeabi_i2d>
 800120c:	a370      	add	r3, pc, #448	@ (adr r3, 80013d0 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x1f8>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff f9bd 	bl	8000590 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b70      	ldr	r3, [pc, #448]	@ (80013e4 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x20c>)
 8001224:	f7ff fade 	bl	80007e4 <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fbc0 	bl	80009b4 <__aeabi_d2f>
 8001234:	4603      	mov	r3, r0
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    imu_proto.acc_y = (float)(data_acc.y * 9.81 / 1000.);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f93e 	bl	80004bc <__aeabi_i2d>
 8001240:	a363      	add	r3, pc, #396	@ (adr r3, 80013d0 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x1f8>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f7ff f9a3 	bl	8000590 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b63      	ldr	r3, [pc, #396]	@ (80013e4 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x20c>)
 8001258:	f7ff fac4 	bl	80007e4 <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fba6 	bl	80009b4 <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	637b      	str	r3, [r7, #52]	@ 0x34
    imu_proto.acc_z = (float)(data_acc.z * 9.81 / 1000.);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f924 	bl	80004bc <__aeabi_i2d>
 8001274:	a356      	add	r3, pc, #344	@ (adr r3, 80013d0 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x1f8>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff f989 	bl	8000590 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b56      	ldr	r3, [pc, #344]	@ (80013e4 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x20c>)
 800128c:	f7ff faaa 	bl	80007e4 <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fb8c 	bl	80009b4 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    imu_proto.gyro_x = (float)(data_gyro.x * 0.01745329251 / 1000.);
 80012a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f90a 	bl	80004bc <__aeabi_i2d>
 80012a8:	a34b      	add	r3, pc, #300	@ (adr r3, 80013d8 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x200>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f96f 	bl	8000590 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b49      	ldr	r3, [pc, #292]	@ (80013e4 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x20c>)
 80012c0:	f7ff fa90 	bl	80007e4 <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fb72 	bl	80009b4 <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	647b      	str	r3, [r7, #68]	@ 0x44
    imu_proto.gyro_y = (float)(data_gyro.y * 0.01745329251 / 1000.);
 80012d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f8f0 	bl	80004bc <__aeabi_i2d>
 80012dc:	a33e      	add	r3, pc, #248	@ (adr r3, 80013d8 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x200>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f955 	bl	8000590 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b3c      	ldr	r3, [pc, #240]	@ (80013e4 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x20c>)
 80012f4:	f7ff fa76 	bl	80007e4 <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fb58 	bl	80009b4 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	64fb      	str	r3, [r7, #76]	@ 0x4c
    imu_proto.gyro_z = (float)(data_gyro.z * 0.01745329251 / 1000.);
 8001308:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f8d6 	bl	80004bc <__aeabi_i2d>
 8001310:	a331      	add	r3, pc, #196	@ (adr r3, 80013d8 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x200>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff f93b 	bl	8000590 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x20c>)
 8001328:	f7ff fa5c 	bl	80007e4 <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb3e 	bl	80009b4 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	657b      	str	r3, [r7, #84]	@ 0x54

    // Fill has.. fields
    imu_proto.has_acc_x = true;
 800133c:	2301      	movs	r3, #1
 800133e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    imu_proto.has_acc_y = true;
 8001342:	2301      	movs	r3, #1
 8001344:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    imu_proto.has_acc_z = true;
 8001348:	2301      	movs	r3, #1
 800134a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    imu_proto.has_gyro_x = true;
 800134e:	2301      	movs	r3, #1
 8001350:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    imu_proto.has_gyro_y = true;
 8001354:	2301      	movs	r3, #1
 8001356:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    imu_proto.has_gyro_z = true;
 800135a:	2301      	movs	r3, #1
 800135c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50


    // Encode message
    bool status = pb_encode(&stream, msgs_can_ImuData_fields, &imu_proto);
 8001360:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	491f      	ldr	r1, [pc, #124]	@ (80013e8 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x210>)
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fa9f 	bl	80028ae <pb_encode>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    size_t message_length = stream.bytes_written;
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	65bb      	str	r3, [r7, #88]	@ 0x58

    // Check for errors
    if (!status) {
 800137a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x1be>
        // TODO on peut récupérer un message d'erreur avec PB_GET_ERROR(&stream))
        champi_state.report_status(msgs_can_Status_StatusType_ERROR, msgs_can_Status_ErrorType_PROTO_ENCODE);
 8001388:	2203      	movs	r2, #3
 800138a:	2103      	movs	r1, #3
 800138c:	4817      	ldr	r0, [pc, #92]	@ (80013ec <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x214>)
 800138e:	f7ff fea5 	bl	80010dc <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType>
        Error_Handler_CAN_ok();
 8001392:	f000 f82f 	bl	80013f4 <_Z20Error_Handler_CAN_okv>
    }

    // Send
    if (champi_can.send_msg(CAN_ID_IMU_DATA, (uint8_t *) buffer_encode_imu_data, message_length) != 0) {
 8001396:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001398:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x208>)
 800139a:	2120      	movs	r1, #32
 800139c:	4814      	ldr	r0, [pc, #80]	@ (80013f0 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x218>)
 800139e:	f7ff fd7f 	bl	8000ea0 <_ZN9ChampiCan8send_msgEmPhm>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf14      	ite	ne
 80013a8:	2301      	movne	r3, #1
 80013aa:	2300      	moveq	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x1e8>
        /* Transmission request Error */
        champi_state.report_status(msgs_can_Status_StatusType_ERROR, msgs_can_Status_ErrorType_CAN_TX);
 80013b2:	2206      	movs	r2, #6
 80013b4:	2103      	movs	r1, #3
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_+0x214>)
 80013b8:	f7ff fe90 	bl	80010dc <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType>
        Error_Handler_CAN_ok();
 80013bc:	f000 f81a 	bl	80013f4 <_Z20Error_Handler_CAN_okv>
    }
}
 80013c0:	bf00      	nop
 80013c2:	3764      	adds	r7, #100	@ 0x64
 80013c4:	46bd      	mov	sp, r7
 80013c6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80013ca:	b002      	add	sp, #8
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	51eb851f 	.word	0x51eb851f
 80013d4:	40239eb8 	.word	0x40239eb8
 80013d8:	a226e211 	.word	0xa226e211
 80013dc:	3f91df46 	.word	0x3f91df46
 80013e0:	200002d8 	.word	0x200002d8
 80013e4:	408f4000 	.word	0x408f4000
 80013e8:	0800b890 	.word	0x0800b890
 80013ec:	2000023c 	.word	0x2000023c
 80013f0:	20000210 	.word	0x20000210

080013f4 <_Z20Error_Handler_CAN_okv>:

/**
 * @brief Error handler we call when CAN might still work.
 * It blinks the built-in LED at 1Hz AND sends status on CAN bus.
 */
void Error_Handler_CAN_ok() {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

    // Blink the built-in LED at 1Hz
    uint32_t last_time = HAL_GetTick();
 80013fa:	f005 fec9 	bl	8007190 <HAL_GetTick>
 80013fe:	6078      	str	r0, [r7, #4]
    while (true) {
        champi_state.spin_once();
 8001400:	480d      	ldr	r0, [pc, #52]	@ (8001438 <_Z20Error_Handler_CAN_okv+0x44>)
 8001402:	f7ff feb1 	bl	8001168 <_ZN11ChampiState9spin_onceEv>
        HAL_Delay(10); // 10ms required to match the main loop frequency (for control)
 8001406:	200a      	movs	r0, #10
 8001408:	f005 fece 	bl	80071a8 <HAL_Delay>

        if (HAL_GetTick() - last_time > 500) {
 800140c:	f005 fec0 	bl	8007190 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800141a:	bf8c      	ite	hi
 800141c:	2301      	movhi	r3, #1
 800141e:	2300      	movls	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0ec      	beq.n	8001400 <_Z20Error_Handler_CAN_okv+0xc>
            last_time = HAL_GetTick();
 8001426:	f005 feb3 	bl	8007190 <HAL_GetTick>
 800142a:	6078      	str	r0, [r7, #4]
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800142c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <_Z20Error_Handler_CAN_okv+0x48>)
 8001432:	f007 f883 	bl	800853c <HAL_GPIO_TogglePin>
        champi_state.spin_once();
 8001436:	e7e3      	b.n	8001400 <_Z20Error_Handler_CAN_okv+0xc>
 8001438:	2000023c 	.word	0x2000023c
 800143c:	48000400 	.word	0x48000400

08001440 <_Z14tx_ok_or_resetv>:
/**
 * @brief Fonction qui attend que le l'envoi de données sur le CAN fonctionne. Ca envoie un message de test
 * à répétition jusqu'à ce que ça fonctionne.
 * Also blinks the built-in LED at 5 Hz.
 */
void tx_ok_or_reset() {
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
    uint8_t buff[20] = {0}; // We need a big message to fill the FIFO
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]

    // Send a message to test if the can bus works (at least 1 node up)
    uint32_t ret = champi_can.send_msg(CAN_ID_IMU_TEST, (uint8_t *) buff, 20);
 8001458:	1d3a      	adds	r2, r7, #4
 800145a:	2314      	movs	r3, #20
 800145c:	f240 2102 	movw	r1, #514	@ 0x202
 8001460:	480f      	ldr	r0, [pc, #60]	@ (80014a0 <_Z14tx_ok_or_resetv+0x60>)
 8001462:	f7ff fd1d 	bl	8000ea0 <_ZN9ChampiCan8send_msgEmPhm>
 8001466:	4603      	mov	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]

    if(ret==0){
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d012      	beq.n	8001496 <_Z14tx_ok_or_resetv+0x56>
    }

    // If we get an error, retry doesn't work sometimes. So we reset the stm to try again. Also blink the led 10Hz

    // blink the built-in LED for 1s
    for (int i = 0; i < 10; i++) {
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	e00a      	b.n	800148c <_Z14tx_ok_or_resetv+0x4c>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001476:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800147a:	480a      	ldr	r0, [pc, #40]	@ (80014a4 <_Z14tx_ok_or_resetv+0x64>)
 800147c:	f007 f85e 	bl	800853c <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8001480:	2064      	movs	r0, #100	@ 0x64
 8001482:	f005 fe91 	bl	80071a8 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b09      	cmp	r3, #9
 8001490:	ddf1      	ble.n	8001476 <_Z14tx_ok_or_resetv+0x36>
    }

    // Then reset the stm
    NVIC_SystemReset();
 8001492:	f7ff fe8b 	bl	80011ac <__NVIC_SystemReset>
        return;
 8001496:	bf00      	nop

}
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000210 	.word	0x20000210
 80014a4:	48000400 	.word	0x48000400

080014a8 <_ZN9ChampiCanaSERKS_>:
#ifndef INC_CHAMPICAN_H_
#define INC_CHAMPICAN_H_

#include "stm32g4xx_hal.h"

class ChampiCan {
 80014a8:	b4b0      	push	{r4, r5, r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f102 0408 	add.w	r4, r2, #8
 80014c2:	f103 0508 	add.w	r5, r3, #8
 80014c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	6023      	str	r3, [r4, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bcb0      	pop	{r4, r5, r7}
 80014dc:	4770      	bx	lr

080014de <_ZN11ChampiStateaSERKS_>:
#include "can_ids.hpp"

#define LIMIT_LENGTH_MSG 20 // max nb of frames per message. TODO uniformize and document ChampiCAN protocol


class ChampiState {
 80014de:	b4b0      	push	{r4, r5, r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	1d14      	adds	r4, r2, #4
 80014ee:	1d1d      	adds	r5, r3, #4
 80014f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	6023      	str	r3, [r4, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	69da      	ldr	r2, [r3, #28]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	61da      	str	r2, [r3, #28]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6a1a      	ldr	r2, [r3, #32]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	621a      	str	r2, [r3, #32]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8001516:	2277      	movs	r2, #119	@ 0x77
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3324      	adds	r3, #36	@ 0x24
 800151c:	e004      	b.n	8001528 <_ZN11ChampiStateaSERKS_+0x4a>
 800151e:	7818      	ldrb	r0, [r3, #0]
 8001520:	7008      	strb	r0, [r1, #0]
 8001522:	3a01      	subs	r2, #1
 8001524:	3101      	adds	r1, #1
 8001526:	3301      	adds	r3, #1
 8001528:	2a00      	cmp	r2, #0
 800152a:	daf8      	bge.n	800151e <_ZN11ChampiStateaSERKS_+0x40>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bcb0      	pop	{r4, r5, r7}
 8001536:	4770      	bx	lr

08001538 <_Z5setupv>:



void setup() {
 8001538:	b580      	push	{r7, lr}
 800153a:	b0b2      	sub	sp, #200	@ 0xc8
 800153c:	af00      	add	r7, sp, #0

    champi_can = ChampiCan(&hfdcan1);
 800153e:	463b      	mov	r3, r7
 8001540:	4925      	ldr	r1, [pc, #148]	@ (80015d8 <_Z5setupv+0xa0>)
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fbfe 	bl	8000d44 <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4823      	ldr	r0, [pc, #140]	@ (80015dc <_Z5setupv+0xa4>)
 800154e:	f7ff ffab 	bl	80014a8 <_ZN9ChampiCanaSERKS_>
 8001552:	463b      	mov	r3, r7
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fd3d 	bl	8000fd4 <_ZN9ChampiCanD1Ev>


    if (champi_can.start() != 0) {
 800155a:	4820      	ldr	r0, [pc, #128]	@ (80015dc <_Z5setupv+0xa4>)
 800155c:	f7ff fc3c 	bl	8000dd8 <_ZN9ChampiCan5startEv>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	bf14      	ite	ne
 8001566:	2301      	movne	r3, #1
 8001568:	2300      	moveq	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <_Z5setupv+0x3c>
        // TODO: On a jamais rencontré cette erreur.
        Error_Handler();
 8001570:	f000 fa48 	bl	8001a04 <Error_Handler>
    }

    // This is required: when the Raspberry Pi starts up, transmit CAN frames returns error.
    tx_ok_or_reset();
 8001574:	f7ff ff64 	bl	8001440 <_Z14tx_ok_or_resetv>

    // Initialize the IMU
    (void) CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8001578:	2103      	movs	r1, #3
 800157a:	2000      	movs	r0, #0
 800157c:	f009 fdac 	bl	800b0d8 <CUSTOM_MOTION_SENSOR_Init>
    (void) CUSTOM_MOTION_SENSOR_Enable_6D_Orientation(CUSTOM_LSM6DSO_0, CUSTOM_MOTION_SENSOR_INT1_PIN);
 8001580:	2100      	movs	r1, #0
 8001582:	2000      	movs	r0, #0
 8001584:	f009 fff4 	bl	800b570 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation>

    champi_state = ChampiState(&champi_can, 500);
 8001588:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800158c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001590:	4912      	ldr	r1, [pc, #72]	@ (80015dc <_Z5setupv+0xa4>)
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fd54 	bl	8001040 <_ZN11ChampiStateC1EP9ChampiCanm>
 8001598:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800159c:	4619      	mov	r1, r3
 800159e:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <_Z5setupv+0xa8>)
 80015a0:	f7ff ff9d 	bl	80014de <_ZN11ChampiStateaSERKS_>
 80015a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fd77 	bl	800109c <_ZN11ChampiStateD1Ev>

    champi_state.report_status(msgs_can_Status_StatusType_INIT, msgs_can_Status_ErrorType_NONE);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2101      	movs	r1, #1
 80015b2:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <_Z5setupv+0xa8>)
 80015b4:	f7ff fd92 	bl	80010dc <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType>

    // Switch led ON to indicate that we're running
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015be:	4809      	ldr	r0, [pc, #36]	@ (80015e4 <_Z5setupv+0xac>)
 80015c0:	f006 ffa4 	bl	800850c <HAL_GPIO_WritePin>

    champi_state.report_status(msgs_can_Status_StatusType_OK, msgs_can_Status_ErrorType_NONE);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <_Z5setupv+0xa8>)
 80015ca:	f7ff fd87 	bl	80010dc <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType>

}
 80015ce:	bf00      	nop
 80015d0:	37c8      	adds	r7, #200	@ 0xc8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000118 	.word	0x20000118
 80015dc:	20000210 	.word	0x20000210
 80015e0:	2000023c 	.word	0x2000023c
 80015e4:	48000400 	.word	0x48000400

080015e8 <_Z4loopv>:

/**
 * @brief Main loop.
 */
void loop() {
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af02      	add	r7, sp, #8
    if (CUSTOM_MOTION_SENSOR_Get_Event_Status(CUSTOM_LSM6DSO_0, &imu_status) != BSP_ERROR_NONE) {
 80015ee:	4920      	ldr	r1, [pc, #128]	@ (8001670 <_Z4loopv+0x88>)
 80015f0:	2000      	movs	r0, #0
 80015f2:	f009 ff97 	bl	800b524 <CUSTOM_MOTION_SENSOR_Get_Event_Status>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <_Z4loopv+0x22>
        Error_Handler();
 8001606:	f000 f9fd 	bl	8001a04 <Error_Handler>
    }


    if (CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_LSM6DSO_0, MOTION_ACCELERO, &axes_acc) != BSP_ERROR_NONE) {
 800160a:	4a1a      	ldr	r2, [pc, #104]	@ (8001674 <_Z4loopv+0x8c>)
 800160c:	2102      	movs	r1, #2
 800160e:	2000      	movs	r0, #0
 8001610:	f009 fdea 	bl	800b1e8 <CUSTOM_MOTION_SENSOR_GetAxes>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf14      	ite	ne
 800161a:	2301      	movne	r3, #1
 800161c:	2300      	moveq	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <_Z4loopv+0x40>
        Error_Handler();
 8001624:	f000 f9ee 	bl	8001a04 <Error_Handler>
    }

    if (CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_LSM6DSO_0, MOTION_GYRO, &axes_gyro) != BSP_ERROR_NONE) {
 8001628:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <_Z4loopv+0x90>)
 800162a:	2101      	movs	r1, #1
 800162c:	2000      	movs	r0, #0
 800162e:	f009 fddb 	bl	800b1e8 <CUSTOM_MOTION_SENSOR_GetAxes>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <_Z4loopv+0x5e>
        Error_Handler();
 8001642:	f000 f9df 	bl	8001a04 <Error_Handler>
    }

    transmit_imu_data(axes_acc, axes_gyro);
 8001646:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <_Z4loopv+0x90>)
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <_Z4loopv+0x8c>)
 800164a:	466c      	mov	r4, sp
 800164c:	1d19      	adds	r1, r3, #4
 800164e:	c903      	ldmia	r1, {r0, r1}
 8001650:	e884 0003 	stmia.w	r4, {r0, r1}
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	ca07      	ldmia	r2, {r0, r1, r2}
 8001658:	f7ff fdbe 	bl	80011d8 <_Z17transmit_imu_data27CUSTOM_MOTION_SENSOR_Axes_tS_>

    champi_state.spin_once();
 800165c:	4807      	ldr	r0, [pc, #28]	@ (800167c <_Z4loopv+0x94>)
 800165e:	f7ff fd83 	bl	8001168 <_ZN11ChampiState9spin_onceEv>

    HAL_Delay(10); // 10ms required to match the main loop frequency (for control)
 8001662:	200a      	movs	r0, #10
 8001664:	f005 fda0 	bl	80071a8 <HAL_Delay>
}
 8001668:	bf00      	nop
 800166a:	3704      	adds	r7, #4
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	2000032c 	.word	0x2000032c
 8001674:	20000314 	.word	0x20000314
 8001678:	20000320 	.word	0x20000320
 800167c:	2000023c 	.word	0x2000023c

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001684:	f005 fd20 	bl	80070c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001688:	f000 f811 	bl	80016ae <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168c:	f000 f938 	bl	8001900 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8001690:	f000 f88a 	bl	80017a8 <_ZL14MX_FDCAN1_Initv>
  MX_CRC_Init();
 8001694:	f000 f860 	bl	8001758 <_ZL11MX_CRC_Initv>
  MX_USART2_UART_Init();
 8001698:	f000 f8d2 	bl	8001840 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

    setup();
 800169c:	f7ff ff4c 	bl	8001538 <_Z5setupv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1) {
        loop();
 80016a0:	f7ff ffa2 	bl	80015e8 <_Z4loopv>
        HAL_Delay(10); // TODO handle freq correctly
 80016a4:	200a      	movs	r0, #10
 80016a6:	f005 fd7f 	bl	80071a8 <HAL_Delay>
        loop();
 80016aa:	bf00      	nop
 80016ac:	e7f8      	b.n	80016a0 <main+0x20>

080016ae <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b094      	sub	sp, #80	@ 0x50
 80016b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	2238      	movs	r2, #56	@ 0x38
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f009 ff97 	bl	800b5f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f006 ff71 	bl	80085b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e0:	2340      	movs	r3, #64	@ 0x40
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e4:	2302      	movs	r3, #2
 80016e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e8:	2302      	movs	r3, #2
 80016ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016f0:	2355      	movs	r3, #85	@ 0x55
 80016f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001700:	f107 0318 	add.w	r3, r7, #24
 8001704:	4618      	mov	r0, r3
 8001706:	f007 f80b 	bl	8008720 <HAL_RCC_OscConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800171a:	f000 f973 	bl	8001a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171e:	230f      	movs	r3, #15
 8001720:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001722:	2303      	movs	r3, #3
 8001724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2104      	movs	r1, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f007 fb04 	bl	8008d44 <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf14      	ite	ne
 8001742:	2301      	movne	r3, #1
 8001744:	2300      	moveq	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800174c:	f000 f95a 	bl	8001a04 <Error_Handler>
  }
}
 8001750:	bf00      	nop
 8001752:	3750      	adds	r7, #80	@ 0x50
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800175c:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <_ZL11MX_CRC_Initv+0x48>)
 800175e:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <_ZL11MX_CRC_Initv+0x4c>)
 8001760:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <_ZL11MX_CRC_Initv+0x48>)
 8001764:	2200      	movs	r2, #0
 8001766:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001768:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <_ZL11MX_CRC_Initv+0x48>)
 800176a:	2200      	movs	r2, #0
 800176c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800176e:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <_ZL11MX_CRC_Initv+0x48>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001774:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <_ZL11MX_CRC_Initv+0x48>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <_ZL11MX_CRC_Initv+0x48>)
 800177c:	2201      	movs	r2, #1
 800177e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001780:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <_ZL11MX_CRC_Initv+0x48>)
 8001782:	f005 fe43 	bl	800740c <HAL_CRC_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8001796:	f000 f935 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000f4 	.word	0x200000f4
 80017a4:	40023000 	.word	0x40023000

080017a8 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017ae:	4a23      	ldr	r2, [pc, #140]	@ (800183c <_ZL14MX_FDCAN1_Initv+0x94>)
 80017b0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80017d6:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017d8:	220a      	movs	r2, #10
 80017da:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017de:	2201      	movs	r2, #1
 80017e0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017e4:	220e      	movs	r2, #14
 80017e6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017ea:	2202      	movs	r2, #2
 80017ec:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017f0:	220a      	movs	r2, #10
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80017f4:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 80017fc:	220e      	movs	r2, #14
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001800:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001802:	2202      	movs	r2, #2
 8001804:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001818:	4807      	ldr	r0, [pc, #28]	@ (8001838 <_ZL14MX_FDCAN1_Initv+0x90>)
 800181a:	f005 fee9 	bl	80075f0 <HAL_FDCAN_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800182e:	f000 f8e9 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000118 	.word	0x20000118
 800183c:	40006400 	.word	0x40006400

08001840 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001846:	4a2d      	ldr	r2, [pc, #180]	@ (80018fc <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185e:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001876:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800187c:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001884:	2200      	movs	r2, #0
 8001886:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001888:	481b      	ldr	r0, [pc, #108]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800188a:	f008 fde7 	bl	800a45c <HAL_UART_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800189e:	f000 f8b1 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a2:	2100      	movs	r1, #0
 80018a4:	4814      	ldr	r0, [pc, #80]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018a6:	f009 fb4d 	bl	800af44 <HAL_UARTEx_SetTxFifoThreshold>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80018ba:	f000 f8a3 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018be:	2100      	movs	r1, #0
 80018c0:	480d      	ldr	r0, [pc, #52]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018c2:	f009 fb7d 	bl	800afc0 <HAL_UARTEx_SetRxFifoThreshold>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80018d6:	f000 f895 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018da:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018dc:	f009 faf9 	bl	800aed2 <HAL_UARTEx_DisableFifoMode>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf14      	ite	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	2300      	moveq	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80018f0:	f000 f888 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000017c 	.word	0x2000017c
 80018fc:	40004400 	.word	0x40004400

08001900 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b39      	ldr	r3, [pc, #228]	@ (80019fc <_ZL12MX_GPIO_Initv+0xfc>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	4a38      	ldr	r2, [pc, #224]	@ (80019fc <_ZL12MX_GPIO_Initv+0xfc>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001922:	4b36      	ldr	r3, [pc, #216]	@ (80019fc <_ZL12MX_GPIO_Initv+0xfc>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b33      	ldr	r3, [pc, #204]	@ (80019fc <_ZL12MX_GPIO_Initv+0xfc>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	4a32      	ldr	r2, [pc, #200]	@ (80019fc <_ZL12MX_GPIO_Initv+0xfc>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193a:	4b30      	ldr	r3, [pc, #192]	@ (80019fc <_ZL12MX_GPIO_Initv+0xfc>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	2102      	movs	r1, #2
 800194a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800194e:	f006 fddd 	bl	800850c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001958:	4829      	ldr	r0, [pc, #164]	@ (8001a00 <_ZL12MX_GPIO_Initv+0x100>)
 800195a:	f006 fdd7 	bl	800850c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800195e:	2301      	movs	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001962:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001976:	f006 fb65 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800197a:	2302      	movs	r3, #2
 800197c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001994:	f006 fb56 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800199c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b0:	f006 fb48 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	4619      	mov	r1, r3
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <_ZL12MX_GPIO_Initv+0x100>)
 80019ce:	f006 fb39 	bl	8008044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2006      	movs	r0, #6
 80019d8:	f005 fce3 	bl	80073a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019dc:	2006      	movs	r0, #6
 80019de:	f005 fcfa 	bl	80073d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2017      	movs	r0, #23
 80019e8:	f005 fcdb 	bl	80073a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019ec:	2017      	movs	r0, #23
 80019ee:	f005 fcf2 	bl	80073d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f2:	bf00      	nop
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48000400 	.word	0x48000400

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <Error_Handler+0x8>

08001a10 <_Z41__static_initialization_and_destruction_0ii>:
    }
  /* USER CODE END Error_Handler_Debug */
}
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d10a      	bne.n	8001a36 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d105      	bne.n	8001a36 <_Z41__static_initialization_and_destruction_0ii+0x26>
ChampiCan champi_can;
 8001a2a:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a2c:	f7ff f9bc 	bl	8000da8 <_ZN9ChampiCanC1Ev>
ChampiState champi_state;
 8001a30:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a32:	f7ff faef 	bl	8001014 <_ZN11ChampiStateC1Ev>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10a      	bne.n	8001a52 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d105      	bne.n	8001a52 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a48:	f7ff fb28 	bl	800109c <_ZN11ChampiStateD1Ev>
ChampiCan champi_can;
 8001a4c:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a4e:	f7ff fac1 	bl	8000fd4 <_ZN9ChampiCanD1Ev>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000210 	.word	0x20000210
 8001a60:	2000023c 	.word	0x2000023c

08001a64 <_GLOBAL__sub_I_hcrc>:
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f7ff ffcf 	bl	8001a10 <_Z41__static_initialization_and_destruction_0ii>
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_GLOBAL__sub_D_hcrc>:
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff ffc7 	bl	8001a10 <_Z41__static_initialization_and_destruction_0ii>
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b08f      	sub	sp, #60	@ 0x3c
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	891a      	ldrh	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	8a1b      	ldrh	r3, [r3, #16]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d301      	bcc.n	8001a9e <load_descriptor_values+0x1a>
        return false;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e156      	b.n	8001d4c <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	895b      	ldrh	r3, [r3, #10]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8001ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8001aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d05a      	beq.n	8001b7a <load_descriptor_values+0xf6>
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	f200 8094 	bhi.w	8001bf2 <load_descriptor_values+0x16e>
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <load_descriptor_values+0x50>
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d01f      	beq.n	8001b12 <load_descriptor_values+0x8e>
 8001ad2:	e08e      	b.n	8001bf2 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8001ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	0e1b      	lsrs	r3, r3, #24
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8001af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8001b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b02:	0f1b      	lsrs	r3, r3, #28
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	825a      	strh	r2, [r3, #18]
            break;
 8001b10:	e0b4      	b.n	8001c7c <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	895b      	ldrh	r3, [r3, #10]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8001b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8001b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	0f1b      	lsrs	r3, r3, #28
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	019b      	lsls	r3, r3, #6
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8001b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b56:	0f1b      	lsrs	r3, r3, #28
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	0c1b      	lsrs	r3, r3, #16
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	825a      	strh	r2, [r3, #18]
            break;
 8001b78:	e080      	b.n	8001c7c <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	895b      	ldrh	r3, [r3, #10]
 8001b84:	3301      	adds	r3, #1
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	895b      	ldrh	r3, [r3, #10]
 8001b98:	3302      	adds	r3, #2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	895b      	ldrh	r3, [r3, #10]
 8001bac:	3303      	adds	r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8001bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8001bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	019b      	lsls	r3, r3, #6
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8001bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	825a      	strh	r2, [r3, #18]
            break;
 8001bf0:	e044      	b.n	8001c7c <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	895b      	ldrh	r3, [r3, #10]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	895b      	ldrh	r3, [r3, #10]
 8001c10:	3302      	adds	r3, #2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	895b      	ldrh	r3, [r3, #10]
 8001c24:	3303      	adds	r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	895b      	ldrh	r3, [r3, #10]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8001c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	019b      	lsls	r3, r3, #6
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	825a      	strh	r2, [r3, #18]
            break;
 8001c7a:	bf00      	nop
        }
    }

    if (!iter->message)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
 8001c90:	e041      	b.n	8001d16 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8001c9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d008      	beq.n	8001cb8 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001cae:	425b      	negs	r3, r3
 8001cb0:	441a      	add	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	621a      	str	r2, [r3, #32]
 8001cb6:	e01a      	b.n	8001cee <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7d9b      	ldrb	r3, [r3, #22]
 8001cbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d111      	bne.n	8001ce8 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7d9b      	ldrb	r3, [r3, #22]
 8001cc8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7d9b      	ldrb	r3, [r3, #22]
 8001cd4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8001cd8:	2b80      	cmp	r3, #128	@ 0x80
 8001cda:	d105      	bne.n	8001ce8 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 0214 	add.w	r2, r3, #20
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	621a      	str	r2, [r3, #32]
 8001ce6:	e002      	b.n	8001cee <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7d9b      	ldrb	r3, [r3, #22]
 8001cf2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001cf6:	2b80      	cmp	r3, #128	@ 0x80
 8001cf8:	d109      	bne.n	8001d0e <load_descriptor_values+0x28a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	61da      	str	r2, [r3, #28]
 8001d0c:	e003      	b.n	8001d16 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7d9b      	ldrb	r3, [r3, #22]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d005      	beq.n	8001d2e <load_descriptor_values+0x2aa>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7d9b      	ldrb	r3, [r3, #22]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	2b09      	cmp	r3, #9
 8001d2c:	d10a      	bne.n	8001d44 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	89db      	ldrh	r3, [r3, #14]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d42:	e002      	b.n	8001d4a <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	373c      	adds	r7, #60	@ 0x3c
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    iter->index++;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	891b      	ldrh	r3, [r3, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	891a      	ldrh	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	8a1b      	ldrh	r3, [r3, #16]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d30c      	bcc.n	8001d94 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8001d92:	e03b      	b.n	8001e0c <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	895b      	ldrh	r3, [r3, #10]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2201      	movs	r2, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	895a      	ldrh	r2, [r3, #10]
 8001dbe:	893b      	ldrh	r3, [r7, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	899b      	ldrh	r3, [r3, #12]
 8001dcc:	7afa      	ldrb	r2, [r7, #11]
 8001dce:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2201      	moveq	r2, #1
 8001dd8:	2200      	movne	r2, #0
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	4413      	add	r3, r2
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	89da      	ldrh	r2, [r3, #14]
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d004      	beq.n	8001dfc <advance_iterator+0xa4>
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	2b09      	cmp	r3, #9
 8001dfa:	d101      	bne.n	8001e00 <advance_iterator+0xa8>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <advance_iterator+0xaa>
 8001e00:	2300      	movs	r3, #0
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	81da      	strh	r2, [r3, #14]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8001e24:	2228      	movs	r2, #40	@ 0x28
 8001e26:	2100      	movs	r1, #0
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f009 fbe1 	bl	800b5f0 <memset>

    iter->descriptor = desc;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff fe22 	bl	8001a84 <load_descriptor_values>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e6c:	2b80      	cmp	r3, #128	@ 0x80
 8001e6e:	d109      	bne.n	8001e84 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	3304      	adds	r3, #4
 8001e74:	461a      	mov	r2, r3
 8001e76:	6939      	ldr	r1, [r7, #16]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ffcd 	bl	8001e18 <pb_field_iter_begin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	75fb      	strb	r3, [r7, #23]
 8001e82:	e008      	b.n	8001e96 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	6939      	ldr	r1, [r7, #16]
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ffc3 	bl	8001e18 <pb_field_iter_begin>
 8001e92:	4603      	mov	r3, r0
 8001e94:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f103 020c 	add.w	r2, r3, #12
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	621a      	str	r2, [r3, #32]
    return status;
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff50 	bl	8001d58 <advance_iterator>
    (void)load_descriptor_values(iter);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fde3 	bl	8001a84 <load_descriptor_values>
    return iter->index != 0;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	891b      	ldrh	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf14      	ite	ne
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	2300      	moveq	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <pb_const_cast>:
        return false;
    }
}

static void *pb_const_cast(const void *p)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ffea 	bl	8001ed4 <pb_const_cast>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7ff ff86 	bl	8001e18 <pb_field_iter_begin>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 8001f20:	6838      	ldr	r0, [r7, #0]
 8001f22:	f7ff ffd7 	bl	8001ed4 <pb_const_cast>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff8d 	bl	8001e4a <pb_field_iter_begin_extension>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8a5b      	ldrh	r3, [r3, #18]
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d125      	bne.n	8001f9a <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01f      	beq.n	8001f9a <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00c      	beq.n	8001f7a <pb_default_field_callback+0x40>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	3204      	adds	r2, #4
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	4798      	blx	r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	e010      	b.n	8001f9c <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00c      	beq.n	8001f9a <pb_default_field_callback+0x60>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	3204      	adds	r2, #4
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	68b8      	ldr	r0, [r7, #8]
 8001f94:	4798      	blx	r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	e000      	b.n	8001f9c <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8001f9a:	2301      	movs	r3, #1

}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	441a      	add	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f009 fb41 	bl	800b64c <memcpy>
    
    return true;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8001fd4:	b4b0      	push	{r4, r5, r7}
 8001fd6:	b08b      	sub	sp, #44	@ 0x2c
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <pb_ostream_from_buffer+0x3c>)
 8001fe2:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	461d      	mov	r5, r3
 8001ff8:	f107 0414 	add.w	r4, r7, #20
 8001ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	602b      	str	r3, [r5, #0]
}
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	372c      	adds	r7, #44	@ 0x2c
 8002008:	46bd      	mov	sp, r7
 800200a:	bcb0      	pop	{r4, r5, r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	08001fa5 	.word	0x08001fa5

08002014 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d037      	beq.n	8002096 <pb_write+0x82>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d033      	beq.n	8002096 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	441a      	add	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	429a      	cmp	r2, r3
 800203c:	d307      	bcc.n	800204e <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	441a      	add	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d90b      	bls.n	8002066 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <pb_write+0x48>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	e000      	b.n	800205e <pb_write+0x4a>
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <pb_write+0x98>)
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6113      	str	r3, [r2, #16]
 8002062:	2300      	movs	r3, #0
 8002064:	e01e      	b.n	80020a4 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	4798      	blx	r3
 8002072:	4603      	mov	r3, r0
 8002074:	f083 0301 	eor.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <pb_write+0x78>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	e000      	b.n	800208e <pb_write+0x7a>
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <pb_write+0x9c>)
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	6113      	str	r3, [r2, #16]
 8002092:	2300      	movs	r3, #0
 8002094:	e006      	b.n	80020a4 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	441a      	add	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	60da      	str	r2, [r3, #12]
    return true;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	0800b714 	.word	0x0800b714
 80020b0:	0800b720 	.word	0x0800b720

080020b4 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e00a      	b.n	80020dc <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <safe_read_bool+0x22>
            return true;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e006      	b.n	80020e4 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f1      	beq.n	80020c6 <safe_read_bool+0x12>
    }
    return false;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	b08c      	sub	sp, #48	@ 0x30
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 8002102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <encode_array+0x1c>
        return true;
 8002108:	2301      	movs	r3, #1
 800210a:	e13d      	b.n	8002388 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	7d9b      	ldrb	r3, [r3, #22]
 8002110:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002114:	2b80      	cmp	r3, #128	@ 0x80
 8002116:	d010      	beq.n	800213a <encode_array+0x4a>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	8a9b      	ldrh	r3, [r3, #20]
 800211c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800211e:	429a      	cmp	r2, r3
 8002120:	d90b      	bls.n	800213a <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <encode_array+0x40>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	e000      	b.n	8002132 <encode_array+0x42>
 8002130:	4b97      	ldr	r3, [pc, #604]	@ (8002390 <encode_array+0x2a0>)
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6113      	str	r3, [r2, #16]
 8002136:	2300      	movs	r3, #0
 8002138:	e126      	b.n	8002388 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	7d9b      	ldrb	r3, [r3, #22]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	2b05      	cmp	r3, #5
 8002144:	f200 80b3 	bhi.w	80022ae <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	8a1b      	ldrh	r3, [r3, #16]
 800214c:	461a      	mov	r2, r3
 800214e:	2102      	movs	r1, #2
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fcdd 	bl	8002b10 <pb_encode_tag>
 8002156:	4603      	mov	r3, r0
 8002158:	f083 0301 	eor.w	r3, r3, #1
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <encode_array+0x76>
            return false;
 8002162:	2300      	movs	r3, #0
 8002164:	e110      	b.n	8002388 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	7d9b      	ldrb	r3, [r3, #22]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	2b04      	cmp	r3, #4
 8002170:	d103      	bne.n	800217a <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8002172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002178:	e047      	b.n	800220a <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7d9b      	ldrb	r3, [r3, #22]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	2b05      	cmp	r3, #5
 8002184:	d103      	bne.n	800218e <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8002186:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800218c:	e03d      	b.n	800220a <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80021a8:	e026      	b.n	80021f8 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 80021aa:	f107 0308 	add.w	r3, r7, #8
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fdef 	bl	8002d94 <pb_enc_varint>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f083 0301 	eor.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d010      	beq.n	80021e4 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <encode_array+0xe0>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	e005      	b.n	80021dc <encode_array+0xec>
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <encode_array+0xea>
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	e000      	b.n	80021dc <encode_array+0xec>
 80021da:	4b6e      	ldr	r3, [pc, #440]	@ (8002394 <encode_array+0x2a4>)
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6113      	str	r3, [r2, #16]
 80021e0:	2300      	movs	r3, #0
 80021e2:	e0d1      	b.n	8002388 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	8a52      	ldrh	r2, [r2, #18]
 80021ec:	441a      	add	r2, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 80021f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021f4:	3301      	adds	r3, #1
 80021f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80021f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80021fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3d4      	bcc.n	80021aa <encode_array+0xba>
            }
            field->pData = pData_orig;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	2200      	movs	r2, #0
 800220e:	461c      	mov	r4, r3
 8002210:	4615      	mov	r5, r2
 8002212:	4622      	mov	r2, r4
 8002214:	462b      	mov	r3, r5
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fbf7 	bl	8002a0a <pb_encode_varint>
 800221c:	4603      	mov	r3, r0
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <encode_array+0x13c>
            return false;
 8002228:	2300      	movs	r3, #0
 800222a:	e0ad      	b.n	8002388 <encode_array+0x298>
        
        if (stream->callback == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8002234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002236:	2100      	movs	r1, #0
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff feeb 	bl	8002014 <pb_write>
 800223e:	4603      	mov	r3, r0
 8002240:	e0a2      	b.n	8002388 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8002242:	2300      	movs	r3, #0
 8002244:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002246:	e02d      	b.n	80022a4 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7d9b      	ldrb	r3, [r3, #22]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	2b04      	cmp	r3, #4
 8002252:	d005      	beq.n	8002260 <encode_array+0x170>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7d9b      	ldrb	r3, [r3, #22]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	2b05      	cmp	r3, #5
 800225e:	d10b      	bne.n	8002278 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fe58 	bl	8002f18 <pb_enc_fixed>
 8002268:	4603      	mov	r3, r0
 800226a:	f083 0301 	eor.w	r3, r3, #1
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <encode_array+0x1a0>
                    return false;
 8002274:	2300      	movs	r3, #0
 8002276:	e087      	b.n	8002388 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fd8a 	bl	8002d94 <pb_enc_varint>
 8002280:	4603      	mov	r3, r0
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <encode_array+0x1a0>
                    return false;
 800228c:	2300      	movs	r3, #0
 800228e:	e07b      	b.n	8002388 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	8a52      	ldrh	r2, [r2, #18]
 8002298:	441a      	add	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 800229e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80022a0:	3301      	adds	r3, #1
 80022a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80022a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80022a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3cd      	bcc.n	8002248 <encode_array+0x158>
 80022ac:	e06b      	b.n	8002386 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80022b2:	e064      	b.n	800237e <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	7d9b      	ldrb	r3, [r3, #22]
 80022b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80022bc:	2b80      	cmp	r3, #128	@ 0x80
 80022be:	d147      	bne.n	8002350 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7d9b      	ldrb	r3, [r3, #22]
 80022c4:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80022c8:	2b07      	cmp	r3, #7
 80022ca:	d005      	beq.n	80022d8 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	7d9b      	ldrb	r3, [r3, #22]
 80022d0:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d13b      	bne.n	8002350 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11c      	bne.n	800232a <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 80022f0:	6839      	ldr	r1, [r7, #0]
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fc36 	bl	8002b64 <pb_encode_tag_for_field>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fb7f 	bl	8002a0a <pb_encode_varint>
 800230c:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <encode_array+0x226>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <encode_array+0x228>
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800231c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002328:	e006      	b.n	8002338 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800232a:	6839      	ldr	r1, [r7, #0]
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f951 	bl	80025d4 <encode_basic_field>
 8002332:	4603      	mov	r3, r0
 8002334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6a3a      	ldr	r2, [r7, #32]
 800233c:	61da      	str	r2, [r3, #28]

                if (!status)
 800233e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002342:	f083 0301 	eor.w	r3, r3, #1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00d      	beq.n	8002368 <encode_array+0x278>
                    return false;
 800234c:	2300      	movs	r3, #0
 800234e:	e01b      	b.n	8002388 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8002350:	6839      	ldr	r1, [r7, #0]
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f93e 	bl	80025d4 <encode_basic_field>
 8002358:	4603      	mov	r3, r0
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <encode_array+0x27a>
                    return false;
 8002364:	2300      	movs	r3, #0
 8002366:	e00f      	b.n	8002388 <encode_array+0x298>
            {
 8002368:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	8a52      	ldrh	r2, [r2, #18]
 8002372:	441a      	add	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8002378:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800237a:	3301      	adds	r3, #1
 800237c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800237e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002380:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002382:	429a      	cmp	r2, r3
 8002384:	d396      	bcc.n	80022b4 <encode_array+0x1c4>
        }
    }
    
    return true;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	3730      	adds	r7, #48	@ 0x30
 800238c:	46bd      	mov	sp, r7
 800238e:	bdb0      	pop	{r4, r5, r7, pc}
 8002390:	0800b72c 	.word	0x0800b72c
 8002394:	0800b744 	.word	0x0800b744

08002398 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b092      	sub	sp, #72	@ 0x48
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7d9b      	ldrb	r3, [r3, #22]
 80023a4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80023a8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80023ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f040 80c9 	bne.w	8002548 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80023b6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80023ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e100      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80023c6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80023ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d108      	bne.n	80023e4 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e0f1      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80023e4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80023e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80023ec:	2b30      	cmp	r3, #48	@ 0x30
 80023ee:	d108      	bne.n	8002402 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	e0e2      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8002402:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002406:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800240a:	2b10      	cmp	r3, #16
 800240c:	d115      	bne.n	800243a <pb_check_proto3_default_value+0xa2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d011      	beq.n	800243a <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fe4a 	bl	80020b4 <safe_read_bool>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f083 0301 	eor.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	e0c6      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8002444:	2300      	movs	r3, #0
 8002446:	e0bf      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8002448:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	2b05      	cmp	r3, #5
 8002452:	d81c      	bhi.n	800248e <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 800245a:	2300      	movs	r3, #0
 800245c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002460:	e00d      	b.n	800247e <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8002462:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002466:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002468:	4413      	add	r3, r2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8002470:	2300      	movs	r3, #0
 8002472:	e0a9      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8002474:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002478:	3301      	adds	r3, #1
 800247a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	8a5b      	ldrh	r3, [r3, #18]
 8002482:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002486:	429a      	cmp	r2, r3
 8002488:	d3eb      	bcc.n	8002462 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 800248a:	2301      	movs	r3, #1
 800248c:	e09c      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800248e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	2b06      	cmp	r3, #6
 8002498:	d10a      	bne.n	80024b0 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 80024a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e08b      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80024b0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	2b07      	cmp	r3, #7
 80024ba:	d108      	bne.n	80024ce <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	e07c      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80024ce:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	2b0b      	cmp	r3, #11
 80024d8:	d107      	bne.n	80024ea <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	8a5b      	ldrh	r3, [r3, #18]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf0c      	ite	eq
 80024e2:	2301      	moveq	r3, #1
 80024e4:	2300      	movne	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	e06e      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 80024ea:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d005      	beq.n	8002502 <pb_check_proto3_default_value+0x16a>
 80024f6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	2b09      	cmp	r3, #9
 8002500:	d161      	bne.n	80025c6 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69da      	ldr	r2, [r3, #28]
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fc82 	bl	8001e18 <pb_field_iter_begin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d014      	beq.n	8002544 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff3a 	bl	8002398 <pb_check_proto3_default_value>
 8002524:	4603      	mov	r3, r0
 8002526:	f083 0301 	eor.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8002530:	2300      	movs	r3, #0
 8002532:	e049      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fcb6 	bl	8001eaa <pb_field_iter_next>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ea      	bne.n	800251a <pb_check_proto3_default_value+0x182>
            }
            return true;
 8002544:	2301      	movs	r3, #1
 8002546:	e03f      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8002548:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800254c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002550:	2b80      	cmp	r3, #128	@ 0x80
 8002552:	d107      	bne.n	8002564 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e031      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8002564:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002568:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800256c:	2b40      	cmp	r3, #64	@ 0x40
 800256e:	d12a      	bne.n	80025c6 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8002570:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2b0a      	cmp	r3, #10
 800257a:	d10a      	bne.n	8002592 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 8002584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002586:	2b00      	cmp	r3, #0
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	e01a      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <pb_check_proto3_default_value+0x238>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10a      	bne.n	80025b4 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 80025a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e009      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e000      	b.n	80025c8 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3748      	adds	r7, #72	@ 0x48
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	08001f3b 	.word	0x08001f3b

080025d4 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e061      	b.n	80026ae <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 80025ea:	6839      	ldr	r1, [r7, #0]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fab9 	bl	8002b64 <pb_encode_tag_for_field>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f083 0301 	eor.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <encode_basic_field+0x2e>
        return false;
 80025fe:	2300      	movs	r3, #0
 8002600:	e055      	b.n	80026ae <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	7d9b      	ldrb	r3, [r3, #22]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	2b0b      	cmp	r3, #11
 800260c:	d844      	bhi.n	8002698 <encode_basic_field+0xc4>
 800260e:	a201      	add	r2, pc, #4	@ (adr r2, 8002614 <encode_basic_field+0x40>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002645 	.word	0x08002645
 8002618:	08002651 	.word	0x08002651
 800261c:	08002651 	.word	0x08002651
 8002620:	08002651 	.word	0x08002651
 8002624:	0800265d 	.word	0x0800265d
 8002628:	0800265d 	.word	0x0800265d
 800262c:	08002669 	.word	0x08002669
 8002630:	08002675 	.word	0x08002675
 8002634:	08002681 	.word	0x08002681
 8002638:	08002681 	.word	0x08002681
 800263c:	08002699 	.word	0x08002699
 8002640:	0800268d 	.word	0x0800268d
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8002644:	6839      	ldr	r1, [r7, #0]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fb8a 	bl	8002d60 <pb_enc_bool>
 800264c:	4603      	mov	r3, r0
 800264e:	e02e      	b.n	80026ae <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8002650:	6839      	ldr	r1, [r7, #0]
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fb9e 	bl	8002d94 <pb_enc_varint>
 8002658:	4603      	mov	r3, r0
 800265a:	e028      	b.n	80026ae <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fc5a 	bl	8002f18 <pb_enc_fixed>
 8002664:	4603      	mov	r3, r0
 8002666:	e022      	b.n	80026ae <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fc82 	bl	8002f74 <pb_enc_bytes>
 8002670:	4603      	mov	r3, r0
 8002672:	e01c      	b.n	80026ae <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fcba 	bl	8002ff0 <pb_enc_string>
 800267c:	4603      	mov	r3, r0
 800267e:	e016      	b.n	80026ae <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fd12 	bl	80030ac <pb_enc_submessage>
 8002688:	4603      	mov	r3, r0
 800268a:	e010      	b.n	80026ae <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fd52 	bl	8003138 <pb_enc_fixed_length_bytes>
 8002694:	4603      	mov	r3, r0
 8002696:	e00a      	b.n	80026ae <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <encode_basic_field+0xd2>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	e000      	b.n	80026a8 <encode_basic_field+0xd4>
 80026a6:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <encode_basic_field+0xe4>)
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6113      	str	r3, [r2, #16]
 80026ac:	2300      	movs	r3, #0
    }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	0800b74c 	.word	0x0800b74c

080026bc <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d018      	beq.n	8002702 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	2000      	movs	r0, #0
 80026dc:	4798      	blx	r3
 80026de:	4603      	mov	r3, r0
 80026e0:	f083 0301 	eor.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <encode_callback_field+0x3c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	e000      	b.n	80026fa <encode_callback_field+0x3e>
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <encode_callback_field+0x50>)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6113      	str	r3, [r2, #16]
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <encode_callback_field+0x48>
    }
    return true;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	0800b760 	.word	0x0800b760

08002710 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7d9b      	ldrb	r3, [r3, #22]
 800271e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002722:	2b30      	cmp	r3, #48	@ 0x30
 8002724:	d108      	bne.n	8002738 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	881a      	ldrh	r2, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	8a1b      	ldrh	r3, [r3, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d026      	beq.n	8002782 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8002734:	2301      	movs	r3, #1
 8002736:	e059      	b.n	80027ec <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	7d9b      	ldrb	r3, [r3, #22]
 800273c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002740:	2b10      	cmp	r3, #16
 8002742:	d11e      	bne.n	8002782 <encode_field+0x72>
    {
        if (field->pSize)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00c      	beq.n	8002766 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fcaf 	bl	80020b4 <safe_read_bool>
 8002756:	4603      	mov	r3, r0
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00f      	beq.n	8002782 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8002762:	2301      	movs	r3, #1
 8002764:	e042      	b.n	80027ec <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	7d9b      	ldrb	r3, [r3, #22]
 800276a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d107      	bne.n	8002782 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8002772:	6838      	ldr	r0, [r7, #0]
 8002774:	f7ff fe10 	bl	8002398 <pb_check_proto3_default_value>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <encode_field+0x72>
                return true;
 800277e:	2301      	movs	r3, #1
 8002780:	e034      	b.n	80027ec <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d113      	bne.n	80027b2 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	7d9b      	ldrb	r3, [r3, #22]
 800278e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <encode_field+0x94>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	e000      	b.n	80027a6 <encode_field+0x96>
 80027a4:	4b13      	ldr	r3, [pc, #76]	@ (80027f4 <encode_field+0xe4>)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6113      	str	r3, [r2, #16]
 80027aa:	2300      	movs	r3, #0
 80027ac:	e01e      	b.n	80027ec <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e01c      	b.n	80027ec <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	7d9b      	ldrb	r3, [r3, #22]
 80027b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80027ba:	2b40      	cmp	r3, #64	@ 0x40
 80027bc:	d105      	bne.n	80027ca <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 80027be:	6839      	ldr	r1, [r7, #0]
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff7b 	bl	80026bc <encode_callback_field>
 80027c6:	4603      	mov	r3, r0
 80027c8:	e010      	b.n	80027ec <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	7d9b      	ldrb	r3, [r3, #22]
 80027ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d105      	bne.n	80027e2 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fc89 	bl	80020f0 <encode_array>
 80027de:	4603      	mov	r3, r0
 80027e0:	e004      	b.n	80027ec <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 80027e2:	6839      	ldr	r1, [r7, #0]
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fef5 	bl	80025d4 <encode_basic_field>
 80027ea:	4603      	mov	r3, r0
    }
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	0800b770 	.word	0x0800b770

080027f8 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	@ 0x30
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fb84 	bl	8001f16 <pb_field_iter_begin_extension_const>
 800280e:	4603      	mov	r3, r0
 8002810:	f083 0301 	eor.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <default_extension_encoder+0x30>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	e000      	b.n	800282a <default_extension_encoder+0x32>
 8002828:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <default_extension_encoder+0x50>)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6113      	str	r3, [r2, #16]
 800282e:	2300      	movs	r3, #0
 8002830:	e006      	b.n	8002840 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8002832:	f107 0308 	add.w	r3, r7, #8
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff69 	bl	8002710 <encode_field>
 800283e:	4603      	mov	r3, r0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3730      	adds	r7, #48	@ 0x30
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	0800b788 	.word	0x0800b788

0800284c <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]

    while (extension)
 800285e:	e01e      	b.n	800289e <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
 8002876:	4603      	mov	r3, r0
 8002878:	72fb      	strb	r3, [r7, #11]
 800287a:	e005      	b.n	8002888 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ffba 	bl	80027f8 <default_extension_encoder>
 8002884:	4603      	mov	r3, r0
 8002886:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	f083 0301 	eor.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <encode_extension_field+0x4c>
            return false;
 8002894:	2300      	movs	r3, #0
 8002896:	e006      	b.n	80028a6 <encode_extension_field+0x5a>
        
        extension = extension->next;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	60fb      	str	r3, [r7, #12]
    while (extension)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1dd      	bne.n	8002860 <encode_extension_field+0x14>
    }
    
    return true;
 80028a4:	2301      	movs	r3, #1
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b08e      	sub	sp, #56	@ 0x38
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 80028ba:	f107 0310 	add.w	r3, r7, #16
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fb13 	bl	8001eee <pb_field_iter_begin_const>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f083 0301 	eor.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <pb_encode+0x2a>
        return true; /* Empty message type */
 80028d4:	2301      	movs	r3, #1
 80028d6:	e02a      	b.n	800292e <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80028d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	2b0a      	cmp	r3, #10
 80028e2:	d10d      	bne.n	8002900 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	4619      	mov	r1, r3
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff ffae 	bl	800284c <encode_extension_field>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00f      	beq.n	800291c <pb_encode+0x6e>
                return false;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e016      	b.n	800292e <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	4619      	mov	r1, r3
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7ff ff02 	bl	8002710 <encode_field>
 800290c:	4603      	mov	r3, r0
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <pb_encode+0x6e>
                return false;
 8002918:	2300      	movs	r3, #0
 800291a:	e008      	b.n	800292e <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fac2 	bl	8001eaa <pb_field_iter_next>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1d5      	bne.n	80028d8 <pb_encode+0x2a>
    
    return true;
 800292c:	2301      	movs	r3, #1
}
 800292e:	4618      	mov	r0, r3
 8002930:	3738      	adds	r7, #56	@ 0x38
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b088      	sub	sp, #32
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800294e:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	09db      	lsrs	r3, r3, #7
 8002954:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 8002956:	e013      	b.n	8002980 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 8002958:	7efb      	ldrb	r3, [r7, #27]
 800295a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800295e:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	61fa      	str	r2, [r7, #28]
 8002966:	3320      	adds	r3, #32
 8002968:	443b      	add	r3, r7
 800296a:	7efa      	ldrb	r2, [r7, #27]
 800296c:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002978:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	09db      	lsrs	r3, r3, #7
 800297e:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d805      	bhi.n	8002992 <pb_encode_varint_32+0x5c>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e5      	bne.n	8002958 <pb_encode_varint_32+0x22>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e2      	bne.n	8002958 <pb_encode_varint_32+0x22>
    }

    if (high)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d024      	beq.n	80029e2 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	7efb      	ldrb	r3, [r7, #27]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	08db      	lsrs	r3, r3, #3
 80029b0:	607b      	str	r3, [r7, #4]

        while (high)
 80029b2:	e013      	b.n	80029dc <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 80029b4:	7efb      	ldrb	r3, [r7, #27]
 80029b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029ba:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	61fa      	str	r2, [r7, #28]
 80029c2:	3320      	adds	r3, #32
 80029c4:	443b      	add	r3, r7
 80029c6:	7efa      	ldrb	r2, [r7, #27]
 80029c8:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d4:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	09db      	lsrs	r3, r3, #7
 80029da:	607b      	str	r3, [r7, #4]
        while (high)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e8      	bne.n	80029b4 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	61fa      	str	r2, [r7, #28]
 80029e8:	3320      	adds	r3, #32
 80029ea:	443b      	add	r3, r7
 80029ec:	7efa      	ldrb	r2, [r7, #27]
 80029ee:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 80029f2:	f107 0310 	add.w	r3, r7, #16
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	4619      	mov	r1, r3
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7ff fb0a 	bl	8002014 <pb_write>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8002a0a:	b590      	push	{r4, r7, lr}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 8002a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a1a:	2a80      	cmp	r2, #128	@ 0x80
 8002a1c:	f173 0300 	sbcs.w	r3, r3, #0
 8002a20:	d20a      	bcs.n	8002a38 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 8002a22:	783b      	ldrb	r3, [r7, #0]
 8002a24:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 8002a26:	f107 0317 	add.w	r3, r7, #23
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff faf0 	bl	8002014 <pb_write>
 8002a34:	4603      	mov	r3, r0
 8002a36:	e00f      	b.n	8002a58 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8002a38:	683c      	ldr	r4, [r7, #0]
 8002a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	000a      	movs	r2, r1
 8002a48:	2300      	movs	r3, #0
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4621      	mov	r1, r4
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ff70 	bl	8002936 <pb_encode_varint_32>
 8002a56:	4603      	mov	r3, r0
#endif
    }
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8002a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a64:	b08a      	sub	sp, #40	@ 0x28
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6178      	str	r0, [r7, #20]
 8002a6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 8002a6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a72:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8002a76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 8002a7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	da15      	bge.n	8002aae <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 8002a82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8a:	ea00 0402 	and.w	r4, r0, r2
 8002a8e:	ea01 0503 	and.w	r5, r1, r3
 8002a92:	1923      	adds	r3, r4, r4
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	eb45 0305 	adc.w	r3, r5, r5
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa0:	ea6f 0a02 	mvn.w	sl, r2
 8002aa4:	ea6f 0b03 	mvn.w	fp, r3
 8002aa8:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8002aac:	e007      	b.n	8002abe <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 8002aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ab2:	eb12 0802 	adds.w	r8, r2, r2
 8002ab6:	eb43 0903 	adc.w	r9, r3, r3
 8002aba:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 8002abe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f7ff ffa1 	bl	8002a0a <pb_encode_varint>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3728      	adds	r7, #40	@ 0x28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ad4 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 8002ade:	2204      	movs	r2, #4
 8002ae0:	6839      	ldr	r1, [r7, #0]
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fa96 	bl	8002014 <pb_write>
 8002ae8:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8002afc:	2208      	movs	r2, #8
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fa87 	bl	8002014 <pb_write>
 8002b06:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b088      	sub	sp, #32
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6178      	str	r0, [r7, #20]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	60fa      	str	r2, [r7, #12]
 8002b1e:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	469a      	mov	sl, r3
 8002b26:	4693      	mov	fp, r2
 8002b28:	ea4f 755a 	mov.w	r5, sl, lsr #29
 8002b2c:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	2200      	movs	r2, #0
 8002b34:	4698      	mov	r8, r3
 8002b36:	4691      	mov	r9, r2
 8002b38:	ea44 0308 	orr.w	r3, r4, r8
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	ea45 0309 	orr.w	r3, r5, r9
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b48:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 8002b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b50:	6978      	ldr	r0, [r7, #20]
 8002b52:	f7ff ff5a 	bl	8002a0a <pb_encode_varint>
 8002b56:	4603      	mov	r3, r0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002b64 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	7d9b      	ldrb	r3, [r3, #22]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	2b0b      	cmp	r3, #11
 8002b78:	d826      	bhi.n	8002bc8 <pb_encode_tag_for_field+0x64>
 8002b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b80 <pb_encode_tag_for_field+0x1c>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002bb1 	.word	0x08002bb1
 8002b84:	08002bb1 	.word	0x08002bb1
 8002b88:	08002bb1 	.word	0x08002bb1
 8002b8c:	08002bb1 	.word	0x08002bb1
 8002b90:	08002bb7 	.word	0x08002bb7
 8002b94:	08002bbd 	.word	0x08002bbd
 8002b98:	08002bc3 	.word	0x08002bc3
 8002b9c:	08002bc3 	.word	0x08002bc3
 8002ba0:	08002bc3 	.word	0x08002bc3
 8002ba4:	08002bc3 	.word	0x08002bc3
 8002ba8:	08002bc9 	.word	0x08002bc9
 8002bac:	08002bc3 	.word	0x08002bc3
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
            break;
 8002bb4:	e014      	b.n	8002be0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	73fb      	strb	r3, [r7, #15]
            break;
 8002bba:	e011      	b.n	8002be0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
            break;
 8002bc0:	e00e      	b.n	8002be0 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	73fb      	strb	r3, [r7, #15]
            break;
 8002bc6:	e00b      	b.n	8002be0 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <pb_encode_tag_for_field+0x72>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	e000      	b.n	8002bd8 <pb_encode_tag_for_field+0x74>
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <pb_encode_tag_for_field+0x98>)
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6113      	str	r3, [r2, #16]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e008      	b.n	8002bf2 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	8a1b      	ldrh	r3, [r3, #16]
 8002be4:	461a      	mov	r2, r3
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ff90 	bl	8002b10 <pb_encode_tag>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	0800b74c 	.word	0x0800b74c

08002c00 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	461c      	mov	r4, r3
 8002c12:	4615      	mov	r5, r2
 8002c14:	4622      	mov	r2, r4
 8002c16:	462b      	mov	r3, r5
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff fef6 	bl	8002a0a <pb_encode_varint>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f083 0301 	eor.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <pb_encode_string+0x2e>
        return false;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e005      	b.n	8002c3a <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff f9ee 	bl	8002014 <pb_write>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c44 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8002c44:	b5b0      	push	{r4, r5, r7, lr}
 8002c46:	b08c      	sub	sp, #48	@ 0x30
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fe20 	bl	80028ae <pb_encode>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e065      	b.n	8002d50 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8002c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	461c      	mov	r4, r3
 8002c8e:	4615      	mov	r5, r2
 8002c90:	4622      	mov	r2, r4
 8002c92:	462b      	mov	r3, r5
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff feb8 	bl	8002a0a <pb_encode_varint>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f083 0301 	eor.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <pb_encode_submessage+0x66>
        return false;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e052      	b.n	8002d50 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 8002cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff f9ac 	bl	8002014 <pb_write>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	e047      	b.n	8002d50 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc6:	441a      	add	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d90b      	bls.n	8002ce8 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <pb_encode_submessage+0x9a>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	e000      	b.n	8002ce0 <pb_encode_submessage+0x9c>
 8002cde:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <pb_encode_submessage+0x114>)
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	6113      	str	r3, [r2, #16]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e033      	b.n	8002d50 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8002cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf6:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fdd0 	bl	80028ae <pb_encode>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	441a      	add	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 8002d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d00b      	beq.n	8002d4c <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <pb_encode_submessage+0xfe>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	e000      	b.n	8002d44 <pb_encode_submessage+0x100>
 8002d42:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <pb_encode_submessage+0x118>)
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	6113      	str	r3, [r2, #16]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e001      	b.n	8002d50 <pb_encode_submessage+0x10c>
    
    return status;
 8002d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3730      	adds	r7, #48	@ 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bdb0      	pop	{r4, r5, r7, pc}
 8002d58:	0800b714 	.word	0x0800b714
 8002d5c:	0800b79c 	.word	0x0800b79c

08002d60 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f9a0 	bl	80020b4 <safe_read_bool>
 8002d74:	4603      	mov	r3, r0
 8002d76:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	461c      	mov	r4, r3
 8002d7e:	4615      	mov	r5, r2
 8002d80:	4622      	mov	r2, r4
 8002d82:	462b      	mov	r3, r5
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fe40 	bl	8002a0a <pb_encode_varint>
 8002d8a:	4603      	mov	r3, r0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bdb0      	pop	{r4, r5, r7, pc}

08002d94 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8002d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d98:	b08c      	sub	sp, #48	@ 0x30
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	61f8      	str	r0, [r7, #28]
 8002d9e:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	7d9b      	ldrb	r3, [r3, #22]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d152      	bne.n	8002e52 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	8a5b      	ldrh	r3, [r3, #18]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10b      	bne.n	8002dd8 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2200      	movs	r2, #0
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	617a      	str	r2, [r7, #20]
 8002dce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002dd2:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8002dd6:	e035      	b.n	8002e44 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	8a5b      	ldrh	r3, [r3, #18]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d10b      	bne.n	8002df8 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	60fa      	str	r2, [r7, #12]
 8002dee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002df2:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8002df6:	e025      	b.n	8002e44 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	8a5b      	ldrh	r3, [r3, #18]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d10a      	bne.n	8002e16 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e10:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8002e14:	e016      	b.n	8002e44 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	8a5b      	ldrh	r3, [r3, #18]
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d106      	bne.n	8002e2c <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002e2a:	e00b      	b.n	8002e44 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <pb_enc_varint+0xa6>
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	e000      	b.n	8002e3c <pb_enc_varint+0xa8>
 8002e3a:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <pb_enc_varint+0x180>)
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	6113      	str	r3, [r2, #16]
 8002e40:	2300      	movs	r3, #0
 8002e42:	e061      	b.n	8002f08 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8002e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e48:	69f8      	ldr	r0, [r7, #28]
 8002e4a:	f7ff fdde 	bl	8002a0a <pb_encode_varint>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	e05a      	b.n	8002f08 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	8a5b      	ldrh	r3, [r3, #18]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10a      	bne.n	8002e7c <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	17da      	asrs	r2, r3, #31
 8002e72:	469a      	mov	sl, r3
 8002e74:	4693      	mov	fp, r2
 8002e76:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8002e7a:	e032      	b.n	8002ee2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	8a5b      	ldrh	r3, [r3, #18]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d10a      	bne.n	8002e9a <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	17da      	asrs	r2, r3, #31
 8002e90:	4698      	mov	r8, r3
 8002e92:	4691      	mov	r9, r2
 8002e94:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8002e98:	e023      	b.n	8002ee2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	8a5b      	ldrh	r3, [r3, #18]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d108      	bne.n	8002eb4 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	17da      	asrs	r2, r3, #31
 8002eaa:	461c      	mov	r4, r3
 8002eac:	4615      	mov	r5, r2
 8002eae:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8002eb2:	e016      	b.n	8002ee2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	8a5b      	ldrh	r3, [r3, #18]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d106      	bne.n	8002eca <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002ec8:	e00b      	b.n	8002ee2 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <pb_enc_varint+0x144>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	e000      	b.n	8002eda <pb_enc_varint+0x146>
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <pb_enc_varint+0x180>)
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	6113      	str	r3, [r2, #16]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e012      	b.n	8002f08 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	7d9b      	ldrb	r3, [r3, #22]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d106      	bne.n	8002efc <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8002eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ef2:	69f8      	ldr	r0, [r7, #28]
 8002ef4:	f7ff fdb4 	bl	8002a60 <pb_encode_svarint>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	e005      	b.n	8002f08 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8002efc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f00:	69f8      	ldr	r0, [r7, #28]
 8002f02:	f7ff fd82 	bl	8002a0a <pb_encode_varint>
 8002f06:	4603      	mov	r3, r0

    }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3730      	adds	r7, #48	@ 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f12:	bf00      	nop
 8002f14:	0800b7b0 	.word	0x0800b7b0

08002f18 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	8a5b      	ldrh	r3, [r3, #18]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d107      	bne.n	8002f3a <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff fdcf 	bl	8002ad4 <pb_encode_fixed32>
 8002f36:	4603      	mov	r3, r0
 8002f38:	e016      	b.n	8002f68 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	8a5b      	ldrh	r3, [r3, #18]
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d107      	bne.n	8002f52 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fdd2 	bl	8002af2 <pb_encode_fixed64>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	e00a      	b.n	8002f68 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <pb_enc_fixed+0x48>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	e000      	b.n	8002f62 <pb_enc_fixed+0x4a>
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <pb_enc_fixed+0x58>)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6113      	str	r3, [r2, #16]
 8002f66:	2300      	movs	r3, #0
    }
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	0800b7b0 	.word	0x0800b7b0

08002f74 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff fe34 	bl	8002c00 <pb_encode_string>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	e022      	b.n	8002fe2 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	7d9b      	ldrb	r3, [r3, #22]
 8002fa0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d113      	bne.n	8002fd0 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	8a5b      	ldrh	r3, [r3, #18]
 8002fb2:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d90b      	bls.n	8002fd0 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <pb_enc_bytes+0x52>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	e000      	b.n	8002fc8 <pb_enc_bytes+0x54>
 8002fc6:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <pb_enc_bytes+0x78>)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6113      	str	r3, [r2, #16]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e008      	b.n	8002fe2 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1c99      	adds	r1, r3, #2
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fe10 	bl	8002c00 <pb_encode_string>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	0800b7c4 	.word	0x0800b7c4

08002ff0 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	8a5b      	ldrh	r3, [r3, #18]
 8003002:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7d9b      	ldrb	r3, [r3, #22]
 800300e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003012:	2b80      	cmp	r3, #128	@ 0x80
 8003014:	d103      	bne.n	800301e <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e011      	b.n	8003042 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <pb_enc_string+0x42>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	e000      	b.n	8003034 <pb_enc_string+0x44>
 8003032:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <pb_enc_string+0xb4>)
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6113      	str	r3, [r2, #16]
 8003038:	2300      	movs	r3, #0
 800303a:	e02f      	b.n	800309c <pb_enc_string+0xac>

        max_size -= 1;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	3b01      	subs	r3, #1
 8003040:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	e020      	b.n	8003090 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8003052:	e005      	b.n	8003060 <pb_enc_string+0x70>
        {
            size++;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
            p++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3301      	adds	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d203      	bcs.n	8003070 <pb_enc_string+0x80>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f1      	bne.n	8003054 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <pb_enc_string+0x96>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	e000      	b.n	8003088 <pb_enc_string+0x98>
 8003086:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <pb_enc_string+0xb8>)
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6113      	str	r3, [r2, #16]
 800308c:	2300      	movs	r3, #0
 800308e:	e005      	b.n	800309c <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fdb3 	bl	8002c00 <pb_encode_string>
 800309a:	4603      	mov	r3, r0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	0800b7d8 	.word	0x0800b7d8
 80030a8:	0800b7ec 	.word	0x0800b7ec

080030ac <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <pb_enc_submessage+0x20>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	e000      	b.n	80030ce <pb_enc_submessage+0x22>
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <pb_enc_submessage+0x88>)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6113      	str	r3, [r2, #16]
 80030d2:	2300      	movs	r3, #0
 80030d4:	e029      	b.n	800312a <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	7d9b      	ldrb	r3, [r3, #22]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	2b09      	cmp	r3, #9
 80030e0:	d11a      	bne.n	8003118 <pb_enc_submessage+0x6c>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	3b08      	subs	r3, #8
 80030f0:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00e      	beq.n	8003118 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	3204      	adds	r2, #4
 8003102:	6839      	ldr	r1, [r7, #0]
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
 8003108:	4603      	mov	r3, r0
 800310a:	f083 0301 	eor.w	r3, r3, #1
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <pb_enc_submessage+0x6c>
                return false;
 8003114:	2300      	movs	r3, #0
 8003116:	e008      	b.n	800312a <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	461a      	mov	r2, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff fd8e 	bl	8002c44 <pb_encode_submessage>
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	0800b800 	.word	0x0800b800

08003138 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	69d9      	ldr	r1, [r3, #28]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	8a5b      	ldrh	r3, [r3, #18]
 800314a:	461a      	mov	r2, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fd57 	bl	8002c00 <pb_encode_string>
 8003152:	4603      	mov	r3, r0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003162:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <HAL_MspInit+0x44>)
 8003164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003166:	4a0e      	ldr	r2, [pc, #56]	@ (80031a0 <HAL_MspInit+0x44>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6613      	str	r3, [r2, #96]	@ 0x60
 800316e:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <HAL_MspInit+0x44>)
 8003170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <HAL_MspInit+0x44>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	4a08      	ldr	r2, [pc, #32]	@ (80031a0 <HAL_MspInit+0x44>)
 8003180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003184:	6593      	str	r3, [r2, #88]	@ 0x58
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_MspInit+0x44>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003192:	f005 fab5 	bl	8008700 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <HAL_CRC_MspInit+0x38>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10b      	bne.n	80031ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <HAL_CRC_MspInit+0x3c>)
 80031b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ba:	4a09      	ldr	r2, [pc, #36]	@ (80031e0 <HAL_CRC_MspInit+0x3c>)
 80031bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80031c2:	4b07      	ldr	r3, [pc, #28]	@ (80031e0 <HAL_CRC_MspInit+0x3c>)
 80031c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40023000 	.word	0x40023000
 80031e0:	40021000 	.word	0x40021000

080031e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b09a      	sub	sp, #104	@ 0x68
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031fc:	f107 0310 	add.w	r3, r7, #16
 8003200:	2244      	movs	r2, #68	@ 0x44
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f008 f9f3 	bl	800b5f0 <memset>
  if(hfdcan->Instance==FDCAN1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a24      	ldr	r2, [pc, #144]	@ (80032a0 <HAL_FDCAN_MspInit+0xbc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d141      	bne.n	8003298 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003218:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800321a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800321e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	4618      	mov	r0, r3
 8003226:	f005 ffa9 	bl	800917c <HAL_RCCEx_PeriphCLKConfig>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003230:	f7fe fbe8 	bl	8001a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003234:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <HAL_FDCAN_MspInit+0xc0>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	4a1a      	ldr	r2, [pc, #104]	@ (80032a4 <HAL_FDCAN_MspInit+0xc0>)
 800323a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800323e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003240:	4b18      	ldr	r3, [pc, #96]	@ (80032a4 <HAL_FDCAN_MspInit+0xc0>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324c:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <HAL_FDCAN_MspInit+0xc0>)
 800324e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003250:	4a14      	ldr	r2, [pc, #80]	@ (80032a4 <HAL_FDCAN_MspInit+0xc0>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003258:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_FDCAN_MspInit+0xc0>)
 800325a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003264:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003268:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326a:	2302      	movs	r3, #2
 800326c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003272:	2300      	movs	r3, #0
 8003274:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003276:	2309      	movs	r3, #9
 8003278:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003284:	f004 fede 	bl	8008044 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	2015      	movs	r0, #21
 800328e:	f004 f888 	bl	80073a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003292:	2015      	movs	r0, #21
 8003294:	f004 f89f 	bl	80073d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003298:	bf00      	nop
 800329a:	3768      	adds	r7, #104	@ 0x68
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40006400 	.word	0x40006400
 80032a4:	40021000 	.word	0x40021000

080032a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b09a      	sub	sp, #104	@ 0x68
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032c0:	f107 0310 	add.w	r3, r7, #16
 80032c4:	2244      	movs	r2, #68	@ 0x44
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f008 f991 	bl	800b5f0 <memset>
  if(huart->Instance==USART2)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003350 <HAL_UART_MspInit+0xa8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d136      	bne.n	8003346 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032d8:	2302      	movs	r3, #2
 80032da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	4618      	mov	r0, r3
 80032e6:	f005 ff49 	bl	800917c <HAL_RCCEx_PeriphCLKConfig>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032f0:	f7fe fb88 	bl	8001a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f4:	4b17      	ldr	r3, [pc, #92]	@ (8003354 <HAL_UART_MspInit+0xac>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	4a16      	ldr	r2, [pc, #88]	@ (8003354 <HAL_UART_MspInit+0xac>)
 80032fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003300:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <HAL_UART_MspInit+0xac>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330c:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <HAL_UART_MspInit+0xac>)
 800330e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003310:	4a10      	ldr	r2, [pc, #64]	@ (8003354 <HAL_UART_MspInit+0xac>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003318:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <HAL_UART_MspInit+0xac>)
 800331a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003324:	230c      	movs	r3, #12
 8003326:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003334:	2307      	movs	r3, #7
 8003336:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800333c:	4619      	mov	r1, r3
 800333e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003342:	f004 fe7f 	bl	8008044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003346:	bf00      	nop
 8003348:	3768      	adds	r7, #104	@ 0x68
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40004400 	.word	0x40004400
 8003354:	40021000 	.word	0x40021000

08003358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <NMI_Handler+0x4>

08003360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <HardFault_Handler+0x4>

08003368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <MemManage_Handler+0x4>

08003370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <BusFault_Handler+0x4>

08003378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <UsageFault_Handler+0x4>

08003380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ae:	f003 fedd 	bl	800716c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f005 f8d8 	bl	8008570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80033c8:	4802      	ldr	r0, [pc, #8]	@ (80033d4 <FDCAN1_IT0_IRQHandler+0x10>)
 80033ca:	f004 fbcf 	bl	8007b6c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000118 	.word	0x20000118

080033d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80033dc:	2080      	movs	r0, #128	@ 0x80
 80033de:	f005 f8c7 	bl	8008570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80033f2:	4b12      	ldr	r3, [pc, #72]	@ (800343c <BSP_SPI1_Init+0x54>)
 80033f4:	4a12      	ldr	r2, [pc, #72]	@ (8003440 <BSP_SPI1_Init+0x58>)
 80033f6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80033f8:	4b12      	ldr	r3, [pc, #72]	@ (8003444 <BSP_SPI1_Init+0x5c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	4911      	ldr	r1, [pc, #68]	@ (8003444 <BSP_SPI1_Init+0x5c>)
 8003400:	600a      	str	r2, [r1, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d114      	bne.n	8003430 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003406:	480d      	ldr	r0, [pc, #52]	@ (800343c <BSP_SPI1_Init+0x54>)
 8003408:	f006 fe5d 	bl	800a0c6 <HAL_SPI_GetState>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10e      	bne.n	8003430 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8003412:	480a      	ldr	r0, [pc, #40]	@ (800343c <BSP_SPI1_Init+0x54>)
 8003414:	f000 f8c2 	bl	800359c <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d108      	bne.n	8003430 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800341e:	4807      	ldr	r0, [pc, #28]	@ (800343c <BSP_SPI1_Init+0x54>)
 8003420:	f000 f87a 	bl	8003518 <MX_SPI1_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800342a:	f06f 0307 	mvn.w	r3, #7
 800342e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003430:	687b      	ldr	r3, [r7, #4]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000330 	.word	0x20000330
 8003440:	40013000 	.word	0x40013000
 8003444:	20000394 	.word	0x20000394

08003448 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800344e:	f06f 0307 	mvn.w	r3, #7
 8003452:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8003454:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <BSP_SPI1_DeInit+0x48>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <BSP_SPI1_DeInit+0x48>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	4a0b      	ldr	r2, [pc, #44]	@ (8003490 <BSP_SPI1_DeInit+0x48>)
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <BSP_SPI1_DeInit+0x48>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 800346e:	4809      	ldr	r0, [pc, #36]	@ (8003494 <BSP_SPI1_DeInit+0x4c>)
 8003470:	f000 f8e8 	bl	8003644 <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8003474:	4807      	ldr	r0, [pc, #28]	@ (8003494 <BSP_SPI1_DeInit+0x4c>)
 8003476:	f006 f91c 	bl	80096b2 <HAL_SPI_DeInit>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8003480:	2300      	movs	r3, #0
 8003482:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8003484:	687b      	ldr	r3, [r7, #4]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000394 	.word	0x20000394
 8003494:	20000330 	.word	0x20000330

08003498 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80034a8:	887a      	ldrh	r2, [r7, #2]
 80034aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4806      	ldr	r0, [pc, #24]	@ (80034cc <BSP_SPI1_Send+0x34>)
 80034b2:	f006 f93a 	bl	800972a <HAL_SPI_Transmit>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80034bc:	f06f 0305 	mvn.w	r3, #5
 80034c0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000330 	.word	0x20000330

080034d0 <BSP_SPI1_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80034e0:	887a      	ldrh	r2, [r7, #2]
 80034e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4806      	ldr	r0, [pc, #24]	@ (8003504 <BSP_SPI1_Recv+0x34>)
 80034ea:	f006 fa93 	bl	8009a14 <HAL_SPI_Receive>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <BSP_SPI1_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80034f4:	f06f 0305 	mvn.w	r3, #5
 80034f8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000330 	.word	0x20000330

08003508 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800350c:	f003 fe40 	bl	8007190 <HAL_GetTick>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a1c      	ldr	r2, [pc, #112]	@ (8003598 <MX_SPI1_Init+0x80>)
 8003528:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003530:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800353e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003552:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2230      	movs	r2, #48	@ 0x30
 8003558:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2207      	movs	r2, #7
 8003570:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f005 ffec 	bl	800955c <HAL_SPI_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013000 	.word	0x40013000

0800359c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	@ 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035a4:	4b25      	ldr	r3, [pc, #148]	@ (800363c <SPI1_MspInit+0xa0>)
 80035a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a8:	4a24      	ldr	r2, [pc, #144]	@ (800363c <SPI1_MspInit+0xa0>)
 80035aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80035b0:	4b22      	ldr	r3, [pc, #136]	@ (800363c <SPI1_MspInit+0xa0>)
 80035b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035bc:	4b1f      	ldr	r3, [pc, #124]	@ (800363c <SPI1_MspInit+0xa0>)
 80035be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c0:	4a1e      	ldr	r2, [pc, #120]	@ (800363c <SPI1_MspInit+0xa0>)
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035c8:	4b1c      	ldr	r3, [pc, #112]	@ (800363c <SPI1_MspInit+0xa0>)
 80035ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80035d4:	2308      	movs	r3, #8
 80035d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035dc:	2301      	movs	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80035e4:	2305      	movs	r3, #5
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4619      	mov	r1, r3
 80035ee:	4814      	ldr	r0, [pc, #80]	@ (8003640 <SPI1_MspInit+0xa4>)
 80035f0:	f004 fd28 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80035f4:	2310      	movs	r3, #16
 80035f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003600:	2303      	movs	r3, #3
 8003602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003604:	2305      	movs	r3, #5
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	480c      	ldr	r0, [pc, #48]	@ (8003640 <SPI1_MspInit+0xa4>)
 8003610:	f004 fd18 	bl	8008044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003614:	2320      	movs	r3, #32
 8003616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003624:	2305      	movs	r3, #5
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4619      	mov	r1, r3
 800362e:	4804      	ldr	r0, [pc, #16]	@ (8003640 <SPI1_MspInit+0xa4>)
 8003630:	f004 fd08 	bl	8008044 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003634:	bf00      	nop
 8003636:	3728      	adds	r7, #40	@ 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	48000400 	.word	0x48000400

08003644 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800364c:	4b0a      	ldr	r3, [pc, #40]	@ (8003678 <SPI1_MspDeInit+0x34>)
 800364e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003650:	4a09      	ldr	r2, [pc, #36]	@ (8003678 <SPI1_MspDeInit+0x34>)
 8003652:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003656:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8003658:	2108      	movs	r1, #8
 800365a:	4808      	ldr	r0, [pc, #32]	@ (800367c <SPI1_MspDeInit+0x38>)
 800365c:	f004 fe74 	bl	8008348 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8003660:	2110      	movs	r1, #16
 8003662:	4806      	ldr	r0, [pc, #24]	@ (800367c <SPI1_MspDeInit+0x38>)
 8003664:	f004 fe70 	bl	8008348 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8003668:	2120      	movs	r1, #32
 800366a:	4804      	ldr	r0, [pc, #16]	@ (800367c <SPI1_MspDeInit+0x38>)
 800366c:	f004 fe6c 	bl	8008348 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	48000400 	.word	0x48000400

08003680 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <SystemInit+0x20>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <SystemInit+0x20>)
 800368c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036a4:	480d      	ldr	r0, [pc, #52]	@ (80036dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80036a8:	f7ff ffea 	bl	8003680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036ac:	480c      	ldr	r0, [pc, #48]	@ (80036e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80036ae:	490d      	ldr	r1, [pc, #52]	@ (80036e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036b0:	4a0d      	ldr	r2, [pc, #52]	@ (80036e8 <LoopForever+0xe>)
  movs r3, #0
 80036b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80036b4:	e002      	b.n	80036bc <LoopCopyDataInit>

080036b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ba:	3304      	adds	r3, #4

080036bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c0:	d3f9      	bcc.n	80036b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036c2:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80036c4:	4c0a      	ldr	r4, [pc, #40]	@ (80036f0 <LoopForever+0x16>)
  movs r3, #0
 80036c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036c8:	e001      	b.n	80036ce <LoopFillZerobss>

080036ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036cc:	3204      	adds	r2, #4

080036ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d0:	d3fb      	bcc.n	80036ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80036d2:	f007 ff95 	bl	800b600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036d6:	f7fd ffd3 	bl	8001680 <main>

080036da <LoopForever>:

LoopForever:
    b LoopForever
 80036da:	e7fe      	b.n	80036da <LoopForever>
  ldr   r0, =_estack
 80036dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80036e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036e4:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80036e8:	0800b910 	.word	0x0800b910
  ldr r2, =_sbss
 80036ec:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80036f0:	2000052c 	.word	0x2000052c

080036f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036f4:	e7fe      	b.n	80036f4 <ADC1_2_IRQHandler>
	...

080036f8 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800370c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e051      	b.n	80037b8 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	7b1a      	ldrb	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1d      	ldr	r2, [pc, #116]	@ (80037c4 <LSM6DSO_RegisterBusIO+0xcc>)
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1c      	ldr	r2, [pc, #112]	@ (80037c8 <LSM6DSO_RegisterBusIO+0xd0>)
 8003756:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e020      	b.n	80037b8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4798      	blx	r3
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e016      	b.n	80037b8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d112      	bne.n	80037b8 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800379c:	230c      	movs	r3, #12
 800379e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80037a0:	7afb      	ldrb	r3, [r7, #11]
 80037a2:	461a      	mov	r2, r3
 80037a4:	2112      	movs	r1, #18
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 ff5d 	bl	8004666 <LSM6DSO_Write_Reg>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037b6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80037b8:	68fb      	ldr	r3, [r7, #12]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	08004e9d 	.word	0x08004e9d
 80037c8:	08004ed3 	.word	0x08004ed3

080037cc <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d00b      	beq.n	80037f4 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3320      	adds	r3, #32
 80037e0:	2180      	movs	r1, #128	@ 0x80
 80037e2:	4618      	mov	r0, r3
 80037e4:	f002 f84e 	bl	8005884 <lsm6dso_i3c_disable_set>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037f2:	e060      	b.n	80038b6 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3320      	adds	r3, #32
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f002 f81c 	bl	8005838 <lsm6dso_auto_increment_set>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800380a:	e054      	b.n	80038b6 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3320      	adds	r3, #32
 8003810:	2101      	movs	r1, #1
 8003812:	4618      	mov	r0, r3
 8003814:	f001 ff2c 	bl	8005670 <lsm6dso_block_data_update_set>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003822:	e048      	b.n	80038b6 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3320      	adds	r3, #32
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f002 f898 	bl	8005960 <lsm6dso_fifo_mode_set>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800383a:	e03c      	b.n	80038b6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2204      	movs	r2, #4
 8003840:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3320      	adds	r3, #32
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fbea 	bl	8005024 <lsm6dso_xl_data_rate_set>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8003856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800385a:	e02c      	b.n	80038b6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3320      	adds	r3, #32
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f001 fb80 	bl	8004f68 <lsm6dso_xl_full_scale_set>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 800386e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003872:	e020      	b.n	80038b6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2204      	movs	r2, #4
 8003878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3320      	adds	r3, #32
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f001 fd98 	bl	80053b8 <lsm6dso_gy_data_rate_set>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003892:	e010      	b.n	80038b6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3320      	adds	r3, #32
 8003898:	2106      	movs	r1, #6
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fd24 	bl	80052e8 <lsm6dso_gy_full_scale_set>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 80038a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038aa:	e004      	b.n	80038b6 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f888 	bl	80039dc <LSM6DSO_ACC_Disable>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038d6:	e015      	b.n	8003904 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fc2e 	bl	800413a <LSM6DSO_GYRO_Disable>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80038e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038e8:	e00c      	b.n	8003904 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3320      	adds	r3, #32
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f001 ff7a 	bl	8005816 <lsm6dso_device_id_get>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800392c:	e000      	b.n	8003930 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2201      	movs	r2, #1
 800394c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2200      	movs	r2, #0
 8003952:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003960:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2210      	movs	r2, #16
 8003966:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	4a07      	ldr	r2, [pc, #28]	@ (8003990 <LSM6DSO_GetCapabilities+0x58>)
 8003972:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4a06      	ldr	r2, [pc, #24]	@ (8003990 <LSM6DSO_GetCapabilities+0x58>)
 8003978:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	45d02000 	.word	0x45d02000

08003994 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e014      	b.n	80039d4 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f103 0220 	add.w	r2, r3, #32
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f001 fb33 	bl	8005024 <lsm6dso_xl_data_rate_set>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039c8:	e004      	b.n	80039d4 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e01f      	b.n	8003a32 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f103 0220 	add.w	r2, r3, #32
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3333      	adds	r3, #51	@ 0x33
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f001 fc0a 	bl	8005218 <lsm6dso_xl_data_rate_get>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a0e:	e010      	b.n	8003a32 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3320      	adds	r3, #32
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 fb04 	bl	8005024 <lsm6dso_xl_data_rate_set>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a26:	e004      	b.n	8003a32 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3320      	adds	r3, #32
 8003a4e:	f107 020b 	add.w	r2, r7, #11
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 faad 	bl	8004fb4 <lsm6dso_xl_full_scale_get>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a64:	e023      	b.n	8003aae <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003a66:	7afb      	ldrb	r3, [r7, #11]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d81b      	bhi.n	8003aa4 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a95 	.word	0x08003a95
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003a88:	601a      	str	r2, [r3, #0]
      break;
 8003a8a:	e00f      	b.n	8003aac <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003abc <LSM6DSO_ACC_GetSensitivity+0x80>)
 8003a90:	601a      	str	r2, [r3, #0]
      break;
 8003a92:	e00b      	b.n	8003aac <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003a98:	601a      	str	r2, [r3, #0]
      break;
 8003a9a:	e007      	b.n	8003aac <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4a09      	ldr	r2, [pc, #36]	@ (8003ac4 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003aa0:	601a      	str	r2, [r3, #0]
      break;
 8003aa2:	e003      	b.n	8003aac <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003aa8:	60fb      	str	r3, [r7, #12]
      break;
 8003aaa:	bf00      	nop
  }

  return ret;
 8003aac:	68fb      	ldr	r3, [r7, #12]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	3d79db23 	.word	0x3d79db23
 8003abc:	3df9db23 	.word	0x3df9db23
 8003ac0:	3e79db23 	.word	0x3e79db23
 8003ac4:	3ef9db23 	.word	0x3ef9db23

08003ac8 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3320      	adds	r3, #32
 8003ada:	f107 020b 	add.w	r2, r7, #11
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 fb99 	bl	8005218 <lsm6dso_xl_data_rate_get>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003af0:	e054      	b.n	8003b9c <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	2b0b      	cmp	r3, #11
 8003af6:	d84c      	bhi.n	8003b92 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003af8:	a201      	add	r2, pc, #4	@ (adr r2, 8003b00 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b31 	.word	0x08003b31
 8003b04:	08003b43 	.word	0x08003b43
 8003b08:	08003b4b 	.word	0x08003b4b
 8003b0c:	08003b53 	.word	0x08003b53
 8003b10:	08003b5b 	.word	0x08003b5b
 8003b14:	08003b63 	.word	0x08003b63
 8003b18:	08003b6b 	.word	0x08003b6b
 8003b1c:	08003b73 	.word	0x08003b73
 8003b20:	08003b7b 	.word	0x08003b7b
 8003b24:	08003b83 	.word	0x08003b83
 8003b28:	08003b8b 	.word	0x08003b8b
 8003b2c:	08003b3b 	.word	0x08003b3b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
      break;
 8003b38:	e02f      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ba4 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8003b3e:	601a      	str	r2, [r3, #0]
      break;
 8003b40:	e02b      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	4a18      	ldr	r2, [pc, #96]	@ (8003ba8 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003b46:	601a      	str	r2, [r3, #0]
      break;
 8003b48:	e027      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	4a17      	ldr	r2, [pc, #92]	@ (8003bac <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8003b4e:	601a      	str	r2, [r3, #0]
      break;
 8003b50:	e023      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003b56:	601a      	str	r2, [r3, #0]
      break;
 8003b58:	e01f      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	4a15      	ldr	r2, [pc, #84]	@ (8003bb4 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8003b5e:	601a      	str	r2, [r3, #0]
      break;
 8003b60:	e01b      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	4a14      	ldr	r2, [pc, #80]	@ (8003bb8 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003b66:	601a      	str	r2, [r3, #0]
      break;
 8003b68:	e017      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	@ (8003bbc <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8003b6e:	601a      	str	r2, [r3, #0]
      break;
 8003b70:	e013      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	4a12      	ldr	r2, [pc, #72]	@ (8003bc0 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003b76:	601a      	str	r2, [r3, #0]
      break;
 8003b78:	e00f      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	4a11      	ldr	r2, [pc, #68]	@ (8003bc4 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003b7e:	601a      	str	r2, [r3, #0]
      break;
 8003b80:	e00b      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	4a10      	ldr	r2, [pc, #64]	@ (8003bc8 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003b86:	601a      	str	r2, [r3, #0]
      break;
 8003b88:	e007      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	4a0f      	ldr	r2, [pc, #60]	@ (8003bcc <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003b8e:	601a      	str	r2, [r3, #0]
      break;
 8003b90:	e003      	b.n	8003b9a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b96:	60fb      	str	r3, [r7, #12]
      break;
 8003b98:	bf00      	nop
  }

  return ret;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	3fcccccd 	.word	0x3fcccccd
 8003ba8:	41480000 	.word	0x41480000
 8003bac:	41d00000 	.word	0x41d00000
 8003bb0:	42500000 	.word	0x42500000
 8003bb4:	42d00000 	.word	0x42d00000
 8003bb8:	43500000 	.word	0x43500000
 8003bbc:	43d08000 	.word	0x43d08000
 8003bc0:	44504000 	.word	0x44504000
 8003bc4:	44d06000 	.word	0x44d06000
 8003bc8:	45505000 	.word	0x45505000
 8003bcc:	45d05800 	.word	0x45d05800

08003bd0 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003bdc:	2100      	movs	r1, #0
 8003bde:	ed97 0a00 	vldr	s0, [r7]
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f806 	bl	8003bf4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08c      	sub	sp, #48	@ 0x30
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c00:	460b      	mov	r3, r1
 8003c02:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	f000 80ea 	beq.w	8003de8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	f300 8163 	bgt.w	8003ee0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d074      	beq.n	8003d0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8003c22:	e15d      	b.n	8003ee0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f103 0020 	add.w	r0, r3, #32
 8003c2a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003c2e:	2301      	movs	r3, #1
 8003c30:	2114      	movs	r1, #20
 8003c32:	f001 f969 	bl	8004f08 <lsm6dso_read_reg>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c40:	e16c      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003c42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d025      	beq.n	8003c9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d10b      	bne.n	8003c72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3320      	adds	r3, #32
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f9df 	bl	8005024 <lsm6dso_xl_data_rate_set>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c70:	e154      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003c72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c76:	f36f 13c7 	bfc	r3, #7, #1
 8003c7a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f103 0020 	add.w	r0, r3, #32
 8003c84:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003c88:	2301      	movs	r3, #1
 8003c8a:	2114      	movs	r1, #20
 8003c8c:	f001 f954 	bl	8004f38 <lsm6dso_write_reg>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c9a:	e13f      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f103 0020 	add.w	r0, r3, #32
 8003ca2:	f107 0220 	add.w	r2, r7, #32
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	2115      	movs	r1, #21
 8003caa:	f001 f92d 	bl	8004f08 <lsm6dso_read_reg>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cb8:	e130      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003cba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d014      	beq.n	8003cf2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8003cc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ccc:	f36f 1304 	bfc	r3, #4, #1
 8003cd0:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f103 0020 	add.w	r0, r3, #32
 8003cda:	f107 0220 	add.w	r2, r7, #32
 8003cde:	2301      	movs	r3, #1
 8003ce0:	2115      	movs	r1, #21
 8003ce2:	f001 f929 	bl	8004f38 <lsm6dso_write_reg>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cf0:	e114      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003cf2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003cf6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	d400      	bmi.n	8003d06 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8003d04:	e0f0      	b.n	8003ee8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8003d06:	4b87      	ldr	r3, [pc, #540]	@ (8003f24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8003d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d0a:	e0ed      	b.n	8003ee8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f103 0020 	add.w	r0, r3, #32
 8003d12:	f107 021c 	add.w	r2, r7, #28
 8003d16:	2301      	movs	r3, #1
 8003d18:	2114      	movs	r1, #20
 8003d1a:	f001 f8f5 	bl	8004f08 <lsm6dso_read_reg>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d28:	e0f8      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003d2a:	7f3b      	ldrb	r3, [r7, #28]
 8003d2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d023      	beq.n	8003d7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d10b      	bne.n	8003d58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3320      	adds	r3, #32
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 f96c 	bl	8005024 <lsm6dso_xl_data_rate_set>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d56:	e0e1      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003d58:	7f3b      	ldrb	r3, [r7, #28]
 8003d5a:	f36f 13c7 	bfc	r3, #7, #1
 8003d5e:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f103 0020 	add.w	r0, r3, #32
 8003d66:	f107 021c 	add.w	r2, r7, #28
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	2114      	movs	r1, #20
 8003d6e:	f001 f8e3 	bl	8004f38 <lsm6dso_write_reg>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d7c:	e0ce      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f103 0020 	add.w	r0, r3, #32
 8003d84:	f107 0218 	add.w	r2, r7, #24
 8003d88:	2301      	movs	r3, #1
 8003d8a:	2115      	movs	r1, #21
 8003d8c:	f001 f8bc 	bl	8004f08 <lsm6dso_read_reg>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d9a:	e0bf      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003d9c:	7e3b      	ldrb	r3, [r7, #24]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d112      	bne.n	8003dce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003da8:	7e3b      	ldrb	r3, [r7, #24]
 8003daa:	f043 0310 	orr.w	r3, r3, #16
 8003dae:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f103 0020 	add.w	r0, r3, #32
 8003db6:	f107 0218 	add.w	r2, r7, #24
 8003dba:	2301      	movs	r3, #1
 8003dbc:	2115      	movs	r1, #21
 8003dbe:	f001 f8bb 	bl	8004f38 <lsm6dso_write_reg>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dcc:	e0a6      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003dce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003dd2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003f28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dde:	dc00      	bgt.n	8003de2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8003de0:	e082      	b.n	8003ee8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003de2:	4b52      	ldr	r3, [pc, #328]	@ (8003f2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de6:	e07f      	b.n	8003ee8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f103 0020 	add.w	r0, r3, #32
 8003dee:	f107 0210 	add.w	r2, r7, #16
 8003df2:	2301      	movs	r3, #1
 8003df4:	2115      	movs	r1, #21
 8003df6:	f001 f887 	bl	8004f08 <lsm6dso_read_reg>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e04:	e08a      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003e06:	7c3b      	ldrb	r3, [r7, #16]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d012      	beq.n	8003e38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003e12:	7c3b      	ldrb	r3, [r7, #16]
 8003e14:	f36f 1304 	bfc	r3, #4, #1
 8003e18:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f103 0020 	add.w	r0, r3, #32
 8003e20:	f107 0210 	add.w	r2, r7, #16
 8003e24:	2301      	movs	r3, #1
 8003e26:	2115      	movs	r1, #21
 8003e28:	f001 f886 	bl	8004f38 <lsm6dso_write_reg>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e36:	e071      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d108      	bne.n	8003e54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f979 	bl	800413a <LSM6DSO_GYRO_Disable>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003e4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e52:	e063      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f103 0020 	add.w	r0, r3, #32
 8003e5a:	f107 0214 	add.w	r2, r7, #20
 8003e5e:	2301      	movs	r3, #1
 8003e60:	2114      	movs	r1, #20
 8003e62:	f001 f851 	bl	8004f08 <lsm6dso_read_reg>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e70:	e054      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003e72:	7d3b      	ldrb	r3, [r7, #20]
 8003e74:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d123      	bne.n	8003ec6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d10b      	bne.n	8003ea0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3320      	adds	r3, #32
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 f8c8 	bl	8005024 <lsm6dso_xl_data_rate_set>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e9e:	e03d      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8003ea0:	7d3b      	ldrb	r3, [r7, #20]
 8003ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea6:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f103 0020 	add.w	r0, r3, #32
 8003eae:	f107 0214 	add.w	r2, r7, #20
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	2114      	movs	r1, #20
 8003eb6:	f001 f83f 	bl	8004f38 <lsm6dso_write_reg>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ec4:	e02a      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003ec6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003eca:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003f28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed6:	dc00      	bgt.n	8003eda <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003ed8:	e006      	b.n	8003ee8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003eda:	4b14      	ldr	r3, [pc, #80]	@ (8003f2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ede:	e003      	b.n	8003ee8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003ee6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eee:	d102      	bne.n	8003ef6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ef4:	e012      	b.n	8003f1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d106      	bne.n	8003f0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003f00:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fd93 	bl	8004a30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003f0a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003f0c:	e005      	b.n	8003f1a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003f0e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fe24 	bl	8004b60 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003f18:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8003f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3730      	adds	r7, #48	@ 0x30
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	41480000 	.word	0x41480000
 8003f28:	43500000 	.word	0x43500000
 8003f2c:	43500000 	.word	0x43500000

08003f30 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3320      	adds	r3, #32
 8003f42:	f107 020b 	add.w	r2, r7, #11
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 f833 	bl	8004fb4 <lsm6dso_xl_full_scale_get>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f58:	e023      	b.n	8003fa2 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d81b      	bhi.n	8003f98 <LSM6DSO_ACC_GetFullScale+0x68>
 8003f60:	a201      	add	r2, pc, #4	@ (adr r2, 8003f68 <LSM6DSO_ACC_GetFullScale+0x38>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f79 	.word	0x08003f79
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f89 	.word	0x08003f89
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	601a      	str	r2, [r3, #0]
      break;
 8003f7e:	e00f      	b.n	8003fa0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2204      	movs	r2, #4
 8003f84:	601a      	str	r2, [r3, #0]
      break;
 8003f86:	e00b      	b.n	8003fa0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	601a      	str	r2, [r3, #0]
      break;
 8003f8e:	e007      	b.n	8003fa0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2210      	movs	r2, #16
 8003f94:	601a      	str	r2, [r3, #0]
      break;
 8003f96:	e003      	b.n	8003fa0 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f9c:	60fb      	str	r3, [r7, #12]
      break;
 8003f9e:	bf00      	nop
  }

  return ret;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop

08003fac <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	dd0b      	ble.n	8003fd4 <LSM6DSO_ACC_SetFullScale+0x28>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	dd06      	ble.n	8003fd0 <LSM6DSO_ACC_SetFullScale+0x24>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	dc01      	bgt.n	8003fcc <LSM6DSO_ACC_SetFullScale+0x20>
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e004      	b.n	8003fd6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e002      	b.n	8003fd6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e000      	b.n	8003fd6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003fd4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003fd6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3320      	adds	r3, #32
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 ffc1 	bl	8004f68 <lsm6dso_xl_full_scale_set>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ff0:	e000      	b.n	8003ff4 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3320      	adds	r3, #32
 800400a:	f107 0208 	add.w	r2, r7, #8
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f001 fb9b 	bl	800574c <lsm6dso_acceleration_raw_get>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800401c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004020:	e00c      	b.n	800403c <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004022:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800402a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004032:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3320      	adds	r3, #32
 8004058:	f107 0210 	add.w	r2, r7, #16
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f001 fb74 	bl	800574c <lsm6dso_acceleration_raw_get>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800406e:	e03c      	b.n	80040ea <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fce0 	bl	8003a3c <LSM6DSO_ACC_GetSensitivity>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004086:	e030      	b.n	80040ea <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004088:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800408c:	ee07 3a90 	vmov	s15, r3
 8004090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004094:	edd7 7a03 	vldr	s15, [r7, #12]
 8004098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040a0:	ee17 2a90 	vmov	r2, s15
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80040a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80040ac:	ee07 3a90 	vmov	s15, r3
 80040b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040c0:	ee17 2a90 	vmov	r2, s15
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80040c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e0:	ee17 2a90 	vmov	r2, s15
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e014      	b.n	8004132 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f103 0220 	add.w	r2, r3, #32
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f001 f94e 	bl	80053b8 <lsm6dso_gy_data_rate_set>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004126:	e004      	b.n	8004132 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e01f      	b.n	8004190 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f103 0220 	add.w	r2, r3, #32
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3334      	adds	r3, #52	@ 0x34
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f001 fa25 	bl	80055ac <lsm6dso_gy_data_rate_get>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004168:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800416c:	e010      	b.n	8004190 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3320      	adds	r3, #32
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f001 f91f 	bl	80053b8 <lsm6dso_gy_data_rate_set>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004184:	e004      	b.n	8004190 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3320      	adds	r3, #32
 80041aa:	f107 020b 	add.w	r2, r7, #11
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 f8bf 	bl	8005334 <lsm6dso_gy_full_scale_get>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80041bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041c0:	e02d      	b.n	800421e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80041c2:	7afb      	ldrb	r3, [r7, #11]
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	d825      	bhi.n	8004214 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80041c8:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	080041ed 	.word	0x080041ed
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	08004215 	.word	0x08004215
 80041e0:	08004205 	.word	0x08004205
 80041e4:	08004215 	.word	0x08004215
 80041e8:	0800420d 	.word	0x0800420d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004228 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80041f0:	601a      	str	r2, [r3, #0]
      break;
 80041f2:	e013      	b.n	800421c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80041f8:	601a      	str	r2, [r3, #0]
      break;
 80041fa:	e00f      	b.n	800421c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004230 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004200:	601a      	str	r2, [r3, #0]
      break;
 8004202:	e00b      	b.n	800421c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4a0b      	ldr	r2, [pc, #44]	@ (8004234 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004208:	601a      	str	r2, [r3, #0]
      break;
 800420a:	e007      	b.n	800421c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	4a0a      	ldr	r2, [pc, #40]	@ (8004238 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004210:	601a      	str	r2, [r3, #0]
      break;
 8004212:	e003      	b.n	800421c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004218:	60fb      	str	r3, [r7, #12]
      break;
 800421a:	bf00      	nop
  }

  return ret;
 800421c:	68fb      	ldr	r3, [r7, #12]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	408c0000 	.word	0x408c0000
 800422c:	410c0000 	.word	0x410c0000
 8004230:	418c0000 	.word	0x418c0000
 8004234:	420c0000 	.word	0x420c0000
 8004238:	428c0000 	.word	0x428c0000

0800423c <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3320      	adds	r3, #32
 800424e:	f107 020b 	add.w	r2, r7, #11
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f001 f9a9 	bl	80055ac <lsm6dso_gy_data_rate_get>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004264:	e04e      	b.n	8004304 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004266:	7afb      	ldrb	r3, [r7, #11]
 8004268:	2b0a      	cmp	r3, #10
 800426a:	d846      	bhi.n	80042fa <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 800426c:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	080042a1 	.word	0x080042a1
 8004278:	080042ab 	.word	0x080042ab
 800427c:	080042b3 	.word	0x080042b3
 8004280:	080042bb 	.word	0x080042bb
 8004284:	080042c3 	.word	0x080042c3
 8004288:	080042cb 	.word	0x080042cb
 800428c:	080042d3 	.word	0x080042d3
 8004290:	080042db 	.word	0x080042db
 8004294:	080042e3 	.word	0x080042e3
 8004298:	080042eb 	.word	0x080042eb
 800429c:	080042f3 	.word	0x080042f3
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
      break;
 80042a8:	e02b      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	4a17      	ldr	r2, [pc, #92]	@ (800430c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80042ae:	601a      	str	r2, [r3, #0]
      break;
 80042b0:	e027      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	4a16      	ldr	r2, [pc, #88]	@ (8004310 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80042b6:	601a      	str	r2, [r3, #0]
      break;
 80042b8:	e023      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	4a15      	ldr	r2, [pc, #84]	@ (8004314 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80042be:	601a      	str	r2, [r3, #0]
      break;
 80042c0:	e01f      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	4a14      	ldr	r2, [pc, #80]	@ (8004318 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80042c6:	601a      	str	r2, [r3, #0]
      break;
 80042c8:	e01b      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	4a13      	ldr	r2, [pc, #76]	@ (800431c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80042ce:	601a      	str	r2, [r3, #0]
      break;
 80042d0:	e017      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	4a12      	ldr	r2, [pc, #72]	@ (8004320 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80042d6:	601a      	str	r2, [r3, #0]
      break;
 80042d8:	e013      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80042de:	601a      	str	r2, [r3, #0]
      break;
 80042e0:	e00f      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	4a10      	ldr	r2, [pc, #64]	@ (8004328 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80042e6:	601a      	str	r2, [r3, #0]
      break;
 80042e8:	e00b      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	4a0f      	ldr	r2, [pc, #60]	@ (800432c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80042ee:	601a      	str	r2, [r3, #0]
      break;
 80042f0:	e007      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004330 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80042f6:	601a      	str	r2, [r3, #0]
      break;
 80042f8:	e003      	b.n	8004302 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042fe:	60fb      	str	r3, [r7, #12]
      break;
 8004300:	bf00      	nop
  }

  return ret;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	41480000 	.word	0x41480000
 8004310:	41d00000 	.word	0x41d00000
 8004314:	42500000 	.word	0x42500000
 8004318:	42d00000 	.word	0x42d00000
 800431c:	43500000 	.word	0x43500000
 8004320:	43d08000 	.word	0x43d08000
 8004324:	44504000 	.word	0x44504000
 8004328:	44d06000 	.word	0x44d06000
 800432c:	45505000 	.word	0x45505000
 8004330:	45d05800 	.word	0x45d05800

08004334 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004340:	2100      	movs	r1, #0
 8004342:	ed97 0a00 	vldr	s0, [r7]
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f806 	bl	8004358 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 800434c:	4603      	mov	r3, r0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	ed87 0a02 	vstr	s0, [r7, #8]
 8004364:	460b      	mov	r3, r1
 8004366:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004376:	2b01      	cmp	r3, #1
 8004378:	d028      	beq.n	80043cc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800437a:	e05c      	b.n	8004436 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f103 0020 	add.w	r0, r3, #32
 8004382:	f107 0214 	add.w	r2, r7, #20
 8004386:	2301      	movs	r3, #1
 8004388:	2116      	movs	r1, #22
 800438a:	f000 fdbd 	bl	8004f08 <lsm6dso_read_reg>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004394:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004398:	e06c      	b.n	8004474 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800439a:	7d3b      	ldrb	r3, [r7, #20]
 800439c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d04b      	beq.n	800443e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80043a6:	7d3b      	ldrb	r3, [r7, #20]
 80043a8:	f36f 13c7 	bfc	r3, #7, #1
 80043ac:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f103 0020 	add.w	r0, r3, #32
 80043b4:	f107 0214 	add.w	r2, r7, #20
 80043b8:	2301      	movs	r3, #1
 80043ba:	2116      	movs	r1, #22
 80043bc:	f000 fdbc 	bl	8004f38 <lsm6dso_write_reg>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d03b      	beq.n	800443e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043ca:	e053      	b.n	8004474 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f103 0020 	add.w	r0, r3, #32
 80043d2:	f107 0210 	add.w	r2, r7, #16
 80043d6:	2301      	movs	r3, #1
 80043d8:	2116      	movs	r1, #22
 80043da:	f000 fd95 	bl	8004f08 <lsm6dso_read_reg>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043e8:	e044      	b.n	8004474 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80043ea:	7c3b      	ldrb	r3, [r7, #16]
 80043ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d112      	bne.n	800441c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80043f6:	7c3b      	ldrb	r3, [r7, #16]
 80043f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fc:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f103 0020 	add.w	r0, r3, #32
 8004404:	f107 0210 	add.w	r2, r7, #16
 8004408:	2301      	movs	r3, #1
 800440a:	2116      	movs	r1, #22
 800440c:	f000 fd94 	bl	8004f38 <lsm6dso_write_reg>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800441a:	e02b      	b.n	8004474 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800441c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004420:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800447c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442c:	dc00      	bgt.n	8004430 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800442e:	e007      	b.n	8004440 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004430:	4b13      	ldr	r3, [pc, #76]	@ (8004480 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	e004      	b.n	8004440 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800443a:	61fb      	str	r3, [r7, #28]
      break;
 800443c:	e000      	b.n	8004440 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800443e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004446:	d102      	bne.n	800444e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800444c:	e012      	b.n	8004474 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004454:	2b01      	cmp	r3, #1
 8004456:	d106      	bne.n	8004466 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004458:	ed97 0a06 	vldr	s0, [r7, #24]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fc0f 	bl	8004c80 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004462:	61f8      	str	r0, [r7, #28]
 8004464:	e005      	b.n	8004472 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004466:	ed97 0a06 	vldr	s0, [r7, #24]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fc94 	bl	8004d98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004470:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004472:	69fb      	ldr	r3, [r7, #28]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	43500000 	.word	0x43500000
 8004480:	43500000 	.word	0x43500000

08004484 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3320      	adds	r3, #32
 8004496:	f107 020b 	add.w	r2, r7, #11
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f000 ff49 	bl	8005334 <lsm6dso_gy_full_scale_get>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044ac:	e030      	b.n	8004510 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80044ae:	7afb      	ldrb	r3, [r7, #11]
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d828      	bhi.n	8004506 <LSM6DSO_GYRO_GetFullScale+0x82>
 80044b4:	a201      	add	r2, pc, #4	@ (adr r2, 80044bc <LSM6DSO_GYRO_GetFullScale+0x38>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080044d9 	.word	0x080044d9
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	08004507 	.word	0x08004507
 80044cc:	080044f3 	.word	0x080044f3
 80044d0:	08004507 	.word	0x08004507
 80044d4:	080044fd 	.word	0x080044fd
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	227d      	movs	r2, #125	@ 0x7d
 80044dc:	601a      	str	r2, [r3, #0]
      break;
 80044de:	e016      	b.n	800450e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	22fa      	movs	r2, #250	@ 0xfa
 80044e4:	601a      	str	r2, [r3, #0]
      break;
 80044e6:	e012      	b.n	800450e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80044ee:	601a      	str	r2, [r3, #0]
      break;
 80044f0:	e00d      	b.n	800450e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044f8:	601a      	str	r2, [r3, #0]
      break;
 80044fa:	e008      	b.n	800450e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004502:	601a      	str	r2, [r3, #0]
      break;
 8004504:	e003      	b.n	800450e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800450a:	60fb      	str	r3, [r7, #12]
      break;
 800450c:	bf00      	nop
  }

  return ret;
 800450e:	68fb      	ldr	r3, [r7, #12]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b7d      	cmp	r3, #125	@ 0x7d
 8004526:	dd12      	ble.n	800454e <LSM6DSO_GYRO_SetFullScale+0x36>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2bfa      	cmp	r3, #250	@ 0xfa
 800452c:	dd0d      	ble.n	800454a <LSM6DSO_GYRO_SetFullScale+0x32>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004534:	dd07      	ble.n	8004546 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800453c:	dc01      	bgt.n	8004542 <LSM6DSO_GYRO_SetFullScale+0x2a>
 800453e:	2304      	movs	r3, #4
 8004540:	e006      	b.n	8004550 <LSM6DSO_GYRO_SetFullScale+0x38>
 8004542:	2306      	movs	r3, #6
 8004544:	e004      	b.n	8004550 <LSM6DSO_GYRO_SetFullScale+0x38>
 8004546:	2302      	movs	r3, #2
 8004548:	e002      	b.n	8004550 <LSM6DSO_GYRO_SetFullScale+0x38>
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <LSM6DSO_GYRO_SetFullScale+0x38>
 800454e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8004550:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3320      	adds	r3, #32
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fec4 	bl	80052e8 <lsm6dso_gy_full_scale_set>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8004566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800456a:	e000      	b.n	800456e <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3320      	adds	r3, #32
 8004584:	f107 0208 	add.w	r2, r7, #8
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f001 f896 	bl	80056bc <lsm6dso_angular_rate_raw_get>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800459a:	e00c      	b.n	80045b6 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800459c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80045a4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80045ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b086      	sub	sp, #24
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3320      	adds	r3, #32
 80045cc:	f107 0210 	add.w	r2, r7, #16
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 f872 	bl	80056bc <lsm6dso_angular_rate_raw_get>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045e2:	e03c      	b.n	800465e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80045e4:	f107 030c 	add.w	r3, r7, #12
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fdd4 	bl	8004198 <LSM6DSO_GYRO_GetSensitivity>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045fa:	e030      	b.n	800465e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80045fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004608:	edd7 7a03 	vldr	s15, [r7, #12]
 800460c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004614:	ee17 2a90 	vmov	r2, s15
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800461c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004628:	edd7 7a03 	vldr	s15, [r7, #12]
 800462c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004634:	ee17 2a90 	vmov	r2, s15
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800463c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004640:	ee07 3a90 	vmov	s15, r3
 8004644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004648:	edd7 7a03 	vldr	s15, [r7, #12]
 800464c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004654:	ee17 2a90 	vmov	r2, s15
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	70fb      	strb	r3, [r7, #3]
 8004672:	4613      	mov	r3, r2
 8004674:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f103 0020 	add.w	r0, r3, #32
 800467c:	1cba      	adds	r2, r7, #2
 800467e:	78f9      	ldrb	r1, [r7, #3]
 8004680:	2301      	movs	r3, #1
 8004682:	f000 fc59 	bl	8004f38 <lsm6dso_write_reg>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004690:	e000      	b.n	8004694 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <LSM6DSO_ACC_Enable_6D_Orientation>:
  * @param  pObj the device pObj
  * @param  IntPin interrupt pin line to be used
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable_6D_Orientation(LSM6DSO_Object_t *pObj, LSM6DSO_SensorIntPin_t IntPin)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
  lsm6dso_pin_int1_route_t val1;
  lsm6dso_pin_int2_route_t val2;

  /* Output Data Rate selection */
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSO_OK)
 80046ac:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8004798 <LSM6DSO_ACC_Enable_6D_Orientation+0xfc>
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fa8d 	bl	8003bd0 <LSM6DSO_ACC_SetOutputDataRate>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <LSM6DSO_ACC_Enable_6D_Orientation+0x26>
  {
    return LSM6DSO_ERROR;
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046c0:	e065      	b.n	800478e <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
  }

  /* Full scale selection */
  if (LSM6DSO_ACC_SetFullScale(pObj, 2) != LSM6DSO_OK)
 80046c2:	2102      	movs	r1, #2
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fc71 	bl	8003fac <LSM6DSO_ACC_SetFullScale>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <LSM6DSO_ACC_Enable_6D_Orientation+0x3a>
  {
    return LSM6DSO_ERROR;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046d4:	e05b      	b.n	800478e <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
  }

  /* 6D orientation enabled. */
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_60) != LSM6DSO_OK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3320      	adds	r3, #32
 80046da:	2102      	movs	r1, #2
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 f919 	bl	8005914 <lsm6dso_6d_threshold_set>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <LSM6DSO_ACC_Enable_6D_Orientation+0x52>
  {
    return LSM6DSO_ERROR;
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046ec:	e04f      	b.n	800478e <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
  }

  /* Enable 6D orientation event on either INT1 or INT2 pin */
  switch (IntPin)
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <LSM6DSO_ACC_Enable_6D_Orientation+0x5e>
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d021      	beq.n	800473c <LSM6DSO_ACC_Enable_6D_Orientation+0xa0>
 80046f8:	e041      	b.n	800477e <LSM6DSO_ACC_Enable_6D_Orientation+0xe2>
  {
    case LSM6DSO_INT1_PIN:
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3320      	adds	r3, #32
 80046fe:	f107 0214 	add.w	r2, r7, #20
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f001 fd91 	bl	800622c <lsm6dso_pin_int1_route_get>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <LSM6DSO_ACC_Enable_6D_Orientation+0x7a>
      {
        return LSM6DSO_ERROR;
 8004710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004714:	e03b      	b.n	800478e <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }

      val1.six_d = PROPERTY_ENABLE;
 8004716:	7d7b      	ldrb	r3, [r7, #21]
 8004718:	f043 0308 	orr.w	r3, r3, #8
 800471c:	757b      	strb	r3, [r7, #21]

      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f103 0020 	add.w	r0, r3, #32
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	e893 0006 	ldmia.w	r3, {r1, r2}
 800472c:	f001 f9d8 	bl	8005ae0 <lsm6dso_pin_int1_route_set>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d027      	beq.n	8004786 <LSM6DSO_ACC_Enable_6D_Orientation+0xea>
      {
        return LSM6DSO_ERROR;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800473a:	e028      	b.n	800478e <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }
      break;

    case LSM6DSO_INT2_PIN:
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3320      	adds	r3, #32
 8004740:	f107 020c 	add.w	r2, r7, #12
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f002 fad2 	bl	8006cf0 <lsm6dso_pin_int2_route_get>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <LSM6DSO_ACC_Enable_6D_Orientation+0xbc>
      {
        return LSM6DSO_ERROR;
 8004752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004756:	e01a      	b.n	800478e <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }

      val2.six_d = PROPERTY_ENABLE;
 8004758:	7b7b      	ldrb	r3, [r7, #13]
 800475a:	f043 0302 	orr.w	r3, r3, #2
 800475e:	737b      	strb	r3, [r7, #13]

      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f103 0020 	add.w	r0, r3, #32
 8004766:	f107 030c 	add.w	r3, r7, #12
 800476a:	cb0c      	ldmia	r3, {r2, r3}
 800476c:	2100      	movs	r1, #0
 800476e:	f001 ff4d 	bl	800660c <lsm6dso_pin_int2_route_set>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <LSM6DSO_ACC_Enable_6D_Orientation+0xee>
      {
        return LSM6DSO_ERROR;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800477c:	e007      	b.n	800478e <LSM6DSO_ACC_Enable_6D_Orientation+0xf2>
      }
      break;

    default:
      ret = LSM6DSO_ERROR;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004782:	61fb      	str	r3, [r7, #28]
      break;
 8004784:	e002      	b.n	800478c <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      break;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <LSM6DSO_ACC_Enable_6D_Orientation+0xf0>
      break;
 800478a:	bf00      	nop
  }

  return ret;
 800478c:	69fb      	ldr	r3, [r7, #28]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	43d08000 	.word	0x43d08000

0800479c <LSM6DSO_ACC_Get_Event_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of all hardware events
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_Event_Status(LSM6DSO_Object_t *pObj, LSM6DSO_Event_Status_t *Status)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	@ 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  lsm6dso_md1_cfg_t md1_cfg;
  lsm6dso_md2_cfg_t md2_cfg;
  lsm6dso_emb_func_int1_t int1_ctrl;
  lsm6dso_emb_func_int2_t int2_ctrl;

  (void)memset((void *)Status, 0x0, sizeof(LSM6DSO_Event_Status_t));
 80047a6:	2204      	movs	r2, #4
 80047a8:	2100      	movs	r1, #0
 80047aa:	6838      	ldr	r0, [r7, #0]
 80047ac:	f006 ff20 	bl	800b5f0 <memset>

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != LSM6DSO_OK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f103 0020 	add.w	r0, r3, #32
 80047b6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80047ba:	2301      	movs	r3, #1
 80047bc:	211b      	movs	r1, #27
 80047be:	f000 fba3 	bl	8004f08 <lsm6dso_read_reg>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <LSM6DSO_ACC_Get_Event_Status+0x32>
  {
    return LSM6DSO_ERROR;
 80047c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047cc:	e12c      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_TAP_SRC, (uint8_t *)&tap_src, 1) != LSM6DSO_OK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f103 0020 	add.w	r0, r3, #32
 80047d4:	f107 0220 	add.w	r2, r7, #32
 80047d8:	2301      	movs	r3, #1
 80047da:	211c      	movs	r1, #28
 80047dc:	f000 fb94 	bl	8004f08 <lsm6dso_read_reg>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <LSM6DSO_ACC_Get_Event_Status+0x50>
  {
    return LSM6DSO_ERROR;
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047ea:	e11d      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&d6d_src, 1) != LSM6DSO_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 0020 	add.w	r0, r3, #32
 80047f2:	f107 021c 	add.w	r2, r7, #28
 80047f6:	2301      	movs	r3, #1
 80047f8:	211d      	movs	r1, #29
 80047fa:	f000 fb85 	bl	8004f08 <lsm6dso_read_reg>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <LSM6DSO_ACC_Get_Event_Status+0x6e>
  {
    return LSM6DSO_ERROR;
 8004804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004808:	e10e      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_EMBEDDED_FUNC_BANK) != LSM6DSO_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3320      	adds	r3, #32
 800480e:	2102      	movs	r1, #2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 ffe3 	bl	80057dc <lsm6dso_mem_bank_set>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <LSM6DSO_ACC_Get_Event_Status+0x86>
  {
    return LSM6DSO_ERROR;
 800481c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004820:	e102      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_SRC, (uint8_t *)&func_src, 1) != LSM6DSO_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f103 0020 	add.w	r0, r3, #32
 8004828:	f107 0218 	add.w	r2, r7, #24
 800482c:	2301      	movs	r3, #1
 800482e:	2164      	movs	r1, #100	@ 0x64
 8004830:	f000 fb6a 	bl	8004f08 <lsm6dso_read_reg>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <LSM6DSO_ACC_Get_Event_Status+0xa4>
  {
    return LSM6DSO_ERROR;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800483e:	e0f3      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&int1_ctrl, 1) != LSM6DSO_OK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f103 0020 	add.w	r0, r3, #32
 8004846:	f107 020c 	add.w	r2, r7, #12
 800484a:	2301      	movs	r3, #1
 800484c:	210a      	movs	r1, #10
 800484e:	f000 fb5b 	bl	8004f08 <lsm6dso_read_reg>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <LSM6DSO_ACC_Get_Event_Status+0xc2>
  {
    return LSM6DSO_ERROR;
 8004858:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800485c:	e0e4      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&int2_ctrl, 1) != LSM6DSO_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f103 0020 	add.w	r0, r3, #32
 8004864:	f107 0208 	add.w	r2, r7, #8
 8004868:	2301      	movs	r3, #1
 800486a:	210e      	movs	r1, #14
 800486c:	f000 fb4c 	bl	8004f08 <lsm6dso_read_reg>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <LSM6DSO_ACC_Get_Event_Status+0xe0>
  {
    return LSM6DSO_ERROR;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800487a:	e0d5      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_USER_BANK) != 0)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3320      	adds	r3, #32
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f000 ffaa 	bl	80057dc <lsm6dso_mem_bank_set>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <LSM6DSO_ACC_Get_Event_Status+0xf8>
  {
    return LSM6DSO_ERROR;
 800488e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004892:	e0c9      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1) != LSM6DSO_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f103 0020 	add.w	r0, r3, #32
 800489a:	f107 0214 	add.w	r2, r7, #20
 800489e:	2301      	movs	r3, #1
 80048a0:	215e      	movs	r1, #94	@ 0x5e
 80048a2:	f000 fb31 	bl	8004f08 <lsm6dso_read_reg>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <LSM6DSO_ACC_Get_Event_Status+0x116>
  {
    return LSM6DSO_ERROR;
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048b0:	e0ba      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1) != LSM6DSO_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f103 0020 	add.w	r0, r3, #32
 80048b8:	f107 0210 	add.w	r2, r7, #16
 80048bc:	2301      	movs	r3, #1
 80048be:	215f      	movs	r1, #95	@ 0x5f
 80048c0:	f000 fb22 	bl	8004f08 <lsm6dso_read_reg>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <LSM6DSO_ACC_Get_Event_Status+0x134>
  {
    return LSM6DSO_ERROR;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048ce:	e0ab      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if (lsm6dso_tilt_flag_data_ready_get(&(pObj->Ctx), &tilt_ia) != LSM6DSO_OK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3320      	adds	r3, #32
 80048d4:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f001 f866 	bl	80059ac <lsm6dso_tilt_flag_data_ready_get>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <LSM6DSO_ACC_Get_Event_Status+0x150>
  {
    return LSM6DSO_ERROR;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048ea:	e09d      	b.n	8004a28 <LSM6DSO_ACC_Get_Event_Status+0x28c>
  }

  if ((md1_cfg.int1_ff == 1U) || (md2_cfg.int2_ff == 1U))
 80048ec:	7d3b      	ldrb	r3, [r7, #20]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <LSM6DSO_ACC_Get_Event_Status+0x168>
 80048f8:	7c3b      	ldrb	r3, [r7, #16]
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00b      	beq.n	800491c <LSM6DSO_ACC_Get_Event_Status+0x180>
  {
    if (wake_up_src.ff_ia == 1U)
 8004904:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <LSM6DSO_ACC_Get_Event_Status+0x180>
    {
      Status->FreeFallStatus = 1;
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	7813      	ldrb	r3, [r2, #0]
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_wu == 1U) || (md2_cfg.int2_wu == 1U))
 800491c:	7d3b      	ldrb	r3, [r7, #20]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <LSM6DSO_ACC_Get_Event_Status+0x198>
 8004928:	7c3b      	ldrb	r3, [r7, #16]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <LSM6DSO_ACC_Get_Event_Status+0x1b0>
  {
    if (wake_up_src.wu_ia == 1U)
 8004934:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <LSM6DSO_ACC_Get_Event_Status+0x1b0>
    {
      Status->WakeUpStatus = 1;
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	7813      	ldrb	r3, [r2, #0]
 8004946:	f043 0308 	orr.w	r3, r3, #8
 800494a:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_single_tap == 1U) || (md2_cfg.int2_single_tap == 1U))
 800494c:	7d3b      	ldrb	r3, [r7, #20]
 800494e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <LSM6DSO_ACC_Get_Event_Status+0x1c8>
 8004958:	7c3b      	ldrb	r3, [r7, #16]
 800495a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <LSM6DSO_ACC_Get_Event_Status+0x1e0>
  {
    if (tap_src.single_tap == 1U)
 8004964:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <LSM6DSO_ACC_Get_Event_Status+0x1e0>
    {
      Status->TapStatus = 1;
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	7813      	ldrb	r3, [r2, #0]
 8004976:	f043 0302 	orr.w	r3, r3, #2
 800497a:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_double_tap == 1U) || (md2_cfg.int2_double_tap == 1U))
 800497c:	7d3b      	ldrb	r3, [r7, #20]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <LSM6DSO_ACC_Get_Event_Status+0x1f8>
 8004988:	7c3b      	ldrb	r3, [r7, #16]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <LSM6DSO_ACC_Get_Event_Status+0x210>
  {
    if (tap_src.double_tap == 1U)
 8004994:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <LSM6DSO_ACC_Get_Event_Status+0x210>
    {
      Status->DoubleTapStatus = 1;
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	7813      	ldrb	r3, [r2, #0]
 80049a6:	f043 0304 	orr.w	r3, r3, #4
 80049aa:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((md1_cfg.int1_6d == 1U) || (md2_cfg.int2_6d == 1U))
 80049ac:	7d3b      	ldrb	r3, [r7, #20]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d105      	bne.n	80049c4 <LSM6DSO_ACC_Get_Event_Status+0x228>
 80049b8:	7c3b      	ldrb	r3, [r7, #16]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <LSM6DSO_ACC_Get_Event_Status+0x23e>
  {
    if (d6d_src.d6d_ia == 1U)
 80049c4:	7f3b      	ldrb	r3, [r7, #28]
 80049c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <LSM6DSO_ACC_Get_Event_Status+0x23e>
    {
      Status->D6DOrientationStatus = 1;
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	7813      	ldrb	r3, [r2, #0]
 80049d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049d8:	7013      	strb	r3, [r2, #0]
    }
  }

  if (int1_ctrl.int1_step_detector == 1U)
 80049da:	7b3b      	ldrb	r3, [r7, #12]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <LSM6DSO_ACC_Get_Event_Status+0x260>
  {
    if (func_src.step_detected == 1U)
 80049e6:	7e3b      	ldrb	r3, [r7, #24]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <LSM6DSO_ACC_Get_Event_Status+0x260>
    {
      Status->StepStatus = 1;
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	7813      	ldrb	r3, [r2, #0]
 80049f6:	f043 0310 	orr.w	r3, r3, #16
 80049fa:	7013      	strb	r3, [r2, #0]
    }
  }

  if ((int1_ctrl.int1_tilt == 1U) || (int2_ctrl.int2_tilt == 1U))
 80049fc:	7b3b      	ldrb	r3, [r7, #12]
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <LSM6DSO_ACC_Get_Event_Status+0x278>
 8004a08:	7a3b      	ldrb	r3, [r7, #8]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <LSM6DSO_ACC_Get_Event_Status+0x28a>
  {
    if (tilt_ia == 1U)
 8004a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d104      	bne.n	8004a26 <LSM6DSO_ACC_Get_Event_Status+0x28a>
    {
      Status->TiltStatus = 1;
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	7813      	ldrb	r3, [r2, #0]
 8004a20:	f043 0320 	orr.w	r3, r3, #32
 8004a24:	7013      	strb	r3, [r2, #0]
    }
  }

  return LSM6DSO_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3728      	adds	r7, #40	@ 0x28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004a3c:	edd7 7a00 	vldr	s15, [r7]
 8004a40:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004b40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4c:	d801      	bhi.n	8004a52 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004a4e:	230b      	movs	r3, #11
 8004a50:	e063      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a52:	edd7 7a00 	vldr	s15, [r7]
 8004a56:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	d801      	bhi.n	8004a68 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e058      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a68:	edd7 7a00 	vldr	s15, [r7]
 8004a6c:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8004a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	d801      	bhi.n	8004a7e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e04d      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a7e:	edd7 7a00 	vldr	s15, [r7]
 8004a82:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8004b44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	d801      	bhi.n	8004a94 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004a90:	2303      	movs	r3, #3
 8004a92:	e042      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a94:	edd7 7a00 	vldr	s15, [r7]
 8004a98:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8004b48 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8004a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa4:	d801      	bhi.n	8004aaa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e037      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004aaa:	edd7 7a00 	vldr	s15, [r7]
 8004aae:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004b4c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8004ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aba:	d801      	bhi.n	8004ac0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004abc:	2305      	movs	r3, #5
 8004abe:	e02c      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004ac0:	edd7 7a00 	vldr	s15, [r7]
 8004ac4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004b50 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad0:	d801      	bhi.n	8004ad6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004ad2:	2306      	movs	r3, #6
 8004ad4:	e021      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004ad6:	edd7 7a00 	vldr	s15, [r7]
 8004ada:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004b54 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8004ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae6:	d801      	bhi.n	8004aec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004ae8:	2307      	movs	r3, #7
 8004aea:	e016      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004aec:	edd7 7a00 	vldr	s15, [r7]
 8004af0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004b58 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afc:	d801      	bhi.n	8004b02 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004afe:	2308      	movs	r3, #8
 8004b00:	e00b      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004b02:	edd7 7a00 	vldr	s15, [r7]
 8004b06:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004b5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b12:	d801      	bhi.n	8004b18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004b14:	2309      	movs	r3, #9
 8004b16:	e000      	b.n	8004b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004b18:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004b1a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3320      	adds	r3, #32
 8004b20:	7bfa      	ldrb	r2, [r7, #15]
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fa7d 	bl	8005024 <lsm6dso_xl_data_rate_set>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b34:	e000      	b.n	8004b38 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	3fcccccd 	.word	0x3fcccccd
 8004b44:	42500000 	.word	0x42500000
 8004b48:	42d00000 	.word	0x42d00000
 8004b4c:	43500000 	.word	0x43500000
 8004b50:	43d08000 	.word	0x43d08000
 8004b54:	44504000 	.word	0x44504000
 8004b58:	44d06000 	.word	0x44d06000
 8004b5c:	45505000 	.word	0x45505000

08004b60 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004b6c:	edd7 7a00 	vldr	s15, [r7]
 8004b70:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004c60 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	d801      	bhi.n	8004b82 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004b7e:	230b      	movs	r3, #11
 8004b80:	e063      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b82:	edd7 7a00 	vldr	s15, [r7]
 8004b86:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b92:	d801      	bhi.n	8004b98 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e058      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b98:	edd7 7a00 	vldr	s15, [r7]
 8004b9c:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8004ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba8:	d801      	bhi.n	8004bae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e04d      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004bae:	edd7 7a00 	vldr	s15, [r7]
 8004bb2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004c64 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8004bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbe:	d801      	bhi.n	8004bc4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e042      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004bc4:	edd7 7a00 	vldr	s15, [r7]
 8004bc8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004c68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d801      	bhi.n	8004bda <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004bd6:	2304      	movs	r3, #4
 8004bd8:	e037      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004bda:	edd7 7a00 	vldr	s15, [r7]
 8004bde:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8004c6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8004be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bea:	d801      	bhi.n	8004bf0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004bec:	2305      	movs	r3, #5
 8004bee:	e02c      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004bf0:	edd7 7a00 	vldr	s15, [r7]
 8004bf4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004c70 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	d801      	bhi.n	8004c06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004c02:	2306      	movs	r3, #6
 8004c04:	e021      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004c06:	edd7 7a00 	vldr	s15, [r7]
 8004c0a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8004c74 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8004c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c16:	d801      	bhi.n	8004c1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004c18:	2307      	movs	r3, #7
 8004c1a:	e016      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004c1c:	edd7 7a00 	vldr	s15, [r7]
 8004c20:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004c78 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2c:	d801      	bhi.n	8004c32 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004c2e:	2308      	movs	r3, #8
 8004c30:	e00b      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004c32:	edd7 7a00 	vldr	s15, [r7]
 8004c36:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004c7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c42:	d801      	bhi.n	8004c48 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004c44:	2309      	movs	r3, #9
 8004c46:	e000      	b.n	8004c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004c48:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	3fcccccd 	.word	0x3fcccccd
 8004c64:	42500000 	.word	0x42500000
 8004c68:	42d00000 	.word	0x42d00000
 8004c6c:	43500000 	.word	0x43500000
 8004c70:	43d08000 	.word	0x43d08000
 8004c74:	44504000 	.word	0x44504000
 8004c78:	44d06000 	.word	0x44d06000
 8004c7c:	45505000 	.word	0x45505000

08004c80 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004c8c:	edd7 7a00 	vldr	s15, [r7]
 8004c90:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004c94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9c:	d801      	bhi.n	8004ca2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e058      	b.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ca2:	edd7 7a00 	vldr	s15, [r7]
 8004ca6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8004caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb2:	d801      	bhi.n	8004cb8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e04d      	b.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004cb8:	edd7 7a00 	vldr	s15, [r7]
 8004cbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004d7c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc8:	d801      	bhi.n	8004cce <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e042      	b.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004cce:	edd7 7a00 	vldr	s15, [r7]
 8004cd2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8004d80 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cde:	d801      	bhi.n	8004ce4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	e037      	b.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ce4:	edd7 7a00 	vldr	s15, [r7]
 8004ce8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004d84 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf4:	d801      	bhi.n	8004cfa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004cf6:	2305      	movs	r3, #5
 8004cf8:	e02c      	b.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004cfa:	edd7 7a00 	vldr	s15, [r7]
 8004cfe:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004d88 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0a:	d801      	bhi.n	8004d10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004d0c:	2306      	movs	r3, #6
 8004d0e:	e021      	b.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d10:	edd7 7a00 	vldr	s15, [r7]
 8004d14:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004d8c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d20:	d801      	bhi.n	8004d26 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004d22:	2307      	movs	r3, #7
 8004d24:	e016      	b.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d26:	edd7 7a00 	vldr	s15, [r7]
 8004d2a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004d90 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d36:	d801      	bhi.n	8004d3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004d38:	2308      	movs	r3, #8
 8004d3a:	e00b      	b.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d3c:	edd7 7a00 	vldr	s15, [r7]
 8004d40:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004d94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4c:	d801      	bhi.n	8004d52 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004d4e:	2309      	movs	r3, #9
 8004d50:	e000      	b.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d52:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004d54:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3320      	adds	r3, #32
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fb2a 	bl	80053b8 <lsm6dso_gy_data_rate_set>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d6e:	e000      	b.n	8004d72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	42500000 	.word	0x42500000
 8004d80:	42d00000 	.word	0x42d00000
 8004d84:	43500000 	.word	0x43500000
 8004d88:	43d08000 	.word	0x43d08000
 8004d8c:	44504000 	.word	0x44504000
 8004d90:	44d06000 	.word	0x44d06000
 8004d94:	45505000 	.word	0x45505000

08004d98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004da4:	edd7 7a00 	vldr	s15, [r7]
 8004da8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db4:	d801      	bhi.n	8004dba <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e058      	b.n	8004e6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dba:	edd7 7a00 	vldr	s15, [r7]
 8004dbe:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8004dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dca:	d801      	bhi.n	8004dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e04d      	b.n	8004e6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dd0:	edd7 7a00 	vldr	s15, [r7]
 8004dd4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004e80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de0:	d801      	bhi.n	8004de6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004de2:	2303      	movs	r3, #3
 8004de4:	e042      	b.n	8004e6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004de6:	edd7 7a00 	vldr	s15, [r7]
 8004dea:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004e84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df6:	d801      	bhi.n	8004dfc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004df8:	2304      	movs	r3, #4
 8004dfa:	e037      	b.n	8004e6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dfc:	edd7 7a00 	vldr	s15, [r7]
 8004e00:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004e88 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0c:	d801      	bhi.n	8004e12 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004e0e:	2305      	movs	r3, #5
 8004e10:	e02c      	b.n	8004e6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e12:	edd7 7a00 	vldr	s15, [r7]
 8004e16:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004e8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	d801      	bhi.n	8004e28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004e24:	2306      	movs	r3, #6
 8004e26:	e021      	b.n	8004e6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e28:	edd7 7a00 	vldr	s15, [r7]
 8004e2c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004e90 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e38:	d801      	bhi.n	8004e3e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004e3a:	2307      	movs	r3, #7
 8004e3c:	e016      	b.n	8004e6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e3e:	edd7 7a00 	vldr	s15, [r7]
 8004e42:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004e94 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4e:	d801      	bhi.n	8004e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004e50:	2308      	movs	r3, #8
 8004e52:	e00b      	b.n	8004e6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e54:	edd7 7a00 	vldr	s15, [r7]
 8004e58:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8004e98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e64:	d801      	bhi.n	8004e6a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004e66:	2309      	movs	r3, #9
 8004e68:	e000      	b.n	8004e6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e6a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	42500000 	.word	0x42500000
 8004e84:	42d00000 	.word	0x42d00000
 8004e88:	43500000 	.word	0x43500000
 8004e8c:	43d08000 	.word	0x43d08000
 8004e90:	44504000 	.word	0x44504000
 8004e94:	44d06000 	.word	0x44d06000
 8004e98:	45505000 	.word	0x45505000

08004e9c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	72fb      	strb	r3, [r7, #11]
 8004eac:	4613      	mov	r3, r2
 8004eae:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	695c      	ldr	r4, [r3, #20]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	7b1b      	ldrb	r3, [r3, #12]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
 8004ec0:	b299      	uxth	r1, r3
 8004ec2:	893b      	ldrh	r3, [r7, #8]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	47a0      	blx	r4
 8004ec8:	4603      	mov	r3, r0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd90      	pop	{r4, r7, pc}

08004ed2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ed2:	b590      	push	{r4, r7, lr}
 8004ed4:	b087      	sub	sp, #28
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	461a      	mov	r2, r3
 8004ede:	460b      	mov	r3, r1
 8004ee0:	72fb      	strb	r3, [r7, #11]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	691c      	ldr	r4, [r3, #16]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	7b1b      	ldrb	r3, [r3, #12]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	7afb      	ldrb	r3, [r7, #11]
 8004ef6:	b299      	uxth	r1, r3
 8004ef8:	893b      	ldrh	r3, [r7, #8]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	47a0      	blx	r4
 8004efe:	4603      	mov	r3, r0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd90      	pop	{r4, r7, pc}

08004f08 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004f08:	b590      	push	{r4, r7, lr}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	461a      	mov	r2, r3
 8004f14:	460b      	mov	r3, r1
 8004f16:	72fb      	strb	r3, [r7, #11]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	685c      	ldr	r4, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68d8      	ldr	r0, [r3, #12]
 8004f24:	893b      	ldrh	r3, [r7, #8]
 8004f26:	7af9      	ldrb	r1, [r7, #11]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	47a0      	blx	r4
 8004f2c:	6178      	str	r0, [r7, #20]

  return ret;
 8004f2e:	697b      	ldr	r3, [r7, #20]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd90      	pop	{r4, r7, pc}

08004f38 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	461a      	mov	r2, r3
 8004f44:	460b      	mov	r3, r1
 8004f46:	72fb      	strb	r3, [r7, #11]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681c      	ldr	r4, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68d8      	ldr	r0, [r3, #12]
 8004f54:	893b      	ldrh	r3, [r7, #8]
 8004f56:	7af9      	ldrb	r1, [r7, #11]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	47a0      	blx	r4
 8004f5c:	6178      	str	r0, [r7, #20]

  return ret;
 8004f5e:	697b      	ldr	r3, [r7, #20]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd90      	pop	{r4, r7, pc}

08004f68 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004f74:	f107 0208 	add.w	r2, r7, #8
 8004f78:	2301      	movs	r3, #1
 8004f7a:	2110      	movs	r1, #16
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ffc3 	bl	8004f08 <lsm6dso_read_reg>
 8004f82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10f      	bne.n	8004faa <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	7a3b      	ldrb	r3, [r7, #8]
 8004f94:	f362 0383 	bfi	r3, r2, #2, #2
 8004f98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004f9a:	f107 0208 	add.w	r2, r7, #8
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	2110      	movs	r1, #16
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff ffc8 	bl	8004f38 <lsm6dso_write_reg>
 8004fa8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004fbe:	f107 0208 	add.w	r2, r7, #8
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	2110      	movs	r1, #16
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff ff9e 	bl	8004f08 <lsm6dso_read_reg>
 8004fcc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8004fce:	7a3b      	ldrb	r3, [r7, #8]
 8004fd0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d81a      	bhi.n	8005010 <lsm6dso_xl_full_scale_get+0x5c>
 8004fda:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <lsm6dso_xl_full_scale_get+0x2c>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff9 	.word	0x08004ff9
 8004fe8:	08005001 	.word	0x08005001
 8004fec:	08005009 	.word	0x08005009
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	701a      	strb	r2, [r3, #0]
      break;
 8004ff6:	e00f      	b.n	8005018 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
      break;
 8004ffe:	e00b      	b.n	8005018 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2202      	movs	r2, #2
 8005004:	701a      	strb	r2, [r3, #0]
      break;
 8005006:	e007      	b.n	8005018 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2203      	movs	r2, #3
 800500c:	701a      	strb	r2, [r3, #0]
      break;
 800500e:	e003      	b.n	8005018 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2200      	movs	r2, #0
 8005014:	701a      	strb	r2, [r3, #0]
      break;
 8005016:	bf00      	nop
  }

  return ret;
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop

08005024 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005034:	f107 030c 	add.w	r3, r7, #12
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fce1 	bl	8005a02 <lsm6dso_fsm_enable_get>
 8005040:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <lsm6dso_xl_data_rate_set+0x28>
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	e0e0      	b.n	800520e <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800504c:	7b3b      	ldrb	r3, [r7, #12]
 800504e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005052:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005054:	7b3b      	ldrb	r3, [r7, #12]
 8005056:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800505a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800505c:	4313      	orrs	r3, r2
 800505e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005060:	7b3b      	ldrb	r3, [r7, #12]
 8005062:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005066:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005068:	4313      	orrs	r3, r2
 800506a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800506c:	7b3b      	ldrb	r3, [r7, #12]
 800506e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005072:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005074:	4313      	orrs	r3, r2
 8005076:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005078:	7b3b      	ldrb	r3, [r7, #12]
 800507a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800507e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005080:	4313      	orrs	r3, r2
 8005082:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005084:	7b3b      	ldrb	r3, [r7, #12]
 8005086:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800508a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800508c:	4313      	orrs	r3, r2
 800508e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005090:	7b3b      	ldrb	r3, [r7, #12]
 8005092:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005096:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005098:	4313      	orrs	r3, r2
 800509a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800509c:	7b3b      	ldrb	r3, [r7, #12]
 800509e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80050a4:	4313      	orrs	r3, r2
 80050a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80050a8:	7b7b      	ldrb	r3, [r7, #13]
 80050aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80050b0:	4313      	orrs	r3, r2
 80050b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80050b4:	7b7b      	ldrb	r3, [r7, #13]
 80050b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80050bc:	4313      	orrs	r3, r2
 80050be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80050c0:	7b7b      	ldrb	r3, [r7, #13]
 80050c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80050c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80050c8:	4313      	orrs	r3, r2
 80050ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80050cc:	7b7b      	ldrb	r3, [r7, #13]
 80050ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80050d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80050d4:	4313      	orrs	r3, r2
 80050d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80050d8:	7b7b      	ldrb	r3, [r7, #13]
 80050da:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80050de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80050e0:	4313      	orrs	r3, r2
 80050e2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80050e4:	7b7b      	ldrb	r3, [r7, #13]
 80050e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050ea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80050f0:	7b7b      	ldrb	r3, [r7, #13]
 80050f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050f6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80050f8:	4313      	orrs	r3, r2
 80050fa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80050fc:	7b7b      	ldrb	r3, [r7, #13]
 80050fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005102:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005104:	4313      	orrs	r3, r2
 8005106:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005108:	2b01      	cmp	r3, #1
 800510a:	d164      	bne.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800510c:	f107 030b 	add.w	r3, r7, #11
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fc96 	bl	8005a44 <lsm6dso_fsm_data_rate_get>
 8005118:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <lsm6dso_xl_data_rate_set+0x100>
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	e074      	b.n	800520e <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8005124:	7afb      	ldrb	r3, [r7, #11]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d852      	bhi.n	80051d0 <lsm6dso_xl_data_rate_set+0x1ac>
 800512a:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <lsm6dso_xl_data_rate_set+0x10c>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005141 	.word	0x08005141
 8005134:	08005153 	.word	0x08005153
 8005138:	08005171 	.word	0x08005171
 800513c:	0800519b 	.word	0x0800519b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005146:	2301      	movs	r3, #1
 8005148:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800514a:	e044      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	75fb      	strb	r3, [r7, #23]
        break;
 8005150:	e041      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005158:	2302      	movs	r3, #2
 800515a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800515c:	e03b      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d102      	bne.n	800516a <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005164:	2302      	movs	r3, #2
 8005166:	75fb      	strb	r3, [r7, #23]
        break;
 8005168:	e035      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	75fb      	strb	r3, [r7, #23]
        break;
 800516e:	e032      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005176:	2303      	movs	r3, #3
 8005178:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800517a:	e02c      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d102      	bne.n	8005188 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005182:	2303      	movs	r3, #3
 8005184:	75fb      	strb	r3, [r7, #23]
        break;
 8005186:	e026      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d102      	bne.n	8005194 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800518e:	2303      	movs	r3, #3
 8005190:	75fb      	strb	r3, [r7, #23]
        break;
 8005192:	e020      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	75fb      	strb	r3, [r7, #23]
        break;
 8005198:	e01d      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80051a0:	2304      	movs	r3, #4
 80051a2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80051a4:	e017      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d102      	bne.n	80051b2 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80051ac:	2304      	movs	r3, #4
 80051ae:	75fb      	strb	r3, [r7, #23]
        break;
 80051b0:	e011      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d102      	bne.n	80051be <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80051b8:	2304      	movs	r3, #4
 80051ba:	75fb      	strb	r3, [r7, #23]
        break;
 80051bc:	e00b      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d102      	bne.n	80051ca <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80051c4:	2304      	movs	r3, #4
 80051c6:	75fb      	strb	r3, [r7, #23]
        break;
 80051c8:	e005      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	75fb      	strb	r3, [r7, #23]
        break;
 80051ce:	e002      	b.n	80051d6 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	75fb      	strb	r3, [r7, #23]
        break;
 80051d4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80051d6:	f107 0208 	add.w	r2, r7, #8
 80051da:	2301      	movs	r3, #1
 80051dc:	2110      	movs	r1, #16
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fe92 	bl	8004f08 <lsm6dso_read_reg>
 80051e4:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	7a3b      	ldrb	r3, [r7, #8]
 80051f0:	f362 1307 	bfi	r3, r2, #4, #4
 80051f4:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80051f6:	f107 0208 	add.w	r2, r7, #8
 80051fa:	2301      	movs	r3, #1
 80051fc:	2110      	movs	r1, #16
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fe9a 	bl	8004f38 <lsm6dso_write_reg>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	613b      	str	r3, [r7, #16]

  return ret;
 800520c:	693b      	ldr	r3, [r7, #16]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop

08005218 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005222:	f107 0208 	add.w	r2, r7, #8
 8005226:	2301      	movs	r3, #1
 8005228:	2110      	movs	r1, #16
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff fe6c 	bl	8004f08 <lsm6dso_read_reg>
 8005230:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8005232:	7a3b      	ldrb	r3, [r7, #8]
 8005234:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b0b      	cmp	r3, #11
 800523c:	d84a      	bhi.n	80052d4 <lsm6dso_xl_data_rate_get+0xbc>
 800523e:	a201      	add	r2, pc, #4	@ (adr r2, 8005244 <lsm6dso_xl_data_rate_get+0x2c>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005275 	.word	0x08005275
 8005248:	0800527d 	.word	0x0800527d
 800524c:	08005285 	.word	0x08005285
 8005250:	0800528d 	.word	0x0800528d
 8005254:	08005295 	.word	0x08005295
 8005258:	0800529d 	.word	0x0800529d
 800525c:	080052a5 	.word	0x080052a5
 8005260:	080052ad 	.word	0x080052ad
 8005264:	080052b5 	.word	0x080052b5
 8005268:	080052bd 	.word	0x080052bd
 800526c:	080052c5 	.word	0x080052c5
 8005270:	080052cd 	.word	0x080052cd
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
      break;
 800527a:	e02f      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
      break;
 8005282:	e02b      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2202      	movs	r2, #2
 8005288:	701a      	strb	r2, [r3, #0]
      break;
 800528a:	e027      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2203      	movs	r2, #3
 8005290:	701a      	strb	r2, [r3, #0]
      break;
 8005292:	e023      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2204      	movs	r2, #4
 8005298:	701a      	strb	r2, [r3, #0]
      break;
 800529a:	e01f      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2205      	movs	r2, #5
 80052a0:	701a      	strb	r2, [r3, #0]
      break;
 80052a2:	e01b      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2206      	movs	r2, #6
 80052a8:	701a      	strb	r2, [r3, #0]
      break;
 80052aa:	e017      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2207      	movs	r2, #7
 80052b0:	701a      	strb	r2, [r3, #0]
      break;
 80052b2:	e013      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2208      	movs	r2, #8
 80052b8:	701a      	strb	r2, [r3, #0]
      break;
 80052ba:	e00f      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2209      	movs	r2, #9
 80052c0:	701a      	strb	r2, [r3, #0]
      break;
 80052c2:	e00b      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	220a      	movs	r2, #10
 80052c8:	701a      	strb	r2, [r3, #0]
      break;
 80052ca:	e007      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	220b      	movs	r2, #11
 80052d0:	701a      	strb	r2, [r3, #0]
      break;
 80052d2:	e003      	b.n	80052dc <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
      break;
 80052da:	bf00      	nop
  }

  return ret;
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop

080052e8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80052f4:	f107 0208 	add.w	r2, r7, #8
 80052f8:	2301      	movs	r3, #1
 80052fa:	2111      	movs	r1, #17
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fe03 	bl	8004f08 <lsm6dso_read_reg>
 8005302:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10f      	bne.n	800532a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	b2da      	uxtb	r2, r3
 8005312:	7a3b      	ldrb	r3, [r7, #8]
 8005314:	f362 0343 	bfi	r3, r2, #1, #3
 8005318:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800531a:	f107 0208 	add.w	r2, r7, #8
 800531e:	2301      	movs	r3, #1
 8005320:	2111      	movs	r1, #17
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fe08 	bl	8004f38 <lsm6dso_write_reg>
 8005328:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800533e:	f107 0208 	add.w	r2, r7, #8
 8005342:	2301      	movs	r3, #1
 8005344:	2111      	movs	r1, #17
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fdde 	bl	8004f08 <lsm6dso_read_reg>
 800534c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800534e:	7a3b      	ldrb	r3, [r7, #8]
 8005350:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b06      	cmp	r3, #6
 8005358:	d824      	bhi.n	80053a4 <lsm6dso_gy_full_scale_get+0x70>
 800535a:	a201      	add	r2, pc, #4	@ (adr r2, 8005360 <lsm6dso_gy_full_scale_get+0x2c>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	0800537d 	.word	0x0800537d
 8005364:	08005385 	.word	0x08005385
 8005368:	0800538d 	.word	0x0800538d
 800536c:	080053a5 	.word	0x080053a5
 8005370:	08005395 	.word	0x08005395
 8005374:	080053a5 	.word	0x080053a5
 8005378:	0800539d 	.word	0x0800539d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
      break;
 8005382:	e013      	b.n	80053ac <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]
      break;
 800538a:	e00f      	b.n	80053ac <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2202      	movs	r2, #2
 8005390:	701a      	strb	r2, [r3, #0]
      break;
 8005392:	e00b      	b.n	80053ac <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2204      	movs	r2, #4
 8005398:	701a      	strb	r2, [r3, #0]
      break;
 800539a:	e007      	b.n	80053ac <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2206      	movs	r2, #6
 80053a0:	701a      	strb	r2, [r3, #0]
      break;
 80053a2:	e003      	b.n	80053ac <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
      break;
 80053aa:	bf00      	nop
  }

  return ret;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop

080053b8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80053c8:	f107 030c 	add.w	r3, r7, #12
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fb17 	bl	8005a02 <lsm6dso_fsm_enable_get>
 80053d4:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <lsm6dso_gy_data_rate_set+0x28>
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	e0e0      	b.n	80055a2 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80053e0:	7b3b      	ldrb	r3, [r7, #12]
 80053e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80053e8:	7b3b      	ldrb	r3, [r7, #12]
 80053ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053ee:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80053f4:	7b3b      	ldrb	r3, [r7, #12]
 80053f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80053fc:	4313      	orrs	r3, r2
 80053fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005400:	7b3b      	ldrb	r3, [r7, #12]
 8005402:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005406:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005408:	4313      	orrs	r3, r2
 800540a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800540c:	7b3b      	ldrb	r3, [r7, #12]
 800540e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005412:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005414:	4313      	orrs	r3, r2
 8005416:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005418:	7b3b      	ldrb	r3, [r7, #12]
 800541a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800541e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005420:	4313      	orrs	r3, r2
 8005422:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005424:	7b3b      	ldrb	r3, [r7, #12]
 8005426:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800542a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800542c:	4313      	orrs	r3, r2
 800542e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005430:	7b3b      	ldrb	r3, [r7, #12]
 8005432:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005436:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005438:	4313      	orrs	r3, r2
 800543a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800543c:	7b7b      	ldrb	r3, [r7, #13]
 800543e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005442:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005444:	4313      	orrs	r3, r2
 8005446:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005448:	7b7b      	ldrb	r3, [r7, #13]
 800544a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800544e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005450:	4313      	orrs	r3, r2
 8005452:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005454:	7b7b      	ldrb	r3, [r7, #13]
 8005456:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800545a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800545c:	4313      	orrs	r3, r2
 800545e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005460:	7b7b      	ldrb	r3, [r7, #13]
 8005462:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005466:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005468:	4313      	orrs	r3, r2
 800546a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800546c:	7b7b      	ldrb	r3, [r7, #13]
 800546e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005472:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005474:	4313      	orrs	r3, r2
 8005476:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005478:	7b7b      	ldrb	r3, [r7, #13]
 800547a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800547e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005480:	4313      	orrs	r3, r2
 8005482:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005484:	7b7b      	ldrb	r3, [r7, #13]
 8005486:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800548a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800548c:	4313      	orrs	r3, r2
 800548e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005490:	7b7b      	ldrb	r3, [r7, #13]
 8005492:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005496:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005498:	4313      	orrs	r3, r2
 800549a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800549c:	2b01      	cmp	r3, #1
 800549e:	d164      	bne.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80054a0:	f107 030b 	add.w	r3, r7, #11
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 facc 	bl	8005a44 <lsm6dso_fsm_data_rate_get>
 80054ac:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <lsm6dso_gy_data_rate_set+0x100>
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	e074      	b.n	80055a2 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 80054b8:	7afb      	ldrb	r3, [r7, #11]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d852      	bhi.n	8005564 <lsm6dso_gy_data_rate_set+0x1ac>
 80054be:	a201      	add	r2, pc, #4	@ (adr r2, 80054c4 <lsm6dso_gy_data_rate_set+0x10c>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054d5 	.word	0x080054d5
 80054c8:	080054e7 	.word	0x080054e7
 80054cc:	08005505 	.word	0x08005505
 80054d0:	0800552f 	.word	0x0800552f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80054de:	e044      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	75fb      	strb	r3, [r7, #23]
        break;
 80054e4:	e041      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80054ec:	2302      	movs	r3, #2
 80054ee:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80054f0:	e03b      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d102      	bne.n	80054fe <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80054f8:	2302      	movs	r3, #2
 80054fa:	75fb      	strb	r3, [r7, #23]
        break;
 80054fc:	e035      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	75fb      	strb	r3, [r7, #23]
        break;
 8005502:	e032      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d102      	bne.n	8005510 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800550a:	2303      	movs	r3, #3
 800550c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800550e:	e02c      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d102      	bne.n	800551c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005516:	2303      	movs	r3, #3
 8005518:	75fb      	strb	r3, [r7, #23]
        break;
 800551a:	e026      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d102      	bne.n	8005528 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005522:	2303      	movs	r3, #3
 8005524:	75fb      	strb	r3, [r7, #23]
        break;
 8005526:	e020      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	75fb      	strb	r3, [r7, #23]
        break;
 800552c:	e01d      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005534:	2304      	movs	r3, #4
 8005536:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005538:	e017      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d102      	bne.n	8005546 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005540:	2304      	movs	r3, #4
 8005542:	75fb      	strb	r3, [r7, #23]
        break;
 8005544:	e011      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d102      	bne.n	8005552 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800554c:	2304      	movs	r3, #4
 800554e:	75fb      	strb	r3, [r7, #23]
        break;
 8005550:	e00b      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d102      	bne.n	800555e <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005558:	2304      	movs	r3, #4
 800555a:	75fb      	strb	r3, [r7, #23]
        break;
 800555c:	e005      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	75fb      	strb	r3, [r7, #23]
        break;
 8005562:	e002      	b.n	800556a <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	75fb      	strb	r3, [r7, #23]
        break;
 8005568:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800556a:	f107 0208 	add.w	r2, r7, #8
 800556e:	2301      	movs	r3, #1
 8005570:	2111      	movs	r1, #17
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fcc8 	bl	8004f08 <lsm6dso_read_reg>
 8005578:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	b2da      	uxtb	r2, r3
 8005582:	7a3b      	ldrb	r3, [r7, #8]
 8005584:	f362 1307 	bfi	r3, r2, #4, #4
 8005588:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800558a:	f107 0208 	add.w	r2, r7, #8
 800558e:	2301      	movs	r3, #1
 8005590:	2111      	movs	r1, #17
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff fcd0 	bl	8004f38 <lsm6dso_write_reg>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4413      	add	r3, r2
 800559e:	613b      	str	r3, [r7, #16]

  return ret;
 80055a0:	693b      	ldr	r3, [r7, #16]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop

080055ac <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80055b6:	f107 0208 	add.w	r2, r7, #8
 80055ba:	2301      	movs	r3, #1
 80055bc:	2111      	movs	r1, #17
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff fca2 	bl	8004f08 <lsm6dso_read_reg>
 80055c4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80055c6:	7a3b      	ldrb	r3, [r7, #8]
 80055c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b0a      	cmp	r3, #10
 80055d0:	d844      	bhi.n	800565c <lsm6dso_gy_data_rate_get+0xb0>
 80055d2:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <lsm6dso_gy_data_rate_get+0x2c>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	08005605 	.word	0x08005605
 80055dc:	0800560d 	.word	0x0800560d
 80055e0:	08005615 	.word	0x08005615
 80055e4:	0800561d 	.word	0x0800561d
 80055e8:	08005625 	.word	0x08005625
 80055ec:	0800562d 	.word	0x0800562d
 80055f0:	08005635 	.word	0x08005635
 80055f4:	0800563d 	.word	0x0800563d
 80055f8:	08005645 	.word	0x08005645
 80055fc:	0800564d 	.word	0x0800564d
 8005600:	08005655 	.word	0x08005655
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
      break;
 800560a:	e02b      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2201      	movs	r2, #1
 8005610:	701a      	strb	r2, [r3, #0]
      break;
 8005612:	e027      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2202      	movs	r2, #2
 8005618:	701a      	strb	r2, [r3, #0]
      break;
 800561a:	e023      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2203      	movs	r2, #3
 8005620:	701a      	strb	r2, [r3, #0]
      break;
 8005622:	e01f      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2204      	movs	r2, #4
 8005628:	701a      	strb	r2, [r3, #0]
      break;
 800562a:	e01b      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2205      	movs	r2, #5
 8005630:	701a      	strb	r2, [r3, #0]
      break;
 8005632:	e017      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2206      	movs	r2, #6
 8005638:	701a      	strb	r2, [r3, #0]
      break;
 800563a:	e013      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2207      	movs	r2, #7
 8005640:	701a      	strb	r2, [r3, #0]
      break;
 8005642:	e00f      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2208      	movs	r2, #8
 8005648:	701a      	strb	r2, [r3, #0]
      break;
 800564a:	e00b      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2209      	movs	r2, #9
 8005650:	701a      	strb	r2, [r3, #0]
      break;
 8005652:	e007      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	220a      	movs	r2, #10
 8005658:	701a      	strb	r2, [r3, #0]
      break;
 800565a:	e003      	b.n	8005664 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
      break;
 8005662:	bf00      	nop
  }

  return ret;
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop

08005670 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800567c:	f107 0208 	add.w	r2, r7, #8
 8005680:	2301      	movs	r3, #1
 8005682:	2112      	movs	r1, #18
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff fc3f 	bl	8004f08 <lsm6dso_read_reg>
 800568a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10f      	bne.n	80056b2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	b2da      	uxtb	r2, r3
 800569a:	7a3b      	ldrb	r3, [r7, #8]
 800569c:	f362 1386 	bfi	r3, r2, #6, #1
 80056a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80056a2:	f107 0208 	add.w	r2, r7, #8
 80056a6:	2301      	movs	r3, #1
 80056a8:	2112      	movs	r1, #18
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff fc44 	bl	8004f38 <lsm6dso_write_reg>
 80056b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056b2:	68fb      	ldr	r3, [r7, #12]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80056c6:	f107 020c 	add.w	r2, r7, #12
 80056ca:	2306      	movs	r3, #6
 80056cc:	2122      	movs	r1, #34	@ 0x22
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fc1a 	bl	8004f08 <lsm6dso_read_reg>
 80056d4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80056d6:	7b7b      	ldrb	r3, [r7, #13]
 80056d8:	b21a      	sxth	r2, r3
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	7b3a      	ldrb	r2, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	b21a      	sxth	r2, r3
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80056f6:	7bfa      	ldrb	r2, [r7, #15]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	3302      	adds	r3, #2
 80056fc:	b212      	sxth	r2, r2
 80056fe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	3302      	adds	r3, #2
 8005704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005708:	b29b      	uxth	r3, r3
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	b29b      	uxth	r3, r3
 800570e:	7bba      	ldrb	r2, [r7, #14]
 8005710:	4413      	add	r3, r2
 8005712:	b29a      	uxth	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	3302      	adds	r3, #2
 8005718:	b212      	sxth	r2, r2
 800571a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800571c:	7c7a      	ldrb	r2, [r7, #17]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	3304      	adds	r3, #4
 8005722:	b212      	sxth	r2, r2
 8005724:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	3304      	adds	r3, #4
 800572a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800572e:	b29b      	uxth	r3, r3
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	b29b      	uxth	r3, r3
 8005734:	7c3a      	ldrb	r2, [r7, #16]
 8005736:	4413      	add	r3, r2
 8005738:	b29a      	uxth	r2, r3
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	3304      	adds	r3, #4
 800573e:	b212      	sxth	r2, r2
 8005740:	801a      	strh	r2, [r3, #0]

  return ret;
 8005742:	697b      	ldr	r3, [r7, #20]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005756:	f107 020c 	add.w	r2, r7, #12
 800575a:	2306      	movs	r3, #6
 800575c:	2128      	movs	r1, #40	@ 0x28
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff fbd2 	bl	8004f08 <lsm6dso_read_reg>
 8005764:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005766:	7b7b      	ldrb	r3, [r7, #13]
 8005768:	b21a      	sxth	r2, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005774:	b29b      	uxth	r3, r3
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	b29b      	uxth	r3, r3
 800577a:	7b3a      	ldrb	r2, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	b29b      	uxth	r3, r3
 8005780:	b21a      	sxth	r2, r3
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005786:	7bfa      	ldrb	r2, [r7, #15]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	3302      	adds	r3, #2
 800578c:	b212      	sxth	r2, r2
 800578e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	3302      	adds	r3, #2
 8005794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005798:	b29b      	uxth	r3, r3
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	b29b      	uxth	r3, r3
 800579e:	7bba      	ldrb	r2, [r7, #14]
 80057a0:	4413      	add	r3, r2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	3302      	adds	r3, #2
 80057a8:	b212      	sxth	r2, r2
 80057aa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80057ac:	7c7a      	ldrb	r2, [r7, #17]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	3304      	adds	r3, #4
 80057b2:	b212      	sxth	r2, r2
 80057b4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	3304      	adds	r3, #4
 80057ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	7c3a      	ldrb	r2, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	3304      	adds	r3, #4
 80057ce:	b212      	sxth	r2, r2
 80057d0:	801a      	strh	r2, [r3, #0]

  return ret;
 80057d2:	697b      	ldr	r3, [r7, #20]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80057e8:	2300      	movs	r3, #0
 80057ea:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	7a3b      	ldrb	r3, [r7, #8]
 80057f6:	f362 1387 	bfi	r3, r2, #6, #2
 80057fa:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80057fc:	f107 0208 	add.w	r2, r7, #8
 8005800:	2301      	movs	r3, #1
 8005802:	2101      	movs	r1, #1
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fb97 	bl	8004f38 <lsm6dso_write_reg>
 800580a:	60f8      	str	r0, [r7, #12]

  return ret;
 800580c:	68fb      	ldr	r3, [r7, #12]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005820:	2301      	movs	r3, #1
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	210f      	movs	r1, #15
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff fb6e 	bl	8004f08 <lsm6dso_read_reg>
 800582c:	60f8      	str	r0, [r7, #12]

  return ret;
 800582e:	68fb      	ldr	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005844:	f107 0208 	add.w	r2, r7, #8
 8005848:	2301      	movs	r3, #1
 800584a:	2112      	movs	r1, #18
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff fb5b 	bl	8004f08 <lsm6dso_read_reg>
 8005852:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10f      	bne.n	800587a <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	b2da      	uxtb	r2, r3
 8005862:	7a3b      	ldrb	r3, [r7, #8]
 8005864:	f362 0382 	bfi	r3, r2, #2, #1
 8005868:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800586a:	f107 0208 	add.w	r2, r7, #8
 800586e:	2301      	movs	r3, #1
 8005870:	2112      	movs	r1, #18
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fb60 	bl	8004f38 <lsm6dso_write_reg>
 8005878:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800587a:	68fb      	ldr	r3, [r7, #12]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005890:	f107 020c 	add.w	r2, r7, #12
 8005894:	2301      	movs	r3, #1
 8005896:	2118      	movs	r1, #24
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff fb35 	bl	8004f08 <lsm6dso_read_reg>
 800589e:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	09db      	lsrs	r3, r3, #7
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	7b3b      	ldrb	r3, [r7, #12]
 80058ae:	f362 0341 	bfi	r3, r2, #1, #1
 80058b2:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80058b4:	f107 020c 	add.w	r2, r7, #12
 80058b8:	2301      	movs	r3, #1
 80058ba:	2118      	movs	r1, #24
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff fb3b 	bl	8004f38 <lsm6dso_write_reg>
 80058c2:	4602      	mov	r2, r0
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	4413      	add	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <lsm6dso_i3c_disable_set+0x50>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	e01b      	b.n	800590c <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80058d4:	f107 0210 	add.w	r2, r7, #16
 80058d8:	2301      	movs	r3, #1
 80058da:	2162      	movs	r1, #98	@ 0x62
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff fb13 	bl	8004f08 <lsm6dso_read_reg>
 80058e2:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	7c3b      	ldrb	r3, [r7, #16]
 80058ee:	f362 03c4 	bfi	r3, r2, #3, #2
 80058f2:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80058f4:	f107 0210 	add.w	r2, r7, #16
 80058f8:	2301      	movs	r3, #1
 80058fa:	2162      	movs	r1, #98	@ 0x62
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fb1b 	bl	8004f38 <lsm6dso_write_reg>
 8005902:	4602      	mov	r2, r0
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4413      	add	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  return ret;
 800590a:	697b      	ldr	r3, [r7, #20]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <lsm6dso_6d_threshold_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_6d_threshold_set(stmdev_ctx_t *ctx,
                                 lsm6dso_sixd_ths_t val)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 8005920:	f107 0208 	add.w	r2, r7, #8
 8005924:	2301      	movs	r3, #1
 8005926:	2159      	movs	r1, #89	@ 0x59
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff faed 	bl	8004f08 <lsm6dso_read_reg>
 800592e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <lsm6dso_6d_threshold_set+0x42>
  {
    reg.sixd_ths = (uint8_t)val;
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	b2da      	uxtb	r2, r3
 800593e:	7a3b      	ldrb	r3, [r7, #8]
 8005940:	f362 1346 	bfi	r3, r2, #5, #2
 8005944:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
 8005946:	f107 0208 	add.w	r2, r7, #8
 800594a:	2301      	movs	r3, #1
 800594c:	2159      	movs	r1, #89	@ 0x59
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff faf2 	bl	8004f38 <lsm6dso_write_reg>
 8005954:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005956:	68fb      	ldr	r3, [r7, #12]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800596c:	f107 0208 	add.w	r2, r7, #8
 8005970:	2301      	movs	r3, #1
 8005972:	210a      	movs	r1, #10
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff fac7 	bl	8004f08 <lsm6dso_read_reg>
 800597a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10f      	bne.n	80059a2 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	b2da      	uxtb	r2, r3
 800598a:	7a3b      	ldrb	r3, [r7, #8]
 800598c:	f362 0302 	bfi	r3, r2, #0, #3
 8005990:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005992:	f107 0208 	add.w	r2, r7, #8
 8005996:	2301      	movs	r3, #1
 8005998:	210a      	movs	r1, #10
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff facc 	bl	8004f38 <lsm6dso_write_reg>
 80059a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059a2:	68fb      	ldr	r3, [r7, #12]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <lsm6dso_tilt_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_tilt_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_status_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80059b6:	2102      	movs	r1, #2
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ff0f 	bl	80057dc <lsm6dso_mem_bank_set>
 80059be:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <lsm6dso_tilt_flag_data_ready_get+0x1e>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	e017      	b.n	80059fa <lsm6dso_tilt_flag_data_ready_get+0x4e>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_STATUS, (uint8_t *)&reg, 1);
 80059ca:	f107 0208 	add.w	r2, r7, #8
 80059ce:	2301      	movs	r3, #1
 80059d0:	2112      	movs	r1, #18
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fa98 	bl	8004f08 <lsm6dso_read_reg>
 80059d8:	60f8      	str	r0, [r7, #12]
  *val = reg.is_tilt;
 80059da:	7a3b      	ldrb	r3, [r7, #8]
 80059dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	701a      	strb	r2, [r3, #0]

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80059e8:	2100      	movs	r1, #0
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff fef6 	bl	80057dc <lsm6dso_mem_bank_set>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  return ret;
 80059f8:	68fb      	ldr	r3, [r7, #12]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff fee4 	bl	80057dc <lsm6dso_mem_bank_set>
 8005a14:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005a16:	2302      	movs	r3, #2
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	2146      	movs	r1, #70	@ 0x46
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fa73 	bl	8004f08 <lsm6dso_read_reg>
 8005a22:	4602      	mov	r2, r0
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fed5 	bl	80057dc <lsm6dso_mem_bank_set>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  return ret;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005a4e:	2102      	movs	r1, #2
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff fec3 	bl	80057dc <lsm6dso_mem_bank_set>
 8005a56:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <lsm6dso_fsm_data_rate_get+0x1e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	e03a      	b.n	8005ad8 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8005a62:	f107 0208 	add.w	r2, r7, #8
 8005a66:	2301      	movs	r3, #1
 8005a68:	215f      	movs	r1, #95	@ 0x5f
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff fa4c 	bl	8004f08 <lsm6dso_read_reg>
 8005a70:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d125      	bne.n	8005ac4 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8005a78:	7a3b      	ldrb	r3, [r7, #8]
 8005a7a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d81b      	bhi.n	8005abc <lsm6dso_fsm_data_rate_get+0x78>
 8005a84:	a201      	add	r2, pc, #4	@ (adr r2, 8005a8c <lsm6dso_fsm_data_rate_get+0x48>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005aa5 	.word	0x08005aa5
 8005a94:	08005aad 	.word	0x08005aad
 8005a98:	08005ab5 	.word	0x08005ab5
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
      break;
 8005aa2:	e010      	b.n	8005ac6 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
      break;
 8005aaa:	e00c      	b.n	8005ac6 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	701a      	strb	r2, [r3, #0]
      break;
 8005ab2:	e008      	b.n	8005ac6 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	701a      	strb	r2, [r3, #0]
      break;
 8005aba:	e004      	b.n	8005ac6 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
      break;
 8005ac2:	e000      	b.n	8005ac6 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8005ac4:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff fe87 	bl	80057dc <lsm6dso_mem_bank_set>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  return ret;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b090      	sub	sp, #64	@ 0x40
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	1d3b      	adds	r3, r7, #4
 8005aea:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_pin_int2_route_t  pin_int2_route;
  lsm6dso_emb_func_int1_t   emb_func_int1;
  lsm6dso_fsm_int1_a_t      fsm_int1_a;
  lsm6dso_fsm_int1_b_t      fsm_int1_b;
  lsm6dso_int1_ctrl_t       int1_ctrl = {0};
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  /* INT1_CTRL */
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8005af4:	793b      	ldrb	r3, [r7, #4]
 8005af6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b00:	f362 0300 	bfi	r3, r2, #0, #1
 8005b04:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8005b08:	793b      	ldrb	r3, [r7, #4]
 8005b0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b14:	f362 0341 	bfi	r3, r2, #1, #1
 8005b18:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_boot      = val.boot;
 8005b1c:	793b      	ldrb	r3, [r7, #4]
 8005b1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b28:	f362 0382 	bfi	r3, r2, #2, #1
 8005b2c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8005b30:	793b      	ldrb	r3, [r7, #4]
 8005b32:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b3c:	f362 03c3 	bfi	r3, r2, #3, #1
 8005b40:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8005b44:	793b      	ldrb	r3, [r7, #4]
 8005b46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b50:	f362 1304 	bfi	r3, r2, #4, #1
 8005b54:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8005b58:	793b      	ldrb	r3, [r7, #4]
 8005b5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b64:	f362 1345 	bfi	r3, r2, #5, #1
 8005b68:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8005b6c:	793b      	ldrb	r3, [r7, #4]
 8005b6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b78:	f362 1386 	bfi	r3, r2, #6, #1
 8005b7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8005b80:	797b      	ldrb	r3, [r7, #5]
 8005b82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b8c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005b90:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8005b94:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005b98:	2301      	movs	r3, #1
 8005b9a:	210d      	movs	r1, #13
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7ff f9cb 	bl	8004f38 <lsm6dso_write_reg>
 8005ba2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <lsm6dso_pin_int1_route_set+0xce>
 8005baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bac:	e33a      	b.n	8006224 <lsm6dso_pin_int1_route_set+0x744>

  /* DRDY for temperature and/or timestamp */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8005bae:	f107 0210 	add.w	r2, r7, #16
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	2113      	movs	r1, #19
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff f9a6 	bl	8004f08 <lsm6dso_read_reg>
 8005bbc:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <lsm6dso_pin_int1_route_set+0xe8>
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc6:	e32d      	b.n	8006224 <lsm6dso_pin_int1_route_set+0x744>

  if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8005bc8:	793b      	ldrb	r3, [r7, #4]
 8005bca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	797b      	ldrb	r3, [r7, #5]
 8005bd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <lsm6dso_pin_int1_route_set+0x10a>
  {
    ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8005be0:	7c3b      	ldrb	r3, [r7, #16]
 8005be2:	f043 0320 	orr.w	r3, r3, #32
 8005be6:	743b      	strb	r3, [r7, #16]
 8005be8:	e003      	b.n	8005bf2 <lsm6dso_pin_int1_route_set+0x112>
  }
  else
  {
    ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8005bea:	7c3b      	ldrb	r3, [r7, #16]
 8005bec:	f36f 1345 	bfc	r3, #5, #1
 8005bf0:	743b      	strb	r3, [r7, #16]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8005bf2:	f107 0210 	add.w	r2, r7, #16
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	2113      	movs	r1, #19
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7ff f99c 	bl	8004f38 <lsm6dso_write_reg>
 8005c00:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <lsm6dso_pin_int1_route_set+0x12c>
 8005c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0a:	e30b      	b.n	8006224 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8005c0c:	f107 0220 	add.w	r2, r7, #32
 8005c10:	2301      	movs	r3, #1
 8005c12:	210e      	movs	r1, #14
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff f977 	bl	8004f08 <lsm6dso_read_reg>
 8005c1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8005c1c:	793b      	ldrb	r3, [r7, #4]
 8005c1e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c28:	f362 0382 	bfi	r3, r2, #2, #1
 8005c2c:	f887 3020 	strb.w	r3, [r7, #32]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8005c30:	f107 0220 	add.w	r2, r7, #32
 8005c34:	2301      	movs	r3, #1
 8005c36:	210e      	movs	r1, #14
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff f97d 	bl	8004f38 <lsm6dso_write_reg>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c42:	4413      	add	r3, r2
 8005c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <lsm6dso_pin_int1_route_set+0x170>
 8005c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c4e:	e2e9      	b.n	8006224 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8005c50:	f107 0218 	add.w	r2, r7, #24
 8005c54:	2301      	movs	r3, #1
 8005c56:	215f      	movs	r1, #95	@ 0x5f
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff f955 	bl	8004f08 <lsm6dso_read_reg>
 8005c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  md2_cfg.int2_timestamp = val.timestamp;
 8005c60:	797b      	ldrb	r3, [r7, #5]
 8005c62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	7e3b      	ldrb	r3, [r7, #24]
 8005c6a:	f362 0300 	bfi	r3, r2, #0, #1
 8005c6e:	763b      	strb	r3, [r7, #24]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8005c70:	f107 0218 	add.w	r2, r7, #24
 8005c74:	2301      	movs	r3, #1
 8005c76:	215f      	movs	r1, #95	@ 0x5f
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff f95d 	bl	8004f38 <lsm6dso_write_reg>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c82:	4413      	add	r3, r2
 8005c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <lsm6dso_pin_int1_route_set+0x1b0>
 8005c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8e:	e2c9      	b.n	8006224 <lsm6dso_pin_int1_route_set+0x744>

  /* emmbedded and FSM events */
  emb_func_int1.not_used_01 = 0;
 8005c90:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005c94:	f36f 0302 	bfc	r3, #0, #3
 8005c98:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 8005c9c:	79bb      	ldrb	r3, [r7, #6]
 8005c9e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005ca8:	f362 03c3 	bfi	r3, r2, #3, #1
 8005cac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 8005cb0:	79bb      	ldrb	r3, [r7, #6]
 8005cb2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005cbc:	f362 1304 	bfi	r3, r2, #4, #1
 8005cc0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8005cc4:	79bb      	ldrb	r3, [r7, #6]
 8005cc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005cd0:	f362 1345 	bfi	r3, r2, #5, #1
 8005cd4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.not_used_02 = 0;
 8005cd8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005cdc:	f36f 1386 	bfc	r3, #6, #1
 8005ce0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8005ce4:	79bb      	ldrb	r3, [r7, #6]
 8005ce6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005cf0:	f362 13c7 	bfi	r3, r2, #7, #1
 8005cf4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8005cf8:	79bb      	ldrb	r3, [r7, #6]
 8005cfa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d04:	f362 0300 	bfi	r3, r2, #0, #1
 8005d08:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8005d0c:	79bb      	ldrb	r3, [r7, #6]
 8005d0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d18:	f362 0341 	bfi	r3, r2, #1, #1
 8005d1c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 8005d20:	79bb      	ldrb	r3, [r7, #6]
 8005d22:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d2c:	f362 0382 	bfi	r3, r2, #2, #1
 8005d30:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d40:	f362 03c3 	bfi	r3, r2, #3, #1
 8005d44:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d54:	f362 1304 	bfi	r3, r2, #4, #1
 8005d58:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d68:	f362 1345 	bfi	r3, r2, #5, #1
 8005d6c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d7c:	f362 1386 	bfi	r3, r2, #6, #1
 8005d80:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d90:	f362 13c7 	bfi	r3, r2, #7, #1
 8005d94:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005da4:	f362 0300 	bfi	r3, r2, #0, #1
 8005da8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005db8:	f362 0341 	bfi	r3, r2, #1, #1
 8005dbc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dcc:	f362 0382 	bfi	r3, r2, #2, #1
 8005dd0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 8005dd4:	7a3b      	ldrb	r3, [r7, #8]
 8005dd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005de0:	f362 03c3 	bfi	r3, r2, #3, #1
 8005de4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8005de8:	7a3b      	ldrb	r3, [r7, #8]
 8005dea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005df4:	f362 1304 	bfi	r3, r2, #4, #1
 8005df8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8005dfc:	7a3b      	ldrb	r3, [r7, #8]
 8005dfe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e08:	f362 1345 	bfi	r3, r2, #5, #1
 8005e0c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 8005e10:	7a3b      	ldrb	r3, [r7, #8]
 8005e12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e1c:	f362 1386 	bfi	r3, r2, #6, #1
 8005e20:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8005e24:	7a3b      	ldrb	r3, [r7, #8]
 8005e26:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e30:	f362 13c7 	bfi	r3, r2, #7, #1
 8005e34:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005e38:	2102      	movs	r1, #2
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff fcce 	bl	80057dc <lsm6dso_mem_bank_set>
 8005e40:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <lsm6dso_pin_int1_route_set+0x36c>
 8005e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e4a:	e1eb      	b.n	8006224 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 8005e4c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005e50:	2301      	movs	r3, #1
 8005e52:	210a      	movs	r1, #10
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff f86f 	bl	8004f38 <lsm6dso_write_reg>
 8005e5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 8005e5c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005e60:	2301      	movs	r3, #1
 8005e62:	210b      	movs	r1, #11
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff f867 	bl	8004f38 <lsm6dso_write_reg>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e6e:	4413      	add	r3, r2
 8005e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8005e72:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005e76:	2301      	movs	r3, #1
 8005e78:	210c      	movs	r1, #12
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff f85c 	bl	8004f38 <lsm6dso_write_reg>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e84:	4413      	add	r3, r2
 8005e86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005e88:	2100      	movs	r1, #0
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f7ff fca6 	bl	80057dc <lsm6dso_mem_bank_set>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e94:	4413      	add	r3, r2
 8005e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <lsm6dso_pin_int1_route_set+0x3c2>
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea0:	e1c0      	b.n	8006224 <lsm6dso_pin_int1_route_set+0x744>

  /* MD1_CFG */
  md1_cfg.int1_shub         = val.sh_endop;
 8005ea2:	797b      	ldrb	r3, [r7, #5]
 8005ea4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	7d3b      	ldrb	r3, [r7, #20]
 8005eac:	f362 0300 	bfi	r3, r2, #0, #1
 8005eb0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 8005eb2:	797b      	ldrb	r3, [r7, #5]
 8005eb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	7d3b      	ldrb	r3, [r7, #20]
 8005ebc:	f362 0382 	bfi	r3, r2, #2, #1
 8005ec0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 8005ec2:	797b      	ldrb	r3, [r7, #5]
 8005ec4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	7d3b      	ldrb	r3, [r7, #20]
 8005ecc:	f362 03c3 	bfi	r3, r2, #3, #1
 8005ed0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 8005ed2:	797b      	ldrb	r3, [r7, #5]
 8005ed4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	7d3b      	ldrb	r3, [r7, #20]
 8005edc:	f362 1304 	bfi	r3, r2, #4, #1
 8005ee0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 8005ee2:	797b      	ldrb	r3, [r7, #5]
 8005ee4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	7d3b      	ldrb	r3, [r7, #20]
 8005eec:	f362 1345 	bfi	r3, r2, #5, #1
 8005ef0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 8005ef2:	797b      	ldrb	r3, [r7, #5]
 8005ef4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	7d3b      	ldrb	r3, [r7, #20]
 8005efc:	f362 1386 	bfi	r3, r2, #6, #1
 8005f00:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 8005f02:	79bb      	ldrb	r3, [r7, #6]
 8005f04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	7d3b      	ldrb	r3, [r7, #20]
 8005f0c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005f10:	753b      	strb	r3, [r7, #20]

  if ((emb_func_int1.int1_fsm_lc
 8005f12:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005f16:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f1a:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_sig_mot
 8005f1c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005f20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4313      	orrs	r3, r2
 8005f28:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_step_detector
 8005f2a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005f2e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	4313      	orrs	r3, r2
 8005f36:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_tilt
 8005f38:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005f3c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	4313      	orrs	r3, r2
 8005f44:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm1
 8005f46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	4313      	orrs	r3, r2
 8005f52:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm2
 8005f54:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f58:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm3
 8005f62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm4
 8005f70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm5
 8005f7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f82:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm6
 8005f8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	4313      	orrs	r3, r2
 8005f98:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm7
 8005f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm8
 8005fa8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005fac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm9
 8005fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm10
 8005fc4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm11
 8005fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fd6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm12
 8005fe0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fe4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm13
 8005fee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ff2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm14
 8005ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006000:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006004:	b2db      	uxtb	r3, r3
 8006006:	4313      	orrs	r3, r2
 8006008:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm15
 800600a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800600e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	4313      	orrs	r3, r2
 8006016:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 8006018:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800601c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	4313      	orrs	r3, r2
 8006024:	b2db      	uxtb	r3, r3
  if ((emb_func_int1.int1_fsm_lc
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <lsm6dso_pin_int1_route_set+0x554>
  {
    md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 800602a:	7d3b      	ldrb	r3, [r7, #20]
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	753b      	strb	r3, [r7, #20]
 8006032:	e003      	b.n	800603c <lsm6dso_pin_int1_route_set+0x55c>
  }
  else
  {
    md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 8006034:	7d3b      	ldrb	r3, [r7, #20]
 8006036:	f36f 0341 	bfc	r3, #1, #1
 800603a:	753b      	strb	r3, [r7, #20]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800603c:	f107 0214 	add.w	r2, r7, #20
 8006040:	2301      	movs	r3, #1
 8006042:	215e      	movs	r1, #94	@ 0x5e
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7fe ff77 	bl	8004f38 <lsm6dso_write_reg>
 800604a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800604c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <lsm6dso_pin_int1_route_set+0x576>
 8006052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006054:	e0e6      	b.n	8006224 <lsm6dso_pin_int1_route_set+0x744>

  /* set interrupts_enable = 1 in TAP_CFG2 if it is the case */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8006056:	f107 021c 	add.w	r2, r7, #28
 800605a:	2301      	movs	r3, #1
 800605c:	2158      	movs	r1, #88	@ 0x58
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7fe ff52 	bl	8004f08 <lsm6dso_read_reg>
 8006064:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 8006066:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800606a:	461a      	mov	r2, r3
 800606c:	2100      	movs	r1, #0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fe3e 	bl	8006cf0 <lsm6dso_pin_int2_route_get>
 8006074:	4602      	mov	r2, r0
 8006076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006078:	4413      	add	r3, r2
 800607a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800607c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <lsm6dso_pin_int1_route_set+0x5a6>
 8006082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006084:	e0ce      	b.n	8006224 <lsm6dso_pin_int1_route_set+0x744>

  if ((pin_int2_route.fifo_bdr
 8006086:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800608a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800608e:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_g
 8006090:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006094:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006098:	b2db      	uxtb	r3, r3
 800609a:	4313      	orrs	r3, r2
 800609c:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_temp
 800609e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80060a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_xl
 80060ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80060b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	4313      	orrs	r3, r2
 80060b8:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_full
 80060ba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80060be:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	4313      	orrs	r3, r2
 80060c6:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_ovr
 80060c8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80060cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	4313      	orrs	r3, r2
 80060d4:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_th
 80060d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80060da:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	4313      	orrs	r3, r2
 80060e2:	b2da      	uxtb	r2, r3
       | pin_int2_route.six_d
 80060e4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80060e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b2da      	uxtb	r2, r3
       | pin_int2_route.double_tap
 80060f2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80060f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b2da      	uxtb	r2, r3
       | pin_int2_route.free_fall
 8006100:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006104:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006108:	b2db      	uxtb	r3, r3
 800610a:	4313      	orrs	r3, r2
 800610c:	b2da      	uxtb	r2, r3
       | pin_int2_route.wake_up
 800610e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006112:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	4313      	orrs	r3, r2
 800611a:	b2da      	uxtb	r2, r3
       | pin_int2_route.single_tap
 800611c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006120:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006124:	b2db      	uxtb	r3, r3
 8006126:	4313      	orrs	r3, r2
 8006128:	b2da      	uxtb	r2, r3
       | pin_int2_route.sleep_change
 800612a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800612e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006132:	b2db      	uxtb	r3, r3
 8006134:	4313      	orrs	r3, r2
 8006136:	b2da      	uxtb	r2, r3
       | int1_ctrl.den_drdy_flag
 8006138:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800613c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006140:	b2db      	uxtb	r3, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_boot
 8006146:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800614a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	4313      	orrs	r3, r2
 8006152:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_cnt_bdr
 8006154:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006158:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800615c:	b2db      	uxtb	r3, r3
 800615e:	4313      	orrs	r3, r2
 8006160:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_g
 8006162:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006166:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	4313      	orrs	r3, r2
 800616e:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_xl
 8006170:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006174:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006178:	b2db      	uxtb	r3, r3
 800617a:	4313      	orrs	r3, r2
 800617c:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_full
 800617e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006182:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	4313      	orrs	r3, r2
 800618a:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_ovr
 800618c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006190:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_th
 800619a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800619e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	4313      	orrs	r3, r2
 80061a6:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_shub
 80061a8:	7d3b      	ldrb	r3, [r7, #20]
 80061aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	4313      	orrs	r3, r2
 80061b2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_6d
 80061b4:	7d3b      	ldrb	r3, [r7, #20]
 80061b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4313      	orrs	r3, r2
 80061be:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_double_tap
 80061c0:	7d3b      	ldrb	r3, [r7, #20]
 80061c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	4313      	orrs	r3, r2
 80061ca:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_ff
 80061cc:	7d3b      	ldrb	r3, [r7, #20]
 80061ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	4313      	orrs	r3, r2
 80061d6:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_wu
 80061d8:	7d3b      	ldrb	r3, [r7, #20]
 80061da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_single_tap
 80061e4:	7d3b      	ldrb	r3, [r7, #20]
 80061e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	4313      	orrs	r3, r2
 80061ee:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 80061f0:	7d3b      	ldrb	r3, [r7, #20]
 80061f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	4313      	orrs	r3, r2
 80061fa:	b2db      	uxtb	r3, r3
  if ((pin_int2_route.fifo_bdr
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <lsm6dso_pin_int1_route_set+0x72a>
  {
    tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8006200:	7f3b      	ldrb	r3, [r7, #28]
 8006202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006206:	773b      	strb	r3, [r7, #28]
 8006208:	e003      	b.n	8006212 <lsm6dso_pin_int1_route_set+0x732>
  }
  else
  {
    tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800620a:	7f3b      	ldrb	r3, [r7, #28]
 800620c:	f36f 13c7 	bfc	r3, #7, #1
 8006210:	773b      	strb	r3, [r7, #28]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8006212:	f107 021c 	add.w	r2, r7, #28
 8006216:	2301      	movs	r3, #1
 8006218:	2158      	movs	r1, #88	@ 0x58
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7fe fe8c 	bl	8004f38 <lsm6dso_write_reg>
 8006220:	63f8      	str	r0, [r7, #60]	@ 0x3c

  return ret;
 8006222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006224:	4618      	mov	r0, r3
 8006226:	3740      	adds	r7, #64	@ 0x40
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <lsm6dso_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t *val)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08c      	sub	sp, #48	@ 0x30
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  lsm6dso_md2_cfg_t         md2_cfg;
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006236:	2102      	movs	r1, #2
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff facf 	bl	80057dc <lsm6dso_mem_bank_set>
 800623e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8006240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <lsm6dso_pin_int1_route_get+0x1e>
 8006246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006248:	e1dc      	b.n	8006604 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 800624a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800624e:	2301      	movs	r3, #1
 8006250:	210a      	movs	r1, #10
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fe fe58 	bl	8004f08 <lsm6dso_read_reg>
 8006258:	62f8      	str	r0, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 800625a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800625e:	2301      	movs	r3, #1
 8006260:	210b      	movs	r1, #11
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fe fe50 	bl	8004f08 <lsm6dso_read_reg>
 8006268:	4602      	mov	r2, r0
 800626a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626c:	4413      	add	r3, r2
 800626e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8006270:	f107 0220 	add.w	r2, r7, #32
 8006274:	2301      	movs	r3, #1
 8006276:	210c      	movs	r1, #12
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fe fe45 	bl	8004f08 <lsm6dso_read_reg>
 800627e:	4602      	mov	r2, r0
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	4413      	add	r3, r2
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006286:	2100      	movs	r1, #0
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff faa7 	bl	80057dc <lsm6dso_mem_bank_set>
 800628e:	4602      	mov	r2, r0
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	4413      	add	r3, r2
 8006294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 8006296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <lsm6dso_pin_int1_route_get+0x74>
 800629c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629e:	e1b1      	b.n	8006604 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80062a0:	f107 021c 	add.w	r2, r7, #28
 80062a4:	2301      	movs	r3, #1
 80062a6:	210d      	movs	r1, #13
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fe fe2d 	bl	8004f08 <lsm6dso_read_reg>
 80062ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 80062b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <lsm6dso_pin_int1_route_get+0x8e>
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	e1a4      	b.n	8006604 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80062ba:	f107 0210 	add.w	r2, r7, #16
 80062be:	2301      	movs	r3, #1
 80062c0:	215e      	movs	r1, #94	@ 0x5e
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fe fe20 	bl	8004f08 <lsm6dso_read_reg>
 80062c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 80062ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <lsm6dso_pin_int1_route_get+0xa8>
 80062d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d2:	e197      	b.n	8006604 <lsm6dso_pin_int1_route_get+0x3d8>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80062d4:	f107 020c 	add.w	r2, r7, #12
 80062d8:	2301      	movs	r3, #1
 80062da:	2113      	movs	r1, #19
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7fe fe13 	bl	8004f08 <lsm6dso_read_reg>
 80062e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (ret != 0) { return ret; }
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <lsm6dso_pin_int1_route_get+0xc2>
 80062ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ec:	e18a      	b.n	8006604 <lsm6dso_pin_int1_route_get+0x3d8>

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 80062ee:	7b3b      	ldrb	r3, [r7, #12]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d025      	beq.n	8006346 <lsm6dso_pin_int1_route_get+0x11a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 80062fa:	f107 0218 	add.w	r2, r7, #24
 80062fe:	2301      	movs	r3, #1
 8006300:	210e      	movs	r1, #14
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fe fe00 	bl	8004f08 <lsm6dso_read_reg>
 8006308:	62f8      	str	r0, [r7, #44]	@ 0x2c
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800630a:	7e3b      	ldrb	r3, [r7, #24]
 800630c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006310:	b2d9      	uxtb	r1, r3
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	7813      	ldrb	r3, [r2, #0]
 8006316:	f361 0382 	bfi	r3, r1, #2, #1
 800631a:	7013      	strb	r3, [r2, #0]

    ret += lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800631c:	f107 0214 	add.w	r2, r7, #20
 8006320:	2301      	movs	r3, #1
 8006322:	215f      	movs	r1, #95	@ 0x5f
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7fe fdef 	bl	8004f08 <lsm6dso_read_reg>
 800632a:	4602      	mov	r2, r0
 800632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632e:	4413      	add	r3, r2
 8006330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    val->timestamp = md2_cfg.int2_timestamp;
 8006332:	7d3b      	ldrb	r3, [r7, #20]
 8006334:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006338:	b2d9      	uxtb	r1, r3
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	7853      	ldrb	r3, [r2, #1]
 800633e:	f361 0382 	bfi	r3, r1, #2, #1
 8006342:	7053      	strb	r3, [r2, #1]
 8006344:	e009      	b.n	800635a <lsm6dso_pin_int1_route_get+0x12e>
  }
  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	7813      	ldrb	r3, [r2, #0]
 800634a:	f36f 0382 	bfc	r3, #2, #1
 800634e:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	7853      	ldrb	r3, [r2, #1]
 8006354:	f36f 0382 	bfc	r3, #2, #1
 8006358:	7053      	strb	r3, [r2, #1]
  }
  if (ret != 0) { return ret; }
 800635a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <lsm6dso_pin_int1_route_get+0x138>
 8006360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006362:	e14f      	b.n	8006604 <lsm6dso_pin_int1_route_get+0x3d8>

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8006364:	7f3b      	ldrb	r3, [r7, #28]
 8006366:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800636a:	b2d9      	uxtb	r1, r3
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	7813      	ldrb	r3, [r2, #0]
 8006370:	f361 0300 	bfi	r3, r1, #0, #1
 8006374:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 8006376:	7f3b      	ldrb	r3, [r7, #28]
 8006378:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800637c:	b2d9      	uxtb	r1, r3
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	7813      	ldrb	r3, [r2, #0]
 8006382:	f361 0341 	bfi	r3, r1, #1, #1
 8006386:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 8006388:	7f3b      	ldrb	r3, [r7, #28]
 800638a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800638e:	b2d9      	uxtb	r1, r3
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	7813      	ldrb	r3, [r2, #0]
 8006394:	f361 03c3 	bfi	r3, r1, #3, #1
 8006398:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 800639a:	7f3b      	ldrb	r3, [r7, #28]
 800639c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80063a0:	b2d9      	uxtb	r1, r3
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	7813      	ldrb	r3, [r2, #0]
 80063a6:	f361 1304 	bfi	r3, r1, #4, #1
 80063aa:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 80063ac:	7f3b      	ldrb	r3, [r7, #28]
 80063ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80063b2:	b2d9      	uxtb	r1, r3
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	7813      	ldrb	r3, [r2, #0]
 80063b8:	f361 1345 	bfi	r3, r1, #5, #1
 80063bc:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 80063be:	7f3b      	ldrb	r3, [r7, #28]
 80063c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80063c4:	b2d9      	uxtb	r1, r3
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	7813      	ldrb	r3, [r2, #0]
 80063ca:	f361 1386 	bfi	r3, r1, #6, #1
 80063ce:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 80063d0:	7f3b      	ldrb	r3, [r7, #28]
 80063d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80063d6:	b2d9      	uxtb	r1, r3
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	7813      	ldrb	r3, [r2, #0]
 80063dc:	f361 13c7 	bfi	r3, r1, #7, #1
 80063e0:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 80063e2:	7f3b      	ldrb	r3, [r7, #28]
 80063e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80063e8:	b2d9      	uxtb	r1, r3
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	7853      	ldrb	r3, [r2, #1]
 80063ee:	f361 0300 	bfi	r3, r1, #0, #1
 80063f2:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 80063f4:	7c3b      	ldrb	r3, [r7, #16]
 80063f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063fa:	b2d9      	uxtb	r1, r3
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	7853      	ldrb	r3, [r2, #1]
 8006400:	f361 0341 	bfi	r3, r1, #1, #1
 8006404:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 8006406:	7c3b      	ldrb	r3, [r7, #16]
 8006408:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800640c:	b2d9      	uxtb	r1, r3
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	7853      	ldrb	r3, [r2, #1]
 8006412:	f361 03c3 	bfi	r3, r1, #3, #1
 8006416:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 8006418:	7c3b      	ldrb	r3, [r7, #16]
 800641a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800641e:	b2d9      	uxtb	r1, r3
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	7853      	ldrb	r3, [r2, #1]
 8006424:	f361 1304 	bfi	r3, r1, #4, #1
 8006428:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 800642a:	7c3b      	ldrb	r3, [r7, #16]
 800642c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006430:	b2d9      	uxtb	r1, r3
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	7853      	ldrb	r3, [r2, #1]
 8006436:	f361 1345 	bfi	r3, r1, #5, #1
 800643a:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 800643c:	7c3b      	ldrb	r3, [r7, #16]
 800643e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006442:	b2d9      	uxtb	r1, r3
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	7853      	ldrb	r3, [r2, #1]
 8006448:	f361 1386 	bfi	r3, r1, #6, #1
 800644c:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 800644e:	7c3b      	ldrb	r3, [r7, #16]
 8006450:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006454:	b2d9      	uxtb	r1, r3
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	7853      	ldrb	r3, [r2, #1]
 800645a:	f361 13c7 	bfi	r3, r1, #7, #1
 800645e:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 8006460:	7c3b      	ldrb	r3, [r7, #16]
 8006462:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006466:	b2d9      	uxtb	r1, r3
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	7893      	ldrb	r3, [r2, #2]
 800646c:	f361 0300 	bfi	r3, r1, #0, #1
 8006470:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 8006472:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006476:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800647a:	b2d9      	uxtb	r1, r3
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	7893      	ldrb	r3, [r2, #2]
 8006480:	f361 0341 	bfi	r3, r1, #1, #1
 8006484:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 8006486:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800648a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800648e:	b2d9      	uxtb	r1, r3
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	7893      	ldrb	r3, [r2, #2]
 8006494:	f361 0382 	bfi	r3, r1, #2, #1
 8006498:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 800649a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800649e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80064a2:	b2d9      	uxtb	r1, r3
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	7893      	ldrb	r3, [r2, #2]
 80064a8:	f361 03c3 	bfi	r3, r1, #3, #1
 80064ac:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 80064ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80064b6:	b2d9      	uxtb	r1, r3
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	7893      	ldrb	r3, [r2, #2]
 80064bc:	f361 1304 	bfi	r3, r1, #4, #1
 80064c0:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 80064c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80064ca:	b2d9      	uxtb	r1, r3
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	7893      	ldrb	r3, [r2, #2]
 80064d0:	f361 1345 	bfi	r3, r1, #5, #1
 80064d4:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 80064d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80064de:	b2d9      	uxtb	r1, r3
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	7893      	ldrb	r3, [r2, #2]
 80064e4:	f361 1386 	bfi	r3, r1, #6, #1
 80064e8:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 80064ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80064f2:	b2d9      	uxtb	r1, r3
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	7893      	ldrb	r3, [r2, #2]
 80064f8:	f361 13c7 	bfi	r3, r1, #7, #1
 80064fc:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 80064fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006502:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006506:	b2d9      	uxtb	r1, r3
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	78d3      	ldrb	r3, [r2, #3]
 800650c:	f361 0300 	bfi	r3, r1, #0, #1
 8006510:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 8006512:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006516:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800651a:	b2d9      	uxtb	r1, r3
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	78d3      	ldrb	r3, [r2, #3]
 8006520:	f361 0341 	bfi	r3, r1, #1, #1
 8006524:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 8006526:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800652a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800652e:	b2d9      	uxtb	r1, r3
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	78d3      	ldrb	r3, [r2, #3]
 8006534:	f361 0382 	bfi	r3, r1, #2, #1
 8006538:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 800653a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800653e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006542:	b2d9      	uxtb	r1, r3
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	78d3      	ldrb	r3, [r2, #3]
 8006548:	f361 03c3 	bfi	r3, r1, #3, #1
 800654c:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 800654e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006552:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006556:	b2d9      	uxtb	r1, r3
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	78d3      	ldrb	r3, [r2, #3]
 800655c:	f361 1304 	bfi	r3, r1, #4, #1
 8006560:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 8006562:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006566:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800656a:	b2d9      	uxtb	r1, r3
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	78d3      	ldrb	r3, [r2, #3]
 8006570:	f361 1345 	bfi	r3, r1, #5, #1
 8006574:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 8006576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800657a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800657e:	b2d9      	uxtb	r1, r3
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	78d3      	ldrb	r3, [r2, #3]
 8006584:	f361 1386 	bfi	r3, r1, #6, #1
 8006588:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 800658a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800658e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006592:	b2d9      	uxtb	r1, r3
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	78d3      	ldrb	r3, [r2, #3]
 8006598:	f361 13c7 	bfi	r3, r1, #7, #1
 800659c:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 800659e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80065a6:	b2d9      	uxtb	r1, r3
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	7913      	ldrb	r3, [r2, #4]
 80065ac:	f361 0300 	bfi	r3, r1, #0, #1
 80065b0:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 80065b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80065ba:	b2d9      	uxtb	r1, r3
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	7913      	ldrb	r3, [r2, #4]
 80065c0:	f361 0341 	bfi	r3, r1, #1, #1
 80065c4:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 80065c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80065ce:	b2d9      	uxtb	r1, r3
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	7913      	ldrb	r3, [r2, #4]
 80065d4:	f361 0382 	bfi	r3, r1, #2, #1
 80065d8:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 80065da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065de:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80065e2:	b2d9      	uxtb	r1, r3
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	7913      	ldrb	r3, [r2, #4]
 80065e8:	f361 03c3 	bfi	r3, r1, #3, #1
 80065ec:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 80065ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80065f6:	b2d9      	uxtb	r1, r3
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	7913      	ldrb	r3, [r2, #4]
 80065fc:	f361 1304 	bfi	r3, r1, #4, #1
 8006600:	7113      	strb	r3, [r2, #4]

  return ret;
 8006602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006604:	4618      	mov	r0, r3
 8006606:	3730      	adds	r7, #48	@ 0x30
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <lsm6dso_pin_int2_route_set>:
  *
  */
int32_t lsm6dso_pin_int2_route_set(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t val)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b090      	sub	sp, #64	@ 0x40
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	4639      	mov	r1, r7
 8006618:	e881 000c 	stmia.w	r1, {r2, r3}
  lsm6dso_tap_cfg2_t       tap_cfg2;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                  ret;
  ret = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (aux_ctx != NULL)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d01f      	beq.n	8006666 <lsm6dso_pin_int2_route_set+0x5a>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 8006626:	f107 0214 	add.w	r2, r7, #20
 800662a:	2301      	movs	r3, #1
 800662c:	216f      	movs	r1, #111	@ 0x6f
 800662e:	68b8      	ldr	r0, [r7, #8]
 8006630:	f7fe fc6a 	bl	8004f08 <lsm6dso_read_reg>
 8006634:	63f8      	str	r0, [r7, #60]	@ 0x3c
    int_ois.int2_drdy_ois = val.drdy_ois;
 8006636:	783b      	ldrb	r3, [r7, #0]
 8006638:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800663c:	b2da      	uxtb	r2, r3
 800663e:	7d3b      	ldrb	r3, [r7, #20]
 8006640:	f362 13c7 	bfi	r3, r2, #7, #1
 8006644:	753b      	strb	r3, [r7, #20]
    ret += lsm6dso_write_reg(aux_ctx, LSM6DSO_INT_OIS, (uint8_t *)&int_ois, 1);
 8006646:	f107 0214 	add.w	r2, r7, #20
 800664a:	2301      	movs	r3, #1
 800664c:	216f      	movs	r1, #111	@ 0x6f
 800664e:	68b8      	ldr	r0, [r7, #8]
 8006650:	f7fe fc72 	bl	8004f38 <lsm6dso_write_reg>
 8006654:	4602      	mov	r2, r0
 8006656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006658:	4413      	add	r3, r2
 800665a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 800665c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <lsm6dso_pin_int2_route_set+0x5a>
 8006662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006664:	e340      	b.n	8006ce8 <lsm6dso_pin_int2_route_set+0x6dc>
  }

  if (ctx != NULL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 833c 	beq.w	8006ce6 <lsm6dso_pin_int2_route_set+0x6da>
  {
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 800666e:	783b      	ldrb	r3, [r7, #0]
 8006670:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006674:	b2da      	uxtb	r2, r3
 8006676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800667a:	f362 0300 	bfi	r3, r2, #0, #1
 800667e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_g    = val.drdy_g;
 8006682:	783b      	ldrb	r3, [r7, #0]
 8006684:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006688:	b2da      	uxtb	r2, r3
 800668a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800668e:	f362 0341 	bfi	r3, r2, #1, #1
 8006692:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8006696:	783b      	ldrb	r3, [r7, #0]
 8006698:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800669c:	b2da      	uxtb	r2, r3
 800669e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066a2:	f362 0382 	bfi	r3, r2, #2, #1
 80066a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_th   = val.fifo_th;
 80066aa:	783b      	ldrb	r3, [r7, #0]
 80066ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066b6:	f362 03c3 	bfi	r3, r2, #3, #1
 80066ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 80066be:	783b      	ldrb	r3, [r7, #0]
 80066c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066ca:	f362 1304 	bfi	r3, r2, #4, #1
 80066ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_fifo_full = val.fifo_full;
 80066d2:	783b      	ldrb	r3, [r7, #0]
 80066d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066de:	f362 1345 	bfi	r3, r2, #5, #1
 80066e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
 80066e6:	783b      	ldrb	r3, [r7, #0]
 80066e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066f2:	f362 1386 	bfi	r3, r2, #6, #1
 80066f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    int2_ctrl.not_used_01    = 0;
 80066fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066fe:	f36f 13c7 	bfc	r3, #7, #1
 8006702:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8006706:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800670a:	2301      	movs	r3, #1
 800670c:	210e      	movs	r1, #14
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7fe fc12 	bl	8004f38 <lsm6dso_write_reg>
 8006714:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8006716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <lsm6dso_pin_int2_route_set+0x114>
 800671c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800671e:	e2e3      	b.n	8006ce8 <lsm6dso_pin_int2_route_set+0x6dc>

    md2_cfg.int2_timestamp    = val.timestamp;
 8006720:	787b      	ldrb	r3, [r7, #1]
 8006722:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006726:	b2da      	uxtb	r2, r3
 8006728:	7f3b      	ldrb	r3, [r7, #28]
 800672a:	f362 0300 	bfi	r3, r2, #0, #1
 800672e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_6d           = val.six_d;
 8006730:	787b      	ldrb	r3, [r7, #1]
 8006732:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	7f3b      	ldrb	r3, [r7, #28]
 800673a:	f362 0382 	bfi	r3, r2, #2, #1
 800673e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_double_tap   = val.double_tap;
 8006740:	787b      	ldrb	r3, [r7, #1]
 8006742:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	7f3b      	ldrb	r3, [r7, #28]
 800674a:	f362 03c3 	bfi	r3, r2, #3, #1
 800674e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_ff           = val.free_fall;
 8006750:	787b      	ldrb	r3, [r7, #1]
 8006752:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006756:	b2da      	uxtb	r2, r3
 8006758:	7f3b      	ldrb	r3, [r7, #28]
 800675a:	f362 1304 	bfi	r3, r2, #4, #1
 800675e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_wu           = val.wake_up;
 8006760:	787b      	ldrb	r3, [r7, #1]
 8006762:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006766:	b2da      	uxtb	r2, r3
 8006768:	7f3b      	ldrb	r3, [r7, #28]
 800676a:	f362 1345 	bfi	r3, r2, #5, #1
 800676e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_single_tap   = val.single_tap;
 8006770:	787b      	ldrb	r3, [r7, #1]
 8006772:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	7f3b      	ldrb	r3, [r7, #28]
 800677a:	f362 1386 	bfi	r3, r2, #6, #1
 800677e:	773b      	strb	r3, [r7, #28]
    md2_cfg.int2_sleep_change = val.sleep_change;
 8006780:	787b      	ldrb	r3, [r7, #1]
 8006782:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	7f3b      	ldrb	r3, [r7, #28]
 800678a:	f362 13c7 	bfi	r3, r2, #7, #1
 800678e:	773b      	strb	r3, [r7, #28]
    emb_func_int2.not_used_01 = 0;
 8006790:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006794:	f36f 0302 	bfc	r3, #0, #3
 8006798:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2. int2_step_detector = val.step_detector;
 800679c:	787b      	ldrb	r3, [r7, #1]
 800679e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067a8:	f362 03c3 	bfi	r3, r2, #3, #1
 80067ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_tilt           = val.tilt;
 80067b0:	78bb      	ldrb	r3, [r7, #2]
 80067b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067bc:	f362 1304 	bfi	r3, r2, #4, #1
 80067c0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_sig_mot        = val.sig_mot;
 80067c4:	78bb      	ldrb	r3, [r7, #2]
 80067c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067d0:	f362 1345 	bfi	r3, r2, #5, #1
 80067d4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.not_used_02 = 0;
 80067d8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067dc:	f36f 1386 	bfc	r3, #6, #1
 80067e0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_fsm_lc         = val.fsm_lc;
 80067e4:	78bb      	ldrb	r3, [r7, #2]
 80067e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067f0:	f362 13c7 	bfi	r3, r2, #7, #1
 80067f4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    fsm_int2_a.int2_fsm1 = val.fsm1;
 80067f8:	78bb      	ldrb	r3, [r7, #2]
 80067fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006804:	f362 0300 	bfi	r3, r2, #0, #1
 8006808:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm2 = val.fsm2;
 800680c:	78bb      	ldrb	r3, [r7, #2]
 800680e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006812:	b2da      	uxtb	r2, r3
 8006814:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006818:	f362 0341 	bfi	r3, r2, #1, #1
 800681c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm3 = val.fsm3;
 8006820:	78bb      	ldrb	r3, [r7, #2]
 8006822:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800682c:	f362 0382 	bfi	r3, r2, #2, #1
 8006830:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm4 = val.fsm4;
 8006834:	78bb      	ldrb	r3, [r7, #2]
 8006836:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800683a:	b2da      	uxtb	r2, r3
 800683c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006840:	f362 03c3 	bfi	r3, r2, #3, #1
 8006844:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm5 = val.fsm5;
 8006848:	78bb      	ldrb	r3, [r7, #2]
 800684a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800684e:	b2da      	uxtb	r2, r3
 8006850:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006854:	f362 1304 	bfi	r3, r2, #4, #1
 8006858:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm6 = val.fsm6;
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006862:	b2da      	uxtb	r2, r3
 8006864:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006868:	f362 1345 	bfi	r3, r2, #5, #1
 800686c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm7 = val.fsm7;
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006876:	b2da      	uxtb	r2, r3
 8006878:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800687c:	f362 1386 	bfi	r3, r2, #6, #1
 8006880:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_a.int2_fsm8 = val.fsm8;
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800688a:	b2da      	uxtb	r2, r3
 800688c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006890:	f362 13c7 	bfi	r3, r2, #7, #1
 8006894:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068a4:	f362 0300 	bfi	r3, r2, #0, #1
 80068a8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm10 = val.fsm10;
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068b8:	f362 0341 	bfi	r3, r2, #1, #1
 80068bc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm11 = val.fsm11;
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068cc:	f362 0382 	bfi	r3, r2, #2, #1
 80068d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm12 = val.fsm12;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068e0:	f362 03c3 	bfi	r3, r2, #3, #1
 80068e4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm13 = val.fsm13;
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068f4:	f362 1304 	bfi	r3, r2, #4, #1
 80068f8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm14 = val.fsm14;
 80068fc:	793b      	ldrb	r3, [r7, #4]
 80068fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006902:	b2da      	uxtb	r2, r3
 8006904:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006908:	f362 1345 	bfi	r3, r2, #5, #1
 800690c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm15 = val.fsm15;
 8006910:	793b      	ldrb	r3, [r7, #4]
 8006912:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800691c:	f362 1386 	bfi	r3, r2, #6, #1
 8006920:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm16 = val.fsm16;
 8006924:	793b      	ldrb	r3, [r7, #4]
 8006926:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800692a:	b2da      	uxtb	r2, r3
 800692c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006930:	f362 13c7 	bfi	r3, r2, #7, #1
 8006934:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8006938:	f107 0218 	add.w	r2, r7, #24
 800693c:	2301      	movs	r3, #1
 800693e:	2113      	movs	r1, #19
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7fe fae1 	bl	8004f08 <lsm6dso_read_reg>
 8006946:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8006948:	783b      	ldrb	r3, [r7, #0]
 800694a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800694e:	b2da      	uxtb	r2, r3
 8006950:	787b      	ldrb	r3, [r7, #1]
 8006952:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006956:	b2db      	uxtb	r3, r3
 8006958:	4313      	orrs	r3, r2
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <lsm6dso_pin_int2_route_set+0x35c>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8006960:	7e3b      	ldrb	r3, [r7, #24]
 8006962:	f36f 1345 	bfc	r3, #5, #1
 8006966:	763b      	strb	r3, [r7, #24]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8006968:	f107 0218 	add.w	r2, r7, #24
 800696c:	2301      	movs	r3, #1
 800696e:	2113      	movs	r1, #19
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7fe fae1 	bl	8004f38 <lsm6dso_write_reg>
 8006976:	4602      	mov	r2, r0
 8006978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697a:	4413      	add	r3, r2
 800697c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 800697e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <lsm6dso_pin_int2_route_set+0x37c>
 8006984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006986:	e1af      	b.n	8006ce8 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006988:	2102      	movs	r1, #2
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7fe ff26 	bl	80057dc <lsm6dso_mem_bank_set>
 8006990:	63f8      	str	r0, [r7, #60]	@ 0x3c

    ret += lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&emb_func_int2, 1);
 8006992:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006996:	2301      	movs	r3, #1
 8006998:	210e      	movs	r1, #14
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7fe facc 	bl	8004f38 <lsm6dso_write_reg>
 80069a0:	4602      	mov	r2, r0
 80069a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a4:	4413      	add	r3, r2
 80069a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_A, (uint8_t *)&fsm_int2_a, 1);
 80069a8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80069ac:	2301      	movs	r3, #1
 80069ae:	210f      	movs	r1, #15
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7fe fac1 	bl	8004f38 <lsm6dso_write_reg>
 80069b6:	4602      	mov	r2, r0
 80069b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ba:	4413      	add	r3, r2
 80069bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_B, (uint8_t *)&fsm_int2_b, 1);
 80069be:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80069c2:	2301      	movs	r3, #1
 80069c4:	2110      	movs	r1, #16
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7fe fab6 	bl	8004f38 <lsm6dso_write_reg>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069d0:	4413      	add	r3, r2
 80069d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80069d4:	2100      	movs	r1, #0
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7fe ff00 	bl	80057dc <lsm6dso_mem_bank_set>
 80069dc:	4602      	mov	r2, r0
 80069de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e0:	4413      	add	r3, r2
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 80069e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <lsm6dso_pin_int2_route_set+0x3e2>
 80069ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ec:	e17c      	b.n	8006ce8 <lsm6dso_pin_int2_route_set+0x6dc>

    if ((emb_func_int2.int2_fsm_lc
 80069ee:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80069f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80069f6:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_sig_mot
 80069f8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80069fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_step_detector
 8006a06:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006a0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	4313      	orrs	r3, r2
 8006a12:	b2da      	uxtb	r2, r3
         | emb_func_int2.int2_tilt
 8006a14:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006a18:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm1
 8006a22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm2
 8006a30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a34:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm3
 8006a3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm4
 8006a4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm5
 8006a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a5e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm6
 8006a68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm7
 8006a76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a7a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	4313      	orrs	r3, r2
 8006a82:	b2da      	uxtb	r2, r3
         | fsm_int2_a.int2_fsm8
 8006a84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm9
 8006a92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm10
 8006aa0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006aa4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm11
 8006aae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ab2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm12
 8006abc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ac0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm13
 8006aca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ace:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm14
 8006ad8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006adc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm15
 8006ae6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006aea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b2da      	uxtb	r2, r3
         | fsm_int2_b.int2_fsm16) != PROPERTY_DISABLE)
 8006af4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006af8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	4313      	orrs	r3, r2
 8006b00:	b2db      	uxtb	r3, r3
    if ((emb_func_int2.int2_fsm_lc
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <lsm6dso_pin_int2_route_set+0x504>
    {
      md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 8006b06:	7f3b      	ldrb	r3, [r7, #28]
 8006b08:	f043 0302 	orr.w	r3, r3, #2
 8006b0c:	773b      	strb	r3, [r7, #28]
 8006b0e:	e003      	b.n	8006b18 <lsm6dso_pin_int2_route_set+0x50c>
    }
    else
    {
      md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 8006b10:	7f3b      	ldrb	r3, [r7, #28]
 8006b12:	f36f 0341 	bfc	r3, #1, #1
 8006b16:	773b      	strb	r3, [r7, #28]
    }

    ret = lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8006b18:	f107 021c 	add.w	r2, r7, #28
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	215f      	movs	r1, #95	@ 0x5f
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7fe fa09 	bl	8004f38 <lsm6dso_write_reg>
 8006b26:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (ret != 0) { return ret; }
 8006b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <lsm6dso_pin_int2_route_set+0x526>
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b30:	e0da      	b.n	8006ce8 <lsm6dso_pin_int2_route_set+0x6dc>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8006b32:	f107 0220 	add.w	r2, r7, #32
 8006b36:	2301      	movs	r3, #1
 8006b38:	2158      	movs	r1, #88	@ 0x58
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7fe f9e4 	bl	8004f08 <lsm6dso_read_reg>
 8006b40:	63f8      	str	r0, [r7, #60]	@ 0x3c
    ret += lsm6dso_pin_int1_route_get(ctx, &pin_int1_route);
 8006b42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006b46:	4619      	mov	r1, r3
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7ff fb6f 	bl	800622c <lsm6dso_pin_int1_route_get>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b52:	4413      	add	r3, r2
 8006b54:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if ((val.fifo_bdr
 8006b56:	783b      	ldrb	r3, [r7, #0]
 8006b58:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b5c:	b2da      	uxtb	r2, r3
         | val.drdy_g
 8006b5e:	783b      	ldrb	r3, [r7, #0]
 8006b60:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b2da      	uxtb	r2, r3
         | val.drdy_temp
 8006b6a:	783b      	ldrb	r3, [r7, #0]
 8006b6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	4313      	orrs	r3, r2
 8006b74:	b2da      	uxtb	r2, r3
         | val.drdy_xl
 8006b76:	783b      	ldrb	r3, [r7, #0]
 8006b78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	b2da      	uxtb	r2, r3
         | val.fifo_full
 8006b82:	783b      	ldrb	r3, [r7, #0]
 8006b84:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	b2da      	uxtb	r2, r3
         | val.fifo_ovr
 8006b8e:	783b      	ldrb	r3, [r7, #0]
 8006b90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b2da      	uxtb	r2, r3
         | val.fifo_th
 8006b9a:	783b      	ldrb	r3, [r7, #0]
 8006b9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	b2da      	uxtb	r2, r3
         | val.six_d
 8006ba6:	787b      	ldrb	r3, [r7, #1]
 8006ba8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	b2da      	uxtb	r2, r3
         | val.double_tap
 8006bb2:	787b      	ldrb	r3, [r7, #1]
 8006bb4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	b2da      	uxtb	r2, r3
         | val.free_fall
 8006bbe:	787b      	ldrb	r3, [r7, #1]
 8006bc0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	b2da      	uxtb	r2, r3
         | val.wake_up
 8006bca:	787b      	ldrb	r3, [r7, #1]
 8006bcc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b2da      	uxtb	r2, r3
         | val.single_tap
 8006bd6:	787b      	ldrb	r3, [r7, #1]
 8006bd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	4313      	orrs	r3, r2
 8006be0:	b2da      	uxtb	r2, r3
         | val.sleep_change
 8006be2:	787b      	ldrb	r3, [r7, #1]
 8006be4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	4313      	orrs	r3, r2
 8006bec:	b2da      	uxtb	r2, r3
         | pin_int1_route.den_flag
 8006bee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006bf2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b2da      	uxtb	r2, r3
         | pin_int1_route.boot
 8006bfc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006c00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	4313      	orrs	r3, r2
 8006c08:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_bdr
 8006c0a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006c0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	4313      	orrs	r3, r2
 8006c16:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_g
 8006c18:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006c1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	4313      	orrs	r3, r2
 8006c24:	b2da      	uxtb	r2, r3
         | pin_int1_route.drdy_xl
 8006c26:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006c2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	4313      	orrs	r3, r2
 8006c32:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_full
 8006c34:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006c38:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_ovr
 8006c42:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006c46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b2da      	uxtb	r2, r3
         | pin_int1_route.fifo_th
 8006c50:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006c54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	b2da      	uxtb	r2, r3
         | pin_int1_route.six_d
 8006c5e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	b2da      	uxtb	r2, r3
         | pin_int1_route.double_tap
 8006c6c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	4313      	orrs	r3, r2
 8006c78:	b2da      	uxtb	r2, r3
         | pin_int1_route.free_fall
 8006c7a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	4313      	orrs	r3, r2
 8006c86:	b2da      	uxtb	r2, r3
         | pin_int1_route.wake_up
 8006c88:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b2da      	uxtb	r2, r3
         | pin_int1_route.single_tap
 8006c96:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c9a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	b2da      	uxtb	r2, r3
         | pin_int1_route.sleep_change) != PROPERTY_DISABLE)
 8006ca4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006ca8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	b2db      	uxtb	r3, r3
    if ((val.fifo_bdr
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d006      	beq.n	8006cc4 <lsm6dso_pin_int2_route_set+0x6b8>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8006cb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cbe:	f887 3020 	strb.w	r3, [r7, #32]
 8006cc2:	e005      	b.n	8006cd0 <lsm6dso_pin_int2_route_set+0x6c4>
    }
    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8006cc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cc8:	f36f 13c7 	bfc	r3, #7, #1
 8006ccc:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret += lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8006cd0:	f107 0220 	add.w	r2, r7, #32
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	2158      	movs	r1, #88	@ 0x58
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7fe f92d 	bl	8004f38 <lsm6dso_write_reg>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce2:	4413      	add	r3, r2
 8006ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return ret;
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3740      	adds	r7, #64	@ 0x40
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08c      	sub	sp, #48	@ 0x30
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (aux_ctx != NULL)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d010      	beq.n	8006d28 <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 8006d06:	f107 0210 	add.w	r2, r7, #16
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	216f      	movs	r1, #111	@ 0x6f
 8006d0e:	68b8      	ldr	r0, [r7, #8]
 8006d10:	f7fe f8fa 	bl	8004f08 <lsm6dso_read_reg>
 8006d14:	62f8      	str	r0, [r7, #44]	@ 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 8006d16:	7c3b      	ldrb	r3, [r7, #16]
 8006d18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d1c:	b2d9      	uxtb	r1, r3
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	7813      	ldrb	r3, [r2, #0]
 8006d22:	f361 0300 	bfi	r3, r1, #0, #1
 8006d26:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 81c7 	beq.w	80070be <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 8006d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006d36:	2102      	movs	r1, #2
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7fe fd4f 	bl	80057dc <lsm6dso_mem_bank_set>
 8006d3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8006d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d107      	bne.n	8006d56 <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 8006d46:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	210e      	movs	r1, #14
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7fe f8da 	bl	8004f08 <lsm6dso_read_reg>
 8006d54:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 8006d5c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006d60:	2301      	movs	r3, #1
 8006d62:	210f      	movs	r1, #15
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7fe f8cf 	bl	8004f08 <lsm6dso_read_reg>
 8006d6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8006d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 8006d72:	f107 0220 	add.w	r2, r7, #32
 8006d76:	2301      	movs	r3, #1
 8006d78:	2110      	movs	r1, #16
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7fe f8c4 	bl	8004f08 <lsm6dso_read_reg>
 8006d80:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 8006d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006d88:	2100      	movs	r1, #0
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7fe fd26 	bl	80057dc <lsm6dso_mem_bank_set>
 8006d90:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d107      	bne.n	8006da8 <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8006d98:	f107 021c 	add.w	r2, r7, #28
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	210e      	movs	r1, #14
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7fe f8b1 	bl	8004f08 <lsm6dso_read_reg>
 8006da6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8006da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d107      	bne.n	8006dbe <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 8006dae:	f107 0218 	add.w	r2, r7, #24
 8006db2:	2301      	movs	r3, #1
 8006db4:	215f      	movs	r1, #95	@ 0x5f
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7fe f8a6 	bl	8004f08 <lsm6dso_read_reg>
 8006dbc:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 8006dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d107      	bne.n	8006dd4 <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8006dc4:	f107 0214 	add.w	r2, r7, #20
 8006dc8:	2301      	movs	r3, #1
 8006dca:	2113      	movs	r1, #19
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7fe f89b 	bl	8004f08 <lsm6dso_read_reg>
 8006dd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 8006dd4:	7d3b      	ldrb	r3, [r7, #20]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d128      	bne.n	8006e32 <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 8006de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d110      	bne.n	8006e08 <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8006de6:	f107 021c 	add.w	r2, r7, #28
 8006dea:	2301      	movs	r3, #1
 8006dec:	210e      	movs	r1, #14
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f7fe f88a 	bl	8004f08 <lsm6dso_read_reg>
 8006df4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8006df6:	7f3b      	ldrb	r3, [r7, #28]
 8006df8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006dfc:	b2d9      	uxtb	r1, r3
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	7813      	ldrb	r3, [r2, #0]
 8006e02:	f361 03c3 	bfi	r3, r1, #3, #1
 8006e06:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 8006e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d11b      	bne.n	8006e46 <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8006e0e:	f107 0218 	add.w	r2, r7, #24
 8006e12:	2301      	movs	r3, #1
 8006e14:	215f      	movs	r1, #95	@ 0x5f
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7fe f876 	bl	8004f08 <lsm6dso_read_reg>
 8006e1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 8006e1e:	7e3b      	ldrb	r3, [r7, #24]
 8006e20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e24:	b2d9      	uxtb	r1, r3
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	7853      	ldrb	r3, [r2, #1]
 8006e2a:	f361 0300 	bfi	r3, r1, #0, #1
 8006e2e:	7053      	strb	r3, [r2, #1]
 8006e30:	e009      	b.n	8006e46 <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	7813      	ldrb	r3, [r2, #0]
 8006e36:	f36f 03c3 	bfc	r3, #3, #1
 8006e3a:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7853      	ldrb	r3, [r2, #1]
 8006e40:	f36f 0300 	bfc	r3, #0, #1
 8006e44:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8006e46:	7f3b      	ldrb	r3, [r7, #28]
 8006e48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e4c:	b2d9      	uxtb	r1, r3
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	7813      	ldrb	r3, [r2, #0]
 8006e52:	f361 0341 	bfi	r3, r1, #1, #1
 8006e56:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 8006e58:	7f3b      	ldrb	r3, [r7, #28]
 8006e5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e5e:	b2d9      	uxtb	r1, r3
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	7813      	ldrb	r3, [r2, #0]
 8006e64:	f361 0382 	bfi	r3, r1, #2, #1
 8006e68:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8006e6a:	7f3b      	ldrb	r3, [r7, #28]
 8006e6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e70:	b2d9      	uxtb	r1, r3
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	7813      	ldrb	r3, [r2, #0]
 8006e76:	f361 03c3 	bfi	r3, r1, #3, #1
 8006e7a:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 8006e7c:	7f3b      	ldrb	r3, [r7, #28]
 8006e7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e82:	b2d9      	uxtb	r1, r3
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	7813      	ldrb	r3, [r2, #0]
 8006e88:	f361 1304 	bfi	r3, r1, #4, #1
 8006e8c:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 8006e8e:	7f3b      	ldrb	r3, [r7, #28]
 8006e90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006e94:	b2d9      	uxtb	r1, r3
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	7813      	ldrb	r3, [r2, #0]
 8006e9a:	f361 1345 	bfi	r3, r1, #5, #1
 8006e9e:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 8006ea0:	7f3b      	ldrb	r3, [r7, #28]
 8006ea2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ea6:	b2d9      	uxtb	r1, r3
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	7813      	ldrb	r3, [r2, #0]
 8006eac:	f361 1386 	bfi	r3, r1, #6, #1
 8006eb0:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 8006eb2:	7f3b      	ldrb	r3, [r7, #28]
 8006eb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006eb8:	b2d9      	uxtb	r1, r3
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	7813      	ldrb	r3, [r2, #0]
 8006ebe:	f361 13c7 	bfi	r3, r1, #7, #1
 8006ec2:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 8006ec4:	7e3b      	ldrb	r3, [r7, #24]
 8006ec6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006eca:	b2d9      	uxtb	r1, r3
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7853      	ldrb	r3, [r2, #1]
 8006ed0:	f361 0300 	bfi	r3, r1, #0, #1
 8006ed4:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 8006ed6:	7e3b      	ldrb	r3, [r7, #24]
 8006ed8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006edc:	b2d9      	uxtb	r1, r3
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	7853      	ldrb	r3, [r2, #1]
 8006ee2:	f361 0341 	bfi	r3, r1, #1, #1
 8006ee6:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 8006ee8:	7e3b      	ldrb	r3, [r7, #24]
 8006eea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006eee:	b2d9      	uxtb	r1, r3
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7853      	ldrb	r3, [r2, #1]
 8006ef4:	f361 0382 	bfi	r3, r1, #2, #1
 8006ef8:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 8006efa:	7e3b      	ldrb	r3, [r7, #24]
 8006efc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006f00:	b2d9      	uxtb	r1, r3
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	7853      	ldrb	r3, [r2, #1]
 8006f06:	f361 03c3 	bfi	r3, r1, #3, #1
 8006f0a:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 8006f0c:	7e3b      	ldrb	r3, [r7, #24]
 8006f0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006f12:	b2d9      	uxtb	r1, r3
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	7853      	ldrb	r3, [r2, #1]
 8006f18:	f361 1304 	bfi	r3, r1, #4, #1
 8006f1c:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 8006f1e:	7e3b      	ldrb	r3, [r7, #24]
 8006f20:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006f24:	b2d9      	uxtb	r1, r3
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	7853      	ldrb	r3, [r2, #1]
 8006f2a:	f361 1345 	bfi	r3, r1, #5, #1
 8006f2e:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 8006f30:	7e3b      	ldrb	r3, [r7, #24]
 8006f32:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006f36:	b2d9      	uxtb	r1, r3
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7853      	ldrb	r3, [r2, #1]
 8006f3c:	f361 1386 	bfi	r3, r1, #6, #1
 8006f40:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 8006f42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006f4a:	b2d9      	uxtb	r1, r3
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7853      	ldrb	r3, [r2, #1]
 8006f50:	f361 13c7 	bfi	r3, r1, #7, #1
 8006f54:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 8006f56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006f5e:	b2d9      	uxtb	r1, r3
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	7893      	ldrb	r3, [r2, #2]
 8006f64:	f361 0300 	bfi	r3, r1, #0, #1
 8006f68:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 8006f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006f72:	b2d9      	uxtb	r1, r3
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	7893      	ldrb	r3, [r2, #2]
 8006f78:	f361 0382 	bfi	r3, r1, #2, #1
 8006f7c:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 8006f7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f86:	b2d9      	uxtb	r1, r3
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	7893      	ldrb	r3, [r2, #2]
 8006f8c:	f361 03c3 	bfi	r3, r1, #3, #1
 8006f90:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 8006f92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f9a:	b2d9      	uxtb	r1, r3
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	7893      	ldrb	r3, [r2, #2]
 8006fa0:	f361 1304 	bfi	r3, r1, #4, #1
 8006fa4:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 8006fa6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006faa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006fae:	b2d9      	uxtb	r1, r3
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	7893      	ldrb	r3, [r2, #2]
 8006fb4:	f361 1345 	bfi	r3, r1, #5, #1
 8006fb8:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 8006fba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fbe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006fc2:	b2d9      	uxtb	r1, r3
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	7893      	ldrb	r3, [r2, #2]
 8006fc8:	f361 1386 	bfi	r3, r1, #6, #1
 8006fcc:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 8006fce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fd2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006fd6:	b2d9      	uxtb	r1, r3
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	7893      	ldrb	r3, [r2, #2]
 8006fdc:	f361 13c7 	bfi	r3, r1, #7, #1
 8006fe0:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 8006fe2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fe6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006fea:	b2d9      	uxtb	r1, r3
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	78d3      	ldrb	r3, [r2, #3]
 8006ff0:	f361 0300 	bfi	r3, r1, #0, #1
 8006ff4:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 8006ff6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ffa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006ffe:	b2d9      	uxtb	r1, r3
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	78d3      	ldrb	r3, [r2, #3]
 8007004:	f361 0341 	bfi	r3, r1, #1, #1
 8007008:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 800700a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800700e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007012:	b2d9      	uxtb	r1, r3
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	78d3      	ldrb	r3, [r2, #3]
 8007018:	f361 0382 	bfi	r3, r1, #2, #1
 800701c:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 800701e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007022:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007026:	b2d9      	uxtb	r1, r3
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	78d3      	ldrb	r3, [r2, #3]
 800702c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007030:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 8007032:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007036:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800703a:	b2d9      	uxtb	r1, r3
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	78d3      	ldrb	r3, [r2, #3]
 8007040:	f361 1304 	bfi	r3, r1, #4, #1
 8007044:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 8007046:	f897 3020 	ldrb.w	r3, [r7, #32]
 800704a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800704e:	b2d9      	uxtb	r1, r3
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	78d3      	ldrb	r3, [r2, #3]
 8007054:	f361 1345 	bfi	r3, r1, #5, #1
 8007058:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 800705a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800705e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007062:	b2d9      	uxtb	r1, r3
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	78d3      	ldrb	r3, [r2, #3]
 8007068:	f361 1386 	bfi	r3, r1, #6, #1
 800706c:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 800706e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007072:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007076:	b2d9      	uxtb	r1, r3
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	78d3      	ldrb	r3, [r2, #3]
 800707c:	f361 13c7 	bfi	r3, r1, #7, #1
 8007080:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 8007082:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007086:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800708a:	b2d9      	uxtb	r1, r3
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	7913      	ldrb	r3, [r2, #4]
 8007090:	f361 0300 	bfi	r3, r1, #0, #1
 8007094:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 8007096:	f897 3020 	ldrb.w	r3, [r7, #32]
 800709a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800709e:	b2d9      	uxtb	r1, r3
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	7913      	ldrb	r3, [r2, #4]
 80070a4:	f361 0341 	bfi	r3, r1, #1, #1
 80070a8:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 80070aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80070b2:	b2d9      	uxtb	r1, r3
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	7913      	ldrb	r3, [r2, #4]
 80070b8:	f361 0382 	bfi	r3, r1, #2, #1
 80070bc:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3730      	adds	r7, #48	@ 0x30
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070d2:	2003      	movs	r0, #3
 80070d4:	f000 f95a 	bl	800738c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80070d8:	2000      	movs	r0, #0
 80070da:	f000 f80d 	bl	80070f8 <HAL_InitTick>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	71fb      	strb	r3, [r7, #7]
 80070e8:	e001      	b.n	80070ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80070ea:	f7fc f837 	bl	800315c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80070ee:	79fb      	ldrb	r3, [r7, #7]

}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007104:	4b16      	ldr	r3, [pc, #88]	@ (8007160 <HAL_InitTick+0x68>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d022      	beq.n	8007152 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800710c:	4b15      	ldr	r3, [pc, #84]	@ (8007164 <HAL_InitTick+0x6c>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	4b13      	ldr	r3, [pc, #76]	@ (8007160 <HAL_InitTick+0x68>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007118:	fbb1 f3f3 	udiv	r3, r1, r3
 800711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f966 	bl	80073f2 <HAL_SYSTICK_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10f      	bne.n	800714c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b0f      	cmp	r3, #15
 8007130:	d809      	bhi.n	8007146 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007132:	2200      	movs	r2, #0
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800713a:	f000 f932 	bl	80073a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800713e:	4a0a      	ldr	r2, [pc, #40]	@ (8007168 <HAL_InitTick+0x70>)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	e007      	b.n	8007156 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	73fb      	strb	r3, [r7, #15]
 800714a:	e004      	b.n	8007156 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	73fb      	strb	r3, [r7, #15]
 8007150:	e001      	b.n	8007156 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20000060 	.word	0x20000060
 8007164:	20000000 	.word	0x20000000
 8007168:	2000005c 	.word	0x2000005c

0800716c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007170:	4b05      	ldr	r3, [pc, #20]	@ (8007188 <HAL_IncTick+0x1c>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	4b05      	ldr	r3, [pc, #20]	@ (800718c <HAL_IncTick+0x20>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4413      	add	r3, r2
 800717a:	4a03      	ldr	r2, [pc, #12]	@ (8007188 <HAL_IncTick+0x1c>)
 800717c:	6013      	str	r3, [r2, #0]
}
 800717e:	bf00      	nop
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	20000398 	.word	0x20000398
 800718c:	20000060 	.word	0x20000060

08007190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0
  return uwTick;
 8007194:	4b03      	ldr	r3, [pc, #12]	@ (80071a4 <HAL_GetTick+0x14>)
 8007196:	681b      	ldr	r3, [r3, #0]
}
 8007198:	4618      	mov	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	20000398 	.word	0x20000398

080071a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071b0:	f7ff ffee 	bl	8007190 <HAL_GetTick>
 80071b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071c0:	d004      	beq.n	80071cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80071c2:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <HAL_Delay+0x40>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80071cc:	bf00      	nop
 80071ce:	f7ff ffdf 	bl	8007190 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d8f7      	bhi.n	80071ce <HAL_Delay+0x26>
  {
  }
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000060 	.word	0x20000060

080071ec <__NVIC_SetPriorityGrouping>:
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007230 <__NVIC_SetPriorityGrouping+0x44>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007208:	4013      	ands	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800721c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800721e:	4a04      	ldr	r2, [pc, #16]	@ (8007230 <__NVIC_SetPriorityGrouping+0x44>)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	60d3      	str	r3, [r2, #12]
}
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	e000ed00 	.word	0xe000ed00

08007234 <__NVIC_GetPriorityGrouping>:
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007238:	4b04      	ldr	r3, [pc, #16]	@ (800724c <__NVIC_GetPriorityGrouping+0x18>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	f003 0307 	and.w	r3, r3, #7
}
 8007242:	4618      	mov	r0, r3
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	e000ed00 	.word	0xe000ed00

08007250 <__NVIC_EnableIRQ>:
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800725a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800725e:	2b00      	cmp	r3, #0
 8007260:	db0b      	blt.n	800727a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	f003 021f 	and.w	r2, r3, #31
 8007268:	4907      	ldr	r1, [pc, #28]	@ (8007288 <__NVIC_EnableIRQ+0x38>)
 800726a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	2001      	movs	r0, #1
 8007272:	fa00 f202 	lsl.w	r2, r0, r2
 8007276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	e000e100 	.word	0xe000e100

0800728c <__NVIC_SetPriority>:
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	6039      	str	r1, [r7, #0]
 8007296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729c:	2b00      	cmp	r3, #0
 800729e:	db0a      	blt.n	80072b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	490c      	ldr	r1, [pc, #48]	@ (80072d8 <__NVIC_SetPriority+0x4c>)
 80072a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072aa:	0112      	lsls	r2, r2, #4
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	440b      	add	r3, r1
 80072b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80072b4:	e00a      	b.n	80072cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	4908      	ldr	r1, [pc, #32]	@ (80072dc <__NVIC_SetPriority+0x50>)
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	3b04      	subs	r3, #4
 80072c4:	0112      	lsls	r2, r2, #4
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	440b      	add	r3, r1
 80072ca:	761a      	strb	r2, [r3, #24]
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	e000e100 	.word	0xe000e100
 80072dc:	e000ed00 	.word	0xe000ed00

080072e0 <NVIC_EncodePriority>:
{
 80072e0:	b480      	push	{r7}
 80072e2:	b089      	sub	sp, #36	@ 0x24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f1c3 0307 	rsb	r3, r3, #7
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	bf28      	it	cs
 80072fe:	2304      	movcs	r3, #4
 8007300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	3304      	adds	r3, #4
 8007306:	2b06      	cmp	r3, #6
 8007308:	d902      	bls.n	8007310 <NVIC_EncodePriority+0x30>
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	3b03      	subs	r3, #3
 800730e:	e000      	b.n	8007312 <NVIC_EncodePriority+0x32>
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	fa02 f303 	lsl.w	r3, r2, r3
 800731e:	43da      	mvns	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	401a      	ands	r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007328:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	fa01 f303 	lsl.w	r3, r1, r3
 8007332:	43d9      	mvns	r1, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007338:	4313      	orrs	r3, r2
}
 800733a:	4618      	mov	r0, r3
 800733c:	3724      	adds	r7, #36	@ 0x24
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
	...

08007348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3b01      	subs	r3, #1
 8007354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007358:	d301      	bcc.n	800735e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800735a:	2301      	movs	r3, #1
 800735c:	e00f      	b.n	800737e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800735e:	4a0a      	ldr	r2, [pc, #40]	@ (8007388 <SysTick_Config+0x40>)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3b01      	subs	r3, #1
 8007364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007366:	210f      	movs	r1, #15
 8007368:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800736c:	f7ff ff8e 	bl	800728c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007370:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <SysTick_Config+0x40>)
 8007372:	2200      	movs	r2, #0
 8007374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007376:	4b04      	ldr	r3, [pc, #16]	@ (8007388 <SysTick_Config+0x40>)
 8007378:	2207      	movs	r2, #7
 800737a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	e000e010 	.word	0xe000e010

0800738c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff ff29 	bl	80071ec <__NVIC_SetPriorityGrouping>
}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	4603      	mov	r3, r0
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
 80073ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80073b0:	f7ff ff40 	bl	8007234 <__NVIC_GetPriorityGrouping>
 80073b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	6978      	ldr	r0, [r7, #20]
 80073bc:	f7ff ff90 	bl	80072e0 <NVIC_EncodePriority>
 80073c0:	4602      	mov	r2, r0
 80073c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff ff5f 	bl	800728c <__NVIC_SetPriority>
}
 80073ce:	bf00      	nop
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	4603      	mov	r3, r0
 80073de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff ff33 	bl	8007250 <__NVIC_EnableIRQ>
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff ffa4 	bl	8007348 <SysTick_Config>
 8007400:	4603      	mov	r3, r0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e054      	b.n	80074c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	7f5b      	ldrb	r3, [r3, #29]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d105      	bne.n	8007434 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fb feb8 	bl	80031a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	791b      	ldrb	r3, [r3, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10c      	bne.n	800745c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a22      	ldr	r2, [pc, #136]	@ (80074d0 <HAL_CRC_Init+0xc4>)
 8007448:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0218 	bic.w	r2, r2, #24
 8007458:	609a      	str	r2, [r3, #8]
 800745a:	e00c      	b.n	8007476 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6899      	ldr	r1, [r3, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	461a      	mov	r2, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f834 	bl	80074d4 <HAL_CRCEx_Polynomial_Set>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e028      	b.n	80074c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	795b      	ldrb	r3, [r3, #5]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007486:	611a      	str	r2, [r3, #16]
 8007488:	e004      	b.n	8007494 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6912      	ldr	r2, [r2, #16]
 8007492:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695a      	ldr	r2, [r3, #20]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	699a      	ldr	r2, [r3, #24]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	04c11db7 	.word	0x04c11db7

080074d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80074e4:	231f      	movs	r3, #31
 80074e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d102      	bne.n	80074f8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	75fb      	strb	r3, [r7, #23]
 80074f6:	e063      	b.n	80075c0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80074f8:	bf00      	nop
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	1e5a      	subs	r2, r3, #1
 80074fe:	613a      	str	r2, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <HAL_CRCEx_Polynomial_Set+0x44>
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	fa22 f303 	lsr.w	r3, r2, r3
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0f0      	beq.n	80074fa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b18      	cmp	r3, #24
 800751c:	d846      	bhi.n	80075ac <HAL_CRCEx_Polynomial_Set+0xd8>
 800751e:	a201      	add	r2, pc, #4	@ (adr r2, 8007524 <HAL_CRCEx_Polynomial_Set+0x50>)
 8007520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007524:	080075b3 	.word	0x080075b3
 8007528:	080075ad 	.word	0x080075ad
 800752c:	080075ad 	.word	0x080075ad
 8007530:	080075ad 	.word	0x080075ad
 8007534:	080075ad 	.word	0x080075ad
 8007538:	080075ad 	.word	0x080075ad
 800753c:	080075ad 	.word	0x080075ad
 8007540:	080075ad 	.word	0x080075ad
 8007544:	080075a1 	.word	0x080075a1
 8007548:	080075ad 	.word	0x080075ad
 800754c:	080075ad 	.word	0x080075ad
 8007550:	080075ad 	.word	0x080075ad
 8007554:	080075ad 	.word	0x080075ad
 8007558:	080075ad 	.word	0x080075ad
 800755c:	080075ad 	.word	0x080075ad
 8007560:	080075ad 	.word	0x080075ad
 8007564:	08007595 	.word	0x08007595
 8007568:	080075ad 	.word	0x080075ad
 800756c:	080075ad 	.word	0x080075ad
 8007570:	080075ad 	.word	0x080075ad
 8007574:	080075ad 	.word	0x080075ad
 8007578:	080075ad 	.word	0x080075ad
 800757c:	080075ad 	.word	0x080075ad
 8007580:	080075ad 	.word	0x080075ad
 8007584:	08007589 	.word	0x08007589
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2b06      	cmp	r3, #6
 800758c:	d913      	bls.n	80075b6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007592:	e010      	b.n	80075b6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b07      	cmp	r3, #7
 8007598:	d90f      	bls.n	80075ba <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800759e:	e00c      	b.n	80075ba <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	2b0f      	cmp	r3, #15
 80075a4:	d90b      	bls.n	80075be <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80075aa:	e008      	b.n	80075be <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	75fb      	strb	r3, [r7, #23]
        break;
 80075b0:	e006      	b.n	80075c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80075b2:	bf00      	nop
 80075b4:	e004      	b.n	80075c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80075b6:	bf00      	nop
 80075b8:	e002      	b.n	80075c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80075ba:	bf00      	nop
 80075bc:	e000      	b.n	80075c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80075be:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10d      	bne.n	80075e2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f023 0118 	bic.w	r1, r3, #24
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	430a      	orrs	r2, r1
 80075e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e147      	b.n	8007892 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fb fde4 	bl	80031e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0210 	bic.w	r2, r2, #16
 800762a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800762c:	f7ff fdb0 	bl	8007190 <HAL_GetTick>
 8007630:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007632:	e012      	b.n	800765a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007634:	f7ff fdac 	bl	8007190 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b0a      	cmp	r3, #10
 8007640:	d90b      	bls.n	800765a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007646:	f043 0201 	orr.w	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2203      	movs	r2, #3
 8007652:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e11b      	b.n	8007892 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b08      	cmp	r3, #8
 8007666:	d0e5      	beq.n	8007634 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0201 	orr.w	r2, r2, #1
 8007676:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007678:	f7ff fd8a 	bl	8007190 <HAL_GetTick>
 800767c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800767e:	e012      	b.n	80076a6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007680:	f7ff fd86 	bl	8007190 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b0a      	cmp	r3, #10
 800768c:	d90b      	bls.n	80076a6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007692:	f043 0201 	orr.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2203      	movs	r2, #3
 800769e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e0f5      	b.n	8007892 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0e5      	beq.n	8007680 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0202 	orr.w	r2, r2, #2
 80076c2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a74      	ldr	r2, [pc, #464]	@ (800789c <HAL_FDCAN_Init+0x2ac>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d103      	bne.n	80076d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80076ce:	4a74      	ldr	r2, [pc, #464]	@ (80078a0 <HAL_FDCAN_Init+0x2b0>)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	7c1b      	ldrb	r3, [r3, #16]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d108      	bne.n	80076f0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	699a      	ldr	r2, [r3, #24]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076ec:	619a      	str	r2, [r3, #24]
 80076ee:	e007      	b.n	8007700 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	7c5b      	ldrb	r3, [r3, #17]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d108      	bne.n	800771a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007716:	619a      	str	r2, [r3, #24]
 8007718:	e007      	b.n	800772a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	699a      	ldr	r2, [r3, #24]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007728:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7c9b      	ldrb	r3, [r3, #18]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d108      	bne.n	8007744 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	699a      	ldr	r2, [r3, #24]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007740:	619a      	str	r2, [r3, #24]
 8007742:	e007      	b.n	8007754 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007752:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007778:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0210 	bic.w	r2, r2, #16
 8007788:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d108      	bne.n	80077a4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0204 	orr.w	r2, r2, #4
 80077a0:	619a      	str	r2, [r3, #24]
 80077a2:	e02c      	b.n	80077fe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d028      	beq.n	80077fe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d01c      	beq.n	80077ee <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80077c2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0210 	orr.w	r2, r2, #16
 80077d2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d110      	bne.n	80077fe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0220 	orr.w	r2, r2, #32
 80077ea:	619a      	str	r2, [r3, #24]
 80077ec:	e007      	b.n	80077fe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0220 	orr.w	r2, r2, #32
 80077fc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	3b01      	subs	r3, #1
 8007804:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	3b01      	subs	r3, #1
 800780c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800780e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007816:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	3b01      	subs	r3, #1
 8007820:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007826:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007828:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007832:	d115      	bne.n	8007860 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783e:	3b01      	subs	r3, #1
 8007840:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007842:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007848:	3b01      	subs	r3, #1
 800784a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800784c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	3b01      	subs	r3, #1
 8007856:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800785c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800785e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fb12 	bl	8007ea0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	40006400 	.word	0x40006400
 80078a0:	40006500 	.word	0x40006500

080078a4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d110      	bne.n	80078da <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0201 	bic.w	r2, r2, #1
 80078ce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e006      	b.n	80078e8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078de:	f043 0204 	orr.w	r2, r3, #4
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
  }
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d12c      	bne.n	8007966 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007920:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e023      	b.n	8007974 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007934:	0c1b      	lsrs	r3, r3, #16
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fb02 	bl	8007f4c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2101      	movs	r1, #1
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	fa01 f202 	lsl.w	r2, r1, r2
 8007954:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007958:	2201      	movs	r2, #1
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	409a      	lsls	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	e006      	b.n	8007974 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800796a:	f043 0208 	orr.w	r2, r3, #8
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
  }
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8007992:	68fb      	ldr	r3, [r7, #12]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80079b2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d003      	beq.n	80079c2 <HAL_FDCAN_ActivateNotification+0x22>
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	f040 80c8 	bne.w	8007b52 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d03b      	beq.n	8007a56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d031      	beq.n	8007a56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f003 0304 	and.w	r3, r3, #4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d027      	beq.n	8007a56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d01d      	beq.n	8007a56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d013      	beq.n	8007a56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00c      	beq.n	8007a66 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d107      	bne.n	8007a66 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0201 	orr.w	r2, r2, #1
 8007a64:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d13b      	bne.n	8007af2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d004      	beq.n	8007a8e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d131      	bne.n	8007af2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d127      	bne.n	8007af2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d11d      	bne.n	8007af2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d113      	bne.n	8007af2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0202 	orr.w	r2, r2, #2
 8007b00:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d009      	beq.n	8007b20 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e006      	b.n	8007b60 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b56:	f043 0202 	orr.w	r2, r3, #2
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
  }
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	371c      	adds	r7, #28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08c      	sub	sp, #48	@ 0x30
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b7a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8007b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b88:	4013      	ands	r3, r2
 8007b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007baa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bae:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb8:	4013      	ands	r3, r2
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8007bc6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bce:	6a3a      	ldr	r2, [r7, #32]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bda:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8007bde:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	4013      	ands	r3, r2
 8007bea:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfa:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d006      	beq.n	8007c1e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2240      	movs	r2, #64	@ 0x40
 8007c16:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f921 	bl	8007e60 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d019      	beq.n	8007c5c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d014      	beq.n	8007c5c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c3a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4013      	ands	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c52:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007c54:	6939      	ldr	r1, [r7, #16]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f8e3 	bl	8007e22 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c68:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f8a2 	bl	8007db6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d007      	beq.n	8007c88 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c7e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8a2 	bl	8007dcc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c94:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007c96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f8a2 	bl	8007de2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00c      	beq.n	8007cc2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f89b 	bl	8007df8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d018      	beq.n	8007cfe <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d013      	beq.n	8007cfe <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007cde:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4013      	ands	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2280      	movs	r2, #128	@ 0x80
 8007cf4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f887 	bl	8007e0c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00c      	beq.n	8007d22 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007d1a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f88b 	bl	8007e38 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00c      	beq.n	8007d46 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d007      	beq.n	8007d46 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007d3e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f883 	bl	8007e4c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00f      	beq.n	8007d70 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007d62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007d7e:	69f9      	ldr	r1, [r7, #28]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f881 	bl	8007e88 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d009      	beq.n	8007da0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a3a      	ldr	r2, [r7, #32]
 8007d92:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f863 	bl	8007e74 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007dae:	bf00      	nop
 8007db0:	3730      	adds	r7, #48	@ 0x30
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
	...

08007ea0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007ea8:	4b27      	ldr	r3, [pc, #156]	@ (8007f48 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007eaa:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eba:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec2:	041a      	lsls	r2, r3, #16
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ee0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee8:	061a      	lsls	r2, r3, #24
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e005      	b.n	8007f2e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d3f3      	bcc.n	8007f22 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	4000a400 	.word	0x4000a400

08007f4c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b089      	sub	sp, #36	@ 0x24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007f6a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007f72:	4313      	orrs	r3, r2
 8007f74:	61fb      	str	r3, [r7, #28]
 8007f76:	e00a      	b.n	8007f8e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007f80:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007f86:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007f88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f8c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007f98:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007f9e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007fa4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007fac:	4313      	orrs	r3, r2
 8007fae:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	4413      	add	r3, r2
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	440b      	add	r3, r1
 8007fc0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	69fa      	ldr	r2, [r7, #28]
 8007fc6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	e020      	b.n	8008022 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3303      	adds	r3, #3
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	3302      	adds	r3, #2
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	440b      	add	r3, r1
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007ff8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	440b      	add	r3, r1
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008006:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	440a      	add	r2, r1
 800800e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008010:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	3304      	adds	r3, #4
 800801a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3304      	adds	r3, #4
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	4a06      	ldr	r2, [pc, #24]	@ (8008040 <FDCAN_CopyMessageToRAM+0xf4>)
 8008028:	5cd3      	ldrb	r3, [r2, r3]
 800802a:	461a      	mov	r2, r3
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4293      	cmp	r3, r2
 8008030:	d3d6      	bcc.n	8007fe0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	3724      	adds	r7, #36	@ 0x24
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	0800b8c0 	.word	0x0800b8c0

08008044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800804e:	2300      	movs	r3, #0
 8008050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008052:	e15a      	b.n	800830a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	2101      	movs	r1, #1
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	fa01 f303 	lsl.w	r3, r1, r3
 8008060:	4013      	ands	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 814c 	beq.w	8008304 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f003 0303 	and.w	r3, r3, #3
 8008074:	2b01      	cmp	r3, #1
 8008076:	d005      	beq.n	8008084 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008080:	2b02      	cmp	r3, #2
 8008082:	d130      	bne.n	80080e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	2203      	movs	r2, #3
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	43db      	mvns	r3, r3
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4013      	ands	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	fa02 f303 	lsl.w	r3, r2, r3
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080ba:	2201      	movs	r2, #1
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	fa02 f303 	lsl.w	r3, r2, r3
 80080c2:	43db      	mvns	r3, r3
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4013      	ands	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	091b      	lsrs	r3, r3, #4
 80080d0:	f003 0201 	and.w	r2, r3, #1
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d017      	beq.n	8008122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	2203      	movs	r2, #3
 80080fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008102:	43db      	mvns	r3, r3
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4013      	ands	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	fa02 f303 	lsl.w	r3, r2, r3
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	4313      	orrs	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d123      	bne.n	8008176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	08da      	lsrs	r2, r3, #3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3208      	adds	r2, #8
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	220f      	movs	r2, #15
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43db      	mvns	r3, r3
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4013      	ands	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	fa02 f303 	lsl.w	r3, r2, r3
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	08da      	lsrs	r2, r3, #3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3208      	adds	r2, #8
 8008170:	6939      	ldr	r1, [r7, #16]
 8008172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	2203      	movs	r2, #3
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	43db      	mvns	r3, r3
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4013      	ands	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f003 0203 	and.w	r2, r3, #3
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 80a6 	beq.w	8008304 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081b8:	4b5b      	ldr	r3, [pc, #364]	@ (8008328 <HAL_GPIO_Init+0x2e4>)
 80081ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081bc:	4a5a      	ldr	r2, [pc, #360]	@ (8008328 <HAL_GPIO_Init+0x2e4>)
 80081be:	f043 0301 	orr.w	r3, r3, #1
 80081c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80081c4:	4b58      	ldr	r3, [pc, #352]	@ (8008328 <HAL_GPIO_Init+0x2e4>)
 80081c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	60bb      	str	r3, [r7, #8]
 80081ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081d0:	4a56      	ldr	r2, [pc, #344]	@ (800832c <HAL_GPIO_Init+0x2e8>)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	089b      	lsrs	r3, r3, #2
 80081d6:	3302      	adds	r3, #2
 80081d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	220f      	movs	r2, #15
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	43db      	mvns	r3, r3
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	4013      	ands	r3, r2
 80081f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80081fa:	d01f      	beq.n	800823c <HAL_GPIO_Init+0x1f8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a4c      	ldr	r2, [pc, #304]	@ (8008330 <HAL_GPIO_Init+0x2ec>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d019      	beq.n	8008238 <HAL_GPIO_Init+0x1f4>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a4b      	ldr	r2, [pc, #300]	@ (8008334 <HAL_GPIO_Init+0x2f0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d013      	beq.n	8008234 <HAL_GPIO_Init+0x1f0>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a4a      	ldr	r2, [pc, #296]	@ (8008338 <HAL_GPIO_Init+0x2f4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00d      	beq.n	8008230 <HAL_GPIO_Init+0x1ec>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a49      	ldr	r2, [pc, #292]	@ (800833c <HAL_GPIO_Init+0x2f8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d007      	beq.n	800822c <HAL_GPIO_Init+0x1e8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a48      	ldr	r2, [pc, #288]	@ (8008340 <HAL_GPIO_Init+0x2fc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d101      	bne.n	8008228 <HAL_GPIO_Init+0x1e4>
 8008224:	2305      	movs	r3, #5
 8008226:	e00a      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 8008228:	2306      	movs	r3, #6
 800822a:	e008      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 800822c:	2304      	movs	r3, #4
 800822e:	e006      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 8008230:	2303      	movs	r3, #3
 8008232:	e004      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 8008234:	2302      	movs	r3, #2
 8008236:	e002      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <HAL_GPIO_Init+0x1fa>
 800823c:	2300      	movs	r3, #0
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	f002 0203 	and.w	r2, r2, #3
 8008244:	0092      	lsls	r2, r2, #2
 8008246:	4093      	lsls	r3, r2
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800824e:	4937      	ldr	r1, [pc, #220]	@ (800832c <HAL_GPIO_Init+0x2e8>)
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	089b      	lsrs	r3, r3, #2
 8008254:	3302      	adds	r3, #2
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800825c:	4b39      	ldr	r3, [pc, #228]	@ (8008344 <HAL_GPIO_Init+0x300>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	43db      	mvns	r3, r3
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	4013      	ands	r3, r2
 800826a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008280:	4a30      	ldr	r2, [pc, #192]	@ (8008344 <HAL_GPIO_Init+0x300>)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008286:	4b2f      	ldr	r3, [pc, #188]	@ (8008344 <HAL_GPIO_Init+0x300>)
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	43db      	mvns	r3, r3
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4013      	ands	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082aa:	4a26      	ldr	r2, [pc, #152]	@ (8008344 <HAL_GPIO_Init+0x300>)
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80082b0:	4b24      	ldr	r3, [pc, #144]	@ (8008344 <HAL_GPIO_Init+0x300>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	43db      	mvns	r3, r3
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4013      	ands	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80082d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008344 <HAL_GPIO_Init+0x300>)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80082da:	4b1a      	ldr	r3, [pc, #104]	@ (8008344 <HAL_GPIO_Init+0x300>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	43db      	mvns	r3, r3
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4013      	ands	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80082fe:	4a11      	ldr	r2, [pc, #68]	@ (8008344 <HAL_GPIO_Init+0x300>)
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	3301      	adds	r3, #1
 8008308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	fa22 f303 	lsr.w	r3, r2, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	f47f ae9d 	bne.w	8008054 <HAL_GPIO_Init+0x10>
  }
}
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	371c      	adds	r7, #28
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	40021000 	.word	0x40021000
 800832c:	40010000 	.word	0x40010000
 8008330:	48000400 	.word	0x48000400
 8008334:	48000800 	.word	0x48000800
 8008338:	48000c00 	.word	0x48000c00
 800833c:	48001000 	.word	0x48001000
 8008340:	48001400 	.word	0x48001400
 8008344:	40010400 	.word	0x40010400

08008348 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8008356:	e0bd      	b.n	80084d4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8008358:	2201      	movs	r2, #1
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	4013      	ands	r3, r2
 8008364:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 80b0 	beq.w	80084ce <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800836e:	4a60      	ldr	r2, [pc, #384]	@ (80084f0 <HAL_GPIO_DeInit+0x1a8>)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	089b      	lsrs	r3, r3, #2
 8008374:	3302      	adds	r3, #2
 8008376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800837a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	220f      	movs	r2, #15
 8008386:	fa02 f303 	lsl.w	r3, r2, r3
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4013      	ands	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008396:	d01f      	beq.n	80083d8 <HAL_GPIO_DeInit+0x90>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a56      	ldr	r2, [pc, #344]	@ (80084f4 <HAL_GPIO_DeInit+0x1ac>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d019      	beq.n	80083d4 <HAL_GPIO_DeInit+0x8c>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a55      	ldr	r2, [pc, #340]	@ (80084f8 <HAL_GPIO_DeInit+0x1b0>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d013      	beq.n	80083d0 <HAL_GPIO_DeInit+0x88>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a54      	ldr	r2, [pc, #336]	@ (80084fc <HAL_GPIO_DeInit+0x1b4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00d      	beq.n	80083cc <HAL_GPIO_DeInit+0x84>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a53      	ldr	r2, [pc, #332]	@ (8008500 <HAL_GPIO_DeInit+0x1b8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <HAL_GPIO_DeInit+0x80>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a52      	ldr	r2, [pc, #328]	@ (8008504 <HAL_GPIO_DeInit+0x1bc>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d101      	bne.n	80083c4 <HAL_GPIO_DeInit+0x7c>
 80083c0:	2305      	movs	r3, #5
 80083c2:	e00a      	b.n	80083da <HAL_GPIO_DeInit+0x92>
 80083c4:	2306      	movs	r3, #6
 80083c6:	e008      	b.n	80083da <HAL_GPIO_DeInit+0x92>
 80083c8:	2304      	movs	r3, #4
 80083ca:	e006      	b.n	80083da <HAL_GPIO_DeInit+0x92>
 80083cc:	2303      	movs	r3, #3
 80083ce:	e004      	b.n	80083da <HAL_GPIO_DeInit+0x92>
 80083d0:	2302      	movs	r3, #2
 80083d2:	e002      	b.n	80083da <HAL_GPIO_DeInit+0x92>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e000      	b.n	80083da <HAL_GPIO_DeInit+0x92>
 80083d8:	2300      	movs	r3, #0
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	f002 0203 	and.w	r2, r2, #3
 80083e0:	0092      	lsls	r2, r2, #2
 80083e2:	4093      	lsls	r3, r2
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d132      	bne.n	8008450 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80083ea:	4b47      	ldr	r3, [pc, #284]	@ (8008508 <HAL_GPIO_DeInit+0x1c0>)
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	43db      	mvns	r3, r3
 80083f2:	4945      	ldr	r1, [pc, #276]	@ (8008508 <HAL_GPIO_DeInit+0x1c0>)
 80083f4:	4013      	ands	r3, r2
 80083f6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80083f8:	4b43      	ldr	r3, [pc, #268]	@ (8008508 <HAL_GPIO_DeInit+0x1c0>)
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	43db      	mvns	r3, r3
 8008400:	4941      	ldr	r1, [pc, #260]	@ (8008508 <HAL_GPIO_DeInit+0x1c0>)
 8008402:	4013      	ands	r3, r2
 8008404:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008406:	4b40      	ldr	r3, [pc, #256]	@ (8008508 <HAL_GPIO_DeInit+0x1c0>)
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	43db      	mvns	r3, r3
 800840e:	493e      	ldr	r1, [pc, #248]	@ (8008508 <HAL_GPIO_DeInit+0x1c0>)
 8008410:	4013      	ands	r3, r2
 8008412:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8008414:	4b3c      	ldr	r3, [pc, #240]	@ (8008508 <HAL_GPIO_DeInit+0x1c0>)
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	43db      	mvns	r3, r3
 800841c:	493a      	ldr	r1, [pc, #232]	@ (8008508 <HAL_GPIO_DeInit+0x1c0>)
 800841e:	4013      	ands	r3, r2
 8008420:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f003 0303 	and.w	r3, r3, #3
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	220f      	movs	r2, #15
 800842c:	fa02 f303 	lsl.w	r3, r2, r3
 8008430:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008432:	4a2f      	ldr	r2, [pc, #188]	@ (80084f0 <HAL_GPIO_DeInit+0x1a8>)
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	089b      	lsrs	r3, r3, #2
 8008438:	3302      	adds	r3, #2
 800843a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	43da      	mvns	r2, r3
 8008442:	482b      	ldr	r0, [pc, #172]	@ (80084f0 <HAL_GPIO_DeInit+0x1a8>)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	089b      	lsrs	r3, r3, #2
 8008448:	400a      	ands	r2, r1
 800844a:	3302      	adds	r3, #2
 800844c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	2103      	movs	r1, #3
 800845a:	fa01 f303 	lsl.w	r3, r1, r3
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	08da      	lsrs	r2, r3, #3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3208      	adds	r2, #8
 800846c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	220f      	movs	r2, #15
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	43db      	mvns	r3, r3
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	08d2      	lsrs	r2, r2, #3
 8008484:	4019      	ands	r1, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3208      	adds	r2, #8
 800848a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	2103      	movs	r1, #3
 8008498:	fa01 f303 	lsl.w	r3, r1, r3
 800849c:	43db      	mvns	r3, r3
 800849e:	401a      	ands	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	2101      	movs	r1, #1
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	fa01 f303 	lsl.w	r3, r1, r3
 80084b0:	43db      	mvns	r3, r3
 80084b2:	401a      	ands	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	2103      	movs	r1, #3
 80084c2:	fa01 f303 	lsl.w	r3, r1, r3
 80084c6:	43db      	mvns	r3, r3
 80084c8:	401a      	ands	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	3301      	adds	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	fa22 f303 	lsr.w	r3, r2, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f47f af3b 	bne.w	8008358 <HAL_GPIO_DeInit+0x10>
  }
}
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	40010000 	.word	0x40010000
 80084f4:	48000400 	.word	0x48000400
 80084f8:	48000800 	.word	0x48000800
 80084fc:	48000c00 	.word	0x48000c00
 8008500:	48001000 	.word	0x48001000
 8008504:	48001400 	.word	0x48001400
 8008508:	40010400 	.word	0x40010400

0800850c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	807b      	strh	r3, [r7, #2]
 8008518:	4613      	mov	r3, r2
 800851a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800851c:	787b      	ldrb	r3, [r7, #1]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008522:	887a      	ldrh	r2, [r7, #2]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008528:	e002      	b.n	8008530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800852a:	887a      	ldrh	r2, [r7, #2]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800854e:	887a      	ldrh	r2, [r7, #2]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4013      	ands	r3, r2
 8008554:	041a      	lsls	r2, r3, #16
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	43d9      	mvns	r1, r3
 800855a:	887b      	ldrh	r3, [r7, #2]
 800855c:	400b      	ands	r3, r1
 800855e:	431a      	orrs	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	619a      	str	r2, [r3, #24]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800857a:	4b08      	ldr	r3, [pc, #32]	@ (800859c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800857c:	695a      	ldr	r2, [r3, #20]
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	4013      	ands	r3, r2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d006      	beq.n	8008594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008586:	4a05      	ldr	r2, [pc, #20]	@ (800859c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008588:	88fb      	ldrh	r3, [r7, #6]
 800858a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800858c:	88fb      	ldrh	r3, [r7, #6]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f806 	bl	80085a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40010400 	.word	0x40010400

080085a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
	...

080085b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d141      	bne.n	800864a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80085c6:	4b4b      	ldr	r3, [pc, #300]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80085ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d2:	d131      	bne.n	8008638 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085d4:	4b47      	ldr	r3, [pc, #284]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085da:	4a46      	ldr	r2, [pc, #280]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80085e4:	4b43      	ldr	r3, [pc, #268]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80085ec:	4a41      	ldr	r2, [pc, #260]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80085f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80085f4:	4b40      	ldr	r3, [pc, #256]	@ (80086f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2232      	movs	r2, #50	@ 0x32
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	4a3f      	ldr	r2, [pc, #252]	@ (80086fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008600:	fba2 2303 	umull	r2, r3, r2, r3
 8008604:	0c9b      	lsrs	r3, r3, #18
 8008606:	3301      	adds	r3, #1
 8008608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800860a:	e002      	b.n	8008612 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3b01      	subs	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008612:	4b38      	ldr	r3, [pc, #224]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800861a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800861e:	d102      	bne.n	8008626 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1f2      	bne.n	800860c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008626:	4b33      	ldr	r3, [pc, #204]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800862e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008632:	d158      	bne.n	80086e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e057      	b.n	80086e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008638:	4b2e      	ldr	r3, [pc, #184]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800863a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800863e:	4a2d      	ldr	r2, [pc, #180]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008644:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008648:	e04d      	b.n	80086e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008650:	d141      	bne.n	80086d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008652:	4b28      	ldr	r3, [pc, #160]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800865a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800865e:	d131      	bne.n	80086c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008660:	4b24      	ldr	r3, [pc, #144]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008666:	4a23      	ldr	r2, [pc, #140]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800866c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008670:	4b20      	ldr	r3, [pc, #128]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008678:	4a1e      	ldr	r2, [pc, #120]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800867a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800867e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008680:	4b1d      	ldr	r3, [pc, #116]	@ (80086f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2232      	movs	r2, #50	@ 0x32
 8008686:	fb02 f303 	mul.w	r3, r2, r3
 800868a:	4a1c      	ldr	r2, [pc, #112]	@ (80086fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800868c:	fba2 2303 	umull	r2, r3, r2, r3
 8008690:	0c9b      	lsrs	r3, r3, #18
 8008692:	3301      	adds	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008696:	e002      	b.n	800869e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3b01      	subs	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800869e:	4b15      	ldr	r3, [pc, #84]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086aa:	d102      	bne.n	80086b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f2      	bne.n	8008698 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80086b2:	4b10      	ldr	r3, [pc, #64]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086be:	d112      	bne.n	80086e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e011      	b.n	80086e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086c4:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ca:	4a0a      	ldr	r2, [pc, #40]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80086d4:	e007      	b.n	80086e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80086d6:	4b07      	ldr	r3, [pc, #28]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086de:	4a05      	ldr	r2, [pc, #20]	@ (80086f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80086e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	40007000 	.word	0x40007000
 80086f8:	20000000 	.word	0x20000000
 80086fc:	431bde83 	.word	0x431bde83

08008700 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008704:	4b05      	ldr	r3, [pc, #20]	@ (800871c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	4a04      	ldr	r2, [pc, #16]	@ (800871c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800870a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800870e:	6093      	str	r3, [r2, #8]
}
 8008710:	bf00      	nop
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40007000 	.word	0x40007000

08008720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e2fe      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d075      	beq.n	800882a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800873e:	4b97      	ldr	r3, [pc, #604]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 030c 	and.w	r3, r3, #12
 8008746:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008748:	4b94      	ldr	r3, [pc, #592]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f003 0303 	and.w	r3, r3, #3
 8008750:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	2b0c      	cmp	r3, #12
 8008756:	d102      	bne.n	800875e <HAL_RCC_OscConfig+0x3e>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b03      	cmp	r3, #3
 800875c:	d002      	beq.n	8008764 <HAL_RCC_OscConfig+0x44>
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b08      	cmp	r3, #8
 8008762:	d10b      	bne.n	800877c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008764:	4b8d      	ldr	r3, [pc, #564]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d05b      	beq.n	8008828 <HAL_RCC_OscConfig+0x108>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d157      	bne.n	8008828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e2d9      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008784:	d106      	bne.n	8008794 <HAL_RCC_OscConfig+0x74>
 8008786:	4b85      	ldr	r3, [pc, #532]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a84      	ldr	r2, [pc, #528]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 800878c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	e01d      	b.n	80087d0 <HAL_RCC_OscConfig+0xb0>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800879c:	d10c      	bne.n	80087b8 <HAL_RCC_OscConfig+0x98>
 800879e:	4b7f      	ldr	r3, [pc, #508]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a7e      	ldr	r2, [pc, #504]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80087a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	4b7c      	ldr	r3, [pc, #496]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a7b      	ldr	r2, [pc, #492]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80087b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	e00b      	b.n	80087d0 <HAL_RCC_OscConfig+0xb0>
 80087b8:	4b78      	ldr	r3, [pc, #480]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a77      	ldr	r2, [pc, #476]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80087be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	4b75      	ldr	r3, [pc, #468]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a74      	ldr	r2, [pc, #464]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80087ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d013      	beq.n	8008800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d8:	f7fe fcda 	bl	8007190 <HAL_GetTick>
 80087dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087de:	e008      	b.n	80087f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087e0:	f7fe fcd6 	bl	8007190 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b64      	cmp	r3, #100	@ 0x64
 80087ec:	d901      	bls.n	80087f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e29e      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087f2:	4b6a      	ldr	r3, [pc, #424]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0f0      	beq.n	80087e0 <HAL_RCC_OscConfig+0xc0>
 80087fe:	e014      	b.n	800882a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fe fcc6 	bl	8007190 <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008808:	f7fe fcc2 	bl	8007190 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b64      	cmp	r3, #100	@ 0x64
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e28a      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800881a:	4b60      	ldr	r3, [pc, #384]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f0      	bne.n	8008808 <HAL_RCC_OscConfig+0xe8>
 8008826:	e000      	b.n	800882a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d075      	beq.n	8008922 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008836:	4b59      	ldr	r3, [pc, #356]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 030c 	and.w	r3, r3, #12
 800883e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008840:	4b56      	ldr	r3, [pc, #344]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b0c      	cmp	r3, #12
 800884e:	d102      	bne.n	8008856 <HAL_RCC_OscConfig+0x136>
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d002      	beq.n	800885c <HAL_RCC_OscConfig+0x13c>
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b04      	cmp	r3, #4
 800885a:	d11f      	bne.n	800889c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800885c:	4b4f      	ldr	r3, [pc, #316]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_RCC_OscConfig+0x154>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e25d      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008874:	4b49      	ldr	r3, [pc, #292]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	061b      	lsls	r3, r3, #24
 8008882:	4946      	ldr	r1, [pc, #280]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008884:	4313      	orrs	r3, r2
 8008886:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008888:	4b45      	ldr	r3, [pc, #276]	@ (80089a0 <HAL_RCC_OscConfig+0x280>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fc33 	bl	80070f8 <HAL_InitTick>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d043      	beq.n	8008920 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e249      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d023      	beq.n	80088ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088a4:	4b3d      	ldr	r3, [pc, #244]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a3c      	ldr	r2, [pc, #240]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80088aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b0:	f7fe fc6e 	bl	8007190 <HAL_GetTick>
 80088b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088b6:	e008      	b.n	80088ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b8:	f7fe fc6a 	bl	8007190 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e232      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088ca:	4b34      	ldr	r3, [pc, #208]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0f0      	beq.n	80088b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d6:	4b31      	ldr	r3, [pc, #196]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	061b      	lsls	r3, r3, #24
 80088e4:	492d      	ldr	r1, [pc, #180]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	604b      	str	r3, [r1, #4]
 80088ea:	e01a      	b.n	8008922 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ec:	4b2b      	ldr	r3, [pc, #172]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a2a      	ldr	r2, [pc, #168]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 80088f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f8:	f7fe fc4a 	bl	8007190 <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008900:	f7fe fc46 	bl	8007190 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e20e      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008912:	4b22      	ldr	r3, [pc, #136]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f0      	bne.n	8008900 <HAL_RCC_OscConfig+0x1e0>
 800891e:	e000      	b.n	8008922 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008920:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d041      	beq.n	80089b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01c      	beq.n	8008970 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008936:	4b19      	ldr	r3, [pc, #100]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800893c:	4a17      	ldr	r2, [pc, #92]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 800893e:	f043 0301 	orr.w	r3, r3, #1
 8008942:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008946:	f7fe fc23 	bl	8007190 <HAL_GetTick>
 800894a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800894c:	e008      	b.n	8008960 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800894e:	f7fe fc1f 	bl	8007190 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e1e7      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008960:	4b0e      	ldr	r3, [pc, #56]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0ef      	beq.n	800894e <HAL_RCC_OscConfig+0x22e>
 800896e:	e020      	b.n	80089b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008970:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008976:	4a09      	ldr	r2, [pc, #36]	@ (800899c <HAL_RCC_OscConfig+0x27c>)
 8008978:	f023 0301 	bic.w	r3, r3, #1
 800897c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008980:	f7fe fc06 	bl	8007190 <HAL_GetTick>
 8008984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008986:	e00d      	b.n	80089a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008988:	f7fe fc02 	bl	8007190 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d906      	bls.n	80089a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e1ca      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
 800899a:	bf00      	nop
 800899c:	40021000 	.word	0x40021000
 80089a0:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089a4:	4b8c      	ldr	r3, [pc, #560]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 80089a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1ea      	bne.n	8008988 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0304 	and.w	r3, r3, #4
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 80a6 	beq.w	8008b0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089c0:	2300      	movs	r3, #0
 80089c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80089c4:	4b84      	ldr	r3, [pc, #528]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 80089c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <HAL_RCC_OscConfig+0x2b4>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e000      	b.n	80089d6 <HAL_RCC_OscConfig+0x2b6>
 80089d4:	2300      	movs	r3, #0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00d      	beq.n	80089f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089da:	4b7f      	ldr	r3, [pc, #508]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 80089dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089de:	4a7e      	ldr	r2, [pc, #504]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 80089e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80089e6:	4b7c      	ldr	r3, [pc, #496]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 80089e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80089f2:	2301      	movs	r3, #1
 80089f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089f6:	4b79      	ldr	r3, [pc, #484]	@ (8008bdc <HAL_RCC_OscConfig+0x4bc>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d118      	bne.n	8008a34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a02:	4b76      	ldr	r3, [pc, #472]	@ (8008bdc <HAL_RCC_OscConfig+0x4bc>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a75      	ldr	r2, [pc, #468]	@ (8008bdc <HAL_RCC_OscConfig+0x4bc>)
 8008a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a0e:	f7fe fbbf 	bl	8007190 <HAL_GetTick>
 8008a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a14:	e008      	b.n	8008a28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a16:	f7fe fbbb 	bl	8007190 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d901      	bls.n	8008a28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e183      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a28:	4b6c      	ldr	r3, [pc, #432]	@ (8008bdc <HAL_RCC_OscConfig+0x4bc>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0f0      	beq.n	8008a16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d108      	bne.n	8008a4e <HAL_RCC_OscConfig+0x32e>
 8008a3c:	4b66      	ldr	r3, [pc, #408]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a42:	4a65      	ldr	r2, [pc, #404]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a44:	f043 0301 	orr.w	r3, r3, #1
 8008a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a4c:	e024      	b.n	8008a98 <HAL_RCC_OscConfig+0x378>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	2b05      	cmp	r3, #5
 8008a54:	d110      	bne.n	8008a78 <HAL_RCC_OscConfig+0x358>
 8008a56:	4b60      	ldr	r3, [pc, #384]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a5c:	4a5e      	ldr	r2, [pc, #376]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a5e:	f043 0304 	orr.w	r3, r3, #4
 8008a62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a66:	4b5c      	ldr	r3, [pc, #368]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a6e:	f043 0301 	orr.w	r3, r3, #1
 8008a72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a76:	e00f      	b.n	8008a98 <HAL_RCC_OscConfig+0x378>
 8008a78:	4b57      	ldr	r3, [pc, #348]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a7e:	4a56      	ldr	r2, [pc, #344]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a80:	f023 0301 	bic.w	r3, r3, #1
 8008a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a88:	4b53      	ldr	r3, [pc, #332]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a8e:	4a52      	ldr	r2, [pc, #328]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008a90:	f023 0304 	bic.w	r3, r3, #4
 8008a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d016      	beq.n	8008ace <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa0:	f7fe fb76 	bl	8007190 <HAL_GetTick>
 8008aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008aa6:	e00a      	b.n	8008abe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aa8:	f7fe fb72 	bl	8007190 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e138      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008abe:	4b46      	ldr	r3, [pc, #280]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0ed      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x388>
 8008acc:	e015      	b.n	8008afa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ace:	f7fe fb5f 	bl	8007190 <HAL_GetTick>
 8008ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ad4:	e00a      	b.n	8008aec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ad6:	f7fe fb5b 	bl	8007190 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e121      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008aec:	4b3a      	ldr	r3, [pc, #232]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1ed      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008afa:	7ffb      	ldrb	r3, [r7, #31]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d105      	bne.n	8008b0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b00:	4b35      	ldr	r3, [pc, #212]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b04:	4a34      	ldr	r2, [pc, #208]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0320 	and.w	r3, r3, #32
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d03c      	beq.n	8008b92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01c      	beq.n	8008b5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b20:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b26:	4a2c      	ldr	r2, [pc, #176]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b30:	f7fe fb2e 	bl	8007190 <HAL_GetTick>
 8008b34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b38:	f7fe fb2a 	bl	8007190 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e0f2      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b4a:	4b23      	ldr	r3, [pc, #140]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b50:	f003 0302 	and.w	r3, r3, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0ef      	beq.n	8008b38 <HAL_RCC_OscConfig+0x418>
 8008b58:	e01b      	b.n	8008b92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b60:	4a1d      	ldr	r2, [pc, #116]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008b62:	f023 0301 	bic.w	r3, r3, #1
 8008b66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b6a:	f7fe fb11 	bl	8007190 <HAL_GetTick>
 8008b6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b70:	e008      	b.n	8008b84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b72:	f7fe fb0d 	bl	8007190 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d901      	bls.n	8008b84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e0d5      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b84:	4b14      	ldr	r3, [pc, #80]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1ef      	bne.n	8008b72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 80c9 	beq.w	8008d2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 030c 	and.w	r3, r3, #12
 8008ba4:	2b0c      	cmp	r3, #12
 8008ba6:	f000 8083 	beq.w	8008cb0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d15e      	bne.n	8008c70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bb2:	4b09      	ldr	r3, [pc, #36]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a08      	ldr	r2, [pc, #32]	@ (8008bd8 <HAL_RCC_OscConfig+0x4b8>)
 8008bb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bbe:	f7fe fae7 	bl	8007190 <HAL_GetTick>
 8008bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bc4:	e00c      	b.n	8008be0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc6:	f7fe fae3 	bl	8007190 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d905      	bls.n	8008be0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e0ab      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
 8008bd8:	40021000 	.word	0x40021000
 8008bdc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008be0:	4b55      	ldr	r3, [pc, #340]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1ec      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bec:	4b52      	ldr	r3, [pc, #328]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	4b52      	ldr	r3, [pc, #328]	@ (8008d3c <HAL_RCC_OscConfig+0x61c>)
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	6a11      	ldr	r1, [r2, #32]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008bfc:	3a01      	subs	r2, #1
 8008bfe:	0112      	lsls	r2, r2, #4
 8008c00:	4311      	orrs	r1, r2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008c06:	0212      	lsls	r2, r2, #8
 8008c08:	4311      	orrs	r1, r2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c0e:	0852      	lsrs	r2, r2, #1
 8008c10:	3a01      	subs	r2, #1
 8008c12:	0552      	lsls	r2, r2, #21
 8008c14:	4311      	orrs	r1, r2
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c1a:	0852      	lsrs	r2, r2, #1
 8008c1c:	3a01      	subs	r2, #1
 8008c1e:	0652      	lsls	r2, r2, #25
 8008c20:	4311      	orrs	r1, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008c26:	06d2      	lsls	r2, r2, #27
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	4943      	ldr	r1, [pc, #268]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c30:	4b41      	ldr	r3, [pc, #260]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a40      	ldr	r2, [pc, #256]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c3c:	4b3e      	ldr	r3, [pc, #248]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	4a3d      	ldr	r2, [pc, #244]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c48:	f7fe faa2 	bl	8007190 <HAL_GetTick>
 8008c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c50:	f7fe fa9e 	bl	8007190 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e066      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c62:	4b35      	ldr	r3, [pc, #212]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0f0      	beq.n	8008c50 <HAL_RCC_OscConfig+0x530>
 8008c6e:	e05e      	b.n	8008d2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c70:	4b31      	ldr	r3, [pc, #196]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a30      	ldr	r2, [pc, #192]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c7c:	f7fe fa88 	bl	8007190 <HAL_GetTick>
 8008c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c84:	f7fe fa84 	bl	8007190 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e04c      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c96:	4b28      	ldr	r3, [pc, #160]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1f0      	bne.n	8008c84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008ca2:	4b25      	ldr	r3, [pc, #148]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	4924      	ldr	r1, [pc, #144]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008ca8:	4b25      	ldr	r3, [pc, #148]	@ (8008d40 <HAL_RCC_OscConfig+0x620>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	60cb      	str	r3, [r1, #12]
 8008cae:	e03e      	b.n	8008d2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e039      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8008d38 <HAL_RCC_OscConfig+0x618>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f003 0203 	and.w	r2, r3, #3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d12c      	bne.n	8008d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d123      	bne.n	8008d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d11b      	bne.n	8008d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d113      	bne.n	8008d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0c:	085b      	lsrs	r3, r3, #1
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d109      	bne.n	8008d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d20:	085b      	lsrs	r3, r3, #1
 8008d22:	3b01      	subs	r3, #1
 8008d24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d001      	beq.n	8008d2e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	40021000 	.word	0x40021000
 8008d3c:	019f800c 	.word	0x019f800c
 8008d40:	feeefffc 	.word	0xfeeefffc

08008d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e11e      	b.n	8008f9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d5c:	4b91      	ldr	r3, [pc, #580]	@ (8008fa4 <HAL_RCC_ClockConfig+0x260>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 030f 	and.w	r3, r3, #15
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d910      	bls.n	8008d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d6a:	4b8e      	ldr	r3, [pc, #568]	@ (8008fa4 <HAL_RCC_ClockConfig+0x260>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f023 020f 	bic.w	r2, r3, #15
 8008d72:	498c      	ldr	r1, [pc, #560]	@ (8008fa4 <HAL_RCC_ClockConfig+0x260>)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d7a:	4b8a      	ldr	r3, [pc, #552]	@ (8008fa4 <HAL_RCC_ClockConfig+0x260>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 030f 	and.w	r3, r3, #15
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d001      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e106      	b.n	8008f9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d073      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d129      	bne.n	8008df4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008da0:	4b81      	ldr	r3, [pc, #516]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e0f4      	b.n	8008f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008db0:	f000 f99e 	bl	80090f0 <RCC_GetSysClockFreqFromPLLSource>
 8008db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	4a7c      	ldr	r2, [pc, #496]	@ (8008fac <HAL_RCC_ClockConfig+0x268>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d93f      	bls.n	8008e3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d009      	beq.n	8008dde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d033      	beq.n	8008e3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d12f      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008dde:	4b72      	ldr	r3, [pc, #456]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008de6:	4a70      	ldr	r2, [pc, #448]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008dee:	2380      	movs	r3, #128	@ 0x80
 8008df0:	617b      	str	r3, [r7, #20]
 8008df2:	e024      	b.n	8008e3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d107      	bne.n	8008e0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d109      	bne.n	8008e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e0c6      	b.n	8008f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e0c:	4b66      	ldr	r3, [pc, #408]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e0be      	b.n	8008f9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008e1c:	f000 f8ce 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 8008e20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	4a61      	ldr	r2, [pc, #388]	@ (8008fac <HAL_RCC_ClockConfig+0x268>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d909      	bls.n	8008e3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e32:	4a5d      	ldr	r2, [pc, #372]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008e3a:	2380      	movs	r3, #128	@ 0x80
 8008e3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f023 0203 	bic.w	r2, r3, #3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	4957      	ldr	r1, [pc, #348]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e50:	f7fe f99e 	bl	8007190 <HAL_GetTick>
 8008e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e56:	e00a      	b.n	8008e6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e58:	f7fe f99a 	bl	8007190 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e095      	b.n	8008f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 020c 	and.w	r2, r3, #12
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d1eb      	bne.n	8008e58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d023      	beq.n	8008ed4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e98:	4b43      	ldr	r3, [pc, #268]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	4a42      	ldr	r2, [pc, #264]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008e9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008ea2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0308 	and.w	r3, r3, #8
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d007      	beq.n	8008ec0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008eb8:	4a3b      	ldr	r2, [pc, #236]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008eba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ec0:	4b39      	ldr	r3, [pc, #228]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	4936      	ldr	r1, [pc, #216]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	608b      	str	r3, [r1, #8]
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2b80      	cmp	r3, #128	@ 0x80
 8008ed8:	d105      	bne.n	8008ee6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008eda:	4b33      	ldr	r3, [pc, #204]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	4a32      	ldr	r2, [pc, #200]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008ee0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ee4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8008fa4 <HAL_RCC_ClockConfig+0x260>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d21d      	bcs.n	8008f30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8008fa4 <HAL_RCC_ClockConfig+0x260>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f023 020f 	bic.w	r2, r3, #15
 8008efc:	4929      	ldr	r1, [pc, #164]	@ (8008fa4 <HAL_RCC_ClockConfig+0x260>)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008f04:	f7fe f944 	bl	8007190 <HAL_GetTick>
 8008f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f0a:	e00a      	b.n	8008f22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f0c:	f7fe f940 	bl	8007190 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e03b      	b.n	8008f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f22:	4b20      	ldr	r3, [pc, #128]	@ (8008fa4 <HAL_RCC_ClockConfig+0x260>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d1ed      	bne.n	8008f0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d008      	beq.n	8008f4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	4917      	ldr	r1, [pc, #92]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0308 	and.w	r3, r3, #8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d009      	beq.n	8008f6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f5a:	4b13      	ldr	r3, [pc, #76]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	490f      	ldr	r1, [pc, #60]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f6e:	f000 f825 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 8008f72:	4602      	mov	r2, r0
 8008f74:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa8 <HAL_RCC_ClockConfig+0x264>)
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	091b      	lsrs	r3, r3, #4
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	490c      	ldr	r1, [pc, #48]	@ (8008fb0 <HAL_RCC_ClockConfig+0x26c>)
 8008f80:	5ccb      	ldrb	r3, [r1, r3]
 8008f82:	f003 031f 	and.w	r3, r3, #31
 8008f86:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb4 <HAL_RCC_ClockConfig+0x270>)
 8008f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb8 <HAL_RCC_ClockConfig+0x274>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe f8b0 	bl	80070f8 <HAL_InitTick>
 8008f98:	4603      	mov	r3, r0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40022000 	.word	0x40022000
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	04c4b400 	.word	0x04c4b400
 8008fb0:	0800b8a8 	.word	0x0800b8a8
 8008fb4:	20000000 	.word	0x20000000
 8008fb8:	2000005c 	.word	0x2000005c

08008fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8009074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f003 030c 	and.w	r3, r3, #12
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d102      	bne.n	8008fd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008fce:	4b2a      	ldr	r3, [pc, #168]	@ (8009078 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008fd0:	613b      	str	r3, [r7, #16]
 8008fd2:	e047      	b.n	8009064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008fd4:	4b27      	ldr	r3, [pc, #156]	@ (8009074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f003 030c 	and.w	r3, r3, #12
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d102      	bne.n	8008fe6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008fe0:	4b26      	ldr	r3, [pc, #152]	@ (800907c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008fe2:	613b      	str	r3, [r7, #16]
 8008fe4:	e03e      	b.n	8009064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008fe6:	4b23      	ldr	r3, [pc, #140]	@ (8009074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 030c 	and.w	r3, r3, #12
 8008fee:	2b0c      	cmp	r3, #12
 8008ff0:	d136      	bne.n	8009060 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ff2:	4b20      	ldr	r3, [pc, #128]	@ (8009074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8009074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	091b      	lsrs	r3, r3, #4
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	3301      	adds	r3, #1
 8009008:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b03      	cmp	r3, #3
 800900e:	d10c      	bne.n	800902a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009010:	4a1a      	ldr	r2, [pc, #104]	@ (800907c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	fbb2 f3f3 	udiv	r3, r2, r3
 8009018:	4a16      	ldr	r2, [pc, #88]	@ (8009074 <HAL_RCC_GetSysClockFreq+0xb8>)
 800901a:	68d2      	ldr	r2, [r2, #12]
 800901c:	0a12      	lsrs	r2, r2, #8
 800901e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009022:	fb02 f303 	mul.w	r3, r2, r3
 8009026:	617b      	str	r3, [r7, #20]
      break;
 8009028:	e00c      	b.n	8009044 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800902a:	4a13      	ldr	r2, [pc, #76]	@ (8009078 <HAL_RCC_GetSysClockFreq+0xbc>)
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009032:	4a10      	ldr	r2, [pc, #64]	@ (8009074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009034:	68d2      	ldr	r2, [r2, #12]
 8009036:	0a12      	lsrs	r2, r2, #8
 8009038:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800903c:	fb02 f303 	mul.w	r3, r2, r3
 8009040:	617b      	str	r3, [r7, #20]
      break;
 8009042:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009044:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	0e5b      	lsrs	r3, r3, #25
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	3301      	adds	r3, #1
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	fbb2 f3f3 	udiv	r3, r2, r3
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	e001      	b.n	8009064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009064:	693b      	ldr	r3, [r7, #16]
}
 8009066:	4618      	mov	r0, r3
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	40021000 	.word	0x40021000
 8009078:	00f42400 	.word	0x00f42400
 800907c:	007a1200 	.word	0x007a1200

08009080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009084:	4b03      	ldr	r3, [pc, #12]	@ (8009094 <HAL_RCC_GetHCLKFreq+0x14>)
 8009086:	681b      	ldr	r3, [r3, #0]
}
 8009088:	4618      	mov	r0, r3
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000000 	.word	0x20000000

08009098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800909c:	f7ff fff0 	bl	8009080 <HAL_RCC_GetHCLKFreq>
 80090a0:	4602      	mov	r2, r0
 80090a2:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	0a1b      	lsrs	r3, r3, #8
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	4904      	ldr	r1, [pc, #16]	@ (80090c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80090ae:	5ccb      	ldrb	r3, [r1, r3]
 80090b0:	f003 031f 	and.w	r3, r3, #31
 80090b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	40021000 	.word	0x40021000
 80090c0:	0800b8b8 	.word	0x0800b8b8

080090c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80090c8:	f7ff ffda 	bl	8009080 <HAL_RCC_GetHCLKFreq>
 80090cc:	4602      	mov	r2, r0
 80090ce:	4b06      	ldr	r3, [pc, #24]	@ (80090e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	0adb      	lsrs	r3, r3, #11
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	4904      	ldr	r1, [pc, #16]	@ (80090ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80090da:	5ccb      	ldrb	r3, [r1, r3]
 80090dc:	f003 031f 	and.w	r3, r3, #31
 80090e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	40021000 	.word	0x40021000
 80090ec:	0800b8b8 	.word	0x0800b8b8

080090f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f003 0303 	and.w	r3, r3, #3
 80090fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009100:	4b1b      	ldr	r3, [pc, #108]	@ (8009170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	091b      	lsrs	r3, r3, #4
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	3301      	adds	r3, #1
 800910c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b03      	cmp	r3, #3
 8009112:	d10c      	bne.n	800912e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009114:	4a17      	ldr	r2, [pc, #92]	@ (8009174 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	fbb2 f3f3 	udiv	r3, r2, r3
 800911c:	4a14      	ldr	r2, [pc, #80]	@ (8009170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800911e:	68d2      	ldr	r2, [r2, #12]
 8009120:	0a12      	lsrs	r2, r2, #8
 8009122:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009126:	fb02 f303 	mul.w	r3, r2, r3
 800912a:	617b      	str	r3, [r7, #20]
    break;
 800912c:	e00c      	b.n	8009148 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800912e:	4a12      	ldr	r2, [pc, #72]	@ (8009178 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	fbb2 f3f3 	udiv	r3, r2, r3
 8009136:	4a0e      	ldr	r2, [pc, #56]	@ (8009170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009138:	68d2      	ldr	r2, [r2, #12]
 800913a:	0a12      	lsrs	r2, r2, #8
 800913c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009140:	fb02 f303 	mul.w	r3, r2, r3
 8009144:	617b      	str	r3, [r7, #20]
    break;
 8009146:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009148:	4b09      	ldr	r3, [pc, #36]	@ (8009170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	0e5b      	lsrs	r3, r3, #25
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	3301      	adds	r3, #1
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009160:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009162:	687b      	ldr	r3, [r7, #4]
}
 8009164:	4618      	mov	r0, r3
 8009166:	371c      	adds	r7, #28
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	40021000 	.word	0x40021000
 8009174:	007a1200 	.word	0x007a1200
 8009178:	00f42400 	.word	0x00f42400

0800917c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009184:	2300      	movs	r3, #0
 8009186:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009188:	2300      	movs	r3, #0
 800918a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8098 	beq.w	80092ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800919a:	2300      	movs	r3, #0
 800919c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800919e:	4b43      	ldr	r3, [pc, #268]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10d      	bne.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091aa:	4b40      	ldr	r3, [pc, #256]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ae:	4a3f      	ldr	r2, [pc, #252]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80091b6:	4b3d      	ldr	r3, [pc, #244]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091be:	60bb      	str	r3, [r7, #8]
 80091c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091c2:	2301      	movs	r3, #1
 80091c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091c6:	4b3a      	ldr	r3, [pc, #232]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a39      	ldr	r2, [pc, #228]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80091cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091d2:	f7fd ffdd 	bl	8007190 <HAL_GetTick>
 80091d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091d8:	e009      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091da:	f7fd ffd9 	bl	8007190 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d902      	bls.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	74fb      	strb	r3, [r7, #19]
        break;
 80091ec:	e005      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ee:	4b30      	ldr	r3, [pc, #192]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0ef      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80091fa:	7cfb      	ldrb	r3, [r7, #19]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d159      	bne.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009200:	4b2a      	ldr	r3, [pc, #168]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800920a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d01e      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	429a      	cmp	r2, r3
 800921a:	d019      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800921c:	4b23      	ldr	r3, [pc, #140]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800921e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009226:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009228:	4b20      	ldr	r3, [pc, #128]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800922a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800922e:	4a1f      	ldr	r2, [pc, #124]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009238:	4b1c      	ldr	r3, [pc, #112]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800923a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923e:	4a1b      	ldr	r2, [pc, #108]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009248:	4a18      	ldr	r2, [pc, #96]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d016      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800925a:	f7fd ff99 	bl	8007190 <HAL_GetTick>
 800925e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009260:	e00b      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009262:	f7fd ff95 	bl	8007190 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009270:	4293      	cmp	r3, r2
 8009272:	d902      	bls.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	74fb      	strb	r3, [r7, #19]
            break;
 8009278:	e006      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800927a:	4b0c      	ldr	r3, [pc, #48]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800927c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009280:	f003 0302 	and.w	r3, r3, #2
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0ec      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009288:	7cfb      	ldrb	r3, [r7, #19]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10b      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800928e:	4b07      	ldr	r3, [pc, #28]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009294:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800929c:	4903      	ldr	r1, [pc, #12]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800929e:	4313      	orrs	r3, r2
 80092a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80092a4:	e008      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092a6:	7cfb      	ldrb	r3, [r7, #19]
 80092a8:	74bb      	strb	r3, [r7, #18]
 80092aa:	e005      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80092ac:	40021000 	.word	0x40021000
 80092b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b4:	7cfb      	ldrb	r3, [r7, #19]
 80092b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092b8:	7c7b      	ldrb	r3, [r7, #17]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d105      	bne.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092be:	4ba6      	ldr	r3, [pc, #664]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092c2:	4aa5      	ldr	r2, [pc, #660]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00a      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80092d6:	4ba0      	ldr	r3, [pc, #640]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092dc:	f023 0203 	bic.w	r2, r3, #3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	499c      	ldr	r1, [pc, #624]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00a      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80092f8:	4b97      	ldr	r3, [pc, #604]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092fe:	f023 020c 	bic.w	r2, r3, #12
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	4994      	ldr	r1, [pc, #592]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009308:	4313      	orrs	r3, r2
 800930a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0304 	and.w	r3, r3, #4
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800931a:	4b8f      	ldr	r3, [pc, #572]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800931c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009320:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	498b      	ldr	r1, [pc, #556]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800932a:	4313      	orrs	r3, r2
 800932c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0308 	and.w	r3, r3, #8
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00a      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800933c:	4b86      	ldr	r3, [pc, #536]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800933e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009342:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	4983      	ldr	r1, [pc, #524]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800934c:	4313      	orrs	r3, r2
 800934e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0320 	and.w	r3, r3, #32
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800935e:	4b7e      	ldr	r3, [pc, #504]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009364:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	497a      	ldr	r1, [pc, #488]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800936e:	4313      	orrs	r3, r2
 8009370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009380:	4b75      	ldr	r3, [pc, #468]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009386:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	4972      	ldr	r1, [pc, #456]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009390:	4313      	orrs	r3, r2
 8009392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80093a2:	4b6d      	ldr	r3, [pc, #436]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	4969      	ldr	r1, [pc, #420]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00a      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80093c4:	4b64      	ldr	r3, [pc, #400]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	4961      	ldr	r1, [pc, #388]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093e6:	4b5c      	ldr	r3, [pc, #368]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f4:	4958      	ldr	r1, [pc, #352]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009404:	2b00      	cmp	r3, #0
 8009406:	d015      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009408:	4b53      	ldr	r3, [pc, #332]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800940a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800940e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009416:	4950      	ldr	r1, [pc, #320]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009418:	4313      	orrs	r3, r2
 800941a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009426:	d105      	bne.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009428:	4b4b      	ldr	r3, [pc, #300]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	4a4a      	ldr	r2, [pc, #296]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800942e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009432:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800943c:	2b00      	cmp	r3, #0
 800943e:	d015      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009440:	4b45      	ldr	r3, [pc, #276]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009446:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944e:	4942      	ldr	r1, [pc, #264]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009450:	4313      	orrs	r3, r2
 8009452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800945e:	d105      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009460:	4b3d      	ldr	r3, [pc, #244]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	4a3c      	ldr	r2, [pc, #240]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800946a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d015      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009478:	4b37      	ldr	r3, [pc, #220]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800947a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800947e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009486:	4934      	ldr	r1, [pc, #208]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009488:	4313      	orrs	r3, r2
 800948a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009492:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009496:	d105      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009498:	4b2f      	ldr	r3, [pc, #188]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	4a2e      	ldr	r2, [pc, #184]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800949e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d015      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094b0:	4b29      	ldr	r3, [pc, #164]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094be:	4926      	ldr	r1, [pc, #152]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094ce:	d105      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094d0:	4b21      	ldr	r3, [pc, #132]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	4a20      	ldr	r2, [pc, #128]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d015      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f6:	4918      	ldr	r1, [pc, #96]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009506:	d105      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009508:	4b13      	ldr	r3, [pc, #76]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	4a12      	ldr	r2, [pc, #72]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800950e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009512:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d015      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009520:	4b0d      	ldr	r3, [pc, #52]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009526:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800952e:	490a      	ldr	r1, [pc, #40]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009530:	4313      	orrs	r3, r2
 8009532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800953e:	d105      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009540:	4b05      	ldr	r3, [pc, #20]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	4a04      	ldr	r2, [pc, #16]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800954a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800954c:	7cbb      	ldrb	r3, [r7, #18]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	40021000 	.word	0x40021000

0800955c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e09d      	b.n	80096aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009572:	2b00      	cmp	r3, #0
 8009574:	d108      	bne.n	8009588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800957e:	d009      	beq.n	8009594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	61da      	str	r2, [r3, #28]
 8009586:	e005      	b.n	8009594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f8a7 	bl	8009702 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095d4:	d902      	bls.n	80095dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	e002      	b.n	80095e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80095dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80095ea:	d007      	beq.n	80095fc <HAL_SPI_Init+0xa0>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095f4:	d002      	beq.n	80095fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800960c:	431a      	orrs	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	431a      	orrs	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009634:	431a      	orrs	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800963e:	ea42 0103 	orr.w	r1, r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009646:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	0c1b      	lsrs	r3, r3, #16
 8009658:	f003 0204 	and.w	r2, r3, #4
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009660:	f003 0310 	and.w	r3, r3, #16
 8009664:	431a      	orrs	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800966a:	f003 0308 	and.w	r3, r3, #8
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009678:	ea42 0103 	orr.w	r1, r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	430a      	orrs	r2, r1
 8009688:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69da      	ldr	r2, [r3, #28]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009698:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e01a      	b.n	80096fa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096da:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f81a 	bl	8009716 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8009702:	b480      	push	{r7}
 8009704:	b083      	sub	sp, #12
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b088      	sub	sp, #32
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	603b      	str	r3, [r7, #0]
 8009736:	4613      	mov	r3, r2
 8009738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <HAL_SPI_Transmit+0x22>
 8009748:	2302      	movs	r3, #2
 800974a:	e15f      	b.n	8009a0c <HAL_SPI_Transmit+0x2e2>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009754:	f7fd fd1c 	bl	8007190 <HAL_GetTick>
 8009758:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800975a:	88fb      	ldrh	r3, [r7, #6]
 800975c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b01      	cmp	r3, #1
 8009768:	d002      	beq.n	8009770 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800976a:	2302      	movs	r3, #2
 800976c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800976e:	e148      	b.n	8009a02 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d002      	beq.n	800977c <HAL_SPI_Transmit+0x52>
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d102      	bne.n	8009782 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009780:	e13f      	b.n	8009a02 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2203      	movs	r2, #3
 8009786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	88fa      	ldrh	r2, [r7, #6]
 800979a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	88fa      	ldrh	r2, [r7, #6]
 80097a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097cc:	d10f      	bne.n	80097ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f8:	2b40      	cmp	r3, #64	@ 0x40
 80097fa:	d007      	beq.n	800980c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800980a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009814:	d94f      	bls.n	80098b6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <HAL_SPI_Transmit+0xfa>
 800981e:	8afb      	ldrh	r3, [r7, #22]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d142      	bne.n	80098aa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009828:	881a      	ldrh	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009834:	1c9a      	adds	r2, r3, #2
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800983e:	b29b      	uxth	r3, r3
 8009840:	3b01      	subs	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009848:	e02f      	b.n	80098aa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b02      	cmp	r3, #2
 8009856:	d112      	bne.n	800987e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985c:	881a      	ldrh	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009868:	1c9a      	adds	r2, r3, #2
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009872:	b29b      	uxth	r3, r3
 8009874:	3b01      	subs	r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800987c:	e015      	b.n	80098aa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800987e:	f7fd fc87 	bl	8007190 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	429a      	cmp	r2, r3
 800988c:	d803      	bhi.n	8009896 <HAL_SPI_Transmit+0x16c>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009894:	d102      	bne.n	800989c <HAL_SPI_Transmit+0x172>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d106      	bne.n	80098aa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80098a8:	e0ab      	b.n	8009a02 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1ca      	bne.n	800984a <HAL_SPI_Transmit+0x120>
 80098b4:	e080      	b.n	80099b8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <HAL_SPI_Transmit+0x19a>
 80098be:	8afb      	ldrh	r3, [r7, #22]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d174      	bne.n	80099ae <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d912      	bls.n	80098f4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d2:	881a      	ldrh	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098de:	1c9a      	adds	r2, r3, #2
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	3b02      	subs	r3, #2
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098f2:	e05c      	b.n	80099ae <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	330c      	adds	r3, #12
 80098fe:	7812      	ldrb	r2, [r2, #0]
 8009900:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009910:	b29b      	uxth	r3, r3
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800991a:	e048      	b.n	80099ae <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b02      	cmp	r3, #2
 8009928:	d12b      	bne.n	8009982 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800992e:	b29b      	uxth	r3, r3
 8009930:	2b01      	cmp	r3, #1
 8009932:	d912      	bls.n	800995a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009938:	881a      	ldrh	r2, [r3, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009944:	1c9a      	adds	r2, r3, #2
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800994e:	b29b      	uxth	r3, r3
 8009950:	3b02      	subs	r3, #2
 8009952:	b29a      	uxth	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009958:	e029      	b.n	80099ae <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	330c      	adds	r3, #12
 8009964:	7812      	ldrb	r2, [r2, #0]
 8009966:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009976:	b29b      	uxth	r3, r3
 8009978:	3b01      	subs	r3, #1
 800997a:	b29a      	uxth	r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009980:	e015      	b.n	80099ae <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009982:	f7fd fc05 	bl	8007190 <HAL_GetTick>
 8009986:	4602      	mov	r2, r0
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d803      	bhi.n	800999a <HAL_SPI_Transmit+0x270>
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009998:	d102      	bne.n	80099a0 <HAL_SPI_Transmit+0x276>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d106      	bne.n	80099ae <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80099ac:	e029      	b.n	8009a02 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1b1      	bne.n	800991c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 fd07 	bl	800a3d0 <SPI_EndRxTxTransaction>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2220      	movs	r2, #32
 80099cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10a      	bne.n	80099ec <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099d6:	2300      	movs	r3, #0
 80099d8:	613b      	str	r3, [r7, #16]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	613b      	str	r3, [r7, #16]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	613b      	str	r3, [r7, #16]
 80099ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	77fb      	strb	r3, [r7, #31]
 80099f8:	e003      	b.n	8009a02 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009a0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	603b      	str	r3, [r7, #0]
 8009a20:	4613      	mov	r3, r2
 8009a22:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d002      	beq.n	8009a3a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8009a34:	2302      	movs	r3, #2
 8009a36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a38:	e11a      	b.n	8009c70 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a42:	d112      	bne.n	8009a6a <HAL_SPI_Receive+0x56>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10e      	bne.n	8009a6a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2204      	movs	r2, #4
 8009a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009a54:	88fa      	ldrh	r2, [r7, #6]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f90e 	bl	8009c82 <HAL_SPI_TransmitReceive>
 8009a66:	4603      	mov	r3, r0
 8009a68:	e107      	b.n	8009c7a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d101      	bne.n	8009a78 <HAL_SPI_Receive+0x64>
 8009a74:	2302      	movs	r3, #2
 8009a76:	e100      	b.n	8009c7a <HAL_SPI_Receive+0x266>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a80:	f7fd fb86 	bl	8007190 <HAL_GetTick>
 8009a84:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <HAL_SPI_Receive+0x7e>
 8009a8c:	88fb      	ldrh	r3, [r7, #6]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a96:	e0eb      	b.n	8009c70 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	88fa      	ldrh	r2, [r7, #6]
 8009ab0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	88fa      	ldrh	r2, [r7, #6]
 8009ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009ae2:	d908      	bls.n	8009af6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009af2:	605a      	str	r2, [r3, #4]
 8009af4:	e007      	b.n	8009b06 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009b04:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b0e:	d10f      	bne.n	8009b30 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009b2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b3a:	2b40      	cmp	r3, #64	@ 0x40
 8009b3c:	d007      	beq.n	8009b4e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009b56:	d86f      	bhi.n	8009c38 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009b58:	e034      	b.n	8009bc4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d117      	bne.n	8009b98 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f103 020c 	add.w	r2, r3, #12
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b74:	7812      	ldrb	r2, [r2, #0]
 8009b76:	b2d2      	uxtb	r2, r2
 8009b78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009b96:	e015      	b.n	8009bc4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b98:	f7fd fafa 	bl	8007190 <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d803      	bhi.n	8009bb0 <HAL_SPI_Receive+0x19c>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bae:	d102      	bne.n	8009bb6 <HAL_SPI_Receive+0x1a2>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d106      	bne.n	8009bc4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009bc2:	e055      	b.n	8009c70 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1c4      	bne.n	8009b5a <HAL_SPI_Receive+0x146>
 8009bd0:	e038      	b.n	8009c44 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d115      	bne.n	8009c0c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68da      	ldr	r2, [r3, #12]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bea:	b292      	uxth	r2, r2
 8009bec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf2:	1c9a      	adds	r2, r3, #2
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009c0a:	e015      	b.n	8009c38 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c0c:	f7fd fac0 	bl	8007190 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d803      	bhi.n	8009c24 <HAL_SPI_Receive+0x210>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c22:	d102      	bne.n	8009c2a <HAL_SPI_Receive+0x216>
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d106      	bne.n	8009c38 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009c36:	e01b      	b.n	8009c70 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1c6      	bne.n	8009bd2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 fb69 	bl	800a320 <SPI_EndRxTransaction>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2220      	movs	r2, #32
 8009c58:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	75fb      	strb	r3, [r7, #23]
 8009c66:	e003      	b.n	8009c70 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b08a      	sub	sp, #40	@ 0x28
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
 8009c8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c90:	2301      	movs	r3, #1
 8009c92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_SPI_TransmitReceive+0x26>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e20a      	b.n	800a0be <HAL_SPI_TransmitReceive+0x43c>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cb0:	f7fd fa6e 	bl	8007190 <HAL_GetTick>
 8009cb4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009cbc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009cc4:	887b      	ldrh	r3, [r7, #2]
 8009cc6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009cc8:	887b      	ldrh	r3, [r7, #2]
 8009cca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ccc:	7efb      	ldrb	r3, [r7, #27]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d00e      	beq.n	8009cf0 <HAL_SPI_TransmitReceive+0x6e>
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cd8:	d106      	bne.n	8009ce8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d102      	bne.n	8009ce8 <HAL_SPI_TransmitReceive+0x66>
 8009ce2:	7efb      	ldrb	r3, [r7, #27]
 8009ce4:	2b04      	cmp	r3, #4
 8009ce6:	d003      	beq.n	8009cf0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009ce8:	2302      	movs	r3, #2
 8009cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009cee:	e1e0      	b.n	800a0b2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <HAL_SPI_TransmitReceive+0x80>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d002      	beq.n	8009d02 <HAL_SPI_TransmitReceive+0x80>
 8009cfc:	887b      	ldrh	r3, [r7, #2]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d103      	bne.n	8009d0a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009d08:	e1d3      	b.n	800a0b2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d003      	beq.n	8009d1e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2205      	movs	r2, #5
 8009d1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	887a      	ldrh	r2, [r7, #2]
 8009d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	887a      	ldrh	r2, [r7, #2]
 8009d36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	887a      	ldrh	r2, [r7, #2]
 8009d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	887a      	ldrh	r2, [r7, #2]
 8009d4a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d60:	d802      	bhi.n	8009d68 <HAL_SPI_TransmitReceive+0xe6>
 8009d62:	8a3b      	ldrh	r3, [r7, #16]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d908      	bls.n	8009d7a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d76:	605a      	str	r2, [r3, #4]
 8009d78:	e007      	b.n	8009d8a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d94:	2b40      	cmp	r3, #64	@ 0x40
 8009d96:	d007      	beq.n	8009da8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009db0:	f240 8081 	bls.w	8009eb6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <HAL_SPI_TransmitReceive+0x140>
 8009dbc:	8a7b      	ldrh	r3, [r7, #18]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d16d      	bne.n	8009e9e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc6:	881a      	ldrh	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd2:	1c9a      	adds	r2, r3, #2
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009de6:	e05a      	b.n	8009e9e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	f003 0302 	and.w	r3, r3, #2
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d11b      	bne.n	8009e2e <HAL_SPI_TransmitReceive+0x1ac>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d016      	beq.n	8009e2e <HAL_SPI_TransmitReceive+0x1ac>
 8009e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d113      	bne.n	8009e2e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0a:	881a      	ldrh	r2, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	1c9a      	adds	r2, r3, #2
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	3b01      	subs	r3, #1
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d11c      	bne.n	8009e76 <HAL_SPI_TransmitReceive+0x1f4>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d016      	beq.n	8009e76 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e52:	b292      	uxth	r2, r2
 8009e54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5a:	1c9a      	adds	r2, r3, #2
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e72:	2301      	movs	r3, #1
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e76:	f7fd f98b 	bl	8007190 <HAL_GetTick>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d80b      	bhi.n	8009e9e <HAL_SPI_TransmitReceive+0x21c>
 8009e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e8c:	d007      	beq.n	8009e9e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009e9c:	e109      	b.n	800a0b2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d19f      	bne.n	8009de8 <HAL_SPI_TransmitReceive+0x166>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d199      	bne.n	8009de8 <HAL_SPI_TransmitReceive+0x166>
 8009eb4:	e0e3      	b.n	800a07e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_SPI_TransmitReceive+0x244>
 8009ebe:	8a7b      	ldrh	r3, [r7, #18]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	f040 80cf 	bne.w	800a064 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d912      	bls.n	8009ef6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed4:	881a      	ldrh	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee0:	1c9a      	adds	r2, r3, #2
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	3b02      	subs	r3, #2
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ef4:	e0b6      	b.n	800a064 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	330c      	adds	r3, #12
 8009f00:	7812      	ldrb	r2, [r2, #0]
 8009f02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f08:	1c5a      	adds	r2, r3, #1
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f1c:	e0a2      	b.n	800a064 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d134      	bne.n	8009f96 <HAL_SPI_TransmitReceive+0x314>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d02f      	beq.n	8009f96 <HAL_SPI_TransmitReceive+0x314>
 8009f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d12c      	bne.n	8009f96 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d912      	bls.n	8009f6c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4a:	881a      	ldrh	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f56:	1c9a      	adds	r2, r3, #2
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	3b02      	subs	r3, #2
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f6a:	e012      	b.n	8009f92 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	330c      	adds	r3, #12
 8009f76:	7812      	ldrb	r2, [r2, #0]
 8009f78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d148      	bne.n	800a036 <HAL_SPI_TransmitReceive+0x3b4>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d042      	beq.n	800a036 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d923      	bls.n	800a004 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fc6:	b292      	uxth	r2, r2
 8009fc8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fce:	1c9a      	adds	r2, r3, #2
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	3b02      	subs	r3, #2
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d81f      	bhi.n	800a032 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	e016      	b.n	800a032 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f103 020c 	add.w	r2, r3, #12
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a010:	7812      	ldrb	r2, [r2, #0]
 800a012:	b2d2      	uxtb	r2, r2
 800a014:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01a:	1c5a      	adds	r2, r3, #1
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a026:	b29b      	uxth	r3, r3
 800a028:	3b01      	subs	r3, #1
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a032:	2301      	movs	r3, #1
 800a034:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a036:	f7fd f8ab 	bl	8007190 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a042:	429a      	cmp	r2, r3
 800a044:	d803      	bhi.n	800a04e <HAL_SPI_TransmitReceive+0x3cc>
 800a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a04c:	d102      	bne.n	800a054 <HAL_SPI_TransmitReceive+0x3d2>
 800a04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a050:	2b00      	cmp	r3, #0
 800a052:	d107      	bne.n	800a064 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a062:	e026      	b.n	800a0b2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a068:	b29b      	uxth	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f47f af57 	bne.w	8009f1e <HAL_SPI_TransmitReceive+0x29c>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a076:	b29b      	uxth	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f47f af50 	bne.w	8009f1e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a07e:	69fa      	ldr	r2, [r7, #28]
 800a080:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 f9a4 	bl	800a3d0 <SPI_EndRxTxTransaction>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d005      	beq.n	800a09a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2220      	movs	r2, #32
 800a098:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0a8:	e003      	b.n	800a0b2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a0ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3728      	adds	r7, #40	@ 0x28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b083      	sub	sp, #12
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a0d4:	b2db      	uxtb	r3, r3
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
	...

0800a0e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a0f4:	f7fd f84c 	bl	8007190 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fc:	1a9b      	subs	r3, r3, r2
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	4413      	add	r3, r2
 800a102:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a104:	f7fd f844 	bl	8007190 <HAL_GetTick>
 800a108:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a10a:	4b39      	ldr	r3, [pc, #228]	@ (800a1f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	015b      	lsls	r3, r3, #5
 800a110:	0d1b      	lsrs	r3, r3, #20
 800a112:	69fa      	ldr	r2, [r7, #28]
 800a114:	fb02 f303 	mul.w	r3, r2, r3
 800a118:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a11a:	e054      	b.n	800a1c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a122:	d050      	beq.n	800a1c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a124:	f7fd f834 	bl	8007190 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	429a      	cmp	r2, r3
 800a132:	d902      	bls.n	800a13a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d13d      	bne.n	800a1b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a148:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a152:	d111      	bne.n	800a178 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a15c:	d004      	beq.n	800a168 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a166:	d107      	bne.n	800a178 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a176:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a180:	d10f      	bne.n	800a1a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a1a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e017      	b.n	800a1e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	bf0c      	ite	eq
 800a1d6:	2301      	moveq	r3, #1
 800a1d8:	2300      	movne	r3, #0
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	461a      	mov	r2, r3
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d19b      	bne.n	800a11c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3720      	adds	r7, #32
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20000000 	.word	0x20000000

0800a1f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08a      	sub	sp, #40	@ 0x28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a206:	f7fc ffc3 	bl	8007190 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20e:	1a9b      	subs	r3, r3, r2
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	4413      	add	r3, r2
 800a214:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a216:	f7fc ffbb 	bl	8007190 <HAL_GetTick>
 800a21a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	330c      	adds	r3, #12
 800a222:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a224:	4b3d      	ldr	r3, [pc, #244]	@ (800a31c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	00da      	lsls	r2, r3, #3
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	0d1b      	lsrs	r3, r3, #20
 800a234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a236:	fb02 f303 	mul.w	r3, r2, r3
 800a23a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a23c:	e060      	b.n	800a300 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a244:	d107      	bne.n	800a256 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d104      	bne.n	800a256 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	b2db      	uxtb	r3, r3
 800a252:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a254:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a25c:	d050      	beq.n	800a300 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a25e:	f7fc ff97 	bl	8007190 <HAL_GetTick>
 800a262:	4602      	mov	r2, r0
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d902      	bls.n	800a274 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a270:	2b00      	cmp	r3, #0
 800a272:	d13d      	bne.n	800a2f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a282:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a28c:	d111      	bne.n	800a2b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a296:	d004      	beq.n	800a2a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2a0:	d107      	bne.n	800a2b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2ba:	d10f      	bne.n	800a2dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a2da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e010      	b.n	800a312 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	689a      	ldr	r2, [r3, #8]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	4013      	ands	r3, r2
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d196      	bne.n	800a23e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3728      	adds	r7, #40	@ 0x28
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20000000 	.word	0x20000000

0800a320 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af02      	add	r7, sp, #8
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a334:	d111      	bne.n	800a35a <SPI_EndRxTransaction+0x3a>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a33e:	d004      	beq.n	800a34a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a348:	d107      	bne.n	800a35a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a358:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	2200      	movs	r2, #0
 800a362:	2180      	movs	r1, #128	@ 0x80
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff febd 	bl	800a0e4 <SPI_WaitFlagStateUntilTimeout>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d007      	beq.n	800a380 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a374:	f043 0220 	orr.w	r2, r3, #32
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e023      	b.n	800a3c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a388:	d11d      	bne.n	800a3c6 <SPI_EndRxTransaction+0xa6>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a392:	d004      	beq.n	800a39e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a39c:	d113      	bne.n	800a3c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff ff22 	bl	800a1f4 <SPI_WaitFifoStateUntilTimeout>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d007      	beq.n	800a3c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ba:	f043 0220 	orr.w	r2, r3, #32
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e000      	b.n	800a3c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af02      	add	r7, sp, #8
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f7ff ff03 	bl	800a1f4 <SPI_WaitFifoStateUntilTimeout>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d007      	beq.n	800a404 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3f8:	f043 0220 	orr.w	r2, r3, #32
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e027      	b.n	800a454 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2200      	movs	r2, #0
 800a40c:	2180      	movs	r1, #128	@ 0x80
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7ff fe68 	bl	800a0e4 <SPI_WaitFlagStateUntilTimeout>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d007      	beq.n	800a42a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a41e:	f043 0220 	orr.w	r2, r3, #32
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e014      	b.n	800a454 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2200      	movs	r2, #0
 800a432:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7ff fedc 	bl	800a1f4 <SPI_WaitFifoStateUntilTimeout>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d007      	beq.n	800a452 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a446:	f043 0220 	orr.w	r2, r3, #32
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e000      	b.n	800a454 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e042      	b.n	800a4f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a474:	2b00      	cmp	r3, #0
 800a476:	d106      	bne.n	800a486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7f8 ff11 	bl	80032a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2224      	movs	r2, #36	@ 0x24
 800a48a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 0201 	bic.w	r2, r2, #1
 800a49c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 faf4 	bl	800aa94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f825 	bl	800a4fc <UART_SetConfig>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e01b      	b.n	800a4f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fb73 	bl	800abd8 <UART_CheckIdleState>
 800a4f2:	4603      	mov	r3, r0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a500:	b08c      	sub	sp, #48	@ 0x30
 800a502:	af00      	add	r7, sp, #0
 800a504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	689a      	ldr	r2, [r3, #8]
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	431a      	orrs	r2, r3
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	695b      	ldr	r3, [r3, #20]
 800a51a:	431a      	orrs	r2, r3
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	4313      	orrs	r3, r2
 800a522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	4bab      	ldr	r3, [pc, #684]	@ (800a7d8 <UART_SetConfig+0x2dc>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	6812      	ldr	r2, [r2, #0]
 800a532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a534:	430b      	orrs	r3, r1
 800a536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	68da      	ldr	r2, [r3, #12]
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4aa0      	ldr	r2, [pc, #640]	@ (800a7dc <UART_SetConfig+0x2e0>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d004      	beq.n	800a568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a564:	4313      	orrs	r3, r2
 800a566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a572:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	6812      	ldr	r2, [r2, #0]
 800a57a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a57c:	430b      	orrs	r3, r1
 800a57e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a586:	f023 010f 	bic.w	r1, r3, #15
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a91      	ldr	r2, [pc, #580]	@ (800a7e0 <UART_SetConfig+0x2e4>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d125      	bne.n	800a5ec <UART_SetConfig+0xf0>
 800a5a0:	4b90      	ldr	r3, [pc, #576]	@ (800a7e4 <UART_SetConfig+0x2e8>)
 800a5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5a6:	f003 0303 	and.w	r3, r3, #3
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d81a      	bhi.n	800a5e4 <UART_SetConfig+0xe8>
 800a5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b4 <UART_SetConfig+0xb8>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a5c5 	.word	0x0800a5c5
 800a5b8:	0800a5d5 	.word	0x0800a5d5
 800a5bc:	0800a5cd 	.word	0x0800a5cd
 800a5c0:	0800a5dd 	.word	0x0800a5dd
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ca:	e0d6      	b.n	800a77a <UART_SetConfig+0x27e>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5d2:	e0d2      	b.n	800a77a <UART_SetConfig+0x27e>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5da:	e0ce      	b.n	800a77a <UART_SetConfig+0x27e>
 800a5dc:	2308      	movs	r3, #8
 800a5de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5e2:	e0ca      	b.n	800a77a <UART_SetConfig+0x27e>
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ea:	e0c6      	b.n	800a77a <UART_SetConfig+0x27e>
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a7d      	ldr	r2, [pc, #500]	@ (800a7e8 <UART_SetConfig+0x2ec>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d138      	bne.n	800a668 <UART_SetConfig+0x16c>
 800a5f6:	4b7b      	ldr	r3, [pc, #492]	@ (800a7e4 <UART_SetConfig+0x2e8>)
 800a5f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5fc:	f003 030c 	and.w	r3, r3, #12
 800a600:	2b0c      	cmp	r3, #12
 800a602:	d82d      	bhi.n	800a660 <UART_SetConfig+0x164>
 800a604:	a201      	add	r2, pc, #4	@ (adr r2, 800a60c <UART_SetConfig+0x110>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a641 	.word	0x0800a641
 800a610:	0800a661 	.word	0x0800a661
 800a614:	0800a661 	.word	0x0800a661
 800a618:	0800a661 	.word	0x0800a661
 800a61c:	0800a651 	.word	0x0800a651
 800a620:	0800a661 	.word	0x0800a661
 800a624:	0800a661 	.word	0x0800a661
 800a628:	0800a661 	.word	0x0800a661
 800a62c:	0800a649 	.word	0x0800a649
 800a630:	0800a661 	.word	0x0800a661
 800a634:	0800a661 	.word	0x0800a661
 800a638:	0800a661 	.word	0x0800a661
 800a63c:	0800a659 	.word	0x0800a659
 800a640:	2300      	movs	r3, #0
 800a642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a646:	e098      	b.n	800a77a <UART_SetConfig+0x27e>
 800a648:	2302      	movs	r3, #2
 800a64a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a64e:	e094      	b.n	800a77a <UART_SetConfig+0x27e>
 800a650:	2304      	movs	r3, #4
 800a652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a656:	e090      	b.n	800a77a <UART_SetConfig+0x27e>
 800a658:	2308      	movs	r3, #8
 800a65a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a65e:	e08c      	b.n	800a77a <UART_SetConfig+0x27e>
 800a660:	2310      	movs	r3, #16
 800a662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a666:	e088      	b.n	800a77a <UART_SetConfig+0x27e>
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a5f      	ldr	r2, [pc, #380]	@ (800a7ec <UART_SetConfig+0x2f0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d125      	bne.n	800a6be <UART_SetConfig+0x1c2>
 800a672:	4b5c      	ldr	r3, [pc, #368]	@ (800a7e4 <UART_SetConfig+0x2e8>)
 800a674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a678:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a67c:	2b30      	cmp	r3, #48	@ 0x30
 800a67e:	d016      	beq.n	800a6ae <UART_SetConfig+0x1b2>
 800a680:	2b30      	cmp	r3, #48	@ 0x30
 800a682:	d818      	bhi.n	800a6b6 <UART_SetConfig+0x1ba>
 800a684:	2b20      	cmp	r3, #32
 800a686:	d00a      	beq.n	800a69e <UART_SetConfig+0x1a2>
 800a688:	2b20      	cmp	r3, #32
 800a68a:	d814      	bhi.n	800a6b6 <UART_SetConfig+0x1ba>
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <UART_SetConfig+0x19a>
 800a690:	2b10      	cmp	r3, #16
 800a692:	d008      	beq.n	800a6a6 <UART_SetConfig+0x1aa>
 800a694:	e00f      	b.n	800a6b6 <UART_SetConfig+0x1ba>
 800a696:	2300      	movs	r3, #0
 800a698:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a69c:	e06d      	b.n	800a77a <UART_SetConfig+0x27e>
 800a69e:	2302      	movs	r3, #2
 800a6a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6a4:	e069      	b.n	800a77a <UART_SetConfig+0x27e>
 800a6a6:	2304      	movs	r3, #4
 800a6a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ac:	e065      	b.n	800a77a <UART_SetConfig+0x27e>
 800a6ae:	2308      	movs	r3, #8
 800a6b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6b4:	e061      	b.n	800a77a <UART_SetConfig+0x27e>
 800a6b6:	2310      	movs	r3, #16
 800a6b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6bc:	e05d      	b.n	800a77a <UART_SetConfig+0x27e>
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a4b      	ldr	r2, [pc, #300]	@ (800a7f0 <UART_SetConfig+0x2f4>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d125      	bne.n	800a714 <UART_SetConfig+0x218>
 800a6c8:	4b46      	ldr	r3, [pc, #280]	@ (800a7e4 <UART_SetConfig+0x2e8>)
 800a6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a6d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6d4:	d016      	beq.n	800a704 <UART_SetConfig+0x208>
 800a6d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6d8:	d818      	bhi.n	800a70c <UART_SetConfig+0x210>
 800a6da:	2b80      	cmp	r3, #128	@ 0x80
 800a6dc:	d00a      	beq.n	800a6f4 <UART_SetConfig+0x1f8>
 800a6de:	2b80      	cmp	r3, #128	@ 0x80
 800a6e0:	d814      	bhi.n	800a70c <UART_SetConfig+0x210>
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <UART_SetConfig+0x1f0>
 800a6e6:	2b40      	cmp	r3, #64	@ 0x40
 800a6e8:	d008      	beq.n	800a6fc <UART_SetConfig+0x200>
 800a6ea:	e00f      	b.n	800a70c <UART_SetConfig+0x210>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6f2:	e042      	b.n	800a77a <UART_SetConfig+0x27e>
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6fa:	e03e      	b.n	800a77a <UART_SetConfig+0x27e>
 800a6fc:	2304      	movs	r3, #4
 800a6fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a702:	e03a      	b.n	800a77a <UART_SetConfig+0x27e>
 800a704:	2308      	movs	r3, #8
 800a706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a70a:	e036      	b.n	800a77a <UART_SetConfig+0x27e>
 800a70c:	2310      	movs	r3, #16
 800a70e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a712:	e032      	b.n	800a77a <UART_SetConfig+0x27e>
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a30      	ldr	r2, [pc, #192]	@ (800a7dc <UART_SetConfig+0x2e0>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d12a      	bne.n	800a774 <UART_SetConfig+0x278>
 800a71e:	4b31      	ldr	r3, [pc, #196]	@ (800a7e4 <UART_SetConfig+0x2e8>)
 800a720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a724:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a728:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a72c:	d01a      	beq.n	800a764 <UART_SetConfig+0x268>
 800a72e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a732:	d81b      	bhi.n	800a76c <UART_SetConfig+0x270>
 800a734:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a738:	d00c      	beq.n	800a754 <UART_SetConfig+0x258>
 800a73a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a73e:	d815      	bhi.n	800a76c <UART_SetConfig+0x270>
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <UART_SetConfig+0x250>
 800a744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a748:	d008      	beq.n	800a75c <UART_SetConfig+0x260>
 800a74a:	e00f      	b.n	800a76c <UART_SetConfig+0x270>
 800a74c:	2300      	movs	r3, #0
 800a74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a752:	e012      	b.n	800a77a <UART_SetConfig+0x27e>
 800a754:	2302      	movs	r3, #2
 800a756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a75a:	e00e      	b.n	800a77a <UART_SetConfig+0x27e>
 800a75c:	2304      	movs	r3, #4
 800a75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a762:	e00a      	b.n	800a77a <UART_SetConfig+0x27e>
 800a764:	2308      	movs	r3, #8
 800a766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a76a:	e006      	b.n	800a77a <UART_SetConfig+0x27e>
 800a76c:	2310      	movs	r3, #16
 800a76e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a772:	e002      	b.n	800a77a <UART_SetConfig+0x27e>
 800a774:	2310      	movs	r3, #16
 800a776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a17      	ldr	r2, [pc, #92]	@ (800a7dc <UART_SetConfig+0x2e0>)
 800a780:	4293      	cmp	r3, r2
 800a782:	f040 80a8 	bne.w	800a8d6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a786:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a78a:	2b08      	cmp	r3, #8
 800a78c:	d834      	bhi.n	800a7f8 <UART_SetConfig+0x2fc>
 800a78e:	a201      	add	r2, pc, #4	@ (adr r2, 800a794 <UART_SetConfig+0x298>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a7b9 	.word	0x0800a7b9
 800a798:	0800a7f9 	.word	0x0800a7f9
 800a79c:	0800a7c1 	.word	0x0800a7c1
 800a7a0:	0800a7f9 	.word	0x0800a7f9
 800a7a4:	0800a7c7 	.word	0x0800a7c7
 800a7a8:	0800a7f9 	.word	0x0800a7f9
 800a7ac:	0800a7f9 	.word	0x0800a7f9
 800a7b0:	0800a7f9 	.word	0x0800a7f9
 800a7b4:	0800a7cf 	.word	0x0800a7cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7b8:	f7fe fc6e 	bl	8009098 <HAL_RCC_GetPCLK1Freq>
 800a7bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7be:	e021      	b.n	800a804 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f4 <UART_SetConfig+0x2f8>)
 800a7c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7c4:	e01e      	b.n	800a804 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7c6:	f7fe fbf9 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 800a7ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7cc:	e01a      	b.n	800a804 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7d4:	e016      	b.n	800a804 <UART_SetConfig+0x308>
 800a7d6:	bf00      	nop
 800a7d8:	cfff69f3 	.word	0xcfff69f3
 800a7dc:	40008000 	.word	0x40008000
 800a7e0:	40013800 	.word	0x40013800
 800a7e4:	40021000 	.word	0x40021000
 800a7e8:	40004400 	.word	0x40004400
 800a7ec:	40004800 	.word	0x40004800
 800a7f0:	40004c00 	.word	0x40004c00
 800a7f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a802:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 812a 	beq.w	800aa60 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a810:	4a9e      	ldr	r2, [pc, #632]	@ (800aa8c <UART_SetConfig+0x590>)
 800a812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a816:	461a      	mov	r2, r3
 800a818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a81e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	4613      	mov	r3, r2
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	4413      	add	r3, r2
 800a82a:	69ba      	ldr	r2, [r7, #24]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d305      	bcc.n	800a83c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a836:	69ba      	ldr	r2, [r7, #24]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d903      	bls.n	800a844 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a842:	e10d      	b.n	800aa60 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a846:	2200      	movs	r2, #0
 800a848:	60bb      	str	r3, [r7, #8]
 800a84a:	60fa      	str	r2, [r7, #12]
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a850:	4a8e      	ldr	r2, [pc, #568]	@ (800aa8c <UART_SetConfig+0x590>)
 800a852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a856:	b29b      	uxth	r3, r3
 800a858:	2200      	movs	r2, #0
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a866:	f7f6 f8f5 	bl	8000a54 <__aeabi_uldivmod>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4610      	mov	r0, r2
 800a870:	4619      	mov	r1, r3
 800a872:	f04f 0200 	mov.w	r2, #0
 800a876:	f04f 0300 	mov.w	r3, #0
 800a87a:	020b      	lsls	r3, r1, #8
 800a87c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a880:	0202      	lsls	r2, r0, #8
 800a882:	6979      	ldr	r1, [r7, #20]
 800a884:	6849      	ldr	r1, [r1, #4]
 800a886:	0849      	lsrs	r1, r1, #1
 800a888:	2000      	movs	r0, #0
 800a88a:	460c      	mov	r4, r1
 800a88c:	4605      	mov	r5, r0
 800a88e:	eb12 0804 	adds.w	r8, r2, r4
 800a892:	eb43 0905 	adc.w	r9, r3, r5
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	469a      	mov	sl, r3
 800a89e:	4693      	mov	fp, r2
 800a8a0:	4652      	mov	r2, sl
 800a8a2:	465b      	mov	r3, fp
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	f7f6 f8d4 	bl	8000a54 <__aeabi_uldivmod>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8ba:	d308      	bcc.n	800a8ce <UART_SetConfig+0x3d2>
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8c2:	d204      	bcs.n	800a8ce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6a3a      	ldr	r2, [r7, #32]
 800a8ca:	60da      	str	r2, [r3, #12]
 800a8cc:	e0c8      	b.n	800aa60 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8d4:	e0c4      	b.n	800aa60 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8de:	d167      	bne.n	800a9b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a8e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8e4:	2b08      	cmp	r3, #8
 800a8e6:	d828      	bhi.n	800a93a <UART_SetConfig+0x43e>
 800a8e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f0 <UART_SetConfig+0x3f4>)
 800a8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ee:	bf00      	nop
 800a8f0:	0800a915 	.word	0x0800a915
 800a8f4:	0800a91d 	.word	0x0800a91d
 800a8f8:	0800a925 	.word	0x0800a925
 800a8fc:	0800a93b 	.word	0x0800a93b
 800a900:	0800a92b 	.word	0x0800a92b
 800a904:	0800a93b 	.word	0x0800a93b
 800a908:	0800a93b 	.word	0x0800a93b
 800a90c:	0800a93b 	.word	0x0800a93b
 800a910:	0800a933 	.word	0x0800a933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a914:	f7fe fbc0 	bl	8009098 <HAL_RCC_GetPCLK1Freq>
 800a918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a91a:	e014      	b.n	800a946 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a91c:	f7fe fbd2 	bl	80090c4 <HAL_RCC_GetPCLK2Freq>
 800a920:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a922:	e010      	b.n	800a946 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a924:	4b5a      	ldr	r3, [pc, #360]	@ (800aa90 <UART_SetConfig+0x594>)
 800a926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a928:	e00d      	b.n	800a946 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a92a:	f7fe fb47 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 800a92e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a930:	e009      	b.n	800a946 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a938:	e005      	b.n	800a946 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 8089 	beq.w	800aa60 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a952:	4a4e      	ldr	r2, [pc, #312]	@ (800aa8c <UART_SetConfig+0x590>)
 800a954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a958:	461a      	mov	r2, r3
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a960:	005a      	lsls	r2, r3, #1
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	085b      	lsrs	r3, r3, #1
 800a968:	441a      	add	r2, r3
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a972:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	2b0f      	cmp	r3, #15
 800a978:	d916      	bls.n	800a9a8 <UART_SetConfig+0x4ac>
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a980:	d212      	bcs.n	800a9a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	b29b      	uxth	r3, r3
 800a986:	f023 030f 	bic.w	r3, r3, #15
 800a98a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	085b      	lsrs	r3, r3, #1
 800a990:	b29b      	uxth	r3, r3
 800a992:	f003 0307 	and.w	r3, r3, #7
 800a996:	b29a      	uxth	r2, r3
 800a998:	8bfb      	ldrh	r3, [r7, #30]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	8bfa      	ldrh	r2, [r7, #30]
 800a9a4:	60da      	str	r2, [r3, #12]
 800a9a6:	e05b      	b.n	800aa60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a9ae:	e057      	b.n	800aa60 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d828      	bhi.n	800aa0a <UART_SetConfig+0x50e>
 800a9b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c0 <UART_SetConfig+0x4c4>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800a9e5 	.word	0x0800a9e5
 800a9c4:	0800a9ed 	.word	0x0800a9ed
 800a9c8:	0800a9f5 	.word	0x0800a9f5
 800a9cc:	0800aa0b 	.word	0x0800aa0b
 800a9d0:	0800a9fb 	.word	0x0800a9fb
 800a9d4:	0800aa0b 	.word	0x0800aa0b
 800a9d8:	0800aa0b 	.word	0x0800aa0b
 800a9dc:	0800aa0b 	.word	0x0800aa0b
 800a9e0:	0800aa03 	.word	0x0800aa03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9e4:	f7fe fb58 	bl	8009098 <HAL_RCC_GetPCLK1Freq>
 800a9e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9ea:	e014      	b.n	800aa16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9ec:	f7fe fb6a 	bl	80090c4 <HAL_RCC_GetPCLK2Freq>
 800a9f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9f2:	e010      	b.n	800aa16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9f4:	4b26      	ldr	r3, [pc, #152]	@ (800aa90 <UART_SetConfig+0x594>)
 800a9f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9f8:	e00d      	b.n	800aa16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9fa:	f7fe fadf 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 800a9fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa00:	e009      	b.n	800aa16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa08:	e005      	b.n	800aa16 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa14:	bf00      	nop
    }

    if (pclk != 0U)
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d021      	beq.n	800aa60 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa20:	4a1a      	ldr	r2, [pc, #104]	@ (800aa8c <UART_SetConfig+0x590>)
 800aa22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa26:	461a      	mov	r2, r3
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	085b      	lsrs	r3, r3, #1
 800aa34:	441a      	add	r2, r3
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	2b0f      	cmp	r3, #15
 800aa44:	d909      	bls.n	800aa5a <UART_SetConfig+0x55e>
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa4c:	d205      	bcs.n	800aa5a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	60da      	str	r2, [r3, #12]
 800aa58:	e002      	b.n	800aa60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2200      	movs	r2, #0
 800aa74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3730      	adds	r7, #48	@ 0x30
 800aa84:	46bd      	mov	sp, r7
 800aa86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa8a:	bf00      	nop
 800aa8c:	0800b8d0 	.word	0x0800b8d0
 800aa90:	00f42400 	.word	0x00f42400

0800aa94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa0:	f003 0308 	and.w	r3, r3, #8
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00a      	beq.n	800aabe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	430a      	orrs	r2, r1
 800aabc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00a      	beq.n	800aae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	430a      	orrs	r2, r1
 800aade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae4:	f003 0302 	and.w	r3, r3, #2
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00a      	beq.n	800ab02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	430a      	orrs	r2, r1
 800ab00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab06:	f003 0304 	and.w	r3, r3, #4
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00a      	beq.n	800ab24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab28:	f003 0310 	and.w	r3, r3, #16
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00a      	beq.n	800ab46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	430a      	orrs	r2, r1
 800ab44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4a:	f003 0320 	and.w	r3, r3, #32
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00a      	beq.n	800ab68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d01a      	beq.n	800abaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab92:	d10a      	bne.n	800abaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00a      	beq.n	800abcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	430a      	orrs	r2, r1
 800abca:	605a      	str	r2, [r3, #4]
  }
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b098      	sub	sp, #96	@ 0x60
 800abdc:	af02      	add	r7, sp, #8
 800abde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abe8:	f7fc fad2 	bl	8007190 <HAL_GetTick>
 800abec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0308 	and.w	r3, r3, #8
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	d12f      	bne.n	800ac5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac04:	2200      	movs	r2, #0
 800ac06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f88e 	bl	800ad2c <UART_WaitOnFlagUntilTimeout>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d022      	beq.n	800ac5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	461a      	mov	r2, r3
 800ac32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e6      	bne.n	800ac16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e063      	b.n	800ad24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 0304 	and.w	r3, r3, #4
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	d149      	bne.n	800acfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac72:	2200      	movs	r2, #0
 800ac74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f857 	bl	800ad2c <UART_WaitOnFlagUntilTimeout>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d03c      	beq.n	800acfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	623b      	str	r3, [r7, #32]
   return(result);
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aca2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aca4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e6      	bne.n	800ac84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3308      	adds	r3, #8
 800acbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	e853 3f00 	ldrex	r3, [r3]
 800acc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f023 0301 	bic.w	r3, r3, #1
 800accc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3308      	adds	r3, #8
 800acd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acd6:	61fa      	str	r2, [r7, #28]
 800acd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acda:	69b9      	ldr	r1, [r7, #24]
 800acdc:	69fa      	ldr	r2, [r7, #28]
 800acde:	e841 2300 	strex	r3, r2, [r1]
 800ace2:	617b      	str	r3, [r7, #20]
   return(result);
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1e5      	bne.n	800acb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2220      	movs	r2, #32
 800acee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e012      	b.n	800ad24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2220      	movs	r2, #32
 800ad02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2220      	movs	r2, #32
 800ad0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3758      	adds	r7, #88	@ 0x58
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad3c:	e04f      	b.n	800adde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad44:	d04b      	beq.n	800adde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad46:	f7fc fa23 	bl	8007190 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	69ba      	ldr	r2, [r7, #24]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d302      	bcc.n	800ad5c <UART_WaitOnFlagUntilTimeout+0x30>
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e04e      	b.n	800adfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 0304 	and.w	r3, r3, #4
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d037      	beq.n	800adde <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2b80      	cmp	r3, #128	@ 0x80
 800ad72:	d034      	beq.n	800adde <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2b40      	cmp	r3, #64	@ 0x40
 800ad78:	d031      	beq.n	800adde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	69db      	ldr	r3, [r3, #28]
 800ad80:	f003 0308 	and.w	r3, r3, #8
 800ad84:	2b08      	cmp	r3, #8
 800ad86:	d110      	bne.n	800adaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2208      	movs	r2, #8
 800ad8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f000 f838 	bl	800ae06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2208      	movs	r2, #8
 800ad9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e029      	b.n	800adfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adb8:	d111      	bne.n	800adde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 f81e 	bl	800ae06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2220      	movs	r2, #32
 800adce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800adda:	2303      	movs	r3, #3
 800addc:	e00f      	b.n	800adfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	69da      	ldr	r2, [r3, #28]
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	4013      	ands	r3, r2
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	429a      	cmp	r2, r3
 800adec:	bf0c      	ite	eq
 800adee:	2301      	moveq	r3, #1
 800adf0:	2300      	movne	r3, #0
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	461a      	mov	r2, r3
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d0a0      	beq.n	800ad3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b095      	sub	sp, #84	@ 0x54
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae16:	e853 3f00 	ldrex	r3, [r3]
 800ae1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae2c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae34:	e841 2300 	strex	r3, r2, [r1]
 800ae38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e6      	bne.n	800ae0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3308      	adds	r3, #8
 800ae46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	e853 3f00 	ldrex	r3, [r3]
 800ae4e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae56:	f023 0301 	bic.w	r3, r3, #1
 800ae5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3308      	adds	r3, #8
 800ae62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e3      	bne.n	800ae40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d118      	bne.n	800aeb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f023 0310 	bic.w	r3, r3, #16
 800ae94:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae9e:	61bb      	str	r3, [r7, #24]
 800aea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea2:	6979      	ldr	r1, [r7, #20]
 800aea4:	69ba      	ldr	r2, [r7, #24]
 800aea6:	e841 2300 	strex	r3, r2, [r1]
 800aeaa:	613b      	str	r3, [r7, #16]
   return(result);
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1e6      	bne.n	800ae80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aec6:	bf00      	nop
 800aec8:	3754      	adds	r7, #84	@ 0x54
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b085      	sub	sp, #20
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_UARTEx_DisableFifoMode+0x16>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e027      	b.n	800af38 <HAL_UARTEx_DisableFifoMode+0x66>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2224      	movs	r2, #36	@ 0x24
 800aef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f022 0201 	bic.w	r2, r2, #1
 800af0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2220      	movs	r2, #32
 800af2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af54:	2b01      	cmp	r3, #1
 800af56:	d101      	bne.n	800af5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af58:	2302      	movs	r3, #2
 800af5a:	e02d      	b.n	800afb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2224      	movs	r2, #36	@ 0x24
 800af68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f022 0201 	bic.w	r2, r2, #1
 800af82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	430a      	orrs	r2, r1
 800af96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f84f 	bl	800b03c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2220      	movs	r2, #32
 800afaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d101      	bne.n	800afd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afd4:	2302      	movs	r3, #2
 800afd6:	e02d      	b.n	800b034 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2224      	movs	r2, #36	@ 0x24
 800afe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 0201 	bic.w	r2, r2, #1
 800affe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	430a      	orrs	r2, r1
 800b012:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f811 	bl	800b03c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2220      	movs	r2, #32
 800b026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d108      	bne.n	800b05e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b05c:	e031      	b.n	800b0c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b05e:	2308      	movs	r3, #8
 800b060:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b062:	2308      	movs	r3, #8
 800b064:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	0e5b      	lsrs	r3, r3, #25
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	f003 0307 	and.w	r3, r3, #7
 800b074:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	0f5b      	lsrs	r3, r3, #29
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	f003 0307 	and.w	r3, r3, #7
 800b084:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	7b3a      	ldrb	r2, [r7, #12]
 800b08a:	4911      	ldr	r1, [pc, #68]	@ (800b0d0 <UARTEx_SetNbDataToProcess+0x94>)
 800b08c:	5c8a      	ldrb	r2, [r1, r2]
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b092:	7b3a      	ldrb	r2, [r7, #12]
 800b094:	490f      	ldr	r1, [pc, #60]	@ (800b0d4 <UARTEx_SetNbDataToProcess+0x98>)
 800b096:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b098:	fb93 f3f2 	sdiv	r3, r3, r2
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	7b7a      	ldrb	r2, [r7, #13]
 800b0a8:	4909      	ldr	r1, [pc, #36]	@ (800b0d0 <UARTEx_SetNbDataToProcess+0x94>)
 800b0aa:	5c8a      	ldrb	r2, [r1, r2]
 800b0ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0b0:	7b7a      	ldrb	r2, [r7, #13]
 800b0b2:	4908      	ldr	r1, [pc, #32]	@ (800b0d4 <UARTEx_SetNbDataToProcess+0x98>)
 800b0b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b0c2:	bf00      	nop
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	0800b8e8 	.word	0x0800b8e8
 800b0d4:	0800b8f0 	.word	0x0800b8f0

0800b0d8 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08e      	sub	sp, #56	@ 0x38
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d131      	bne.n	800b158 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800b0f4:	6838      	ldr	r0, [r7, #0]
 800b0f6:	f000 f8bb 	bl	800b270 <LSM6DSO_0_Probe>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d002      	beq.n	800b106 <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800b100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b104:	e064      	b.n	800b1d0 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b106:	4a34      	ldr	r2, [pc, #208]	@ (800b1d8 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	4932      	ldr	r1, [pc, #200]	@ (800b1dc <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b118:	f107 010c 	add.w	r1, r7, #12
 800b11c:	4610      	mov	r0, r2
 800b11e:	4798      	blx	r3
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b126:	f06f 0306 	mvn.w	r3, #6
 800b12a:	e051      	b.n	800b1d0 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 800b12c:	7b3b      	ldrb	r3, [r7, #12]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d103      	bne.n	800b13a <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 800b132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b134:	f043 0302 	orr.w	r3, r3, #2
 800b138:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b13a:	7b7b      	ldrb	r3, [r7, #13]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d103      	bne.n	800b148 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 800b140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b142:	f043 0301 	orr.w	r3, r3, #1
 800b146:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d108      	bne.n	800b160 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800b14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b150:	f043 0304 	orr.w	r3, r3, #4
 800b154:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b156:	e003      	b.n	800b160 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b158:	f06f 0301 	mvn.w	r3, #1
 800b15c:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b15e:	e000      	b.n	800b162 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 800b160:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800b168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b16a:	e031      	b.n	800b1d0 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800b16c:	2300      	movs	r3, #0
 800b16e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b170:	e02a      	b.n	800b1c8 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b176:	4013      	ands	r3, r2
 800b178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d11e      	bne.n	800b1bc <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800b17e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	4013      	ands	r3, r2
 800b184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b186:	429a      	cmp	r2, r3
 800b188:	d118      	bne.n	800b1bc <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b18a:	4a15      	ldr	r2, [pc, #84]	@ (800b1e0 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b192:	4814      	ldr	r0, [pc, #80]	@ (800b1e4 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	4613      	mov	r3, r2
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	4413      	add	r3, r2
 800b19c:	440b      	add	r3, r1
 800b19e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	490d      	ldr	r1, [pc, #52]	@ (800b1dc <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	4798      	blx	r3
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b1b6:	f06f 0304 	mvn.w	r3, #4
 800b1ba:	e009      	b.n	800b1d0 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1be:	005b      	lsls	r3, r3, #1
 800b1c0:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800b1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d9d1      	bls.n	800b172 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3738      	adds	r7, #56	@ 0x38
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	200003ac 	.word	0x200003ac
 800b1dc:	2000039c 	.word	0x2000039c
 800b1e0:	20000064 	.word	0x20000064
 800b1e4:	200003a0 	.word	0x200003a0

0800b1e8 <CUSTOM_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_Axes_t *Axes)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <CUSTOM_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b1fa:	f06f 0301 	mvn.w	r3, #1
 800b1fe:	617b      	str	r3, [r7, #20]
 800b200:	e029      	b.n	800b256 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b202:	4a17      	ldr	r2, [pc, #92]	@ (800b260 <CUSTOM_MOTION_SENSOR_GetAxes+0x78>)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	4013      	ands	r3, r2
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	429a      	cmp	r2, r3
 800b212:	d11d      	bne.n	800b250 <CUSTOM_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b214:	4a13      	ldr	r2, [pc, #76]	@ (800b264 <CUSTOM_MOTION_SENSOR_GetAxes+0x7c>)
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b21c:	4812      	ldr	r0, [pc, #72]	@ (800b268 <CUSTOM_MOTION_SENSOR_GetAxes+0x80>)
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	4613      	mov	r3, r2
 800b222:	005b      	lsls	r3, r3, #1
 800b224:	4413      	add	r3, r2
 800b226:	440b      	add	r3, r1
 800b228:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	490f      	ldr	r1, [pc, #60]	@ (800b26c <CUSTOM_MOTION_SENSOR_GetAxes+0x84>)
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b236:	6879      	ldr	r1, [r7, #4]
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <CUSTOM_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b242:	f06f 0304 	mvn.w	r3, #4
 800b246:	617b      	str	r3, [r7, #20]
 800b248:	e005      	b.n	800b256 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	e002      	b.n	800b256 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b250:	f06f 0301 	mvn.w	r3, #1
 800b254:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b256:	697b      	ldr	r3, [r7, #20]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3718      	adds	r7, #24
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	200003b0 	.word	0x200003b0
 800b264:	20000064 	.word	0x20000064
 800b268:	200003a0 	.word	0x200003a0
 800b26c:	2000039c 	.word	0x2000039c

0800b270 <LSM6DSO_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b094      	sub	sp, #80	@ 0x50
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800b278:	2300      	movs	r3, #0
 800b27a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800b27c:	2301      	movs	r3, #1
 800b27e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = 0x0;
 800b280:	2300      	movs	r3, #0
 800b282:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = CUSTOM_LSM6DSO_0_Init;
 800b286:	4b4b      	ldr	r3, [pc, #300]	@ (800b3b4 <LSM6DSO_0_Probe+0x144>)
 800b288:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = CUSTOM_LSM6DSO_0_DeInit;
 800b28a:	4b4b      	ldr	r3, [pc, #300]	@ (800b3b8 <LSM6DSO_0_Probe+0x148>)
 800b28c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = CUSTOM_LSM6DSO_0_ReadReg;
 800b28e:	4b4b      	ldr	r3, [pc, #300]	@ (800b3bc <LSM6DSO_0_Probe+0x14c>)
 800b290:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = CUSTOM_LSM6DSO_0_WriteReg;
 800b292:	4b4b      	ldr	r3, [pc, #300]	@ (800b3c0 <LSM6DSO_0_Probe+0x150>)
 800b294:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 800b296:	4b4b      	ldr	r3, [pc, #300]	@ (800b3c4 <LSM6DSO_0_Probe+0x154>)
 800b298:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = HAL_Delay;
 800b29a:	4b4b      	ldr	r3, [pc, #300]	@ (800b3c8 <LSM6DSO_0_Probe+0x158>)
 800b29c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800b29e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4849      	ldr	r0, [pc, #292]	@ (800b3cc <LSM6DSO_0_Probe+0x15c>)
 800b2a6:	f7f8 fa27 	bl	80036f8 <LSM6DSO_RegisterBusIO>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d003      	beq.n	800b2b8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2b0:	f06f 0306 	mvn.w	r3, #6
 800b2b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2b6:	e077      	b.n	800b3a8 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800b2b8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b2bc:	4619      	mov	r1, r3
 800b2be:	4843      	ldr	r0, [pc, #268]	@ (800b3cc <LSM6DSO_0_Probe+0x15c>)
 800b2c0:	f7f8 fb24 	bl	800390c <LSM6DSO_ReadID>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2ca:	f06f 0306 	mvn.w	r3, #6
 800b2ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2d0:	e06a      	b.n	800b3a8 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != (uint8_t)LSM6DSO_ID)
 800b2d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2d6:	2b6c      	cmp	r3, #108	@ 0x6c
 800b2d8:	d003      	beq.n	800b2e2 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2da:	f06f 0306 	mvn.w	r3, #6
 800b2de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2e0:	e062      	b.n	800b3a8 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800b2e2:	f107 030c 	add.w	r3, r7, #12
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4838      	ldr	r0, [pc, #224]	@ (800b3cc <LSM6DSO_0_Probe+0x15c>)
 800b2ea:	f7f8 fb25 	bl	8003938 <LSM6DSO_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b2ee:	7b7b      	ldrb	r3, [r7, #13]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	7b3b      	ldrb	r3, [r7, #12]
 800b2f4:	005b      	lsls	r3, r3, #1
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	4a34      	ldr	r2, [pc, #208]	@ (800b3d0 <LSM6DSO_0_Probe+0x160>)
 800b300:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSO_0] = &lsm6dso_obj_0;
 800b302:	4b34      	ldr	r3, [pc, #208]	@ (800b3d4 <LSM6DSO_0_Probe+0x164>)
 800b304:	4a31      	ldr	r2, [pc, #196]	@ (800b3cc <LSM6DSO_0_Probe+0x15c>)
 800b306:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800b308:	4b33      	ldr	r3, [pc, #204]	@ (800b3d8 <LSM6DSO_0_Probe+0x168>)
 800b30a:	4a34      	ldr	r2, [pc, #208]	@ (800b3dc <LSM6DSO_0_Probe+0x16c>)
 800b30c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b30e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b310:	2b00      	cmp	r3, #0
 800b312:	d11d      	bne.n	800b350 <LSM6DSO_0_Probe+0xe0>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d018      	beq.n	800b350 <LSM6DSO_0_Probe+0xe0>
 800b31e:	7b7b      	ldrb	r3, [r7, #13]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d115      	bne.n	800b350 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b324:	4b2e      	ldr	r3, [pc, #184]	@ (800b3e0 <LSM6DSO_0_Probe+0x170>)
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	4a2e      	ldr	r2, [pc, #184]	@ (800b3e4 <LSM6DSO_0_Probe+0x174>)
 800b32a:	492f      	ldr	r1, [pc, #188]	@ (800b3e8 <LSM6DSO_0_Probe+0x178>)
 800b32c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                     void *)&LSM6DSO_GYRO_Driver;

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 800b330:	4b29      	ldr	r3, [pc, #164]	@ (800b3d8 <LSM6DSO_0_Probe+0x168>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a27      	ldr	r2, [pc, #156]	@ (800b3d4 <LSM6DSO_0_Probe+0x164>)
 800b338:	6812      	ldr	r2, [r2, #0]
 800b33a:	4610      	mov	r0, r2
 800b33c:	4798      	blx	r3
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d003      	beq.n	800b34c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b344:	f06f 0304 	mvn.w	r3, #4
 800b348:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b34a:	e001      	b.n	800b350 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b34c:	2300      	movs	r3, #0
 800b34e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b352:	2b00      	cmp	r3, #0
 800b354:	d11d      	bne.n	800b392 <LSM6DSO_0_Probe+0x122>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d018      	beq.n	800b392 <LSM6DSO_0_Probe+0x122>
 800b360:	7b3b      	ldrb	r3, [r7, #12]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d115      	bne.n	800b392 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b366:	4b1e      	ldr	r3, [pc, #120]	@ (800b3e0 <LSM6DSO_0_Probe+0x170>)
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	4a1e      	ldr	r2, [pc, #120]	@ (800b3e4 <LSM6DSO_0_Probe+0x174>)
 800b36c:	491f      	ldr	r1, [pc, #124]	@ (800b3ec <LSM6DSO_0_Probe+0x17c>)
 800b36e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 800b372:	4b19      	ldr	r3, [pc, #100]	@ (800b3d8 <LSM6DSO_0_Probe+0x168>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a16      	ldr	r2, [pc, #88]	@ (800b3d4 <LSM6DSO_0_Probe+0x164>)
 800b37a:	6812      	ldr	r2, [r2, #0]
 800b37c:	4610      	mov	r0, r2
 800b37e:	4798      	blx	r3
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d003      	beq.n	800b38e <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b386:	f06f 0304 	mvn.w	r3, #4
 800b38a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b38c:	e001      	b.n	800b392 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b38e:	2300      	movs	r3, #0
 800b390:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d107      	bne.n	800b3a8 <LSM6DSO_0_Probe+0x138>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f003 0304 	and.w	r3, r3, #4
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3a2:	f06f 0304 	mvn.w	r3, #4
 800b3a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800b3a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3750      	adds	r7, #80	@ 0x50
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	0800b3f1 	.word	0x0800b3f1
 800b3b8:	0800b415 	.word	0x0800b415
 800b3bc:	0800b4a9 	.word	0x0800b4a9
 800b3c0:	0800b439 	.word	0x0800b439
 800b3c4:	08003509 	.word	0x08003509
 800b3c8:	080071a9 	.word	0x080071a9
 800b3cc:	200003b4 	.word	0x200003b4
 800b3d0:	200003b0 	.word	0x200003b0
 800b3d4:	2000039c 	.word	0x2000039c
 800b3d8:	200003ac 	.word	0x200003ac
 800b3dc:	20000004 	.word	0x20000004
 800b3e0:	20000064 	.word	0x20000064
 800b3e4:	200003a0 	.word	0x200003a0
 800b3e8:	20000038 	.word	0x20000038
 800b3ec:	20000014 	.word	0x20000014

0800b3f0 <CUSTOM_LSM6DSO_0_Init>:
/**
  * @brief  Initialize SPI bus for LSM6DSO
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_Init(void)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b3f6:	f06f 0305 	mvn.w	r3, #5
 800b3fa:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSO_0_SPI_Init() == BSP_ERROR_NONE)
 800b3fc:	f7f7 fff4 	bl	80033e8 <BSP_SPI1_Init>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <CUSTOM_LSM6DSO_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800b406:	2300      	movs	r3, #0
 800b408:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800b40a:	687b      	ldr	r3, [r7, #4]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <CUSTOM_LSM6DSO_0_DeInit>:
/**
  * @brief  DeInitialize SPI bus for LSM6DSO
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_DeInit(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b41a:	f06f 0305 	mvn.w	r3, #5
 800b41e:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSO_0_SPI_DeInit() == BSP_ERROR_NONE)
 800b420:	f7f8 f812 	bl	8003448 <BSP_SPI1_DeInit>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <CUSTOM_LSM6DSO_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800b42a:	2300      	movs	r3, #0
 800b42c:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800b42e:	687b      	ldr	r3, [r7, #4]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <CUSTOM_LSM6DSO_0_WriteReg>:
  * @param  pdata the pointer to the data to be written
  * @param  len the length of the data to be written
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60ba      	str	r2, [r7, #8]
 800b440:	461a      	mov	r2, r3
 800b442:	4603      	mov	r3, r0
 800b444:	81fb      	strh	r3, [r7, #14]
 800b446:	460b      	mov	r3, r1
 800b448:	81bb      	strh	r3, [r7, #12]
 800b44a:	4613      	mov	r3, r2
 800b44c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800b44e:	2300      	movs	r3, #0
 800b450:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800b452:	89bb      	ldrh	r3, [r7, #12]
 800b454:	b2db      	uxtb	r3, r3
 800b456:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_RESET);
 800b458:	2200      	movs	r2, #0
 800b45a:	2102      	movs	r1, #2
 800b45c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b460:	f7fd f854 	bl	800850c <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSO_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800b464:	f107 0313 	add.w	r3, r7, #19
 800b468:	2101      	movs	r1, #1
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7f8 f814 	bl	8003498 <BSP_SPI1_Send>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d002      	beq.n	800b47c <CUSTOM_LSM6DSO_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b476:	f06f 0305 	mvn.w	r3, #5
 800b47a:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSO_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 800b47c:	88fb      	ldrh	r3, [r7, #6]
 800b47e:	4619      	mov	r1, r3
 800b480:	68b8      	ldr	r0, [r7, #8]
 800b482:	f7f8 f809 	bl	8003498 <BSP_SPI1_Send>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <CUSTOM_LSM6DSO_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b48c:	f06f 0305 	mvn.w	r3, #5
 800b490:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_SET);
 800b492:	2201      	movs	r2, #1
 800b494:	2102      	movs	r1, #2
 800b496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b49a:	f7fd f837 	bl	800850c <HAL_GPIO_WritePin>

  return ret;
 800b49e:	697b      	ldr	r3, [r7, #20]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <CUSTOM_LSM6DSO_0_ReadReg>:
  * @param  pdata the pointer to the data to be read
  * @param  len the length of the data to be read
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSO_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60ba      	str	r2, [r7, #8]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	81fb      	strh	r3, [r7, #14]
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	81bb      	strh	r3, [r7, #12]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800b4c2:	89bb      	ldrh	r3, [r7, #12]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 800b4c8:	7cfb      	ldrb	r3, [r7, #19]
 800b4ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_RESET);
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2102      	movs	r1, #2
 800b4d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b4da:	f7fd f817 	bl	800850c <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSO_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800b4de:	f107 0313 	add.w	r3, r7, #19
 800b4e2:	2101      	movs	r1, #1
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7f7 ffd7 	bl	8003498 <BSP_SPI1_Send>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <CUSTOM_LSM6DSO_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b4f0:	f06f 0305 	mvn.w	r3, #5
 800b4f4:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSO_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 800b4f6:	88fb      	ldrh	r3, [r7, #6]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	68b8      	ldr	r0, [r7, #8]
 800b4fc:	f7f7 ffe8 	bl	80034d0 <BSP_SPI1_Recv>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d002      	beq.n	800b50c <CUSTOM_LSM6DSO_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b506:	f06f 0305 	mvn.w	r3, #5
 800b50a:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSO_0_CS_PORT, CUSTOM_LSM6DSO_0_CS_PIN, GPIO_PIN_SET);
 800b50c:	2201      	movs	r2, #1
 800b50e:	2102      	movs	r1, #2
 800b510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b514:	f7fc fffa 	bl	800850c <HAL_GPIO_WritePin>

  return ret;
 800b518:	697b      	ldr	r3, [r7, #20]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
	...

0800b524 <CUSTOM_MOTION_SENSOR_Get_Event_Status>:
  * @param  Instance the device instance
  * @param  Status the pointer to the status of all hardware events
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Get_Event_Status(uint32_t Instance, CUSTOM_MOTION_SENSOR_Event_Status_t *Status)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d111      	bne.n	800b558 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x34>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      if (LSM6DSO_ACC_Get_Event_Status(MotionCompObj[Instance], (LSM6DSO_Event_Status_t *)(void *)Status) != BSP_ERROR_NONE)
 800b534:	4a0d      	ldr	r2, [pc, #52]	@ (800b56c <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x48>)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7f9 f92c 	bl	800479c <LSM6DSO_ACC_Get_Event_Status>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b54a:	f06f 0304 	mvn.w	r3, #4
 800b54e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b550:	e006      	b.n	800b560 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x3c>
        ret = BSP_ERROR_NONE;
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]
      break;
 800b556:	e003      	b.n	800b560 <CUSTOM_MOTION_SENSOR_Get_Event_Status+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b558:	f06f 0301 	mvn.w	r3, #1
 800b55c:	60fb      	str	r3, [r7, #12]
      break;
 800b55e:	bf00      	nop
  }

  return ret;
 800b560:	68fb      	ldr	r3, [r7, #12]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	2000039c 	.word	0x2000039c

0800b570 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation>:
  * @param  Instance the device instance
  * @param  IntPin the interrupt pin to be used
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Enable_6D_Orientation(uint32_t Instance, CUSTOM_MOTION_SENSOR_IntPin_t IntPin)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	460b      	mov	r3, r1
 800b57a:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d112      	bne.n	800b5a8 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x38>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_6D_Orientation(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800b582:	4a0e      	ldr	r2, [pc, #56]	@ (800b5bc <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x4c>)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b58a:	78fa      	ldrb	r2, [r7, #3]
 800b58c:	4611      	mov	r1, r2
 800b58e:	4618      	mov	r0, r3
 800b590:	f7f9 f884 	bl	800469c <LSM6DSO_ACC_Enable_6D_Orientation>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b59a:	f06f 0304 	mvn.w	r3, #4
 800b59e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b5a0:	e006      	b.n	800b5b0 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x40>
        ret = BSP_ERROR_NONE;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60fb      	str	r3, [r7, #12]
      break;
 800b5a6:	e003      	b.n	800b5b0 <CUSTOM_MOTION_SENSOR_Enable_6D_Orientation+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b5a8:	f06f 0301 	mvn.w	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]
      break;
 800b5ae:	bf00      	nop
  }

  return ret;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	2000039c 	.word	0x2000039c

0800b5c0 <_ZdlPvj>:
 800b5c0:	f000 b800 	b.w	800b5c4 <_ZdlPv>

0800b5c4 <_ZdlPv>:
 800b5c4:	f000 b800 	b.w	800b5c8 <free>

0800b5c8 <free>:
 800b5c8:	4b02      	ldr	r3, [pc, #8]	@ (800b5d4 <free+0xc>)
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	6818      	ldr	r0, [r3, #0]
 800b5ce:	f000 b84b 	b.w	800b668 <_free_r>
 800b5d2:	bf00      	nop
 800b5d4:	20000084 	.word	0x20000084

0800b5d8 <__malloc_lock>:
 800b5d8:	4801      	ldr	r0, [pc, #4]	@ (800b5e0 <__malloc_lock+0x8>)
 800b5da:	f000 b835 	b.w	800b648 <__retarget_lock_acquire_recursive>
 800b5de:	bf00      	nop
 800b5e0:	20000528 	.word	0x20000528

0800b5e4 <__malloc_unlock>:
 800b5e4:	4801      	ldr	r0, [pc, #4]	@ (800b5ec <__malloc_unlock+0x8>)
 800b5e6:	f000 b830 	b.w	800b64a <__retarget_lock_release_recursive>
 800b5ea:	bf00      	nop
 800b5ec:	20000528 	.word	0x20000528

0800b5f0 <memset>:
 800b5f0:	4402      	add	r2, r0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d100      	bne.n	800b5fa <memset+0xa>
 800b5f8:	4770      	bx	lr
 800b5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b5fe:	e7f9      	b.n	800b5f4 <memset+0x4>

0800b600 <__libc_init_array>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	4d0d      	ldr	r5, [pc, #52]	@ (800b638 <__libc_init_array+0x38>)
 800b604:	4c0d      	ldr	r4, [pc, #52]	@ (800b63c <__libc_init_array+0x3c>)
 800b606:	1b64      	subs	r4, r4, r5
 800b608:	10a4      	asrs	r4, r4, #2
 800b60a:	2600      	movs	r6, #0
 800b60c:	42a6      	cmp	r6, r4
 800b60e:	d109      	bne.n	800b624 <__libc_init_array+0x24>
 800b610:	4d0b      	ldr	r5, [pc, #44]	@ (800b640 <__libc_init_array+0x40>)
 800b612:	4c0c      	ldr	r4, [pc, #48]	@ (800b644 <__libc_init_array+0x44>)
 800b614:	f000 f872 	bl	800b6fc <_init>
 800b618:	1b64      	subs	r4, r4, r5
 800b61a:	10a4      	asrs	r4, r4, #2
 800b61c:	2600      	movs	r6, #0
 800b61e:	42a6      	cmp	r6, r4
 800b620:	d105      	bne.n	800b62e <__libc_init_array+0x2e>
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	f855 3b04 	ldr.w	r3, [r5], #4
 800b628:	4798      	blx	r3
 800b62a:	3601      	adds	r6, #1
 800b62c:	e7ee      	b.n	800b60c <__libc_init_array+0xc>
 800b62e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b632:	4798      	blx	r3
 800b634:	3601      	adds	r6, #1
 800b636:	e7f2      	b.n	800b61e <__libc_init_array+0x1e>
 800b638:	0800b900 	.word	0x0800b900
 800b63c:	0800b900 	.word	0x0800b900
 800b640:	0800b900 	.word	0x0800b900
 800b644:	0800b908 	.word	0x0800b908

0800b648 <__retarget_lock_acquire_recursive>:
 800b648:	4770      	bx	lr

0800b64a <__retarget_lock_release_recursive>:
 800b64a:	4770      	bx	lr

0800b64c <memcpy>:
 800b64c:	440a      	add	r2, r1
 800b64e:	4291      	cmp	r1, r2
 800b650:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b654:	d100      	bne.n	800b658 <memcpy+0xc>
 800b656:	4770      	bx	lr
 800b658:	b510      	push	{r4, lr}
 800b65a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b65e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b662:	4291      	cmp	r1, r2
 800b664:	d1f9      	bne.n	800b65a <memcpy+0xe>
 800b666:	bd10      	pop	{r4, pc}

0800b668 <_free_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4605      	mov	r5, r0
 800b66c:	2900      	cmp	r1, #0
 800b66e:	d041      	beq.n	800b6f4 <_free_r+0x8c>
 800b670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b674:	1f0c      	subs	r4, r1, #4
 800b676:	2b00      	cmp	r3, #0
 800b678:	bfb8      	it	lt
 800b67a:	18e4      	addlt	r4, r4, r3
 800b67c:	f7ff ffac 	bl	800b5d8 <__malloc_lock>
 800b680:	4a1d      	ldr	r2, [pc, #116]	@ (800b6f8 <_free_r+0x90>)
 800b682:	6813      	ldr	r3, [r2, #0]
 800b684:	b933      	cbnz	r3, 800b694 <_free_r+0x2c>
 800b686:	6063      	str	r3, [r4, #4]
 800b688:	6014      	str	r4, [r2, #0]
 800b68a:	4628      	mov	r0, r5
 800b68c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b690:	f7ff bfa8 	b.w	800b5e4 <__malloc_unlock>
 800b694:	42a3      	cmp	r3, r4
 800b696:	d908      	bls.n	800b6aa <_free_r+0x42>
 800b698:	6820      	ldr	r0, [r4, #0]
 800b69a:	1821      	adds	r1, r4, r0
 800b69c:	428b      	cmp	r3, r1
 800b69e:	bf01      	itttt	eq
 800b6a0:	6819      	ldreq	r1, [r3, #0]
 800b6a2:	685b      	ldreq	r3, [r3, #4]
 800b6a4:	1809      	addeq	r1, r1, r0
 800b6a6:	6021      	streq	r1, [r4, #0]
 800b6a8:	e7ed      	b.n	800b686 <_free_r+0x1e>
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	b10b      	cbz	r3, 800b6b4 <_free_r+0x4c>
 800b6b0:	42a3      	cmp	r3, r4
 800b6b2:	d9fa      	bls.n	800b6aa <_free_r+0x42>
 800b6b4:	6811      	ldr	r1, [r2, #0]
 800b6b6:	1850      	adds	r0, r2, r1
 800b6b8:	42a0      	cmp	r0, r4
 800b6ba:	d10b      	bne.n	800b6d4 <_free_r+0x6c>
 800b6bc:	6820      	ldr	r0, [r4, #0]
 800b6be:	4401      	add	r1, r0
 800b6c0:	1850      	adds	r0, r2, r1
 800b6c2:	4283      	cmp	r3, r0
 800b6c4:	6011      	str	r1, [r2, #0]
 800b6c6:	d1e0      	bne.n	800b68a <_free_r+0x22>
 800b6c8:	6818      	ldr	r0, [r3, #0]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	6053      	str	r3, [r2, #4]
 800b6ce:	4408      	add	r0, r1
 800b6d0:	6010      	str	r0, [r2, #0]
 800b6d2:	e7da      	b.n	800b68a <_free_r+0x22>
 800b6d4:	d902      	bls.n	800b6dc <_free_r+0x74>
 800b6d6:	230c      	movs	r3, #12
 800b6d8:	602b      	str	r3, [r5, #0]
 800b6da:	e7d6      	b.n	800b68a <_free_r+0x22>
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	1821      	adds	r1, r4, r0
 800b6e0:	428b      	cmp	r3, r1
 800b6e2:	bf04      	itt	eq
 800b6e4:	6819      	ldreq	r1, [r3, #0]
 800b6e6:	685b      	ldreq	r3, [r3, #4]
 800b6e8:	6063      	str	r3, [r4, #4]
 800b6ea:	bf04      	itt	eq
 800b6ec:	1809      	addeq	r1, r1, r0
 800b6ee:	6021      	streq	r1, [r4, #0]
 800b6f0:	6054      	str	r4, [r2, #4]
 800b6f2:	e7ca      	b.n	800b68a <_free_r+0x22>
 800b6f4:	bd38      	pop	{r3, r4, r5, pc}
 800b6f6:	bf00      	nop
 800b6f8:	200003ec 	.word	0x200003ec

0800b6fc <_init>:
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	bf00      	nop
 800b700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b702:	bc08      	pop	{r3}
 800b704:	469e      	mov	lr, r3
 800b706:	4770      	bx	lr

0800b708 <_fini>:
 800b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70a:	bf00      	nop
 800b70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b70e:	bc08      	pop	{r3}
 800b710:	469e      	mov	lr, r3
 800b712:	4770      	bx	lr
